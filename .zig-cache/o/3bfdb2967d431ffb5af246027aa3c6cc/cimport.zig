pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8) = @import("std").mem.zeroes(c_longlong),
    __clang_max_align_nonce2: c_longdouble align(16) = @import("std").mem.zeroes(c_longdouble),
};
pub const __u_char = u8;
pub const __u_short = c_ushort;
pub const __u_int = c_uint;
pub const __u_long = c_ulong;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_long;
pub const __uint64_t = c_ulong;
pub const __int_least8_t = __int8_t;
pub const __uint_least8_t = __uint8_t;
pub const __int_least16_t = __int16_t;
pub const __uint_least16_t = __uint16_t;
pub const __int_least32_t = __int32_t;
pub const __uint_least32_t = __uint32_t;
pub const __int_least64_t = __int64_t;
pub const __uint_least64_t = __uint64_t;
pub const __quad_t = c_long;
pub const __u_quad_t = c_ulong;
pub const __intmax_t = c_long;
pub const __uintmax_t = c_ulong;
pub const __dev_t = c_ulong;
pub const __uid_t = c_uint;
pub const __gid_t = c_uint;
pub const __ino_t = c_ulong;
pub const __ino64_t = c_ulong;
pub const __mode_t = c_uint;
pub const __nlink_t = c_ulong;
pub const __off_t = c_long;
pub const __off64_t = c_long;
pub const __pid_t = c_int;
pub const __fsid_t = extern struct {
    __val: [2]c_int = @import("std").mem.zeroes([2]c_int),
};
pub const __clock_t = c_long;
pub const __rlim_t = c_ulong;
pub const __rlim64_t = c_ulong;
pub const __id_t = c_uint;
pub const __time_t = c_long;
pub const __useconds_t = c_uint;
pub const __suseconds_t = c_long;
pub const __suseconds64_t = c_long;
pub const __daddr_t = c_int;
pub const __key_t = c_int;
pub const __clockid_t = c_int;
pub const __timer_t = ?*anyopaque;
pub const __blksize_t = c_long;
pub const __blkcnt_t = c_long;
pub const __blkcnt64_t = c_long;
pub const __fsblkcnt_t = c_ulong;
pub const __fsblkcnt64_t = c_ulong;
pub const __fsfilcnt_t = c_ulong;
pub const __fsfilcnt64_t = c_ulong;
pub const __fsword_t = c_long;
pub const __ssize_t = c_long;
pub const __syscall_slong_t = c_long;
pub const __syscall_ulong_t = c_ulong;
pub const __loff_t = __off64_t;
pub const __caddr_t = [*c]u8;
pub const __intptr_t = c_long;
pub const __socklen_t = c_uint;
pub const __sig_atomic_t = c_int;
pub const int_least8_t = __int_least8_t;
pub const int_least16_t = __int_least16_t;
pub const int_least32_t = __int_least32_t;
pub const int_least64_t = __int_least64_t;
pub const uint_least8_t = __uint_least8_t;
pub const uint_least16_t = __uint_least16_t;
pub const uint_least32_t = __uint_least32_t;
pub const uint_least64_t = __uint_least64_t;
pub const int_fast8_t = i8;
pub const int_fast16_t = c_long;
pub const int_fast32_t = c_long;
pub const int_fast64_t = c_long;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = c_ulong;
pub const uint_fast32_t = c_ulong;
pub const uint_fast64_t = c_ulong;
pub const intmax_t = __intmax_t;
pub const uintmax_t = __uintmax_t;
pub const VkBool32 = u32;
pub const VkDeviceAddress = u64;
pub const VkDeviceSize = u64;
pub const VkFlags = u32;
pub const VkSampleMask = u32;
pub const struct_VkBuffer_T = opaque {};
pub const VkBuffer = ?*struct_VkBuffer_T;
pub const struct_VkImage_T = opaque {};
pub const VkImage = ?*struct_VkImage_T;
pub const struct_VkInstance_T = opaque {};
pub const VkInstance = ?*struct_VkInstance_T;
pub const struct_VkPhysicalDevice_T = opaque {};
pub const VkPhysicalDevice = ?*struct_VkPhysicalDevice_T;
pub const struct_VkDevice_T = opaque {};
pub const VkDevice = ?*struct_VkDevice_T;
pub const struct_VkQueue_T = opaque {};
pub const VkQueue = ?*struct_VkQueue_T;
pub const struct_VkSemaphore_T = opaque {};
pub const VkSemaphore = ?*struct_VkSemaphore_T;
pub const struct_VkCommandBuffer_T = opaque {};
pub const VkCommandBuffer = ?*struct_VkCommandBuffer_T;
pub const struct_VkFence_T = opaque {};
pub const VkFence = ?*struct_VkFence_T;
pub const struct_VkDeviceMemory_T = opaque {};
pub const VkDeviceMemory = ?*struct_VkDeviceMemory_T;
pub const struct_VkEvent_T = opaque {};
pub const VkEvent = ?*struct_VkEvent_T;
pub const struct_VkQueryPool_T = opaque {};
pub const VkQueryPool = ?*struct_VkQueryPool_T;
pub const struct_VkBufferView_T = opaque {};
pub const VkBufferView = ?*struct_VkBufferView_T;
pub const struct_VkImageView_T = opaque {};
pub const VkImageView = ?*struct_VkImageView_T;
pub const struct_VkShaderModule_T = opaque {};
pub const VkShaderModule = ?*struct_VkShaderModule_T;
pub const struct_VkPipelineCache_T = opaque {};
pub const VkPipelineCache = ?*struct_VkPipelineCache_T;
pub const struct_VkPipelineLayout_T = opaque {};
pub const VkPipelineLayout = ?*struct_VkPipelineLayout_T;
pub const struct_VkPipeline_T = opaque {};
pub const VkPipeline = ?*struct_VkPipeline_T;
pub const struct_VkRenderPass_T = opaque {};
pub const VkRenderPass = ?*struct_VkRenderPass_T;
pub const struct_VkDescriptorSetLayout_T = opaque {};
pub const VkDescriptorSetLayout = ?*struct_VkDescriptorSetLayout_T;
pub const struct_VkSampler_T = opaque {};
pub const VkSampler = ?*struct_VkSampler_T;
pub const struct_VkDescriptorSet_T = opaque {};
pub const VkDescriptorSet = ?*struct_VkDescriptorSet_T;
pub const struct_VkDescriptorPool_T = opaque {};
pub const VkDescriptorPool = ?*struct_VkDescriptorPool_T;
pub const struct_VkFramebuffer_T = opaque {};
pub const VkFramebuffer = ?*struct_VkFramebuffer_T;
pub const struct_VkCommandPool_T = opaque {};
pub const VkCommandPool = ?*struct_VkCommandPool_T;
pub const VK_SUCCESS: c_int = 0;
pub const VK_NOT_READY: c_int = 1;
pub const VK_TIMEOUT: c_int = 2;
pub const VK_EVENT_SET: c_int = 3;
pub const VK_EVENT_RESET: c_int = 4;
pub const VK_INCOMPLETE: c_int = 5;
pub const VK_ERROR_OUT_OF_HOST_MEMORY: c_int = -1;
pub const VK_ERROR_OUT_OF_DEVICE_MEMORY: c_int = -2;
pub const VK_ERROR_INITIALIZATION_FAILED: c_int = -3;
pub const VK_ERROR_DEVICE_LOST: c_int = -4;
pub const VK_ERROR_MEMORY_MAP_FAILED: c_int = -5;
pub const VK_ERROR_LAYER_NOT_PRESENT: c_int = -6;
pub const VK_ERROR_EXTENSION_NOT_PRESENT: c_int = -7;
pub const VK_ERROR_FEATURE_NOT_PRESENT: c_int = -8;
pub const VK_ERROR_INCOMPATIBLE_DRIVER: c_int = -9;
pub const VK_ERROR_TOO_MANY_OBJECTS: c_int = -10;
pub const VK_ERROR_FORMAT_NOT_SUPPORTED: c_int = -11;
pub const VK_ERROR_FRAGMENTED_POOL: c_int = -12;
pub const VK_ERROR_UNKNOWN: c_int = -13;
pub const VK_ERROR_OUT_OF_POOL_MEMORY: c_int = -1000069000;
pub const VK_ERROR_INVALID_EXTERNAL_HANDLE: c_int = -1000072003;
pub const VK_ERROR_FRAGMENTATION: c_int = -1000161000;
pub const VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS: c_int = -1000257000;
pub const VK_PIPELINE_COMPILE_REQUIRED: c_int = 1000297000;
pub const VK_ERROR_NOT_PERMITTED: c_int = -1000174001;
pub const VK_ERROR_SURFACE_LOST_KHR: c_int = -1000000000;
pub const VK_ERROR_NATIVE_WINDOW_IN_USE_KHR: c_int = -1000000001;
pub const VK_SUBOPTIMAL_KHR: c_int = 1000001003;
pub const VK_ERROR_OUT_OF_DATE_KHR: c_int = -1000001004;
pub const VK_ERROR_INCOMPATIBLE_DISPLAY_KHR: c_int = -1000003001;
pub const VK_ERROR_VALIDATION_FAILED_EXT: c_int = -1000011001;
pub const VK_ERROR_INVALID_SHADER_NV: c_int = -1000012000;
pub const VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR: c_int = -1000023000;
pub const VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR: c_int = -1000023001;
pub const VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR: c_int = -1000023002;
pub const VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR: c_int = -1000023003;
pub const VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR: c_int = -1000023004;
pub const VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR: c_int = -1000023005;
pub const VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT: c_int = -1000158000;
pub const VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT: c_int = -1000255000;
pub const VK_THREAD_IDLE_KHR: c_int = 1000268000;
pub const VK_THREAD_DONE_KHR: c_int = 1000268001;
pub const VK_OPERATION_DEFERRED_KHR: c_int = 1000268002;
pub const VK_OPERATION_NOT_DEFERRED_KHR: c_int = 1000268003;
pub const VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR: c_int = -1000299000;
pub const VK_ERROR_COMPRESSION_EXHAUSTED_EXT: c_int = -1000338000;
pub const VK_INCOMPATIBLE_SHADER_BINARY_EXT: c_int = 1000482000;
pub const VK_PIPELINE_BINARY_MISSING_KHR: c_int = 1000483000;
pub const VK_ERROR_NOT_ENOUGH_SPACE_KHR: c_int = -1000483000;
pub const VK_ERROR_OUT_OF_POOL_MEMORY_KHR: c_int = -1000069000;
pub const VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR: c_int = -1000072003;
pub const VK_ERROR_FRAGMENTATION_EXT: c_int = -1000161000;
pub const VK_ERROR_NOT_PERMITTED_EXT: c_int = -1000174001;
pub const VK_ERROR_NOT_PERMITTED_KHR: c_int = -1000174001;
pub const VK_ERROR_INVALID_DEVICE_ADDRESS_EXT: c_int = -1000257000;
pub const VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: c_int = -1000257000;
pub const VK_PIPELINE_COMPILE_REQUIRED_EXT: c_int = 1000297000;
pub const VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT: c_int = 1000297000;
pub const VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT: c_int = 1000482000;
pub const VK_RESULT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkResult = c_int;
pub const VkResult = enum_VkResult;
pub const VK_STRUCTURE_TYPE_APPLICATION_INFO: c_int = 0;
pub const VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO: c_int = 1;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO: c_int = 2;
pub const VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO: c_int = 3;
pub const VK_STRUCTURE_TYPE_SUBMIT_INFO: c_int = 4;
pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO: c_int = 5;
pub const VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE: c_int = 6;
pub const VK_STRUCTURE_TYPE_BIND_SPARSE_INFO: c_int = 7;
pub const VK_STRUCTURE_TYPE_FENCE_CREATE_INFO: c_int = 8;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO: c_int = 9;
pub const VK_STRUCTURE_TYPE_EVENT_CREATE_INFO: c_int = 10;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO: c_int = 11;
pub const VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO: c_int = 12;
pub const VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO: c_int = 13;
pub const VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO: c_int = 14;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO: c_int = 15;
pub const VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO: c_int = 16;
pub const VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO: c_int = 17;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO: c_int = 18;
pub const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO: c_int = 19;
pub const VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO: c_int = 20;
pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO: c_int = 21;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO: c_int = 22;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO: c_int = 23;
pub const VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO: c_int = 24;
pub const VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO: c_int = 25;
pub const VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO: c_int = 26;
pub const VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO: c_int = 27;
pub const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO: c_int = 28;
pub const VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO: c_int = 29;
pub const VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO: c_int = 30;
pub const VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO: c_int = 31;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO: c_int = 32;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO: c_int = 33;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO: c_int = 34;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET: c_int = 35;
pub const VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET: c_int = 36;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO: c_int = 37;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO: c_int = 38;
pub const VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO: c_int = 39;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO: c_int = 40;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO: c_int = 41;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO: c_int = 42;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO: c_int = 43;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER: c_int = 44;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER: c_int = 45;
pub const VK_STRUCTURE_TYPE_MEMORY_BARRIER: c_int = 46;
pub const VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO: c_int = 47;
pub const VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO: c_int = 48;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES: c_int = 1000094000;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO: c_int = 1000157000;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO: c_int = 1000157001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES: c_int = 1000083000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS: c_int = 1000127000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO: c_int = 1000127001;
pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO: c_int = 1000060000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO: c_int = 1000060003;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO: c_int = 1000060004;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO: c_int = 1000060005;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO: c_int = 1000060006;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO: c_int = 1000060013;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO: c_int = 1000060014;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES: c_int = 1000070000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO: c_int = 1000070001;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2: c_int = 1000146000;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2: c_int = 1000146001;
pub const VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2: c_int = 1000146002;
pub const VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2: c_int = 1000146003;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2: c_int = 1000146004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2: c_int = 1000059000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2: c_int = 1000059001;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2: c_int = 1000059002;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2: c_int = 1000059003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2: c_int = 1000059004;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2: c_int = 1000059005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2: c_int = 1000059006;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2: c_int = 1000059007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2: c_int = 1000059008;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES: c_int = 1000117000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO: c_int = 1000117001;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO: c_int = 1000117002;
pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO: c_int = 1000117003;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO: c_int = 1000053000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES: c_int = 1000053001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES: c_int = 1000053002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO: c_int = 1000145000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES: c_int = 1000145001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES: c_int = 1000145002;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2: c_int = 1000145003;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO: c_int = 1000156000;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO: c_int = 1000156001;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO: c_int = 1000156002;
pub const VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO: c_int = 1000156003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES: c_int = 1000156004;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES: c_int = 1000156005;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO: c_int = 1000085000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO: c_int = 1000071000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES: c_int = 1000071001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO: c_int = 1000071002;
pub const VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES: c_int = 1000071003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES: c_int = 1000071004;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO: c_int = 1000072000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO: c_int = 1000072001;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO: c_int = 1000072002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO: c_int = 1000112000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES: c_int = 1000112001;
pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO: c_int = 1000113000;
pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO: c_int = 1000077000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO: c_int = 1000076000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES: c_int = 1000076001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES: c_int = 1000168000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT: c_int = 1000168001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES: c_int = 1000063000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES: c_int = 49;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES: c_int = 50;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES: c_int = 51;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES: c_int = 52;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO: c_int = 1000147000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2: c_int = 1000109000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2: c_int = 1000109001;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2: c_int = 1000109002;
pub const VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2: c_int = 1000109003;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2: c_int = 1000109004;
pub const VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO: c_int = 1000109005;
pub const VK_STRUCTURE_TYPE_SUBPASS_END_INFO: c_int = 1000109006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES: c_int = 1000177000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES: c_int = 1000196000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES: c_int = 1000180000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES: c_int = 1000082000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES: c_int = 1000197000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO: c_int = 1000161000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES: c_int = 1000161001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES: c_int = 1000161002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO: c_int = 1000161003;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT: c_int = 1000161004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES: c_int = 1000199000;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE: c_int = 1000199001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES: c_int = 1000221000;
pub const VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO: c_int = 1000246000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES: c_int = 1000130000;
pub const VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO: c_int = 1000130001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES: c_int = 1000211000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES: c_int = 1000108000;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO: c_int = 1000108001;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO: c_int = 1000108002;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO: c_int = 1000108003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES: c_int = 1000253000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES: c_int = 1000175000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES: c_int = 1000241000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT: c_int = 1000241001;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT: c_int = 1000241002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES: c_int = 1000261000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES: c_int = 1000207000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES: c_int = 1000207001;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO: c_int = 1000207002;
pub const VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO: c_int = 1000207003;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO: c_int = 1000207004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO: c_int = 1000207005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES: c_int = 1000257000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO: c_int = 1000244001;
pub const VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO: c_int = 1000257002;
pub const VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO: c_int = 1000257003;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO: c_int = 1000257004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES: c_int = 53;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES: c_int = 54;
pub const VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO: c_int = 1000192000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES: c_int = 1000215000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES: c_int = 1000245000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES: c_int = 1000276000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES: c_int = 1000295000;
pub const VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO: c_int = 1000295001;
pub const VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO: c_int = 1000295002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES: c_int = 1000297000;
pub const VK_STRUCTURE_TYPE_MEMORY_BARRIER_2: c_int = 1000314000;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2: c_int = 1000314001;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2: c_int = 1000314002;
pub const VK_STRUCTURE_TYPE_DEPENDENCY_INFO: c_int = 1000314003;
pub const VK_STRUCTURE_TYPE_SUBMIT_INFO_2: c_int = 1000314004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO: c_int = 1000314005;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO: c_int = 1000314006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES: c_int = 1000314007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES: c_int = 1000325000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES: c_int = 1000335000;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2: c_int = 1000337000;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2: c_int = 1000337001;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2: c_int = 1000337002;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2: c_int = 1000337003;
pub const VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2: c_int = 1000337004;
pub const VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2: c_int = 1000337005;
pub const VK_STRUCTURE_TYPE_BUFFER_COPY_2: c_int = 1000337006;
pub const VK_STRUCTURE_TYPE_IMAGE_COPY_2: c_int = 1000337007;
pub const VK_STRUCTURE_TYPE_IMAGE_BLIT_2: c_int = 1000337008;
pub const VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2: c_int = 1000337009;
pub const VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2: c_int = 1000337010;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES: c_int = 1000225000;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO: c_int = 1000225001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES: c_int = 1000225002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES: c_int = 1000138000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES: c_int = 1000138001;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK: c_int = 1000138002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO: c_int = 1000138003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES: c_int = 1000066000;
pub const VK_STRUCTURE_TYPE_RENDERING_INFO: c_int = 1000044000;
pub const VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO: c_int = 1000044001;
pub const VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO: c_int = 1000044002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES: c_int = 1000044003;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO: c_int = 1000044004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES: c_int = 1000280000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES: c_int = 1000280001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES: c_int = 1000281001;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3: c_int = 1000360000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES: c_int = 1000413000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES: c_int = 1000413001;
pub const VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS: c_int = 1000413002;
pub const VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS: c_int = 1000413003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES: c_int = 55;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_PROPERTIES: c_int = 56;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO: c_int = 1000174000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES: c_int = 1000388000;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES: c_int = 1000388001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES: c_int = 1000416000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES: c_int = 1000528000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES: c_int = 1000544000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES: c_int = 1000259000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO: c_int = 1000259001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES: c_int = 1000259002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES: c_int = 1000525000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO: c_int = 1000190001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES: c_int = 1000190002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES: c_int = 1000265000;
pub const VK_STRUCTURE_TYPE_MEMORY_MAP_INFO: c_int = 1000271000;
pub const VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO: c_int = 1000271001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES: c_int = 1000470000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES: c_int = 1000470001;
pub const VK_STRUCTURE_TYPE_RENDERING_AREA_INFO: c_int = 1000470003;
pub const VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO: c_int = 1000470004;
pub const VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2: c_int = 1000338002;
pub const VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2: c_int = 1000338003;
pub const VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO: c_int = 1000470005;
pub const VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO: c_int = 1000470006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES: c_int = 1000080000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES: c_int = 1000232000;
pub const VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO: c_int = 1000232001;
pub const VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO: c_int = 1000232002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES: c_int = 1000545000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES: c_int = 1000545001;
pub const VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS: c_int = 1000545002;
pub const VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO: c_int = 1000545003;
pub const VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO: c_int = 1000545004;
pub const VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO: c_int = 1000545005;
pub const VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO: c_int = 1000545006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES: c_int = 1000466000;
pub const VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO: c_int = 1000068000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES: c_int = 1000068001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES: c_int = 1000068002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES: c_int = 1000270000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES: c_int = 1000270001;
pub const VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY: c_int = 1000270002;
pub const VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY: c_int = 1000270003;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO: c_int = 1000270004;
pub const VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO: c_int = 1000270005;
pub const VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO: c_int = 1000270006;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO: c_int = 1000270007;
pub const VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE: c_int = 1000270008;
pub const VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY: c_int = 1000270009;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR: c_int = 1000001000;
pub const VK_STRUCTURE_TYPE_PRESENT_INFO_KHR: c_int = 1000001001;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR: c_int = 1000060007;
pub const VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR: c_int = 1000060008;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR: c_int = 1000060009;
pub const VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR: c_int = 1000060010;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR: c_int = 1000060011;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR: c_int = 1000060012;
pub const VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR: c_int = 1000002000;
pub const VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR: c_int = 1000002001;
pub const VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR: c_int = 1000003000;
pub const VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR: c_int = 1000004000;
pub const VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: c_int = 1000005000;
pub const VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR: c_int = 1000006000;
pub const VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: c_int = 1000008000;
pub const VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR: c_int = 1000009000;
pub const VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT: c_int = 1000011000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD: c_int = 1000018000;
pub const VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT: c_int = 1000022000;
pub const VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT: c_int = 1000022001;
pub const VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT: c_int = 1000022002;
pub const VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR: c_int = 1000023000;
pub const VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR: c_int = 1000023001;
pub const VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR: c_int = 1000023002;
pub const VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR: c_int = 1000023003;
pub const VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR: c_int = 1000023004;
pub const VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR: c_int = 1000023005;
pub const VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000023006;
pub const VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR: c_int = 1000023007;
pub const VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR: c_int = 1000023008;
pub const VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR: c_int = 1000023009;
pub const VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR: c_int = 1000023010;
pub const VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR: c_int = 1000023011;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR: c_int = 1000023012;
pub const VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR: c_int = 1000023013;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR: c_int = 1000023014;
pub const VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR: c_int = 1000023015;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR: c_int = 1000023016;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR: c_int = 1000024000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR: c_int = 1000024001;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR: c_int = 1000024002;
pub const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV: c_int = 1000026000;
pub const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV: c_int = 1000026001;
pub const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV: c_int = 1000026002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT: c_int = 1000028000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT: c_int = 1000028001;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT: c_int = 1000028002;
pub const VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX: c_int = 1000029000;
pub const VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX: c_int = 1000029001;
pub const VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX: c_int = 1000029002;
pub const VK_STRUCTURE_TYPE_CU_MODULE_TEXTURING_MODE_CREATE_INFO_NVX: c_int = 1000029004;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX: c_int = 1000030000;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX: c_int = 1000030001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR: c_int = 1000038000;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000038001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR: c_int = 1000038002;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR: c_int = 1000038003;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR: c_int = 1000038004;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR: c_int = 1000038005;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR: c_int = 1000038006;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR: c_int = 1000038007;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR: c_int = 1000038008;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR: c_int = 1000038009;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR: c_int = 1000038010;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR: c_int = 1000038011;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR: c_int = 1000038012;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR: c_int = 1000038013;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR: c_int = 1000039000;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000039001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR: c_int = 1000039002;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR: c_int = 1000039003;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR: c_int = 1000039004;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR: c_int = 1000039005;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR: c_int = 1000039006;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR: c_int = 1000039007;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR: c_int = 1000039009;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR: c_int = 1000039010;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR: c_int = 1000039011;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR: c_int = 1000039012;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR: c_int = 1000039013;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR: c_int = 1000039014;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR: c_int = 1000040000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR: c_int = 1000040001;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR: c_int = 1000040003;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000040004;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR: c_int = 1000040005;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR: c_int = 1000040006;
pub const VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD: c_int = 1000041000;
pub const VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP: c_int = 1000049000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV: c_int = 1000050000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV: c_int = 1000056000;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV: c_int = 1000056001;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV: c_int = 1000057000;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV: c_int = 1000057001;
pub const VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV: c_int = 1000058000;
pub const VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT: c_int = 1000061000;
pub const VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN: c_int = 1000062000;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT: c_int = 1000067000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT: c_int = 1000067001;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR: c_int = 1000073000;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR: c_int = 1000073001;
pub const VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR: c_int = 1000073002;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR: c_int = 1000073003;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR: c_int = 1000074000;
pub const VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR: c_int = 1000074001;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR: c_int = 1000074002;
pub const VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR: c_int = 1000075000;
pub const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: c_int = 1000078000;
pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: c_int = 1000078001;
pub const VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR: c_int = 1000078002;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR: c_int = 1000078003;
pub const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR: c_int = 1000079000;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR: c_int = 1000079001;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT: c_int = 1000081000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT: c_int = 1000081001;
pub const VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT: c_int = 1000081002;
pub const VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR: c_int = 1000084000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV: c_int = 1000087000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT: c_int = 1000090000;
pub const VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT: c_int = 1000091000;
pub const VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT: c_int = 1000091001;
pub const VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT: c_int = 1000091002;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT: c_int = 1000091003;
pub const VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE: c_int = 1000092000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX: c_int = 1000097000;
pub const VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX: c_int = 1000044009;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV: c_int = 1000098000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT: c_int = 1000099000;
pub const VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT: c_int = 1000099001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT: c_int = 1000101000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT: c_int = 1000101001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT: c_int = 1000102000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT: c_int = 1000102001;
pub const VK_STRUCTURE_TYPE_HDR_METADATA_EXT: c_int = 1000105000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG: c_int = 1000110000;
pub const VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR: c_int = 1000111000;
pub const VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR: c_int = 1000114000;
pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR: c_int = 1000114001;
pub const VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR: c_int = 1000114002;
pub const VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR: c_int = 1000115000;
pub const VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR: c_int = 1000115001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR: c_int = 1000116000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR: c_int = 1000116001;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR: c_int = 1000116002;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR: c_int = 1000116003;
pub const VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR: c_int = 1000116004;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR: c_int = 1000116005;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR: c_int = 1000116006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR: c_int = 1000119000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR: c_int = 1000119001;
pub const VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR: c_int = 1000119002;
pub const VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR: c_int = 1000121000;
pub const VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR: c_int = 1000121001;
pub const VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR: c_int = 1000121002;
pub const VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR: c_int = 1000121003;
pub const VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR: c_int = 1000121004;
pub const VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK: c_int = 1000122000;
pub const VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK: c_int = 1000123000;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: c_int = 1000128000;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT: c_int = 1000128001;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT: c_int = 1000128002;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT: c_int = 1000128003;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: c_int = 1000128004;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID: c_int = 1000129000;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID: c_int = 1000129001;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID: c_int = 1000129002;
pub const VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: c_int = 1000129003;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: c_int = 1000129004;
pub const VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID: c_int = 1000129005;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID: c_int = 1000129006;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD: c_int = 1000044008;
pub const VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT: c_int = 1000143000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT: c_int = 1000143001;
pub const VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT: c_int = 1000143002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT: c_int = 1000143003;
pub const VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT: c_int = 1000143004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT: c_int = 1000148000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT: c_int = 1000148001;
pub const VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT: c_int = 1000148002;
pub const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV: c_int = 1000149000;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR: c_int = 1000150007;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR: c_int = 1000150000;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR: c_int = 1000150002;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR: c_int = 1000150003;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR: c_int = 1000150004;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR: c_int = 1000150005;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR: c_int = 1000150006;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR: c_int = 1000150009;
pub const VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR: c_int = 1000150010;
pub const VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR: c_int = 1000150011;
pub const VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR: c_int = 1000150012;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR: c_int = 1000150013;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR: c_int = 1000150014;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR: c_int = 1000150017;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR: c_int = 1000150020;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR: c_int = 1000347000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR: c_int = 1000347001;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR: c_int = 1000150015;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR: c_int = 1000150016;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR: c_int = 1000150018;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR: c_int = 1000348013;
pub const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV: c_int = 1000152000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV: c_int = 1000154000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV: c_int = 1000154001;
pub const VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT: c_int = 1000158000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT: c_int = 1000158002;
pub const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT: c_int = 1000158003;
pub const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT: c_int = 1000158004;
pub const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT: c_int = 1000158005;
pub const VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT: c_int = 1000158006;
pub const VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT: c_int = 1000160000;
pub const VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT: c_int = 1000160001;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV: c_int = 1000164000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV: c_int = 1000164001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV: c_int = 1000164002;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV: c_int = 1000164005;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV: c_int = 1000165000;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV: c_int = 1000165001;
pub const VK_STRUCTURE_TYPE_GEOMETRY_NV: c_int = 1000165003;
pub const VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV: c_int = 1000165004;
pub const VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV: c_int = 1000165005;
pub const VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV: c_int = 1000165006;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV: c_int = 1000165007;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV: c_int = 1000165008;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV: c_int = 1000165009;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV: c_int = 1000165011;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV: c_int = 1000165012;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV: c_int = 1000166000;
pub const VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV: c_int = 1000166001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT: c_int = 1000170000;
pub const VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT: c_int = 1000170001;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT: c_int = 1000178000;
pub const VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT: c_int = 1000178001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT: c_int = 1000178002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR: c_int = 1000181000;
pub const VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD: c_int = 1000183000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD: c_int = 1000185000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR: c_int = 1000187000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000187001;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR: c_int = 1000187002;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR: c_int = 1000187003;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR: c_int = 1000187004;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR: c_int = 1000187005;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD: c_int = 1000189000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT: c_int = 1000190000;
pub const VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP: c_int = 1000191000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV: c_int = 1000202000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV: c_int = 1000202001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV: c_int = 1000204000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV: c_int = 1000205000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV: c_int = 1000205002;
pub const VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV: c_int = 1000206000;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV: c_int = 1000206001;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV: c_int = 1000314008;
pub const VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV: c_int = 1000314009;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL: c_int = 1000209000;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL: c_int = 1000210000;
pub const VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL: c_int = 1000210001;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL: c_int = 1000210002;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL: c_int = 1000210003;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL: c_int = 1000210004;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL: c_int = 1000210005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT: c_int = 1000212000;
pub const VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD: c_int = 1000213000;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD: c_int = 1000213001;
pub const VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA: c_int = 1000214000;
pub const VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT: c_int = 1000217000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT: c_int = 1000218000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT: c_int = 1000218001;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT: c_int = 1000218002;
pub const VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT: c_int = 1000044007;
pub const VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR: c_int = 1000226000;
pub const VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR: c_int = 1000226001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR: c_int = 1000226002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR: c_int = 1000226003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR: c_int = 1000226004;
pub const VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR: c_int = 1000044006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD: c_int = 1000227000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD: c_int = 1000229000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT: c_int = 1000234000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR: c_int = 1000235000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT: c_int = 1000237000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT: c_int = 1000238000;
pub const VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT: c_int = 1000238001;
pub const VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR: c_int = 1000239000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV: c_int = 1000240000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT: c_int = 1000244000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT: c_int = 1000244002;
pub const VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT: c_int = 1000247000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR: c_int = 1000248000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV: c_int = 1000249000;
pub const VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV: c_int = 1000249001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV: c_int = 1000249002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV: c_int = 1000250000;
pub const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV: c_int = 1000250001;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV: c_int = 1000250002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT: c_int = 1000251000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT: c_int = 1000252000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT: c_int = 1000254000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT: c_int = 1000254001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT: c_int = 1000254002;
pub const VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT: c_int = 1000255000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT: c_int = 1000255002;
pub const VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT: c_int = 1000255001;
pub const VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT: c_int = 1000256000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT: c_int = 1000260000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT: c_int = 1000267000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR: c_int = 1000269000;
pub const VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR: c_int = 1000269001;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR: c_int = 1000269002;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR: c_int = 1000269003;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR: c_int = 1000269004;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR: c_int = 1000269005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT: c_int = 1000272000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT: c_int = 1000272001;
pub const VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT: c_int = 1000272002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT: c_int = 1000273000;
pub const VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT: c_int = 1000274000;
pub const VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT: c_int = 1000274001;
pub const VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT: c_int = 1000274002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT: c_int = 1000275000;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT: c_int = 1000275001;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT: c_int = 1000275002;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT: c_int = 1000275003;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT: c_int = 1000275004;
pub const VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT: c_int = 1000275005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV: c_int = 1000277000;
pub const VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV: c_int = 1000277001;
pub const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV: c_int = 1000277002;
pub const VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV: c_int = 1000277003;
pub const VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV: c_int = 1000277004;
pub const VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV: c_int = 1000277005;
pub const VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV: c_int = 1000277006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV: c_int = 1000277007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV: c_int = 1000278000;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV: c_int = 1000278001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT: c_int = 1000281000;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM: c_int = 1000282000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM: c_int = 1000282001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT: c_int = 1000283000;
pub const VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT: c_int = 1000283001;
pub const VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT: c_int = 1000283002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT: c_int = 1000284000;
pub const VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT: c_int = 1000284001;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT: c_int = 1000284002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT: c_int = 1000286000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT: c_int = 1000286001;
pub const VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT: c_int = 1000287000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT: c_int = 1000287001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT: c_int = 1000287002;
pub const VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR: c_int = 1000290000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV: c_int = 1000292000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV: c_int = 1000292001;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV: c_int = 1000292002;
pub const VK_STRUCTURE_TYPE_PRESENT_ID_KHR: c_int = 1000294000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR: c_int = 1000294001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR: c_int = 1000299000;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR: c_int = 1000299001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR: c_int = 1000299002;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR: c_int = 1000299003;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR: c_int = 1000299004;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR: c_int = 1000299005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR: c_int = 1000299006;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR: c_int = 1000299007;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR: c_int = 1000299008;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR: c_int = 1000299009;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR: c_int = 1000299010;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV: c_int = 1000300000;
pub const VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV: c_int = 1000300001;
pub const VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV: c_int = 1000307000;
pub const VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV: c_int = 1000307001;
pub const VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV: c_int = 1000307002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV: c_int = 1000307003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV: c_int = 1000307004;
pub const VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV: c_int = 1000310000;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT: c_int = 1000311000;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT: c_int = 1000311001;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT: c_int = 1000311002;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT: c_int = 1000311003;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT: c_int = 1000311004;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT: c_int = 1000311005;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT: c_int = 1000311006;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT: c_int = 1000311007;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT: c_int = 1000311008;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT: c_int = 1000311009;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT: c_int = 1000311010;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT: c_int = 1000311011;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT: c_int = 1000316000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT: c_int = 1000316001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT: c_int = 1000316002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT: c_int = 1000316003;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT: c_int = 1000316004;
pub const VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT: c_int = 1000316005;
pub const VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT: c_int = 1000316006;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT: c_int = 1000316007;
pub const VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT: c_int = 1000316008;
pub const VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT: c_int = 1000316010;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT: c_int = 1000316011;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT: c_int = 1000316012;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT: c_int = 1000316009;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT: c_int = 1000320000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT: c_int = 1000320001;
pub const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT: c_int = 1000320002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD: c_int = 1000321000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR: c_int = 1000203000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR: c_int = 1000322000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR: c_int = 1000323000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV: c_int = 1000326000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV: c_int = 1000326001;
pub const VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV: c_int = 1000326002;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV: c_int = 1000327000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV: c_int = 1000327001;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV: c_int = 1000327002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT: c_int = 1000328000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT: c_int = 1000328001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT: c_int = 1000330000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT: c_int = 1000332000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT: c_int = 1000332001;
pub const VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM: c_int = 1000333000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR: c_int = 1000336000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT: c_int = 1000338000;
pub const VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT: c_int = 1000338001;
pub const VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT: c_int = 1000338004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT: c_int = 1000339000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT: c_int = 1000340000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT: c_int = 1000341000;
pub const VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT: c_int = 1000341001;
pub const VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT: c_int = 1000341002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT: c_int = 1000344000;
pub const VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT: c_int = 1000346000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT: c_int = 1000352000;
pub const VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT: c_int = 1000352001;
pub const VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT: c_int = 1000352002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT: c_int = 1000353000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT: c_int = 1000354000;
pub const VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT: c_int = 1000354001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT: c_int = 1000355000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT: c_int = 1000355001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT: c_int = 1000356000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_EXT: c_int = 1000361000;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000364000;
pub const VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA: c_int = 1000364001;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000364002;
pub const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000365000;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000365001;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA: c_int = 1000366000;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA: c_int = 1000366001;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA: c_int = 1000366002;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA: c_int = 1000366003;
pub const VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366004;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA: c_int = 1000366005;
pub const VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366006;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366007;
pub const VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA: c_int = 1000366008;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366009;
pub const VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI: c_int = 1000369000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI: c_int = 1000369001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI: c_int = 1000369002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI: c_int = 1000370000;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV: c_int = 1000371000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV: c_int = 1000371001;
pub const VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT: c_int = 1000372000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT: c_int = 1000372001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT: c_int = 1000375000;
pub const VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT: c_int = 1000375001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT: c_int = 1000376000;
pub const VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT: c_int = 1000376001;
pub const VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT: c_int = 1000376002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT: c_int = 1000377000;
pub const VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX: c_int = 1000378000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT: c_int = 1000381000;
pub const VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT: c_int = 1000381001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT: c_int = 1000382000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR: c_int = 1000386000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT: c_int = 1000391000;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT: c_int = 1000391001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT: c_int = 1000392000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT: c_int = 1000392001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT: c_int = 1000393000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT: c_int = 1000395000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT: c_int = 1000395001;
pub const VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT: c_int = 1000396000;
pub const VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT: c_int = 1000396001;
pub const VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT: c_int = 1000396002;
pub const VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT: c_int = 1000396003;
pub const VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT: c_int = 1000396004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT: c_int = 1000396005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT: c_int = 1000396006;
pub const VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT: c_int = 1000396007;
pub const VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT: c_int = 1000396008;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT: c_int = 1000396009;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI: c_int = 1000404000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI: c_int = 1000404001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI: c_int = 1000404002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT: c_int = 1000411000;
pub const VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT: c_int = 1000411001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT: c_int = 1000412000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM: c_int = 1000415000;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM: c_int = 1000417000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM: c_int = 1000417001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM: c_int = 1000417002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT: c_int = 1000418000;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT: c_int = 1000418001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE: c_int = 1000420000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE: c_int = 1000420001;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE: c_int = 1000420002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT: c_int = 1000421000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT: c_int = 1000422000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM: c_int = 1000424000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM: c_int = 1000424001;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM: c_int = 1000424002;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM: c_int = 1000424003;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM: c_int = 1000424004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM: c_int = 1000425000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM: c_int = 1000425001;
pub const VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM: c_int = 1000425002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV: c_int = 1000426000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV: c_int = 1000426001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV: c_int = 1000427000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV: c_int = 1000427001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV: c_int = 1000428000;
pub const VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV: c_int = 1000428001;
pub const VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV: c_int = 1000428002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV: c_int = 1000430000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR: c_int = 1000434000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT: c_int = 1000437000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM: c_int = 1000440000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM: c_int = 1000440001;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM: c_int = 1000440002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT: c_int = 1000451000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT: c_int = 1000451001;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT: c_int = 1000453000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT: c_int = 1000455000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT: c_int = 1000455001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT: c_int = 1000458000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT: c_int = 1000458001;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT: c_int = 1000458002;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT: c_int = 1000458003;
pub const VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG: c_int = 1000459000;
pub const VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG: c_int = 1000459001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT: c_int = 1000462000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT: c_int = 1000462001;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT: c_int = 1000462002;
pub const VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT: c_int = 1000462003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT: c_int = 1000342000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV: c_int = 1000464000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV: c_int = 1000464001;
pub const VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV: c_int = 1000464002;
pub const VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV: c_int = 1000464003;
pub const VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV: c_int = 1000464004;
pub const VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV: c_int = 1000464005;
pub const VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV: c_int = 1000464010;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT: c_int = 1000465000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID: c_int = 1000468000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID: c_int = 1000468001;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID: c_int = 1000468002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ANTI_LAG_FEATURES_AMD: c_int = 1000476000;
pub const VK_STRUCTURE_TYPE_ANTI_LAG_DATA_AMD: c_int = 1000476001;
pub const VK_STRUCTURE_TYPE_ANTI_LAG_PRESENTATION_INFO_AMD: c_int = 1000476002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR: c_int = 1000481000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT: c_int = 1000482000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT: c_int = 1000482001;
pub const VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT: c_int = 1000482002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR: c_int = 1000483000;
pub const VK_STRUCTURE_TYPE_PIPELINE_BINARY_CREATE_INFO_KHR: c_int = 1000483001;
pub const VK_STRUCTURE_TYPE_PIPELINE_BINARY_INFO_KHR: c_int = 1000483002;
pub const VK_STRUCTURE_TYPE_PIPELINE_BINARY_KEY_KHR: c_int = 1000483003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_PROPERTIES_KHR: c_int = 1000483004;
pub const VK_STRUCTURE_TYPE_RELEASE_CAPTURED_PIPELINE_DATA_INFO_KHR: c_int = 1000483005;
pub const VK_STRUCTURE_TYPE_PIPELINE_BINARY_DATA_INFO_KHR: c_int = 1000483006;
pub const VK_STRUCTURE_TYPE_PIPELINE_CREATE_INFO_KHR: c_int = 1000483007;
pub const VK_STRUCTURE_TYPE_DEVICE_PIPELINE_BINARY_INTERNAL_CACHE_CONTROL_KHR: c_int = 1000483008;
pub const VK_STRUCTURE_TYPE_PIPELINE_BINARY_HANDLES_INFO_KHR: c_int = 1000483009;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM: c_int = 1000484000;
pub const VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM: c_int = 1000484001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC: c_int = 1000485000;
pub const VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC: c_int = 1000485001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM: c_int = 1000488000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV: c_int = 1000490000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV: c_int = 1000490001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV: c_int = 1000492000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV: c_int = 1000492001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT: c_int = 1000351000;
pub const VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT: c_int = 1000351002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT: c_int = 1000495000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT: c_int = 1000495001;
pub const VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT: c_int = 1000496000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM: c_int = 1000497000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM: c_int = 1000497001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT: c_int = 1000498000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT: c_int = 1000499000;
pub const VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV: c_int = 1000505000;
pub const VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV: c_int = 1000505001;
pub const VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV: c_int = 1000505002;
pub const VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV: c_int = 1000505003;
pub const VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV: c_int = 1000505004;
pub const VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV: c_int = 1000505005;
pub const VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV: c_int = 1000505006;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV: c_int = 1000505007;
pub const VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV: c_int = 1000505008;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR: c_int = 1000506000;
pub const VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR: c_int = 1000506001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR: c_int = 1000506002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM: c_int = 1000510000;
pub const VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM: c_int = 1000510001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR: c_int = 1000201000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_PROPERTIES_KHR: c_int = 1000511000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR: c_int = 1000512000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR: c_int = 1000512001;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR: c_int = 1000512003;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000512004;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR: c_int = 1000512005;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_CAPABILITIES_KHR: c_int = 1000513000;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000513001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PICTURE_INFO_KHR: c_int = 1000513002;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_DPB_SLOT_INFO_KHR: c_int = 1000513003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_AV1_FEATURES_KHR: c_int = 1000513004;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PROFILE_INFO_KHR: c_int = 1000513005;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_INFO_KHR: c_int = 1000513006;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_LAYER_INFO_KHR: c_int = 1000513007;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUALITY_LEVEL_PROPERTIES_KHR: c_int = 1000513008;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_CREATE_INFO_KHR: c_int = 1000513009;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_GOP_REMAINING_FRAME_INFO_KHR: c_int = 1000513010;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR: c_int = 1000515000;
pub const VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR: c_int = 1000515001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV: c_int = 1000516000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM: c_int = 1000518000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM: c_int = 1000518001;
pub const VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM: c_int = 1000518002;
pub const VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM: c_int = 1000519000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM: c_int = 1000519001;
pub const VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM: c_int = 1000519002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM: c_int = 1000520000;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM: c_int = 1000520001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM: c_int = 1000521000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT: c_int = 1000524000;
pub const VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX: c_int = 1000529000;
pub const VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX: c_int = 1000529001;
pub const VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX: c_int = 1000529002;
pub const VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX: c_int = 1000529003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX: c_int = 1000529004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT: c_int = 1000530000;
pub const VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR: c_int = 1000184000;
pub const VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT: c_int = 1000545007;
pub const VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT: c_int = 1000545008;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV: c_int = 1000546000;
pub const VK_STRUCTURE_TYPE_DISPLAY_SURFACE_STEREO_CREATE_INFO_NV: c_int = 1000551000;
pub const VK_STRUCTURE_TYPE_DISPLAY_MODE_STEREO_PROPERTIES_NV: c_int = 1000551001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_CAPABILITIES_KHR: c_int = 1000553000;
pub const VK_STRUCTURE_TYPE_VIDEO_FORMAT_QUANTIZATION_MAP_PROPERTIES_KHR: c_int = 1000553001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_INFO_KHR: c_int = 1000553002;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000553005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUANTIZATION_MAP_FEATURES_KHR: c_int = 1000553009;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUANTIZATION_MAP_CAPABILITIES_KHR: c_int = 1000553003;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUANTIZATION_MAP_CAPABILITIES_KHR: c_int = 1000553004;
pub const VK_STRUCTURE_TYPE_VIDEO_FORMAT_H265_QUANTIZATION_MAP_PROPERTIES_KHR: c_int = 1000553006;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUANTIZATION_MAP_CAPABILITIES_KHR: c_int = 1000553007;
pub const VK_STRUCTURE_TYPE_VIDEO_FORMAT_AV1_QUANTIZATION_MAP_PROPERTIES_KHR: c_int = 1000553008;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV: c_int = 1000555000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR: c_int = 1000558000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMMAND_BUFFER_INHERITANCE_FEATURES_NV: c_int = 1000559000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR: c_int = 1000562000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR: c_int = 1000562001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR: c_int = 1000562002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR: c_int = 1000562003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR: c_int = 1000562004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV: c_int = 1000563000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT: c_int = 1000564000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV: c_int = 1000568000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_EXT: c_int = 1000572000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT: c_int = 1000572001;
pub const VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_EXT: c_int = 1000572002;
pub const VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_CREATE_INFO_EXT: c_int = 1000572003;
pub const VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_EXT: c_int = 1000572004;
pub const VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_EXT: c_int = 1000572006;
pub const VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_EXT: c_int = 1000572007;
pub const VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_PIPELINE_EXT: c_int = 1000572008;
pub const VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_SHADER_EXT: c_int = 1000572009;
pub const VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_PIPELINE_INFO_EXT: c_int = 1000572010;
pub const VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_INFO_EXT: c_int = 1000572011;
pub const VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_LAYOUT_INFO_EXT: c_int = 1000572012;
pub const VK_STRUCTURE_TYPE_GENERATED_COMMANDS_PIPELINE_INFO_EXT: c_int = 1000572013;
pub const VK_STRUCTURE_TYPE_GENERATED_COMMANDS_SHADER_INFO_EXT: c_int = 1000572014;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA: c_int = 1000575000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA: c_int = 1000575001;
pub const VK_STRUCTURE_TYPE_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA: c_int = 1000575002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_CONTROL_FEATURES_EXT: c_int = 1000582000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLAMP_CONTROL_CREATE_INFO_EXT: c_int = 1000582001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HDR_VIVID_FEATURES_HUAWEI: c_int = 1000590000;
pub const VK_STRUCTURE_TYPE_HDR_VIVID_DYNAMIC_METADATA_HUAWEI: c_int = 1000590001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV: c_int = 1000593000;
pub const VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV: c_int = 1000593001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_PROPERTIES_NV: c_int = 1000593002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_ROBUSTNESS_FEATURES_EXT: c_int = 1000608000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES: c_int = 1000063000;
pub const VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT: c_int = 1000011000;
pub const VK_STRUCTURE_TYPE_RENDERING_INFO_KHR: c_int = 1000044000;
pub const VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR: c_int = 1000044001;
pub const VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR: c_int = 1000044002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR: c_int = 1000044003;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR: c_int = 1000044004;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR: c_int = 1000053000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR: c_int = 1000053001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR: c_int = 1000053002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR: c_int = 1000059000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR: c_int = 1000059001;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR: c_int = 1000059002;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR: c_int = 1000059003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR: c_int = 1000059004;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR: c_int = 1000059005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR: c_int = 1000059006;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR: c_int = 1000059007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR: c_int = 1000059008;
pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR: c_int = 1000060000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR: c_int = 1000060003;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR: c_int = 1000060004;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR: c_int = 1000060005;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR: c_int = 1000060006;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR: c_int = 1000060013;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR: c_int = 1000060014;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT: c_int = 1000066000;
pub const VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT: c_int = 1000068000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT: c_int = 1000068001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT: c_int = 1000068002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR: c_int = 1000070000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR: c_int = 1000070001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR: c_int = 1000071000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR: c_int = 1000071001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR: c_int = 1000071002;
pub const VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR: c_int = 1000071003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR: c_int = 1000071004;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR: c_int = 1000072000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR: c_int = 1000072001;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR: c_int = 1000072002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR: c_int = 1000076000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR: c_int = 1000076001;
pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR: c_int = 1000077000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR: c_int = 1000080000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR: c_int = 1000082000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR: c_int = 1000082000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR: c_int = 1000083000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR: c_int = 1000085000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT: c_int = 1000090000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR: c_int = 1000108000;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR: c_int = 1000108001;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR: c_int = 1000108002;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR: c_int = 1000108003;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR: c_int = 1000109000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR: c_int = 1000109001;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR: c_int = 1000109002;
pub const VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR: c_int = 1000109003;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR: c_int = 1000109004;
pub const VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR: c_int = 1000109005;
pub const VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR: c_int = 1000109006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR: c_int = 1000112000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR: c_int = 1000112001;
pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR: c_int = 1000113000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR: c_int = 1000117000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR: c_int = 1000117001;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR: c_int = 1000117002;
pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR: c_int = 1000117003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: c_int = 1000127000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR: c_int = 1000127001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT: c_int = 1000130000;
pub const VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT: c_int = 1000130001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT: c_int = 1000138000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT: c_int = 1000138001;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT: c_int = 1000138002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT: c_int = 1000138003;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR: c_int = 1000146000;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR: c_int = 1000146001;
pub const VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR: c_int = 1000146002;
pub const VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR: c_int = 1000146003;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR: c_int = 1000146004;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: c_int = 1000147000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV: c_int = 1000044008;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR: c_int = 1000156000;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR: c_int = 1000156001;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR: c_int = 1000156002;
pub const VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR: c_int = 1000156003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR: c_int = 1000156004;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR: c_int = 1000156005;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR: c_int = 1000157000;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR: c_int = 1000157001;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT: c_int = 1000161000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT: c_int = 1000161001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT: c_int = 1000161002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT: c_int = 1000161003;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT: c_int = 1000161004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR: c_int = 1000168000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR: c_int = 1000168001;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT: c_int = 1000174000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR: c_int = 1000175000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR: c_int = 1000177000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR: c_int = 1000180000;
pub const VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT: c_int = 1000184000;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR: c_int = 1000174000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR: c_int = 1000388000;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR: c_int = 1000388001;
pub const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT: c_int = 1000190001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT: c_int = 1000190002;
pub const VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT: c_int = 1000192000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR: c_int = 1000196000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR: c_int = 1000197000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR: c_int = 1000199000;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR: c_int = 1000199001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV: c_int = 1000201000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV: c_int = 1000203000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR: c_int = 1000207000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR: c_int = 1000207001;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR: c_int = 1000207002;
pub const VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR: c_int = 1000207003;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR: c_int = 1000207004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR: c_int = 1000207005;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL: c_int = 1000210000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR: c_int = 1000211000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR: c_int = 1000215000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT: c_int = 1000221000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT: c_int = 1000225000;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT: c_int = 1000225001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT: c_int = 1000225002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR: c_int = 1000232000;
pub const VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR: c_int = 1000232001;
pub const VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR: c_int = 1000232002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR: c_int = 1000241000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR: c_int = 1000241001;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR: c_int = 1000241002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT: c_int = 1000244000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT: c_int = 1000244001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT: c_int = 1000245000;
pub const VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT: c_int = 1000246000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR: c_int = 1000253000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR: c_int = 1000257000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR: c_int = 1000244001;
pub const VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR: c_int = 1000257002;
pub const VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR: c_int = 1000257003;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR: c_int = 1000257004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT: c_int = 1000259000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT: c_int = 1000259001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT: c_int = 1000259002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT: c_int = 1000261000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT: c_int = 1000265000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT: c_int = 1000270000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT: c_int = 1000270001;
pub const VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT: c_int = 1000270002;
pub const VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT: c_int = 1000270003;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT: c_int = 1000270004;
pub const VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT: c_int = 1000270005;
pub const VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT: c_int = 1000270006;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT: c_int = 1000270007;
pub const VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT: c_int = 1000270008;
pub const VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT: c_int = 1000270009;
pub const VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR: c_int = 1000271000;
pub const VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR: c_int = 1000271001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT: c_int = 1000276000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR: c_int = 1000280000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR: c_int = 1000280001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT: c_int = 1000281001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT: c_int = 1000295000;
pub const VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT: c_int = 1000295001;
pub const VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT: c_int = 1000295002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT: c_int = 1000297000;
pub const VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR: c_int = 1000314000;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR: c_int = 1000314001;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR: c_int = 1000314002;
pub const VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR: c_int = 1000314003;
pub const VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR: c_int = 1000314004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR: c_int = 1000314005;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR: c_int = 1000314006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR: c_int = 1000314007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR: c_int = 1000325000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT: c_int = 1000335000;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR: c_int = 1000337000;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR: c_int = 1000337001;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR: c_int = 1000337002;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR: c_int = 1000337003;
pub const VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR: c_int = 1000337004;
pub const VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR: c_int = 1000337005;
pub const VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR: c_int = 1000337006;
pub const VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR: c_int = 1000337007;
pub const VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR: c_int = 1000337008;
pub const VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR: c_int = 1000337009;
pub const VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR: c_int = 1000337010;
pub const VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT: c_int = 1000338002;
pub const VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT: c_int = 1000338003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM: c_int = 1000342000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE: c_int = 1000351000;
pub const VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE: c_int = 1000351002;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR: c_int = 1000360000;
pub const VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT: c_int = 1000269001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT: c_int = 1000388000;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT: c_int = 1000388001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR: c_int = 1000413000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR: c_int = 1000413001;
pub const VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR: c_int = 1000413002;
pub const VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR: c_int = 1000413003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR: c_int = 1000416000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT: c_int = 1000466000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR: c_int = 1000470000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR: c_int = 1000470001;
pub const VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR: c_int = 1000470003;
pub const VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR: c_int = 1000470004;
pub const VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR: c_int = 1000338002;
pub const VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR: c_int = 1000338003;
pub const VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR: c_int = 1000470005;
pub const VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR: c_int = 1000470006;
pub const VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT: c_int = 1000225001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR: c_int = 1000525000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR: c_int = 1000190001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR: c_int = 1000190002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR: c_int = 1000528000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR: c_int = 1000265000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR: c_int = 1000259000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR: c_int = 1000259001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR: c_int = 1000259002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR: c_int = 1000544000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR: c_int = 1000545000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR: c_int = 1000545001;
pub const VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR: c_int = 1000545002;
pub const VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR: c_int = 1000545003;
pub const VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR: c_int = 1000545004;
pub const VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR: c_int = 1000545005;
pub const VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR: c_int = 1000545006;
pub const VK_STRUCTURE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkStructureType = c_uint;
pub const VkStructureType = enum_VkStructureType;
pub const VK_PIPELINE_CACHE_HEADER_VERSION_ONE: c_int = 1;
pub const VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCacheHeaderVersion = c_uint;
pub const VkPipelineCacheHeaderVersion = enum_VkPipelineCacheHeaderVersion;
pub const VK_IMAGE_LAYOUT_UNDEFINED: c_int = 0;
pub const VK_IMAGE_LAYOUT_GENERAL: c_int = 1;
pub const VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: c_int = 2;
pub const VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: c_int = 3;
pub const VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: c_int = 4;
pub const VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: c_int = 5;
pub const VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: c_int = 6;
pub const VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: c_int = 7;
pub const VK_IMAGE_LAYOUT_PREINITIALIZED: c_int = 8;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: c_int = 1000117000;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: c_int = 1000117001;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL: c_int = 1000241000;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL: c_int = 1000241001;
pub const VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL: c_int = 1000241002;
pub const VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL: c_int = 1000241003;
pub const VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL: c_int = 1000314000;
pub const VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL: c_int = 1000314001;
pub const VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ: c_int = 1000232000;
pub const VK_IMAGE_LAYOUT_PRESENT_SRC_KHR: c_int = 1000001002;
pub const VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR: c_int = 1000024000;
pub const VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR: c_int = 1000024001;
pub const VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR: c_int = 1000024002;
pub const VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR: c_int = 1000111000;
pub const VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT: c_int = 1000218000;
pub const VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR: c_int = 1000164003;
pub const VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR: c_int = 1000299000;
pub const VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR: c_int = 1000299001;
pub const VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR: c_int = 1000299002;
pub const VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT: c_int = 1000339000;
pub const VK_IMAGE_LAYOUT_VIDEO_ENCODE_QUANTIZATION_MAP_KHR: c_int = 1000553000;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR: c_int = 1000117000;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR: c_int = 1000117001;
pub const VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV: c_int = 1000164003;
pub const VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR: c_int = 1000232000;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR: c_int = 1000241000;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR: c_int = 1000241001;
pub const VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR: c_int = 1000241002;
pub const VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR: c_int = 1000241003;
pub const VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR: c_int = 1000314000;
pub const VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR: c_int = 1000314001;
pub const VK_IMAGE_LAYOUT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageLayout = c_uint;
pub const VkImageLayout = enum_VkImageLayout;
pub const VK_OBJECT_TYPE_UNKNOWN: c_int = 0;
pub const VK_OBJECT_TYPE_INSTANCE: c_int = 1;
pub const VK_OBJECT_TYPE_PHYSICAL_DEVICE: c_int = 2;
pub const VK_OBJECT_TYPE_DEVICE: c_int = 3;
pub const VK_OBJECT_TYPE_QUEUE: c_int = 4;
pub const VK_OBJECT_TYPE_SEMAPHORE: c_int = 5;
pub const VK_OBJECT_TYPE_COMMAND_BUFFER: c_int = 6;
pub const VK_OBJECT_TYPE_FENCE: c_int = 7;
pub const VK_OBJECT_TYPE_DEVICE_MEMORY: c_int = 8;
pub const VK_OBJECT_TYPE_BUFFER: c_int = 9;
pub const VK_OBJECT_TYPE_IMAGE: c_int = 10;
pub const VK_OBJECT_TYPE_EVENT: c_int = 11;
pub const VK_OBJECT_TYPE_QUERY_POOL: c_int = 12;
pub const VK_OBJECT_TYPE_BUFFER_VIEW: c_int = 13;
pub const VK_OBJECT_TYPE_IMAGE_VIEW: c_int = 14;
pub const VK_OBJECT_TYPE_SHADER_MODULE: c_int = 15;
pub const VK_OBJECT_TYPE_PIPELINE_CACHE: c_int = 16;
pub const VK_OBJECT_TYPE_PIPELINE_LAYOUT: c_int = 17;
pub const VK_OBJECT_TYPE_RENDER_PASS: c_int = 18;
pub const VK_OBJECT_TYPE_PIPELINE: c_int = 19;
pub const VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT: c_int = 20;
pub const VK_OBJECT_TYPE_SAMPLER: c_int = 21;
pub const VK_OBJECT_TYPE_DESCRIPTOR_POOL: c_int = 22;
pub const VK_OBJECT_TYPE_DESCRIPTOR_SET: c_int = 23;
pub const VK_OBJECT_TYPE_FRAMEBUFFER: c_int = 24;
pub const VK_OBJECT_TYPE_COMMAND_POOL: c_int = 25;
pub const VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION: c_int = 1000156000;
pub const VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE: c_int = 1000085000;
pub const VK_OBJECT_TYPE_PRIVATE_DATA_SLOT: c_int = 1000295000;
pub const VK_OBJECT_TYPE_SURFACE_KHR: c_int = 1000000000;
pub const VK_OBJECT_TYPE_SWAPCHAIN_KHR: c_int = 1000001000;
pub const VK_OBJECT_TYPE_DISPLAY_KHR: c_int = 1000002000;
pub const VK_OBJECT_TYPE_DISPLAY_MODE_KHR: c_int = 1000002001;
pub const VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT: c_int = 1000011000;
pub const VK_OBJECT_TYPE_VIDEO_SESSION_KHR: c_int = 1000023000;
pub const VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR: c_int = 1000023001;
pub const VK_OBJECT_TYPE_CU_MODULE_NVX: c_int = 1000029000;
pub const VK_OBJECT_TYPE_CU_FUNCTION_NVX: c_int = 1000029001;
pub const VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: c_int = 1000128000;
pub const VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR: c_int = 1000150000;
pub const VK_OBJECT_TYPE_VALIDATION_CACHE_EXT: c_int = 1000160000;
pub const VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV: c_int = 1000165000;
pub const VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL: c_int = 1000210000;
pub const VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR: c_int = 1000268000;
pub const VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV: c_int = 1000277000;
pub const VK_OBJECT_TYPE_CUDA_MODULE_NV: c_int = 1000307000;
pub const VK_OBJECT_TYPE_CUDA_FUNCTION_NV: c_int = 1000307001;
pub const VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA: c_int = 1000366000;
pub const VK_OBJECT_TYPE_MICROMAP_EXT: c_int = 1000396000;
pub const VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV: c_int = 1000464000;
pub const VK_OBJECT_TYPE_SHADER_EXT: c_int = 1000482000;
pub const VK_OBJECT_TYPE_PIPELINE_BINARY_KHR: c_int = 1000483000;
pub const VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_EXT: c_int = 1000572000;
pub const VK_OBJECT_TYPE_INDIRECT_EXECUTION_SET_EXT: c_int = 1000572001;
pub const VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR: c_int = 1000085000;
pub const VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR: c_int = 1000156000;
pub const VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT: c_int = 1000295000;
pub const VK_OBJECT_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkObjectType = c_uint;
pub const VkObjectType = enum_VkObjectType;
pub const VK_VENDOR_ID_KHRONOS: c_int = 65536;
pub const VK_VENDOR_ID_VIV: c_int = 65537;
pub const VK_VENDOR_ID_VSI: c_int = 65538;
pub const VK_VENDOR_ID_KAZAN: c_int = 65539;
pub const VK_VENDOR_ID_CODEPLAY: c_int = 65540;
pub const VK_VENDOR_ID_MESA: c_int = 65541;
pub const VK_VENDOR_ID_POCL: c_int = 65542;
pub const VK_VENDOR_ID_MOBILEYE: c_int = 65543;
pub const VK_VENDOR_ID_MAX_ENUM: c_int = 2147483647;
pub const enum_VkVendorId = c_uint;
pub const VkVendorId = enum_VkVendorId;
pub const VK_SYSTEM_ALLOCATION_SCOPE_COMMAND: c_int = 0;
pub const VK_SYSTEM_ALLOCATION_SCOPE_OBJECT: c_int = 1;
pub const VK_SYSTEM_ALLOCATION_SCOPE_CACHE: c_int = 2;
pub const VK_SYSTEM_ALLOCATION_SCOPE_DEVICE: c_int = 3;
pub const VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE: c_int = 4;
pub const VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSystemAllocationScope = c_uint;
pub const VkSystemAllocationScope = enum_VkSystemAllocationScope;
pub const VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE: c_int = 0;
pub const VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkInternalAllocationType = c_uint;
pub const VkInternalAllocationType = enum_VkInternalAllocationType;
pub const VK_FORMAT_UNDEFINED: c_int = 0;
pub const VK_FORMAT_R4G4_UNORM_PACK8: c_int = 1;
pub const VK_FORMAT_R4G4B4A4_UNORM_PACK16: c_int = 2;
pub const VK_FORMAT_B4G4R4A4_UNORM_PACK16: c_int = 3;
pub const VK_FORMAT_R5G6B5_UNORM_PACK16: c_int = 4;
pub const VK_FORMAT_B5G6R5_UNORM_PACK16: c_int = 5;
pub const VK_FORMAT_R5G5B5A1_UNORM_PACK16: c_int = 6;
pub const VK_FORMAT_B5G5R5A1_UNORM_PACK16: c_int = 7;
pub const VK_FORMAT_A1R5G5B5_UNORM_PACK16: c_int = 8;
pub const VK_FORMAT_R8_UNORM: c_int = 9;
pub const VK_FORMAT_R8_SNORM: c_int = 10;
pub const VK_FORMAT_R8_USCALED: c_int = 11;
pub const VK_FORMAT_R8_SSCALED: c_int = 12;
pub const VK_FORMAT_R8_UINT: c_int = 13;
pub const VK_FORMAT_R8_SINT: c_int = 14;
pub const VK_FORMAT_R8_SRGB: c_int = 15;
pub const VK_FORMAT_R8G8_UNORM: c_int = 16;
pub const VK_FORMAT_R8G8_SNORM: c_int = 17;
pub const VK_FORMAT_R8G8_USCALED: c_int = 18;
pub const VK_FORMAT_R8G8_SSCALED: c_int = 19;
pub const VK_FORMAT_R8G8_UINT: c_int = 20;
pub const VK_FORMAT_R8G8_SINT: c_int = 21;
pub const VK_FORMAT_R8G8_SRGB: c_int = 22;
pub const VK_FORMAT_R8G8B8_UNORM: c_int = 23;
pub const VK_FORMAT_R8G8B8_SNORM: c_int = 24;
pub const VK_FORMAT_R8G8B8_USCALED: c_int = 25;
pub const VK_FORMAT_R8G8B8_SSCALED: c_int = 26;
pub const VK_FORMAT_R8G8B8_UINT: c_int = 27;
pub const VK_FORMAT_R8G8B8_SINT: c_int = 28;
pub const VK_FORMAT_R8G8B8_SRGB: c_int = 29;
pub const VK_FORMAT_B8G8R8_UNORM: c_int = 30;
pub const VK_FORMAT_B8G8R8_SNORM: c_int = 31;
pub const VK_FORMAT_B8G8R8_USCALED: c_int = 32;
pub const VK_FORMAT_B8G8R8_SSCALED: c_int = 33;
pub const VK_FORMAT_B8G8R8_UINT: c_int = 34;
pub const VK_FORMAT_B8G8R8_SINT: c_int = 35;
pub const VK_FORMAT_B8G8R8_SRGB: c_int = 36;
pub const VK_FORMAT_R8G8B8A8_UNORM: c_int = 37;
pub const VK_FORMAT_R8G8B8A8_SNORM: c_int = 38;
pub const VK_FORMAT_R8G8B8A8_USCALED: c_int = 39;
pub const VK_FORMAT_R8G8B8A8_SSCALED: c_int = 40;
pub const VK_FORMAT_R8G8B8A8_UINT: c_int = 41;
pub const VK_FORMAT_R8G8B8A8_SINT: c_int = 42;
pub const VK_FORMAT_R8G8B8A8_SRGB: c_int = 43;
pub const VK_FORMAT_B8G8R8A8_UNORM: c_int = 44;
pub const VK_FORMAT_B8G8R8A8_SNORM: c_int = 45;
pub const VK_FORMAT_B8G8R8A8_USCALED: c_int = 46;
pub const VK_FORMAT_B8G8R8A8_SSCALED: c_int = 47;
pub const VK_FORMAT_B8G8R8A8_UINT: c_int = 48;
pub const VK_FORMAT_B8G8R8A8_SINT: c_int = 49;
pub const VK_FORMAT_B8G8R8A8_SRGB: c_int = 50;
pub const VK_FORMAT_A8B8G8R8_UNORM_PACK32: c_int = 51;
pub const VK_FORMAT_A8B8G8R8_SNORM_PACK32: c_int = 52;
pub const VK_FORMAT_A8B8G8R8_USCALED_PACK32: c_int = 53;
pub const VK_FORMAT_A8B8G8R8_SSCALED_PACK32: c_int = 54;
pub const VK_FORMAT_A8B8G8R8_UINT_PACK32: c_int = 55;
pub const VK_FORMAT_A8B8G8R8_SINT_PACK32: c_int = 56;
pub const VK_FORMAT_A8B8G8R8_SRGB_PACK32: c_int = 57;
pub const VK_FORMAT_A2R10G10B10_UNORM_PACK32: c_int = 58;
pub const VK_FORMAT_A2R10G10B10_SNORM_PACK32: c_int = 59;
pub const VK_FORMAT_A2R10G10B10_USCALED_PACK32: c_int = 60;
pub const VK_FORMAT_A2R10G10B10_SSCALED_PACK32: c_int = 61;
pub const VK_FORMAT_A2R10G10B10_UINT_PACK32: c_int = 62;
pub const VK_FORMAT_A2R10G10B10_SINT_PACK32: c_int = 63;
pub const VK_FORMAT_A2B10G10R10_UNORM_PACK32: c_int = 64;
pub const VK_FORMAT_A2B10G10R10_SNORM_PACK32: c_int = 65;
pub const VK_FORMAT_A2B10G10R10_USCALED_PACK32: c_int = 66;
pub const VK_FORMAT_A2B10G10R10_SSCALED_PACK32: c_int = 67;
pub const VK_FORMAT_A2B10G10R10_UINT_PACK32: c_int = 68;
pub const VK_FORMAT_A2B10G10R10_SINT_PACK32: c_int = 69;
pub const VK_FORMAT_R16_UNORM: c_int = 70;
pub const VK_FORMAT_R16_SNORM: c_int = 71;
pub const VK_FORMAT_R16_USCALED: c_int = 72;
pub const VK_FORMAT_R16_SSCALED: c_int = 73;
pub const VK_FORMAT_R16_UINT: c_int = 74;
pub const VK_FORMAT_R16_SINT: c_int = 75;
pub const VK_FORMAT_R16_SFLOAT: c_int = 76;
pub const VK_FORMAT_R16G16_UNORM: c_int = 77;
pub const VK_FORMAT_R16G16_SNORM: c_int = 78;
pub const VK_FORMAT_R16G16_USCALED: c_int = 79;
pub const VK_FORMAT_R16G16_SSCALED: c_int = 80;
pub const VK_FORMAT_R16G16_UINT: c_int = 81;
pub const VK_FORMAT_R16G16_SINT: c_int = 82;
pub const VK_FORMAT_R16G16_SFLOAT: c_int = 83;
pub const VK_FORMAT_R16G16B16_UNORM: c_int = 84;
pub const VK_FORMAT_R16G16B16_SNORM: c_int = 85;
pub const VK_FORMAT_R16G16B16_USCALED: c_int = 86;
pub const VK_FORMAT_R16G16B16_SSCALED: c_int = 87;
pub const VK_FORMAT_R16G16B16_UINT: c_int = 88;
pub const VK_FORMAT_R16G16B16_SINT: c_int = 89;
pub const VK_FORMAT_R16G16B16_SFLOAT: c_int = 90;
pub const VK_FORMAT_R16G16B16A16_UNORM: c_int = 91;
pub const VK_FORMAT_R16G16B16A16_SNORM: c_int = 92;
pub const VK_FORMAT_R16G16B16A16_USCALED: c_int = 93;
pub const VK_FORMAT_R16G16B16A16_SSCALED: c_int = 94;
pub const VK_FORMAT_R16G16B16A16_UINT: c_int = 95;
pub const VK_FORMAT_R16G16B16A16_SINT: c_int = 96;
pub const VK_FORMAT_R16G16B16A16_SFLOAT: c_int = 97;
pub const VK_FORMAT_R32_UINT: c_int = 98;
pub const VK_FORMAT_R32_SINT: c_int = 99;
pub const VK_FORMAT_R32_SFLOAT: c_int = 100;
pub const VK_FORMAT_R32G32_UINT: c_int = 101;
pub const VK_FORMAT_R32G32_SINT: c_int = 102;
pub const VK_FORMAT_R32G32_SFLOAT: c_int = 103;
pub const VK_FORMAT_R32G32B32_UINT: c_int = 104;
pub const VK_FORMAT_R32G32B32_SINT: c_int = 105;
pub const VK_FORMAT_R32G32B32_SFLOAT: c_int = 106;
pub const VK_FORMAT_R32G32B32A32_UINT: c_int = 107;
pub const VK_FORMAT_R32G32B32A32_SINT: c_int = 108;
pub const VK_FORMAT_R32G32B32A32_SFLOAT: c_int = 109;
pub const VK_FORMAT_R64_UINT: c_int = 110;
pub const VK_FORMAT_R64_SINT: c_int = 111;
pub const VK_FORMAT_R64_SFLOAT: c_int = 112;
pub const VK_FORMAT_R64G64_UINT: c_int = 113;
pub const VK_FORMAT_R64G64_SINT: c_int = 114;
pub const VK_FORMAT_R64G64_SFLOAT: c_int = 115;
pub const VK_FORMAT_R64G64B64_UINT: c_int = 116;
pub const VK_FORMAT_R64G64B64_SINT: c_int = 117;
pub const VK_FORMAT_R64G64B64_SFLOAT: c_int = 118;
pub const VK_FORMAT_R64G64B64A64_UINT: c_int = 119;
pub const VK_FORMAT_R64G64B64A64_SINT: c_int = 120;
pub const VK_FORMAT_R64G64B64A64_SFLOAT: c_int = 121;
pub const VK_FORMAT_B10G11R11_UFLOAT_PACK32: c_int = 122;
pub const VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: c_int = 123;
pub const VK_FORMAT_D16_UNORM: c_int = 124;
pub const VK_FORMAT_X8_D24_UNORM_PACK32: c_int = 125;
pub const VK_FORMAT_D32_SFLOAT: c_int = 126;
pub const VK_FORMAT_S8_UINT: c_int = 127;
pub const VK_FORMAT_D16_UNORM_S8_UINT: c_int = 128;
pub const VK_FORMAT_D24_UNORM_S8_UINT: c_int = 129;
pub const VK_FORMAT_D32_SFLOAT_S8_UINT: c_int = 130;
pub const VK_FORMAT_BC1_RGB_UNORM_BLOCK: c_int = 131;
pub const VK_FORMAT_BC1_RGB_SRGB_BLOCK: c_int = 132;
pub const VK_FORMAT_BC1_RGBA_UNORM_BLOCK: c_int = 133;
pub const VK_FORMAT_BC1_RGBA_SRGB_BLOCK: c_int = 134;
pub const VK_FORMAT_BC2_UNORM_BLOCK: c_int = 135;
pub const VK_FORMAT_BC2_SRGB_BLOCK: c_int = 136;
pub const VK_FORMAT_BC3_UNORM_BLOCK: c_int = 137;
pub const VK_FORMAT_BC3_SRGB_BLOCK: c_int = 138;
pub const VK_FORMAT_BC4_UNORM_BLOCK: c_int = 139;
pub const VK_FORMAT_BC4_SNORM_BLOCK: c_int = 140;
pub const VK_FORMAT_BC5_UNORM_BLOCK: c_int = 141;
pub const VK_FORMAT_BC5_SNORM_BLOCK: c_int = 142;
pub const VK_FORMAT_BC6H_UFLOAT_BLOCK: c_int = 143;
pub const VK_FORMAT_BC6H_SFLOAT_BLOCK: c_int = 144;
pub const VK_FORMAT_BC7_UNORM_BLOCK: c_int = 145;
pub const VK_FORMAT_BC7_SRGB_BLOCK: c_int = 146;
pub const VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: c_int = 147;
pub const VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: c_int = 148;
pub const VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: c_int = 149;
pub const VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: c_int = 150;
pub const VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: c_int = 151;
pub const VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: c_int = 152;
pub const VK_FORMAT_EAC_R11_UNORM_BLOCK: c_int = 153;
pub const VK_FORMAT_EAC_R11_SNORM_BLOCK: c_int = 154;
pub const VK_FORMAT_EAC_R11G11_UNORM_BLOCK: c_int = 155;
pub const VK_FORMAT_EAC_R11G11_SNORM_BLOCK: c_int = 156;
pub const VK_FORMAT_ASTC_4x4_UNORM_BLOCK: c_int = 157;
pub const VK_FORMAT_ASTC_4x4_SRGB_BLOCK: c_int = 158;
pub const VK_FORMAT_ASTC_5x4_UNORM_BLOCK: c_int = 159;
pub const VK_FORMAT_ASTC_5x4_SRGB_BLOCK: c_int = 160;
pub const VK_FORMAT_ASTC_5x5_UNORM_BLOCK: c_int = 161;
pub const VK_FORMAT_ASTC_5x5_SRGB_BLOCK: c_int = 162;
pub const VK_FORMAT_ASTC_6x5_UNORM_BLOCK: c_int = 163;
pub const VK_FORMAT_ASTC_6x5_SRGB_BLOCK: c_int = 164;
pub const VK_FORMAT_ASTC_6x6_UNORM_BLOCK: c_int = 165;
pub const VK_FORMAT_ASTC_6x6_SRGB_BLOCK: c_int = 166;
pub const VK_FORMAT_ASTC_8x5_UNORM_BLOCK: c_int = 167;
pub const VK_FORMAT_ASTC_8x5_SRGB_BLOCK: c_int = 168;
pub const VK_FORMAT_ASTC_8x6_UNORM_BLOCK: c_int = 169;
pub const VK_FORMAT_ASTC_8x6_SRGB_BLOCK: c_int = 170;
pub const VK_FORMAT_ASTC_8x8_UNORM_BLOCK: c_int = 171;
pub const VK_FORMAT_ASTC_8x8_SRGB_BLOCK: c_int = 172;
pub const VK_FORMAT_ASTC_10x5_UNORM_BLOCK: c_int = 173;
pub const VK_FORMAT_ASTC_10x5_SRGB_BLOCK: c_int = 174;
pub const VK_FORMAT_ASTC_10x6_UNORM_BLOCK: c_int = 175;
pub const VK_FORMAT_ASTC_10x6_SRGB_BLOCK: c_int = 176;
pub const VK_FORMAT_ASTC_10x8_UNORM_BLOCK: c_int = 177;
pub const VK_FORMAT_ASTC_10x8_SRGB_BLOCK: c_int = 178;
pub const VK_FORMAT_ASTC_10x10_UNORM_BLOCK: c_int = 179;
pub const VK_FORMAT_ASTC_10x10_SRGB_BLOCK: c_int = 180;
pub const VK_FORMAT_ASTC_12x10_UNORM_BLOCK: c_int = 181;
pub const VK_FORMAT_ASTC_12x10_SRGB_BLOCK: c_int = 182;
pub const VK_FORMAT_ASTC_12x12_UNORM_BLOCK: c_int = 183;
pub const VK_FORMAT_ASTC_12x12_SRGB_BLOCK: c_int = 184;
pub const VK_FORMAT_G8B8G8R8_422_UNORM: c_int = 1000156000;
pub const VK_FORMAT_B8G8R8G8_422_UNORM: c_int = 1000156001;
pub const VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM: c_int = 1000156002;
pub const VK_FORMAT_G8_B8R8_2PLANE_420_UNORM: c_int = 1000156003;
pub const VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM: c_int = 1000156004;
pub const VK_FORMAT_G8_B8R8_2PLANE_422_UNORM: c_int = 1000156005;
pub const VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM: c_int = 1000156006;
pub const VK_FORMAT_R10X6_UNORM_PACK16: c_int = 1000156007;
pub const VK_FORMAT_R10X6G10X6_UNORM_2PACK16: c_int = 1000156008;
pub const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: c_int = 1000156009;
pub const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: c_int = 1000156010;
pub const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: c_int = 1000156011;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: c_int = 1000156012;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: c_int = 1000156013;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: c_int = 1000156014;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: c_int = 1000156015;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: c_int = 1000156016;
pub const VK_FORMAT_R12X4_UNORM_PACK16: c_int = 1000156017;
pub const VK_FORMAT_R12X4G12X4_UNORM_2PACK16: c_int = 1000156018;
pub const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: c_int = 1000156019;
pub const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: c_int = 1000156020;
pub const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: c_int = 1000156021;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: c_int = 1000156022;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: c_int = 1000156023;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: c_int = 1000156024;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: c_int = 1000156025;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: c_int = 1000156026;
pub const VK_FORMAT_G16B16G16R16_422_UNORM: c_int = 1000156027;
pub const VK_FORMAT_B16G16R16G16_422_UNORM: c_int = 1000156028;
pub const VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM: c_int = 1000156029;
pub const VK_FORMAT_G16_B16R16_2PLANE_420_UNORM: c_int = 1000156030;
pub const VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM: c_int = 1000156031;
pub const VK_FORMAT_G16_B16R16_2PLANE_422_UNORM: c_int = 1000156032;
pub const VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM: c_int = 1000156033;
pub const VK_FORMAT_G8_B8R8_2PLANE_444_UNORM: c_int = 1000330000;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16: c_int = 1000330001;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16: c_int = 1000330002;
pub const VK_FORMAT_G16_B16R16_2PLANE_444_UNORM: c_int = 1000330003;
pub const VK_FORMAT_A4R4G4B4_UNORM_PACK16: c_int = 1000340000;
pub const VK_FORMAT_A4B4G4R4_UNORM_PACK16: c_int = 1000340001;
pub const VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK: c_int = 1000066000;
pub const VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK: c_int = 1000066001;
pub const VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK: c_int = 1000066002;
pub const VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK: c_int = 1000066003;
pub const VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK: c_int = 1000066004;
pub const VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK: c_int = 1000066005;
pub const VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK: c_int = 1000066006;
pub const VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK: c_int = 1000066007;
pub const VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK: c_int = 1000066008;
pub const VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK: c_int = 1000066009;
pub const VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK: c_int = 1000066010;
pub const VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK: c_int = 1000066011;
pub const VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK: c_int = 1000066012;
pub const VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK: c_int = 1000066013;
pub const VK_FORMAT_A1B5G5R5_UNORM_PACK16: c_int = 1000470000;
pub const VK_FORMAT_A8_UNORM: c_int = 1000470001;
pub const VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: c_int = 1000054000;
pub const VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: c_int = 1000054001;
pub const VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: c_int = 1000054002;
pub const VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: c_int = 1000054003;
pub const VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: c_int = 1000054004;
pub const VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: c_int = 1000054005;
pub const VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: c_int = 1000054006;
pub const VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: c_int = 1000054007;
pub const VK_FORMAT_R16G16_SFIXED5_NV: c_int = 1000464000;
pub const VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT: c_int = 1000066000;
pub const VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT: c_int = 1000066001;
pub const VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT: c_int = 1000066002;
pub const VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT: c_int = 1000066003;
pub const VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT: c_int = 1000066004;
pub const VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT: c_int = 1000066005;
pub const VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT: c_int = 1000066006;
pub const VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT: c_int = 1000066007;
pub const VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT: c_int = 1000066008;
pub const VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT: c_int = 1000066009;
pub const VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT: c_int = 1000066010;
pub const VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT: c_int = 1000066011;
pub const VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT: c_int = 1000066012;
pub const VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT: c_int = 1000066013;
pub const VK_FORMAT_G8B8G8R8_422_UNORM_KHR: c_int = 1000156000;
pub const VK_FORMAT_B8G8R8G8_422_UNORM_KHR: c_int = 1000156001;
pub const VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR: c_int = 1000156002;
pub const VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR: c_int = 1000156003;
pub const VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR: c_int = 1000156004;
pub const VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR: c_int = 1000156005;
pub const VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR: c_int = 1000156006;
pub const VK_FORMAT_R10X6_UNORM_PACK16_KHR: c_int = 1000156007;
pub const VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR: c_int = 1000156008;
pub const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR: c_int = 1000156009;
pub const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR: c_int = 1000156010;
pub const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR: c_int = 1000156011;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156012;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156013;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156014;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156015;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR: c_int = 1000156016;
pub const VK_FORMAT_R12X4_UNORM_PACK16_KHR: c_int = 1000156017;
pub const VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR: c_int = 1000156018;
pub const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR: c_int = 1000156019;
pub const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR: c_int = 1000156020;
pub const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR: c_int = 1000156021;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156022;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156023;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156024;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156025;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR: c_int = 1000156026;
pub const VK_FORMAT_G16B16G16R16_422_UNORM_KHR: c_int = 1000156027;
pub const VK_FORMAT_B16G16R16G16_422_UNORM_KHR: c_int = 1000156028;
pub const VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR: c_int = 1000156029;
pub const VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR: c_int = 1000156030;
pub const VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR: c_int = 1000156031;
pub const VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR: c_int = 1000156032;
pub const VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR: c_int = 1000156033;
pub const VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT: c_int = 1000330000;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT: c_int = 1000330001;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT: c_int = 1000330002;
pub const VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT: c_int = 1000330003;
pub const VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT: c_int = 1000340000;
pub const VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT: c_int = 1000340001;
pub const VK_FORMAT_R16G16_S10_5_NV: c_int = 1000464000;
pub const VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR: c_int = 1000470000;
pub const VK_FORMAT_A8_UNORM_KHR: c_int = 1000470001;
pub const VK_FORMAT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFormat = c_uint;
pub const VkFormat = enum_VkFormat;
pub const VK_IMAGE_TILING_OPTIMAL: c_int = 0;
pub const VK_IMAGE_TILING_LINEAR: c_int = 1;
pub const VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT: c_int = 1000158000;
pub const VK_IMAGE_TILING_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageTiling = c_uint;
pub const VkImageTiling = enum_VkImageTiling;
pub const VK_IMAGE_TYPE_1D: c_int = 0;
pub const VK_IMAGE_TYPE_2D: c_int = 1;
pub const VK_IMAGE_TYPE_3D: c_int = 2;
pub const VK_IMAGE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageType = c_uint;
pub const VkImageType = enum_VkImageType;
pub const VK_PHYSICAL_DEVICE_TYPE_OTHER: c_int = 0;
pub const VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU: c_int = 1;
pub const VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU: c_int = 2;
pub const VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU: c_int = 3;
pub const VK_PHYSICAL_DEVICE_TYPE_CPU: c_int = 4;
pub const VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPhysicalDeviceType = c_uint;
pub const VkPhysicalDeviceType = enum_VkPhysicalDeviceType;
pub const VK_QUERY_TYPE_OCCLUSION: c_int = 0;
pub const VK_QUERY_TYPE_PIPELINE_STATISTICS: c_int = 1;
pub const VK_QUERY_TYPE_TIMESTAMP: c_int = 2;
pub const VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR: c_int = 1000023000;
pub const VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT: c_int = 1000028004;
pub const VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR: c_int = 1000116000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR: c_int = 1000150000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR: c_int = 1000150001;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV: c_int = 1000165000;
pub const VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL: c_int = 1000210000;
pub const VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR: c_int = 1000299000;
pub const VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT: c_int = 1000328000;
pub const VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT: c_int = 1000382000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR: c_int = 1000386000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR: c_int = 1000386001;
pub const VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT: c_int = 1000396000;
pub const VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT: c_int = 1000396001;
pub const VK_QUERY_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryType = c_uint;
pub const VkQueryType = enum_VkQueryType;
pub const VK_SHARING_MODE_EXCLUSIVE: c_int = 0;
pub const VK_SHARING_MODE_CONCURRENT: c_int = 1;
pub const VK_SHARING_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSharingMode = c_uint;
pub const VkSharingMode = enum_VkSharingMode;
pub const VK_COMPONENT_SWIZZLE_IDENTITY: c_int = 0;
pub const VK_COMPONENT_SWIZZLE_ZERO: c_int = 1;
pub const VK_COMPONENT_SWIZZLE_ONE: c_int = 2;
pub const VK_COMPONENT_SWIZZLE_R: c_int = 3;
pub const VK_COMPONENT_SWIZZLE_G: c_int = 4;
pub const VK_COMPONENT_SWIZZLE_B: c_int = 5;
pub const VK_COMPONENT_SWIZZLE_A: c_int = 6;
pub const VK_COMPONENT_SWIZZLE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkComponentSwizzle = c_uint;
pub const VkComponentSwizzle = enum_VkComponentSwizzle;
pub const VK_IMAGE_VIEW_TYPE_1D: c_int = 0;
pub const VK_IMAGE_VIEW_TYPE_2D: c_int = 1;
pub const VK_IMAGE_VIEW_TYPE_3D: c_int = 2;
pub const VK_IMAGE_VIEW_TYPE_CUBE: c_int = 3;
pub const VK_IMAGE_VIEW_TYPE_1D_ARRAY: c_int = 4;
pub const VK_IMAGE_VIEW_TYPE_2D_ARRAY: c_int = 5;
pub const VK_IMAGE_VIEW_TYPE_CUBE_ARRAY: c_int = 6;
pub const VK_IMAGE_VIEW_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageViewType = c_uint;
pub const VkImageViewType = enum_VkImageViewType;
pub const VK_BLEND_FACTOR_ZERO: c_int = 0;
pub const VK_BLEND_FACTOR_ONE: c_int = 1;
pub const VK_BLEND_FACTOR_SRC_COLOR: c_int = 2;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: c_int = 3;
pub const VK_BLEND_FACTOR_DST_COLOR: c_int = 4;
pub const VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR: c_int = 5;
pub const VK_BLEND_FACTOR_SRC_ALPHA: c_int = 6;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: c_int = 7;
pub const VK_BLEND_FACTOR_DST_ALPHA: c_int = 8;
pub const VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: c_int = 9;
pub const VK_BLEND_FACTOR_CONSTANT_COLOR: c_int = 10;
pub const VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: c_int = 11;
pub const VK_BLEND_FACTOR_CONSTANT_ALPHA: c_int = 12;
pub const VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: c_int = 13;
pub const VK_BLEND_FACTOR_SRC_ALPHA_SATURATE: c_int = 14;
pub const VK_BLEND_FACTOR_SRC1_COLOR: c_int = 15;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: c_int = 16;
pub const VK_BLEND_FACTOR_SRC1_ALPHA: c_int = 17;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: c_int = 18;
pub const VK_BLEND_FACTOR_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBlendFactor = c_uint;
pub const VkBlendFactor = enum_VkBlendFactor;
pub const VK_BLEND_OP_ADD: c_int = 0;
pub const VK_BLEND_OP_SUBTRACT: c_int = 1;
pub const VK_BLEND_OP_REVERSE_SUBTRACT: c_int = 2;
pub const VK_BLEND_OP_MIN: c_int = 3;
pub const VK_BLEND_OP_MAX: c_int = 4;
pub const VK_BLEND_OP_ZERO_EXT: c_int = 1000148000;
pub const VK_BLEND_OP_SRC_EXT: c_int = 1000148001;
pub const VK_BLEND_OP_DST_EXT: c_int = 1000148002;
pub const VK_BLEND_OP_SRC_OVER_EXT: c_int = 1000148003;
pub const VK_BLEND_OP_DST_OVER_EXT: c_int = 1000148004;
pub const VK_BLEND_OP_SRC_IN_EXT: c_int = 1000148005;
pub const VK_BLEND_OP_DST_IN_EXT: c_int = 1000148006;
pub const VK_BLEND_OP_SRC_OUT_EXT: c_int = 1000148007;
pub const VK_BLEND_OP_DST_OUT_EXT: c_int = 1000148008;
pub const VK_BLEND_OP_SRC_ATOP_EXT: c_int = 1000148009;
pub const VK_BLEND_OP_DST_ATOP_EXT: c_int = 1000148010;
pub const VK_BLEND_OP_XOR_EXT: c_int = 1000148011;
pub const VK_BLEND_OP_MULTIPLY_EXT: c_int = 1000148012;
pub const VK_BLEND_OP_SCREEN_EXT: c_int = 1000148013;
pub const VK_BLEND_OP_OVERLAY_EXT: c_int = 1000148014;
pub const VK_BLEND_OP_DARKEN_EXT: c_int = 1000148015;
pub const VK_BLEND_OP_LIGHTEN_EXT: c_int = 1000148016;
pub const VK_BLEND_OP_COLORDODGE_EXT: c_int = 1000148017;
pub const VK_BLEND_OP_COLORBURN_EXT: c_int = 1000148018;
pub const VK_BLEND_OP_HARDLIGHT_EXT: c_int = 1000148019;
pub const VK_BLEND_OP_SOFTLIGHT_EXT: c_int = 1000148020;
pub const VK_BLEND_OP_DIFFERENCE_EXT: c_int = 1000148021;
pub const VK_BLEND_OP_EXCLUSION_EXT: c_int = 1000148022;
pub const VK_BLEND_OP_INVERT_EXT: c_int = 1000148023;
pub const VK_BLEND_OP_INVERT_RGB_EXT: c_int = 1000148024;
pub const VK_BLEND_OP_LINEARDODGE_EXT: c_int = 1000148025;
pub const VK_BLEND_OP_LINEARBURN_EXT: c_int = 1000148026;
pub const VK_BLEND_OP_VIVIDLIGHT_EXT: c_int = 1000148027;
pub const VK_BLEND_OP_LINEARLIGHT_EXT: c_int = 1000148028;
pub const VK_BLEND_OP_PINLIGHT_EXT: c_int = 1000148029;
pub const VK_BLEND_OP_HARDMIX_EXT: c_int = 1000148030;
pub const VK_BLEND_OP_HSL_HUE_EXT: c_int = 1000148031;
pub const VK_BLEND_OP_HSL_SATURATION_EXT: c_int = 1000148032;
pub const VK_BLEND_OP_HSL_COLOR_EXT: c_int = 1000148033;
pub const VK_BLEND_OP_HSL_LUMINOSITY_EXT: c_int = 1000148034;
pub const VK_BLEND_OP_PLUS_EXT: c_int = 1000148035;
pub const VK_BLEND_OP_PLUS_CLAMPED_EXT: c_int = 1000148036;
pub const VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT: c_int = 1000148037;
pub const VK_BLEND_OP_PLUS_DARKER_EXT: c_int = 1000148038;
pub const VK_BLEND_OP_MINUS_EXT: c_int = 1000148039;
pub const VK_BLEND_OP_MINUS_CLAMPED_EXT: c_int = 1000148040;
pub const VK_BLEND_OP_CONTRAST_EXT: c_int = 1000148041;
pub const VK_BLEND_OP_INVERT_OVG_EXT: c_int = 1000148042;
pub const VK_BLEND_OP_RED_EXT: c_int = 1000148043;
pub const VK_BLEND_OP_GREEN_EXT: c_int = 1000148044;
pub const VK_BLEND_OP_BLUE_EXT: c_int = 1000148045;
pub const VK_BLEND_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBlendOp = c_uint;
pub const VkBlendOp = enum_VkBlendOp;
pub const VK_COMPARE_OP_NEVER: c_int = 0;
pub const VK_COMPARE_OP_LESS: c_int = 1;
pub const VK_COMPARE_OP_EQUAL: c_int = 2;
pub const VK_COMPARE_OP_LESS_OR_EQUAL: c_int = 3;
pub const VK_COMPARE_OP_GREATER: c_int = 4;
pub const VK_COMPARE_OP_NOT_EQUAL: c_int = 5;
pub const VK_COMPARE_OP_GREATER_OR_EQUAL: c_int = 6;
pub const VK_COMPARE_OP_ALWAYS: c_int = 7;
pub const VK_COMPARE_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCompareOp = c_uint;
pub const VkCompareOp = enum_VkCompareOp;
pub const VK_DYNAMIC_STATE_VIEWPORT: c_int = 0;
pub const VK_DYNAMIC_STATE_SCISSOR: c_int = 1;
pub const VK_DYNAMIC_STATE_LINE_WIDTH: c_int = 2;
pub const VK_DYNAMIC_STATE_DEPTH_BIAS: c_int = 3;
pub const VK_DYNAMIC_STATE_BLEND_CONSTANTS: c_int = 4;
pub const VK_DYNAMIC_STATE_DEPTH_BOUNDS: c_int = 5;
pub const VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK: c_int = 6;
pub const VK_DYNAMIC_STATE_STENCIL_WRITE_MASK: c_int = 7;
pub const VK_DYNAMIC_STATE_STENCIL_REFERENCE: c_int = 8;
pub const VK_DYNAMIC_STATE_CULL_MODE: c_int = 1000267000;
pub const VK_DYNAMIC_STATE_FRONT_FACE: c_int = 1000267001;
pub const VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY: c_int = 1000267002;
pub const VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT: c_int = 1000267003;
pub const VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT: c_int = 1000267004;
pub const VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE: c_int = 1000267005;
pub const VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE: c_int = 1000267006;
pub const VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE: c_int = 1000267007;
pub const VK_DYNAMIC_STATE_DEPTH_COMPARE_OP: c_int = 1000267008;
pub const VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE: c_int = 1000267009;
pub const VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE: c_int = 1000267010;
pub const VK_DYNAMIC_STATE_STENCIL_OP: c_int = 1000267011;
pub const VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE: c_int = 1000377001;
pub const VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE: c_int = 1000377002;
pub const VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE: c_int = 1000377004;
pub const VK_DYNAMIC_STATE_LINE_STIPPLE: c_int = 1000259000;
pub const VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV: c_int = 1000087000;
pub const VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT: c_int = 1000099000;
pub const VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT: c_int = 1000099001;
pub const VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT: c_int = 1000099002;
pub const VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT: c_int = 1000143000;
pub const VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR: c_int = 1000347000;
pub const VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV: c_int = 1000164004;
pub const VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV: c_int = 1000164006;
pub const VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV: c_int = 1000205000;
pub const VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV: c_int = 1000205001;
pub const VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR: c_int = 1000226000;
pub const VK_DYNAMIC_STATE_VERTEX_INPUT_EXT: c_int = 1000352000;
pub const VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT: c_int = 1000377000;
pub const VK_DYNAMIC_STATE_LOGIC_OP_EXT: c_int = 1000377003;
pub const VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT: c_int = 1000381000;
pub const VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT: c_int = 1000455003;
pub const VK_DYNAMIC_STATE_POLYGON_MODE_EXT: c_int = 1000455004;
pub const VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT: c_int = 1000455005;
pub const VK_DYNAMIC_STATE_SAMPLE_MASK_EXT: c_int = 1000455006;
pub const VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT: c_int = 1000455007;
pub const VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT: c_int = 1000455008;
pub const VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT: c_int = 1000455009;
pub const VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT: c_int = 1000455010;
pub const VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT: c_int = 1000455011;
pub const VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT: c_int = 1000455012;
pub const VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT: c_int = 1000455002;
pub const VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT: c_int = 1000455013;
pub const VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT: c_int = 1000455014;
pub const VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT: c_int = 1000455015;
pub const VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT: c_int = 1000455016;
pub const VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT: c_int = 1000455017;
pub const VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT: c_int = 1000455018;
pub const VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT: c_int = 1000455019;
pub const VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT: c_int = 1000455020;
pub const VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT: c_int = 1000455021;
pub const VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT: c_int = 1000455022;
pub const VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV: c_int = 1000455023;
pub const VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV: c_int = 1000455024;
pub const VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV: c_int = 1000455025;
pub const VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV: c_int = 1000455026;
pub const VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV: c_int = 1000455027;
pub const VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV: c_int = 1000455028;
pub const VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV: c_int = 1000455029;
pub const VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV: c_int = 1000455030;
pub const VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV: c_int = 1000455031;
pub const VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV: c_int = 1000455032;
pub const VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT: c_int = 1000524000;
pub const VK_DYNAMIC_STATE_DEPTH_CLAMP_RANGE_EXT: c_int = 1000582000;
pub const VK_DYNAMIC_STATE_LINE_STIPPLE_EXT: c_int = 1000259000;
pub const VK_DYNAMIC_STATE_CULL_MODE_EXT: c_int = 1000267000;
pub const VK_DYNAMIC_STATE_FRONT_FACE_EXT: c_int = 1000267001;
pub const VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT: c_int = 1000267002;
pub const VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT: c_int = 1000267003;
pub const VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT: c_int = 1000267004;
pub const VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT: c_int = 1000267005;
pub const VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT: c_int = 1000267006;
pub const VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT: c_int = 1000267007;
pub const VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT: c_int = 1000267008;
pub const VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT: c_int = 1000267009;
pub const VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT: c_int = 1000267010;
pub const VK_DYNAMIC_STATE_STENCIL_OP_EXT: c_int = 1000267011;
pub const VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT: c_int = 1000377001;
pub const VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT: c_int = 1000377002;
pub const VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT: c_int = 1000377004;
pub const VK_DYNAMIC_STATE_LINE_STIPPLE_KHR: c_int = 1000259000;
pub const VK_DYNAMIC_STATE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDynamicState = c_uint;
pub const VkDynamicState = enum_VkDynamicState;
pub const VK_FRONT_FACE_COUNTER_CLOCKWISE: c_int = 0;
pub const VK_FRONT_FACE_CLOCKWISE: c_int = 1;
pub const VK_FRONT_FACE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFrontFace = c_uint;
pub const VkFrontFace = enum_VkFrontFace;
pub const VK_VERTEX_INPUT_RATE_VERTEX: c_int = 0;
pub const VK_VERTEX_INPUT_RATE_INSTANCE: c_int = 1;
pub const VK_VERTEX_INPUT_RATE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkVertexInputRate = c_uint;
pub const VkVertexInputRate = enum_VkVertexInputRate;
pub const VK_PRIMITIVE_TOPOLOGY_POINT_LIST: c_int = 0;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_LIST: c_int = 1;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_STRIP: c_int = 2;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST: c_int = 3;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP: c_int = 4;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN: c_int = 5;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY: c_int = 6;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY: c_int = 7;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY: c_int = 8;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY: c_int = 9;
pub const VK_PRIMITIVE_TOPOLOGY_PATCH_LIST: c_int = 10;
pub const VK_PRIMITIVE_TOPOLOGY_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPrimitiveTopology = c_uint;
pub const VkPrimitiveTopology = enum_VkPrimitiveTopology;
pub const VK_POLYGON_MODE_FILL: c_int = 0;
pub const VK_POLYGON_MODE_LINE: c_int = 1;
pub const VK_POLYGON_MODE_POINT: c_int = 2;
pub const VK_POLYGON_MODE_FILL_RECTANGLE_NV: c_int = 1000153000;
pub const VK_POLYGON_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPolygonMode = c_uint;
pub const VkPolygonMode = enum_VkPolygonMode;
pub const VK_STENCIL_OP_KEEP: c_int = 0;
pub const VK_STENCIL_OP_ZERO: c_int = 1;
pub const VK_STENCIL_OP_REPLACE: c_int = 2;
pub const VK_STENCIL_OP_INCREMENT_AND_CLAMP: c_int = 3;
pub const VK_STENCIL_OP_DECREMENT_AND_CLAMP: c_int = 4;
pub const VK_STENCIL_OP_INVERT: c_int = 5;
pub const VK_STENCIL_OP_INCREMENT_AND_WRAP: c_int = 6;
pub const VK_STENCIL_OP_DECREMENT_AND_WRAP: c_int = 7;
pub const VK_STENCIL_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkStencilOp = c_uint;
pub const VkStencilOp = enum_VkStencilOp;
pub const VK_LOGIC_OP_CLEAR: c_int = 0;
pub const VK_LOGIC_OP_AND: c_int = 1;
pub const VK_LOGIC_OP_AND_REVERSE: c_int = 2;
pub const VK_LOGIC_OP_COPY: c_int = 3;
pub const VK_LOGIC_OP_AND_INVERTED: c_int = 4;
pub const VK_LOGIC_OP_NO_OP: c_int = 5;
pub const VK_LOGIC_OP_XOR: c_int = 6;
pub const VK_LOGIC_OP_OR: c_int = 7;
pub const VK_LOGIC_OP_NOR: c_int = 8;
pub const VK_LOGIC_OP_EQUIVALENT: c_int = 9;
pub const VK_LOGIC_OP_INVERT: c_int = 10;
pub const VK_LOGIC_OP_OR_REVERSE: c_int = 11;
pub const VK_LOGIC_OP_COPY_INVERTED: c_int = 12;
pub const VK_LOGIC_OP_OR_INVERTED: c_int = 13;
pub const VK_LOGIC_OP_NAND: c_int = 14;
pub const VK_LOGIC_OP_SET: c_int = 15;
pub const VK_LOGIC_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkLogicOp = c_uint;
pub const VkLogicOp = enum_VkLogicOp;
pub const VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK: c_int = 0;
pub const VK_BORDER_COLOR_INT_TRANSPARENT_BLACK: c_int = 1;
pub const VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK: c_int = 2;
pub const VK_BORDER_COLOR_INT_OPAQUE_BLACK: c_int = 3;
pub const VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE: c_int = 4;
pub const VK_BORDER_COLOR_INT_OPAQUE_WHITE: c_int = 5;
pub const VK_BORDER_COLOR_FLOAT_CUSTOM_EXT: c_int = 1000287003;
pub const VK_BORDER_COLOR_INT_CUSTOM_EXT: c_int = 1000287004;
pub const VK_BORDER_COLOR_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBorderColor = c_uint;
pub const VkBorderColor = enum_VkBorderColor;
pub const VK_FILTER_NEAREST: c_int = 0;
pub const VK_FILTER_LINEAR: c_int = 1;
pub const VK_FILTER_CUBIC_EXT: c_int = 1000015000;
pub const VK_FILTER_CUBIC_IMG: c_int = 1000015000;
pub const VK_FILTER_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFilter = c_uint;
pub const VkFilter = enum_VkFilter;
pub const VK_SAMPLER_ADDRESS_MODE_REPEAT: c_int = 0;
pub const VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT: c_int = 1;
pub const VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE: c_int = 2;
pub const VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER: c_int = 3;
pub const VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE: c_int = 4;
pub const VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR: c_int = 4;
pub const VK_SAMPLER_ADDRESS_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerAddressMode = c_uint;
pub const VkSamplerAddressMode = enum_VkSamplerAddressMode;
pub const VK_SAMPLER_MIPMAP_MODE_NEAREST: c_int = 0;
pub const VK_SAMPLER_MIPMAP_MODE_LINEAR: c_int = 1;
pub const VK_SAMPLER_MIPMAP_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerMipmapMode = c_uint;
pub const VkSamplerMipmapMode = enum_VkSamplerMipmapMode;
pub const VK_DESCRIPTOR_TYPE_SAMPLER: c_int = 0;
pub const VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: c_int = 1;
pub const VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE: c_int = 2;
pub const VK_DESCRIPTOR_TYPE_STORAGE_IMAGE: c_int = 3;
pub const VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER: c_int = 4;
pub const VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: c_int = 5;
pub const VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER: c_int = 6;
pub const VK_DESCRIPTOR_TYPE_STORAGE_BUFFER: c_int = 7;
pub const VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC: c_int = 8;
pub const VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: c_int = 9;
pub const VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: c_int = 10;
pub const VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK: c_int = 1000138000;
pub const VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR: c_int = 1000150000;
pub const VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV: c_int = 1000165000;
pub const VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM: c_int = 1000440000;
pub const VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM: c_int = 1000440001;
pub const VK_DESCRIPTOR_TYPE_MUTABLE_EXT: c_int = 1000351000;
pub const VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT: c_int = 1000138000;
pub const VK_DESCRIPTOR_TYPE_MUTABLE_VALVE: c_int = 1000351000;
pub const VK_DESCRIPTOR_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorType = c_uint;
pub const VkDescriptorType = enum_VkDescriptorType;
pub const VK_ATTACHMENT_LOAD_OP_LOAD: c_int = 0;
pub const VK_ATTACHMENT_LOAD_OP_CLEAR: c_int = 1;
pub const VK_ATTACHMENT_LOAD_OP_DONT_CARE: c_int = 2;
pub const VK_ATTACHMENT_LOAD_OP_NONE: c_int = 1000400000;
pub const VK_ATTACHMENT_LOAD_OP_NONE_EXT: c_int = 1000400000;
pub const VK_ATTACHMENT_LOAD_OP_NONE_KHR: c_int = 1000400000;
pub const VK_ATTACHMENT_LOAD_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAttachmentLoadOp = c_uint;
pub const VkAttachmentLoadOp = enum_VkAttachmentLoadOp;
pub const VK_ATTACHMENT_STORE_OP_STORE: c_int = 0;
pub const VK_ATTACHMENT_STORE_OP_DONT_CARE: c_int = 1;
pub const VK_ATTACHMENT_STORE_OP_NONE: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_NONE_KHR: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_NONE_QCOM: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_NONE_EXT: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAttachmentStoreOp = c_uint;
pub const VkAttachmentStoreOp = enum_VkAttachmentStoreOp;
pub const VK_PIPELINE_BIND_POINT_GRAPHICS: c_int = 0;
pub const VK_PIPELINE_BIND_POINT_COMPUTE: c_int = 1;
pub const VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR: c_int = 1000165000;
pub const VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI: c_int = 1000369003;
pub const VK_PIPELINE_BIND_POINT_RAY_TRACING_NV: c_int = 1000165000;
pub const VK_PIPELINE_BIND_POINT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineBindPoint = c_uint;
pub const VkPipelineBindPoint = enum_VkPipelineBindPoint;
pub const VK_COMMAND_BUFFER_LEVEL_PRIMARY: c_int = 0;
pub const VK_COMMAND_BUFFER_LEVEL_SECONDARY: c_int = 1;
pub const VK_COMMAND_BUFFER_LEVEL_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandBufferLevel = c_uint;
pub const VkCommandBufferLevel = enum_VkCommandBufferLevel;
pub const VK_INDEX_TYPE_UINT16: c_int = 0;
pub const VK_INDEX_TYPE_UINT32: c_int = 1;
pub const VK_INDEX_TYPE_UINT8: c_int = 1000265000;
pub const VK_INDEX_TYPE_NONE_KHR: c_int = 1000165000;
pub const VK_INDEX_TYPE_NONE_NV: c_int = 1000165000;
pub const VK_INDEX_TYPE_UINT8_EXT: c_int = 1000265000;
pub const VK_INDEX_TYPE_UINT8_KHR: c_int = 1000265000;
pub const VK_INDEX_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkIndexType = c_uint;
pub const VkIndexType = enum_VkIndexType;
pub const VK_SUBPASS_CONTENTS_INLINE: c_int = 0;
pub const VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS: c_int = 1;
pub const VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR: c_int = 1000451000;
pub const VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT: c_int = 1000451000;
pub const VK_SUBPASS_CONTENTS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubpassContents = c_uint;
pub const VkSubpassContents = enum_VkSubpassContents;
pub const VK_ACCESS_INDIRECT_COMMAND_READ_BIT: c_int = 1;
pub const VK_ACCESS_INDEX_READ_BIT: c_int = 2;
pub const VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT: c_int = 4;
pub const VK_ACCESS_UNIFORM_READ_BIT: c_int = 8;
pub const VK_ACCESS_INPUT_ATTACHMENT_READ_BIT: c_int = 16;
pub const VK_ACCESS_SHADER_READ_BIT: c_int = 32;
pub const VK_ACCESS_SHADER_WRITE_BIT: c_int = 64;
pub const VK_ACCESS_COLOR_ATTACHMENT_READ_BIT: c_int = 128;
pub const VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT: c_int = 256;
pub const VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT: c_int = 512;
pub const VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: c_int = 1024;
pub const VK_ACCESS_TRANSFER_READ_BIT: c_int = 2048;
pub const VK_ACCESS_TRANSFER_WRITE_BIT: c_int = 4096;
pub const VK_ACCESS_HOST_READ_BIT: c_int = 8192;
pub const VK_ACCESS_HOST_WRITE_BIT: c_int = 16384;
pub const VK_ACCESS_MEMORY_READ_BIT: c_int = 32768;
pub const VK_ACCESS_MEMORY_WRITE_BIT: c_int = 65536;
pub const VK_ACCESS_NONE: c_int = 0;
pub const VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: c_int = 33554432;
pub const VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: c_int = 67108864;
pub const VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: c_int = 134217728;
pub const VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT: c_int = 1048576;
pub const VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: c_int = 524288;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR: c_int = 2097152;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: c_int = 4194304;
pub const VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: c_int = 16777216;
pub const VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: c_int = 8388608;
pub const VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV: c_int = 131072;
pub const VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV: c_int = 262144;
pub const VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV: c_int = 8388608;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV: c_int = 2097152;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV: c_int = 4194304;
pub const VK_ACCESS_NONE_KHR: c_int = 0;
pub const VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_EXT: c_int = 131072;
pub const VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_EXT: c_int = 262144;
pub const VK_ACCESS_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAccessFlagBits = c_uint;
pub const VkAccessFlagBits = enum_VkAccessFlagBits;
pub const VkAccessFlags = VkFlags;
pub const VK_IMAGE_ASPECT_COLOR_BIT: c_int = 1;
pub const VK_IMAGE_ASPECT_DEPTH_BIT: c_int = 2;
pub const VK_IMAGE_ASPECT_STENCIL_BIT: c_int = 4;
pub const VK_IMAGE_ASPECT_METADATA_BIT: c_int = 8;
pub const VK_IMAGE_ASPECT_PLANE_0_BIT: c_int = 16;
pub const VK_IMAGE_ASPECT_PLANE_1_BIT: c_int = 32;
pub const VK_IMAGE_ASPECT_PLANE_2_BIT: c_int = 64;
pub const VK_IMAGE_ASPECT_NONE: c_int = 0;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT: c_int = 128;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT: c_int = 256;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT: c_int = 512;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT: c_int = 1024;
pub const VK_IMAGE_ASPECT_PLANE_0_BIT_KHR: c_int = 16;
pub const VK_IMAGE_ASPECT_PLANE_1_BIT_KHR: c_int = 32;
pub const VK_IMAGE_ASPECT_PLANE_2_BIT_KHR: c_int = 64;
pub const VK_IMAGE_ASPECT_NONE_KHR: c_int = 0;
pub const VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageAspectFlagBits = c_uint;
pub const VkImageAspectFlagBits = enum_VkImageAspectFlagBits;
pub const VkImageAspectFlags = VkFlags;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT: c_int = 1;
pub const VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT: c_int = 2;
pub const VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT: c_int = 4;
pub const VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT: c_int = 8;
pub const VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT: c_int = 16;
pub const VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT: c_int = 32;
pub const VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT: c_int = 64;
pub const VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT: c_int = 128;
pub const VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT: c_int = 256;
pub const VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT: c_int = 512;
pub const VK_FORMAT_FEATURE_BLIT_SRC_BIT: c_int = 1024;
pub const VK_FORMAT_FEATURE_BLIT_DST_BIT: c_int = 2048;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT: c_int = 4096;
pub const VK_FORMAT_FEATURE_TRANSFER_SRC_BIT: c_int = 16384;
pub const VK_FORMAT_FEATURE_TRANSFER_DST_BIT: c_int = 32768;
pub const VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT: c_int = 131072;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT: c_int = 262144;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT: c_int = 524288;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT: c_int = 1048576;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT: c_int = 2097152;
pub const VK_FORMAT_FEATURE_DISJOINT_BIT: c_int = 4194304;
pub const VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT: c_int = 8388608;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT: c_int = 65536;
pub const VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR: c_int = 33554432;
pub const VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR: c_int = 67108864;
pub const VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR: c_int = 536870912;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT: c_int = 8192;
pub const VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT: c_int = 16777216;
pub const VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 1073741824;
pub const VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR: c_int = 134217728;
pub const VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR: c_int = 268435456;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG: c_int = 8192;
pub const VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR: c_int = 16384;
pub const VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR: c_int = 32768;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT: c_int = 65536;
pub const VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: c_int = 131072;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR: c_int = 262144;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR: c_int = 524288;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR: c_int = 1048576;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR: c_int = 2097152;
pub const VK_FORMAT_FEATURE_DISJOINT_BIT_KHR: c_int = 4194304;
pub const VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR: c_int = 8388608;
pub const VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFormatFeatureFlagBits = c_uint;
pub const VkFormatFeatureFlagBits = enum_VkFormatFeatureFlagBits;
pub const VkFormatFeatureFlags = VkFlags;
pub const VK_IMAGE_CREATE_SPARSE_BINDING_BIT: c_int = 1;
pub const VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT: c_int = 2;
pub const VK_IMAGE_CREATE_SPARSE_ALIASED_BIT: c_int = 4;
pub const VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT: c_int = 8;
pub const VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT: c_int = 16;
pub const VK_IMAGE_CREATE_ALIAS_BIT: c_int = 1024;
pub const VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT: c_int = 64;
pub const VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT: c_int = 32;
pub const VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT: c_int = 128;
pub const VK_IMAGE_CREATE_EXTENDED_USAGE_BIT: c_int = 256;
pub const VK_IMAGE_CREATE_PROTECTED_BIT: c_int = 2048;
pub const VK_IMAGE_CREATE_DISJOINT_BIT: c_int = 512;
pub const VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV: c_int = 8192;
pub const VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT: c_int = 4096;
pub const VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT: c_int = 16384;
pub const VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT: c_int = 65536;
pub const VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT: c_int = 262144;
pub const VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT: c_int = 131072;
pub const VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM: c_int = 32768;
pub const VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR: c_int = 1048576;
pub const VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: c_int = 64;
pub const VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR: c_int = 32;
pub const VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR: c_int = 128;
pub const VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR: c_int = 256;
pub const VK_IMAGE_CREATE_DISJOINT_BIT_KHR: c_int = 512;
pub const VK_IMAGE_CREATE_ALIAS_BIT_KHR: c_int = 1024;
pub const VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageCreateFlagBits = c_uint;
pub const VkImageCreateFlagBits = enum_VkImageCreateFlagBits;
pub const VkImageCreateFlags = VkFlags;
pub const VK_SAMPLE_COUNT_1_BIT: c_int = 1;
pub const VK_SAMPLE_COUNT_2_BIT: c_int = 2;
pub const VK_SAMPLE_COUNT_4_BIT: c_int = 4;
pub const VK_SAMPLE_COUNT_8_BIT: c_int = 8;
pub const VK_SAMPLE_COUNT_16_BIT: c_int = 16;
pub const VK_SAMPLE_COUNT_32_BIT: c_int = 32;
pub const VK_SAMPLE_COUNT_64_BIT: c_int = 64;
pub const VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSampleCountFlagBits = c_uint;
pub const VkSampleCountFlagBits = enum_VkSampleCountFlagBits;
pub const VkSampleCountFlags = VkFlags;
pub const VK_IMAGE_USAGE_TRANSFER_SRC_BIT: c_int = 1;
pub const VK_IMAGE_USAGE_TRANSFER_DST_BIT: c_int = 2;
pub const VK_IMAGE_USAGE_SAMPLED_BIT: c_int = 4;
pub const VK_IMAGE_USAGE_STORAGE_BIT: c_int = 8;
pub const VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT: c_int = 16;
pub const VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: c_int = 32;
pub const VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT: c_int = 64;
pub const VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT: c_int = 128;
pub const VK_IMAGE_USAGE_HOST_TRANSFER_BIT: c_int = 4194304;
pub const VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR: c_int = 1024;
pub const VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR: c_int = 2048;
pub const VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR: c_int = 4096;
pub const VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT: c_int = 512;
pub const VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 256;
pub const VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR: c_int = 8192;
pub const VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR: c_int = 16384;
pub const VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR: c_int = 32768;
pub const VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: c_int = 524288;
pub const VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI: c_int = 262144;
pub const VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM: c_int = 1048576;
pub const VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM: c_int = 2097152;
pub const VK_IMAGE_USAGE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR: c_int = 33554432;
pub const VK_IMAGE_USAGE_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR: c_int = 67108864;
pub const VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV: c_int = 256;
pub const VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT: c_int = 4194304;
pub const VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageUsageFlagBits = c_uint;
pub const VkImageUsageFlagBits = enum_VkImageUsageFlagBits;
pub const VkImageUsageFlags = VkFlags;
pub const VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR: c_int = 1;
pub const VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkInstanceCreateFlagBits = c_uint;
pub const VkInstanceCreateFlagBits = enum_VkInstanceCreateFlagBits;
pub const VkInstanceCreateFlags = VkFlags;
pub const VK_MEMORY_HEAP_DEVICE_LOCAL_BIT: c_int = 1;
pub const VK_MEMORY_HEAP_MULTI_INSTANCE_BIT: c_int = 2;
pub const VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR: c_int = 2;
pub const VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryHeapFlagBits = c_uint;
pub const VkMemoryHeapFlagBits = enum_VkMemoryHeapFlagBits;
pub const VkMemoryHeapFlags = VkFlags;
pub const VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT: c_int = 1;
pub const VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT: c_int = 2;
pub const VK_MEMORY_PROPERTY_HOST_COHERENT_BIT: c_int = 4;
pub const VK_MEMORY_PROPERTY_HOST_CACHED_BIT: c_int = 8;
pub const VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT: c_int = 16;
pub const VK_MEMORY_PROPERTY_PROTECTED_BIT: c_int = 32;
pub const VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD: c_int = 64;
pub const VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD: c_int = 128;
pub const VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV: c_int = 256;
pub const VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryPropertyFlagBits = c_uint;
pub const VkMemoryPropertyFlagBits = enum_VkMemoryPropertyFlagBits;
pub const VkMemoryPropertyFlags = VkFlags;
pub const VK_QUEUE_GRAPHICS_BIT: c_int = 1;
pub const VK_QUEUE_COMPUTE_BIT: c_int = 2;
pub const VK_QUEUE_TRANSFER_BIT: c_int = 4;
pub const VK_QUEUE_SPARSE_BINDING_BIT: c_int = 8;
pub const VK_QUEUE_PROTECTED_BIT: c_int = 16;
pub const VK_QUEUE_VIDEO_DECODE_BIT_KHR: c_int = 32;
pub const VK_QUEUE_VIDEO_ENCODE_BIT_KHR: c_int = 64;
pub const VK_QUEUE_OPTICAL_FLOW_BIT_NV: c_int = 256;
pub const VK_QUEUE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueueFlagBits = c_uint;
pub const VkQueueFlagBits = enum_VkQueueFlagBits;
pub const VkQueueFlags = VkFlags;
pub const VkDeviceCreateFlags = VkFlags;
pub const VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT: c_int = 1;
pub const VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDeviceQueueCreateFlagBits = c_uint;
pub const VkDeviceQueueCreateFlagBits = enum_VkDeviceQueueCreateFlagBits;
pub const VkDeviceQueueCreateFlags = VkFlags;
pub const VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT: c_int = 1;
pub const VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT: c_int = 2;
pub const VK_PIPELINE_STAGE_VERTEX_INPUT_BIT: c_int = 4;
pub const VK_PIPELINE_STAGE_VERTEX_SHADER_BIT: c_int = 8;
pub const VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT: c_int = 16;
pub const VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT: c_int = 32;
pub const VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT: c_int = 64;
pub const VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT: c_int = 128;
pub const VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT: c_int = 256;
pub const VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT: c_int = 512;
pub const VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT: c_int = 1024;
pub const VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT: c_int = 2048;
pub const VK_PIPELINE_STAGE_TRANSFER_BIT: c_int = 4096;
pub const VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT: c_int = 8192;
pub const VK_PIPELINE_STAGE_HOST_BIT: c_int = 16384;
pub const VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT: c_int = 32768;
pub const VK_PIPELINE_STAGE_ALL_COMMANDS_BIT: c_int = 65536;
pub const VK_PIPELINE_STAGE_NONE: c_int = 0;
pub const VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT: c_int = 16777216;
pub const VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT: c_int = 262144;
pub const VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: c_int = 33554432;
pub const VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR: c_int = 2097152;
pub const VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT: c_int = 8388608;
pub const VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 4194304;
pub const VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV: c_int = 131072;
pub const VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT: c_int = 524288;
pub const VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT: c_int = 1048576;
pub const VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV: c_int = 4194304;
pub const VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV: c_int = 2097152;
pub const VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV: c_int = 33554432;
pub const VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV: c_int = 524288;
pub const VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV: c_int = 1048576;
pub const VK_PIPELINE_STAGE_NONE_KHR: c_int = 0;
pub const VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_EXT: c_int = 131072;
pub const VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineStageFlagBits = c_uint;
pub const VkPipelineStageFlagBits = enum_VkPipelineStageFlagBits;
pub const VkPipelineStageFlags = VkFlags;
pub const VK_MEMORY_MAP_PLACED_BIT_EXT: c_int = 1;
pub const VK_MEMORY_MAP_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryMapFlagBits = c_uint;
pub const VkMemoryMapFlagBits = enum_VkMemoryMapFlagBits;
pub const VkMemoryMapFlags = VkFlags;
pub const VK_SPARSE_MEMORY_BIND_METADATA_BIT: c_int = 1;
pub const VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSparseMemoryBindFlagBits = c_uint;
pub const VkSparseMemoryBindFlagBits = enum_VkSparseMemoryBindFlagBits;
pub const VkSparseMemoryBindFlags = VkFlags;
pub const VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT: c_int = 1;
pub const VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT: c_int = 2;
pub const VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT: c_int = 4;
pub const VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSparseImageFormatFlagBits = c_uint;
pub const VkSparseImageFormatFlagBits = enum_VkSparseImageFormatFlagBits;
pub const VkSparseImageFormatFlags = VkFlags;
pub const VK_FENCE_CREATE_SIGNALED_BIT: c_int = 1;
pub const VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFenceCreateFlagBits = c_uint;
pub const VkFenceCreateFlagBits = enum_VkFenceCreateFlagBits;
pub const VkFenceCreateFlags = VkFlags;
pub const VkSemaphoreCreateFlags = VkFlags;
pub const VK_EVENT_CREATE_DEVICE_ONLY_BIT: c_int = 1;
pub const VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR: c_int = 1;
pub const VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkEventCreateFlagBits = c_uint;
pub const VkEventCreateFlagBits = enum_VkEventCreateFlagBits;
pub const VkEventCreateFlags = VkFlags;
pub const VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT: c_int = 1;
pub const VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT: c_int = 2;
pub const VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT: c_int = 4;
pub const VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT: c_int = 8;
pub const VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT: c_int = 16;
pub const VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT: c_int = 32;
pub const VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT: c_int = 64;
pub const VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT: c_int = 128;
pub const VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT: c_int = 256;
pub const VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT: c_int = 512;
pub const VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT: c_int = 1024;
pub const VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT: c_int = 2048;
pub const VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT: c_int = 4096;
pub const VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI: c_int = 8192;
pub const VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryPipelineStatisticFlagBits = c_uint;
pub const VkQueryPipelineStatisticFlagBits = enum_VkQueryPipelineStatisticFlagBits;
pub const VkQueryPipelineStatisticFlags = VkFlags;
pub const VkQueryPoolCreateFlags = VkFlags;
pub const VK_QUERY_RESULT_64_BIT: c_int = 1;
pub const VK_QUERY_RESULT_WAIT_BIT: c_int = 2;
pub const VK_QUERY_RESULT_WITH_AVAILABILITY_BIT: c_int = 4;
pub const VK_QUERY_RESULT_PARTIAL_BIT: c_int = 8;
pub const VK_QUERY_RESULT_WITH_STATUS_BIT_KHR: c_int = 16;
pub const VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryResultFlagBits = c_uint;
pub const VkQueryResultFlagBits = enum_VkQueryResultFlagBits;
pub const VkQueryResultFlags = VkFlags;
pub const VK_BUFFER_CREATE_SPARSE_BINDING_BIT: c_int = 1;
pub const VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT: c_int = 2;
pub const VK_BUFFER_CREATE_SPARSE_ALIASED_BIT: c_int = 4;
pub const VK_BUFFER_CREATE_PROTECTED_BIT: c_int = 8;
pub const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: c_int = 16;
pub const VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT: c_int = 32;
pub const VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR: c_int = 64;
pub const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT: c_int = 16;
pub const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: c_int = 16;
pub const VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBufferCreateFlagBits = c_uint;
pub const VkBufferCreateFlagBits = enum_VkBufferCreateFlagBits;
pub const VkBufferCreateFlags = VkFlags;
pub const VK_BUFFER_USAGE_TRANSFER_SRC_BIT: c_int = 1;
pub const VK_BUFFER_USAGE_TRANSFER_DST_BIT: c_int = 2;
pub const VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT: c_int = 4;
pub const VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT: c_int = 8;
pub const VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT: c_int = 16;
pub const VK_BUFFER_USAGE_STORAGE_BUFFER_BIT: c_int = 32;
pub const VK_BUFFER_USAGE_INDEX_BUFFER_BIT: c_int = 64;
pub const VK_BUFFER_USAGE_VERTEX_BUFFER_BIT: c_int = 128;
pub const VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT: c_int = 256;
pub const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT: c_int = 131072;
pub const VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR: c_int = 8192;
pub const VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR: c_int = 16384;
pub const VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT: c_int = 2048;
pub const VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT: c_int = 4096;
pub const VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT: c_int = 512;
pub const VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR: c_int = 524288;
pub const VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR: c_int = 1048576;
pub const VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR: c_int = 1024;
pub const VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR: c_int = 32768;
pub const VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR: c_int = 65536;
pub const VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT: c_int = 2097152;
pub const VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT: c_int = 4194304;
pub const VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT: c_int = 67108864;
pub const VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT: c_int = 8388608;
pub const VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT: c_int = 16777216;
pub const VK_BUFFER_USAGE_RAY_TRACING_BIT_NV: c_int = 1024;
pub const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT: c_int = 131072;
pub const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR: c_int = 131072;
pub const VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBufferUsageFlagBits = c_uint;
pub const VkBufferUsageFlagBits = enum_VkBufferUsageFlagBits;
pub const VkBufferUsageFlags = VkFlags;
pub const VkBufferViewCreateFlags = VkFlags;
pub const VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT: c_int = 1;
pub const VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT: c_int = 4;
pub const VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT: c_int = 2;
pub const VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageViewCreateFlagBits = c_uint;
pub const VkImageViewCreateFlagBits = enum_VkImageViewCreateFlagBits;
pub const VkImageViewCreateFlags = VkFlags;
pub const VkShaderModuleCreateFlags = VkFlags;
pub const VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT: c_int = 1;
pub const VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCacheCreateFlagBits = c_uint;
pub const VkPipelineCacheCreateFlagBits = enum_VkPipelineCacheCreateFlagBits;
pub const VkPipelineCacheCreateFlags = VkFlags;
pub const VK_COLOR_COMPONENT_R_BIT: c_int = 1;
pub const VK_COLOR_COMPONENT_G_BIT: c_int = 2;
pub const VK_COLOR_COMPONENT_B_BIT: c_int = 4;
pub const VK_COLOR_COMPONENT_A_BIT: c_int = 8;
pub const VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkColorComponentFlagBits = c_uint;
pub const VkColorComponentFlagBits = enum_VkColorComponentFlagBits;
pub const VkColorComponentFlags = VkFlags;
pub const VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT: c_int = 1;
pub const VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT: c_int = 2;
pub const VK_PIPELINE_CREATE_DERIVATIVE_BIT: c_int = 4;
pub const VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT: c_int = 8;
pub const VK_PIPELINE_CREATE_DISPATCH_BASE_BIT: c_int = 16;
pub const VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT: c_int = 256;
pub const VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT: c_int = 512;
pub const VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT: c_int = 134217728;
pub const VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT: c_int = 1073741824;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR: c_int = 16384;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR: c_int = 32768;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR: c_int = 65536;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR: c_int = 131072;
pub const VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR: c_int = 4096;
pub const VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR: c_int = 8192;
pub const VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR: c_int = 524288;
pub const VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV: c_int = 32;
pub const VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: c_int = 4194304;
pub const VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 2097152;
pub const VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR: c_int = 64;
pub const VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR: c_int = 128;
pub const VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV: c_int = 262144;
pub const VK_PIPELINE_CREATE_LIBRARY_BIT_KHR: c_int = 2048;
pub const VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT: c_int = 536870912;
pub const VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT: c_int = 8388608;
pub const VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT: c_int = 1024;
pub const VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV: c_int = 1048576;
pub const VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: c_int = 33554432;
pub const VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: c_int = 67108864;
pub const VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT: c_int = 16777216;
pub const VK_PIPELINE_CREATE_DISPATCH_BASE: c_int = 16;
pub const VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR: c_int = 8;
pub const VK_PIPELINE_CREATE_DISPATCH_BASE_KHR: c_int = 16;
pub const VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: c_int = 4194304;
pub const VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 2097152;
pub const VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT: c_int = 256;
pub const VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT: c_int = 512;
pub const VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT: c_int = 134217728;
pub const VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT: c_int = 1073741824;
pub const VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCreateFlagBits = c_uint;
pub const VkPipelineCreateFlagBits = enum_VkPipelineCreateFlagBits;
pub const VkPipelineCreateFlags = VkFlags;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT: c_int = 1;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT: c_int = 2;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT: c_int = 2;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineShaderStageCreateFlagBits = c_uint;
pub const VkPipelineShaderStageCreateFlagBits = enum_VkPipelineShaderStageCreateFlagBits;
pub const VkPipelineShaderStageCreateFlags = VkFlags;
pub const VK_SHADER_STAGE_VERTEX_BIT: c_int = 1;
pub const VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT: c_int = 2;
pub const VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT: c_int = 4;
pub const VK_SHADER_STAGE_GEOMETRY_BIT: c_int = 8;
pub const VK_SHADER_STAGE_FRAGMENT_BIT: c_int = 16;
pub const VK_SHADER_STAGE_COMPUTE_BIT: c_int = 32;
pub const VK_SHADER_STAGE_ALL_GRAPHICS: c_int = 31;
pub const VK_SHADER_STAGE_ALL: c_int = 2147483647;
pub const VK_SHADER_STAGE_RAYGEN_BIT_KHR: c_int = 256;
pub const VK_SHADER_STAGE_ANY_HIT_BIT_KHR: c_int = 512;
pub const VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR: c_int = 1024;
pub const VK_SHADER_STAGE_MISS_BIT_KHR: c_int = 2048;
pub const VK_SHADER_STAGE_INTERSECTION_BIT_KHR: c_int = 4096;
pub const VK_SHADER_STAGE_CALLABLE_BIT_KHR: c_int = 8192;
pub const VK_SHADER_STAGE_TASK_BIT_EXT: c_int = 64;
pub const VK_SHADER_STAGE_MESH_BIT_EXT: c_int = 128;
pub const VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI: c_int = 16384;
pub const VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI: c_int = 524288;
pub const VK_SHADER_STAGE_RAYGEN_BIT_NV: c_int = 256;
pub const VK_SHADER_STAGE_ANY_HIT_BIT_NV: c_int = 512;
pub const VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV: c_int = 1024;
pub const VK_SHADER_STAGE_MISS_BIT_NV: c_int = 2048;
pub const VK_SHADER_STAGE_INTERSECTION_BIT_NV: c_int = 4096;
pub const VK_SHADER_STAGE_CALLABLE_BIT_NV: c_int = 8192;
pub const VK_SHADER_STAGE_TASK_BIT_NV: c_int = 64;
pub const VK_SHADER_STAGE_MESH_BIT_NV: c_int = 128;
pub const VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkShaderStageFlagBits = c_uint;
pub const VkShaderStageFlagBits = enum_VkShaderStageFlagBits;
pub const VK_CULL_MODE_NONE: c_int = 0;
pub const VK_CULL_MODE_FRONT_BIT: c_int = 1;
pub const VK_CULL_MODE_BACK_BIT: c_int = 2;
pub const VK_CULL_MODE_FRONT_AND_BACK: c_int = 3;
pub const VK_CULL_MODE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCullModeFlagBits = c_uint;
pub const VkCullModeFlagBits = enum_VkCullModeFlagBits;
pub const VkCullModeFlags = VkFlags;
pub const VkPipelineVertexInputStateCreateFlags = VkFlags;
pub const VkPipelineInputAssemblyStateCreateFlags = VkFlags;
pub const VkPipelineTessellationStateCreateFlags = VkFlags;
pub const VkPipelineViewportStateCreateFlags = VkFlags;
pub const VkPipelineRasterizationStateCreateFlags = VkFlags;
pub const VkPipelineMultisampleStateCreateFlags = VkFlags;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT: c_int = 2;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM: c_int = 1;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM: c_int = 2;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineDepthStencilStateCreateFlagBits = c_uint;
pub const VkPipelineDepthStencilStateCreateFlagBits = enum_VkPipelineDepthStencilStateCreateFlagBits;
pub const VkPipelineDepthStencilStateCreateFlags = VkFlags;
pub const VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM: c_int = 1;
pub const VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineColorBlendStateCreateFlagBits = c_uint;
pub const VkPipelineColorBlendStateCreateFlagBits = enum_VkPipelineColorBlendStateCreateFlagBits;
pub const VkPipelineColorBlendStateCreateFlags = VkFlags;
pub const VkPipelineDynamicStateCreateFlags = VkFlags;
pub const VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT: c_int = 2;
pub const VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineLayoutCreateFlagBits = c_uint;
pub const VkPipelineLayoutCreateFlagBits = enum_VkPipelineLayoutCreateFlagBits;
pub const VkPipelineLayoutCreateFlags = VkFlags;
pub const VkShaderStageFlags = VkFlags;
pub const VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT: c_int = 1;
pub const VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT: c_int = 2;
pub const VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT: c_int = 8;
pub const VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT: c_int = 4;
pub const VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM: c_int = 16;
pub const VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerCreateFlagBits = c_uint;
pub const VkSamplerCreateFlagBits = enum_VkSamplerCreateFlagBits;
pub const VkSamplerCreateFlags = VkFlags;
pub const VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT: c_int = 1;
pub const VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT: c_int = 2;
pub const VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT: c_int = 4;
pub const VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV: c_int = 8;
pub const VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV: c_int = 16;
pub const VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT: c_int = 2;
pub const VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE: c_int = 4;
pub const VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorPoolCreateFlagBits = c_uint;
pub const VkDescriptorPoolCreateFlagBits = enum_VkDescriptorPoolCreateFlagBits;
pub const VkDescriptorPoolCreateFlags = VkFlags;
pub const VkDescriptorPoolResetFlags = VkFlags;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT: c_int = 2;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT: c_int = 1;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT: c_int = 16;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT: c_int = 32;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV: c_int = 128;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT: c_int = 4;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV: c_int = 64;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR: c_int = 1;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT: c_int = 2;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE: c_int = 4;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorSetLayoutCreateFlagBits = c_uint;
pub const VkDescriptorSetLayoutCreateFlagBits = enum_VkDescriptorSetLayoutCreateFlagBits;
pub const VkDescriptorSetLayoutCreateFlags = VkFlags;
pub const VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT: c_int = 1;
pub const VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAttachmentDescriptionFlagBits = c_uint;
pub const VkAttachmentDescriptionFlagBits = enum_VkAttachmentDescriptionFlagBits;
pub const VkAttachmentDescriptionFlags = VkFlags;
pub const VK_DEPENDENCY_BY_REGION_BIT: c_int = 1;
pub const VK_DEPENDENCY_DEVICE_GROUP_BIT: c_int = 4;
pub const VK_DEPENDENCY_VIEW_LOCAL_BIT: c_int = 2;
pub const VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT: c_int = 8;
pub const VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR: c_int = 2;
pub const VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR: c_int = 4;
pub const VK_DEPENDENCY_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDependencyFlagBits = c_uint;
pub const VkDependencyFlagBits = enum_VkDependencyFlagBits;
pub const VkDependencyFlags = VkFlags;
pub const VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT: c_int = 1;
pub const VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR: c_int = 1;
pub const VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFramebufferCreateFlagBits = c_uint;
pub const VkFramebufferCreateFlagBits = enum_VkFramebufferCreateFlagBits;
pub const VkFramebufferCreateFlags = VkFlags;
pub const VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM: c_int = 2;
pub const VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkRenderPassCreateFlagBits = c_uint;
pub const VkRenderPassCreateFlagBits = enum_VkRenderPassCreateFlagBits;
pub const VkRenderPassCreateFlags = VkFlags;
pub const VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX: c_int = 1;
pub const VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX: c_int = 2;
pub const VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM: c_int = 4;
pub const VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM: c_int = 8;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT: c_int = 16;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT: c_int = 32;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT: c_int = 64;
pub const VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT: c_int = 128;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM: c_int = 16;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM: c_int = 32;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM: c_int = 64;
pub const VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubpassDescriptionFlagBits = c_uint;
pub const VkSubpassDescriptionFlagBits = enum_VkSubpassDescriptionFlagBits;
pub const VkSubpassDescriptionFlags = VkFlags;
pub const VK_COMMAND_POOL_CREATE_TRANSIENT_BIT: c_int = 1;
pub const VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT: c_int = 2;
pub const VK_COMMAND_POOL_CREATE_PROTECTED_BIT: c_int = 4;
pub const VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandPoolCreateFlagBits = c_uint;
pub const VkCommandPoolCreateFlagBits = enum_VkCommandPoolCreateFlagBits;
pub const VkCommandPoolCreateFlags = VkFlags;
pub const VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT: c_int = 1;
pub const VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandPoolResetFlagBits = c_uint;
pub const VkCommandPoolResetFlagBits = enum_VkCommandPoolResetFlagBits;
pub const VkCommandPoolResetFlags = VkFlags;
pub const VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT: c_int = 1;
pub const VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT: c_int = 2;
pub const VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT: c_int = 4;
pub const VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandBufferUsageFlagBits = c_uint;
pub const VkCommandBufferUsageFlagBits = enum_VkCommandBufferUsageFlagBits;
pub const VkCommandBufferUsageFlags = VkFlags;
pub const VK_QUERY_CONTROL_PRECISE_BIT: c_int = 1;
pub const VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryControlFlagBits = c_uint;
pub const VkQueryControlFlagBits = enum_VkQueryControlFlagBits;
pub const VkQueryControlFlags = VkFlags;
pub const VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT: c_int = 1;
pub const VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandBufferResetFlagBits = c_uint;
pub const VkCommandBufferResetFlagBits = enum_VkCommandBufferResetFlagBits;
pub const VkCommandBufferResetFlags = VkFlags;
pub const VK_STENCIL_FACE_FRONT_BIT: c_int = 1;
pub const VK_STENCIL_FACE_BACK_BIT: c_int = 2;
pub const VK_STENCIL_FACE_FRONT_AND_BACK: c_int = 3;
pub const VK_STENCIL_FRONT_AND_BACK: c_int = 3;
pub const VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkStencilFaceFlagBits = c_uint;
pub const VkStencilFaceFlagBits = enum_VkStencilFaceFlagBits;
pub const VkStencilFaceFlags = VkFlags;
pub const struct_VkExtent2D = extern struct {
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
};
pub const VkExtent2D = struct_VkExtent2D;
pub const struct_VkExtent3D = extern struct {
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    depth: u32 = @import("std").mem.zeroes(u32),
};
pub const VkExtent3D = struct_VkExtent3D;
pub const struct_VkOffset2D = extern struct {
    x: i32 = @import("std").mem.zeroes(i32),
    y: i32 = @import("std").mem.zeroes(i32),
};
pub const VkOffset2D = struct_VkOffset2D;
pub const struct_VkOffset3D = extern struct {
    x: i32 = @import("std").mem.zeroes(i32),
    y: i32 = @import("std").mem.zeroes(i32),
    z: i32 = @import("std").mem.zeroes(i32),
};
pub const VkOffset3D = struct_VkOffset3D;
pub const struct_VkRect2D = extern struct {
    offset: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    extent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkRect2D = struct_VkRect2D;
pub const struct_VkBaseInStructure = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: [*c]const struct_VkBaseInStructure = @import("std").mem.zeroes([*c]const struct_VkBaseInStructure),
};
pub const VkBaseInStructure = struct_VkBaseInStructure;
pub const struct_VkBaseOutStructure = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: [*c]struct_VkBaseOutStructure = @import("std").mem.zeroes([*c]struct_VkBaseOutStructure),
};
pub const VkBaseOutStructure = struct_VkBaseOutStructure;
pub const struct_VkBufferMemoryBarrier = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBufferMemoryBarrier = struct_VkBufferMemoryBarrier;
pub const struct_VkDispatchIndirectCommand = extern struct {
    x: u32 = @import("std").mem.zeroes(u32),
    y: u32 = @import("std").mem.zeroes(u32),
    z: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDispatchIndirectCommand = struct_VkDispatchIndirectCommand;
pub const struct_VkDrawIndexedIndirectCommand = extern struct {
    indexCount: u32 = @import("std").mem.zeroes(u32),
    instanceCount: u32 = @import("std").mem.zeroes(u32),
    firstIndex: u32 = @import("std").mem.zeroes(u32),
    vertexOffset: i32 = @import("std").mem.zeroes(i32),
    firstInstance: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDrawIndexedIndirectCommand = struct_VkDrawIndexedIndirectCommand;
pub const struct_VkDrawIndirectCommand = extern struct {
    vertexCount: u32 = @import("std").mem.zeroes(u32),
    instanceCount: u32 = @import("std").mem.zeroes(u32),
    firstVertex: u32 = @import("std").mem.zeroes(u32),
    firstInstance: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDrawIndirectCommand = struct_VkDrawIndirectCommand;
pub const struct_VkImageSubresourceRange = extern struct {
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    baseMipLevel: u32 = @import("std").mem.zeroes(u32),
    levelCount: u32 = @import("std").mem.zeroes(u32),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageSubresourceRange = struct_VkImageSubresourceRange;
pub const struct_VkImageMemoryBarrier = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    oldLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    newLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
};
pub const VkImageMemoryBarrier = struct_VkImageMemoryBarrier;
pub const struct_VkMemoryBarrier = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
};
pub const VkMemoryBarrier = struct_VkMemoryBarrier;
pub const struct_VkPipelineCacheHeaderVersionOne = extern struct {
    headerSize: u32 = @import("std").mem.zeroes(u32),
    headerVersion: VkPipelineCacheHeaderVersion = @import("std").mem.zeroes(VkPipelineCacheHeaderVersion),
    vendorID: u32 = @import("std").mem.zeroes(u32),
    deviceID: u32 = @import("std").mem.zeroes(u32),
    pipelineCacheUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const VkPipelineCacheHeaderVersionOne = struct_VkPipelineCacheHeaderVersionOne;
pub const PFN_vkAllocationFunction = ?*const fn (?*anyopaque, usize, usize, VkSystemAllocationScope) callconv(.C) ?*anyopaque;
pub const PFN_vkFreeFunction = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const PFN_vkInternalAllocationNotification = ?*const fn (?*anyopaque, usize, VkInternalAllocationType, VkSystemAllocationScope) callconv(.C) void;
pub const PFN_vkInternalFreeNotification = ?*const fn (?*anyopaque, usize, VkInternalAllocationType, VkSystemAllocationScope) callconv(.C) void;
pub const PFN_vkReallocationFunction = ?*const fn (?*anyopaque, ?*anyopaque, usize, usize, VkSystemAllocationScope) callconv(.C) ?*anyopaque;
pub const PFN_vkVoidFunction = ?*const fn () callconv(.C) void;
pub const struct_VkAllocationCallbacks = extern struct {
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pfnAllocation: PFN_vkAllocationFunction = @import("std").mem.zeroes(PFN_vkAllocationFunction),
    pfnReallocation: PFN_vkReallocationFunction = @import("std").mem.zeroes(PFN_vkReallocationFunction),
    pfnFree: PFN_vkFreeFunction = @import("std").mem.zeroes(PFN_vkFreeFunction),
    pfnInternalAllocation: PFN_vkInternalAllocationNotification = @import("std").mem.zeroes(PFN_vkInternalAllocationNotification),
    pfnInternalFree: PFN_vkInternalFreeNotification = @import("std").mem.zeroes(PFN_vkInternalFreeNotification),
};
pub const VkAllocationCallbacks = struct_VkAllocationCallbacks;
pub const struct_VkApplicationInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pApplicationName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    applicationVersion: u32 = @import("std").mem.zeroes(u32),
    pEngineName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    engineVersion: u32 = @import("std").mem.zeroes(u32),
    apiVersion: u32 = @import("std").mem.zeroes(u32),
};
pub const VkApplicationInfo = struct_VkApplicationInfo;
pub const struct_VkFormatProperties = extern struct {
    linearTilingFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
    optimalTilingFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
    bufferFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
};
pub const VkFormatProperties = struct_VkFormatProperties;
pub const struct_VkImageFormatProperties = extern struct {
    maxExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    maxMipLevels: u32 = @import("std").mem.zeroes(u32),
    maxArrayLayers: u32 = @import("std").mem.zeroes(u32),
    sampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxResourceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkImageFormatProperties = struct_VkImageFormatProperties;
pub const struct_VkInstanceCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkInstanceCreateFlags = @import("std").mem.zeroes(VkInstanceCreateFlags),
    pApplicationInfo: [*c]const VkApplicationInfo = @import("std").mem.zeroes([*c]const VkApplicationInfo),
    enabledLayerCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledLayerNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
    enabledExtensionCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledExtensionNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
};
pub const VkInstanceCreateInfo = struct_VkInstanceCreateInfo;
pub const struct_VkMemoryHeap = extern struct {
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkMemoryHeapFlags = @import("std").mem.zeroes(VkMemoryHeapFlags),
};
pub const VkMemoryHeap = struct_VkMemoryHeap;
pub const struct_VkMemoryType = extern struct {
    propertyFlags: VkMemoryPropertyFlags = @import("std").mem.zeroes(VkMemoryPropertyFlags),
    heapIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryType = struct_VkMemoryType;
pub const struct_VkPhysicalDeviceFeatures = extern struct {
    robustBufferAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fullDrawIndexUint32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    imageCubeArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
    independentBlend: VkBool32 = @import("std").mem.zeroes(VkBool32),
    geometryShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tessellationShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sampleRateShading: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dualSrcBlend: VkBool32 = @import("std").mem.zeroes(VkBool32),
    logicOp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiDrawIndirect: VkBool32 = @import("std").mem.zeroes(VkBool32),
    drawIndirectFirstInstance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthClamp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBiasClamp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fillModeNonSolid: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBounds: VkBool32 = @import("std").mem.zeroes(VkBool32),
    wideLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    largePoints: VkBool32 = @import("std").mem.zeroes(VkBool32),
    alphaToOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiViewport: VkBool32 = @import("std").mem.zeroes(VkBool32),
    samplerAnisotropy: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionETC2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionASTC_LDR: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionBC: VkBool32 = @import("std").mem.zeroes(VkBool32),
    occlusionQueryPrecise: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineStatisticsQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vertexPipelineStoresAndAtomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentStoresAndAtomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTessellationAndGeometryPointSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageGatherExtended: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageExtendedFormats: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageMultisample: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageReadWithoutFormat: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageWriteWithoutFormat: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderClipDistance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderCullDistance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderResourceResidency: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderResourceMinLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseBinding: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyImage2D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyImage3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency2Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency4Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency8Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency16Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyAliased: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variableMultisampleRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    inheritedQueries: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFeatures = struct_VkPhysicalDeviceFeatures;
pub const struct_VkPhysicalDeviceLimits = extern struct {
    maxImageDimension1D: u32 = @import("std").mem.zeroes(u32),
    maxImageDimension2D: u32 = @import("std").mem.zeroes(u32),
    maxImageDimension3D: u32 = @import("std").mem.zeroes(u32),
    maxImageDimensionCube: u32 = @import("std").mem.zeroes(u32),
    maxImageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    maxTexelBufferElements: u32 = @import("std").mem.zeroes(u32),
    maxUniformBufferRange: u32 = @import("std").mem.zeroes(u32),
    maxStorageBufferRange: u32 = @import("std").mem.zeroes(u32),
    maxPushConstantsSize: u32 = @import("std").mem.zeroes(u32),
    maxMemoryAllocationCount: u32 = @import("std").mem.zeroes(u32),
    maxSamplerAllocationCount: u32 = @import("std").mem.zeroes(u32),
    bufferImageGranularity: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sparseAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxBoundDescriptorSets: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorSamplers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxPerStageResources: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetSamplers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputAttributes: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputBindings: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputAttributeOffset: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputBindingStride: u32 = @import("std").mem.zeroes(u32),
    maxVertexOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationGenerationLevel: u32 = @import("std").mem.zeroes(u32),
    maxTessellationPatchSize: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlPerVertexInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlPerVertexOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlPerPatchOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlTotalOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationEvaluationInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationEvaluationOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxGeometryShaderInvocations: u32 = @import("std").mem.zeroes(u32),
    maxGeometryInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxGeometryOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxGeometryOutputVertices: u32 = @import("std").mem.zeroes(u32),
    maxGeometryTotalOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxFragmentInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxFragmentOutputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxFragmentDualSrcAttachments: u32 = @import("std").mem.zeroes(u32),
    maxFragmentCombinedOutputResources: u32 = @import("std").mem.zeroes(u32),
    maxComputeSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxComputeWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    subPixelPrecisionBits: u32 = @import("std").mem.zeroes(u32),
    subTexelPrecisionBits: u32 = @import("std").mem.zeroes(u32),
    mipmapPrecisionBits: u32 = @import("std").mem.zeroes(u32),
    maxDrawIndexedIndexValue: u32 = @import("std").mem.zeroes(u32),
    maxDrawIndirectCount: u32 = @import("std").mem.zeroes(u32),
    maxSamplerLodBias: f32 = @import("std").mem.zeroes(f32),
    maxSamplerAnisotropy: f32 = @import("std").mem.zeroes(f32),
    maxViewports: u32 = @import("std").mem.zeroes(u32),
    maxViewportDimensions: [2]u32 = @import("std").mem.zeroes([2]u32),
    viewportBoundsRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    viewportSubPixelBits: u32 = @import("std").mem.zeroes(u32),
    minMemoryMapAlignment: usize = @import("std").mem.zeroes(usize),
    minTexelBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minUniformBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minStorageBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minTexelOffset: i32 = @import("std").mem.zeroes(i32),
    maxTexelOffset: u32 = @import("std").mem.zeroes(u32),
    minTexelGatherOffset: i32 = @import("std").mem.zeroes(i32),
    maxTexelGatherOffset: u32 = @import("std").mem.zeroes(u32),
    minInterpolationOffset: f32 = @import("std").mem.zeroes(f32),
    maxInterpolationOffset: f32 = @import("std").mem.zeroes(f32),
    subPixelInterpolationOffsetBits: u32 = @import("std").mem.zeroes(u32),
    maxFramebufferWidth: u32 = @import("std").mem.zeroes(u32),
    maxFramebufferHeight: u32 = @import("std").mem.zeroes(u32),
    maxFramebufferLayers: u32 = @import("std").mem.zeroes(u32),
    framebufferColorSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    framebufferDepthSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    framebufferStencilSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxColorAttachments: u32 = @import("std").mem.zeroes(u32),
    sampledImageColorSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    sampledImageIntegerSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    sampledImageDepthSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    sampledImageStencilSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    storageImageSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxSampleMaskWords: u32 = @import("std").mem.zeroes(u32),
    timestampComputeAndGraphics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    timestampPeriod: f32 = @import("std").mem.zeroes(f32),
    maxClipDistances: u32 = @import("std").mem.zeroes(u32),
    maxCullDistances: u32 = @import("std").mem.zeroes(u32),
    maxCombinedClipAndCullDistances: u32 = @import("std").mem.zeroes(u32),
    discreteQueuePriorities: u32 = @import("std").mem.zeroes(u32),
    pointSizeRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    lineWidthRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    pointSizeGranularity: f32 = @import("std").mem.zeroes(f32),
    lineWidthGranularity: f32 = @import("std").mem.zeroes(f32),
    strictLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    standardSampleLocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
    optimalBufferCopyOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    optimalBufferCopyRowPitchAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    nonCoherentAtomSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceLimits = struct_VkPhysicalDeviceLimits;
pub const struct_VkPhysicalDeviceMemoryProperties = extern struct {
    memoryTypeCount: u32 = @import("std").mem.zeroes(u32),
    memoryTypes: [32]VkMemoryType = @import("std").mem.zeroes([32]VkMemoryType),
    memoryHeapCount: u32 = @import("std").mem.zeroes(u32),
    memoryHeaps: [16]VkMemoryHeap = @import("std").mem.zeroes([16]VkMemoryHeap),
};
pub const VkPhysicalDeviceMemoryProperties = struct_VkPhysicalDeviceMemoryProperties;
pub const struct_VkPhysicalDeviceSparseProperties = extern struct {
    residencyStandard2DBlockShape: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyStandard2DMultisampleBlockShape: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyStandard3DBlockShape: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyAlignedMipSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyNonResidentStrict: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSparseProperties = struct_VkPhysicalDeviceSparseProperties;
pub const struct_VkPhysicalDeviceProperties = extern struct {
    apiVersion: u32 = @import("std").mem.zeroes(u32),
    driverVersion: u32 = @import("std").mem.zeroes(u32),
    vendorID: u32 = @import("std").mem.zeroes(u32),
    deviceID: u32 = @import("std").mem.zeroes(u32),
    deviceType: VkPhysicalDeviceType = @import("std").mem.zeroes(VkPhysicalDeviceType),
    deviceName: [256]u8 = @import("std").mem.zeroes([256]u8),
    pipelineCacheUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    limits: VkPhysicalDeviceLimits = @import("std").mem.zeroes(VkPhysicalDeviceLimits),
    sparseProperties: VkPhysicalDeviceSparseProperties = @import("std").mem.zeroes(VkPhysicalDeviceSparseProperties),
};
pub const VkPhysicalDeviceProperties = struct_VkPhysicalDeviceProperties;
pub const struct_VkQueueFamilyProperties = extern struct {
    queueFlags: VkQueueFlags = @import("std").mem.zeroes(VkQueueFlags),
    queueCount: u32 = @import("std").mem.zeroes(u32),
    timestampValidBits: u32 = @import("std").mem.zeroes(u32),
    minImageTransferGranularity: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkQueueFamilyProperties = struct_VkQueueFamilyProperties;
pub const struct_VkDeviceQueueCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceQueueCreateFlags = @import("std").mem.zeroes(VkDeviceQueueCreateFlags),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    queueCount: u32 = @import("std").mem.zeroes(u32),
    pQueuePriorities: [*c]const f32 = @import("std").mem.zeroes([*c]const f32),
};
pub const VkDeviceQueueCreateInfo = struct_VkDeviceQueueCreateInfo;
pub const struct_VkDeviceCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceCreateFlags = @import("std").mem.zeroes(VkDeviceCreateFlags),
    queueCreateInfoCount: u32 = @import("std").mem.zeroes(u32),
    pQueueCreateInfos: [*c]const VkDeviceQueueCreateInfo = @import("std").mem.zeroes([*c]const VkDeviceQueueCreateInfo),
    enabledLayerCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledLayerNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
    enabledExtensionCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledExtensionNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
    pEnabledFeatures: [*c]const VkPhysicalDeviceFeatures = @import("std").mem.zeroes([*c]const VkPhysicalDeviceFeatures),
};
pub const VkDeviceCreateInfo = struct_VkDeviceCreateInfo;
pub const struct_VkExtensionProperties = extern struct {
    extensionName: [256]u8 = @import("std").mem.zeroes([256]u8),
    specVersion: u32 = @import("std").mem.zeroes(u32),
};
pub const VkExtensionProperties = struct_VkExtensionProperties;
pub const struct_VkLayerProperties = extern struct {
    layerName: [256]u8 = @import("std").mem.zeroes([256]u8),
    specVersion: u32 = @import("std").mem.zeroes(u32),
    implementationVersion: u32 = @import("std").mem.zeroes(u32),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
};
pub const VkLayerProperties = struct_VkLayerProperties;
pub const struct_VkSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    pWaitDstStageMask: [*c]const VkPipelineStageFlags = @import("std").mem.zeroes([*c]const VkPipelineStageFlags),
    commandBufferCount: u32 = @import("std").mem.zeroes(u32),
    pCommandBuffers: [*c]const VkCommandBuffer = @import("std").mem.zeroes([*c]const VkCommandBuffer),
    signalSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
};
pub const VkSubmitInfo = struct_VkSubmitInfo;
pub const struct_VkMappedMemoryRange = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkMappedMemoryRange = struct_VkMappedMemoryRange;
pub const struct_VkMemoryAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    allocationSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memoryTypeIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryAllocateInfo = struct_VkMemoryAllocateInfo;
pub const struct_VkMemoryRequirements = extern struct {
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    alignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memoryTypeBits: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryRequirements = struct_VkMemoryRequirements;
pub const struct_VkSparseMemoryBind = extern struct {
    resourceOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkSparseMemoryBindFlags = @import("std").mem.zeroes(VkSparseMemoryBindFlags),
};
pub const VkSparseMemoryBind = struct_VkSparseMemoryBind;
pub const struct_VkSparseBufferMemoryBindInfo = extern struct {
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    bindCount: u32 = @import("std").mem.zeroes(u32),
    pBinds: [*c]const VkSparseMemoryBind = @import("std").mem.zeroes([*c]const VkSparseMemoryBind),
};
pub const VkSparseBufferMemoryBindInfo = struct_VkSparseBufferMemoryBindInfo;
pub const struct_VkSparseImageOpaqueMemoryBindInfo = extern struct {
    image: VkImage = @import("std").mem.zeroes(VkImage),
    bindCount: u32 = @import("std").mem.zeroes(u32),
    pBinds: [*c]const VkSparseMemoryBind = @import("std").mem.zeroes([*c]const VkSparseMemoryBind),
};
pub const VkSparseImageOpaqueMemoryBindInfo = struct_VkSparseImageOpaqueMemoryBindInfo;
pub const struct_VkImageSubresource = extern struct {
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    mipLevel: u32 = @import("std").mem.zeroes(u32),
    arrayLayer: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageSubresource = struct_VkImageSubresource;
pub const struct_VkSparseImageMemoryBind = extern struct {
    subresource: VkImageSubresource = @import("std").mem.zeroes(VkImageSubresource),
    offset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkSparseMemoryBindFlags = @import("std").mem.zeroes(VkSparseMemoryBindFlags),
};
pub const VkSparseImageMemoryBind = struct_VkSparseImageMemoryBind;
pub const struct_VkSparseImageMemoryBindInfo = extern struct {
    image: VkImage = @import("std").mem.zeroes(VkImage),
    bindCount: u32 = @import("std").mem.zeroes(u32),
    pBinds: [*c]const VkSparseImageMemoryBind = @import("std").mem.zeroes([*c]const VkSparseImageMemoryBind),
};
pub const VkSparseImageMemoryBindInfo = struct_VkSparseImageMemoryBindInfo;
pub const struct_VkBindSparseInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    bufferBindCount: u32 = @import("std").mem.zeroes(u32),
    pBufferBinds: [*c]const VkSparseBufferMemoryBindInfo = @import("std").mem.zeroes([*c]const VkSparseBufferMemoryBindInfo),
    imageOpaqueBindCount: u32 = @import("std").mem.zeroes(u32),
    pImageOpaqueBinds: [*c]const VkSparseImageOpaqueMemoryBindInfo = @import("std").mem.zeroes([*c]const VkSparseImageOpaqueMemoryBindInfo),
    imageBindCount: u32 = @import("std").mem.zeroes(u32),
    pImageBinds: [*c]const VkSparseImageMemoryBindInfo = @import("std").mem.zeroes([*c]const VkSparseImageMemoryBindInfo),
    signalSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
};
pub const VkBindSparseInfo = struct_VkBindSparseInfo;
pub const struct_VkSparseImageFormatProperties = extern struct {
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    imageGranularity: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    flags: VkSparseImageFormatFlags = @import("std").mem.zeroes(VkSparseImageFormatFlags),
};
pub const VkSparseImageFormatProperties = struct_VkSparseImageFormatProperties;
pub const struct_VkSparseImageMemoryRequirements = extern struct {
    formatProperties: VkSparseImageFormatProperties = @import("std").mem.zeroes(VkSparseImageFormatProperties),
    imageMipTailFirstLod: u32 = @import("std").mem.zeroes(u32),
    imageMipTailSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    imageMipTailOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    imageMipTailStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkSparseImageMemoryRequirements = struct_VkSparseImageMemoryRequirements;
pub const struct_VkFenceCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkFenceCreateFlags = @import("std").mem.zeroes(VkFenceCreateFlags),
};
pub const VkFenceCreateInfo = struct_VkFenceCreateInfo;
pub const struct_VkSemaphoreCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSemaphoreCreateFlags = @import("std").mem.zeroes(VkSemaphoreCreateFlags),
};
pub const VkSemaphoreCreateInfo = struct_VkSemaphoreCreateInfo;
pub const struct_VkEventCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkEventCreateFlags = @import("std").mem.zeroes(VkEventCreateFlags),
};
pub const VkEventCreateInfo = struct_VkEventCreateInfo;
pub const struct_VkQueryPoolCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkQueryPoolCreateFlags = @import("std").mem.zeroes(VkQueryPoolCreateFlags),
    queryType: VkQueryType = @import("std").mem.zeroes(VkQueryType),
    queryCount: u32 = @import("std").mem.zeroes(u32),
    pipelineStatistics: VkQueryPipelineStatisticFlags = @import("std").mem.zeroes(VkQueryPipelineStatisticFlags),
};
pub const VkQueryPoolCreateInfo = struct_VkQueryPoolCreateInfo;
pub const struct_VkBufferCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkBufferCreateFlags = @import("std").mem.zeroes(VkBufferCreateFlags),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    usage: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
    sharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkBufferCreateInfo = struct_VkBufferCreateInfo;
pub const struct_VkBufferViewCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkBufferViewCreateFlags = @import("std").mem.zeroes(VkBufferViewCreateFlags),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    range: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBufferViewCreateInfo = struct_VkBufferViewCreateInfo;
pub const struct_VkImageCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
    imageType: VkImageType = @import("std").mem.zeroes(VkImageType),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    mipLevels: u32 = @import("std").mem.zeroes(u32),
    arrayLayers: u32 = @import("std").mem.zeroes(u32),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    tiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    sharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    initialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkImageCreateInfo = struct_VkImageCreateInfo;
pub const struct_VkSubresourceLayout = extern struct {
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    rowPitch: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    arrayPitch: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    depthPitch: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkSubresourceLayout = struct_VkSubresourceLayout;
pub const struct_VkComponentMapping = extern struct {
    r: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
    g: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
    b: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
    a: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
};
pub const VkComponentMapping = struct_VkComponentMapping;
pub const struct_VkImageViewCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageViewCreateFlags = @import("std").mem.zeroes(VkImageViewCreateFlags),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    viewType: VkImageViewType = @import("std").mem.zeroes(VkImageViewType),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    components: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
};
pub const VkImageViewCreateInfo = struct_VkImageViewCreateInfo;
pub const struct_VkShaderModuleCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkShaderModuleCreateFlags = @import("std").mem.zeroes(VkShaderModuleCreateFlags),
    codeSize: usize = @import("std").mem.zeroes(usize),
    pCode: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkShaderModuleCreateInfo = struct_VkShaderModuleCreateInfo;
pub const struct_VkPipelineCacheCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCacheCreateFlags = @import("std").mem.zeroes(VkPipelineCacheCreateFlags),
    initialDataSize: usize = @import("std").mem.zeroes(usize),
    pInitialData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkPipelineCacheCreateInfo = struct_VkPipelineCacheCreateInfo;
pub const struct_VkSpecializationMapEntry = extern struct {
    constantID: u32 = @import("std").mem.zeroes(u32),
    offset: u32 = @import("std").mem.zeroes(u32),
    size: usize = @import("std").mem.zeroes(usize),
};
pub const VkSpecializationMapEntry = struct_VkSpecializationMapEntry;
pub const struct_VkSpecializationInfo = extern struct {
    mapEntryCount: u32 = @import("std").mem.zeroes(u32),
    pMapEntries: [*c]const VkSpecializationMapEntry = @import("std").mem.zeroes([*c]const VkSpecializationMapEntry),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkSpecializationInfo = struct_VkSpecializationInfo;
pub const struct_VkPipelineShaderStageCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineShaderStageCreateFlags = @import("std").mem.zeroes(VkPipelineShaderStageCreateFlags),
    stage: VkShaderStageFlagBits = @import("std").mem.zeroes(VkShaderStageFlagBits),
    module: VkShaderModule = @import("std").mem.zeroes(VkShaderModule),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    pSpecializationInfo: [*c]const VkSpecializationInfo = @import("std").mem.zeroes([*c]const VkSpecializationInfo),
};
pub const VkPipelineShaderStageCreateInfo = struct_VkPipelineShaderStageCreateInfo;
pub const struct_VkComputePipelineCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stage: VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes(VkPipelineShaderStageCreateInfo),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
};
pub const VkComputePipelineCreateInfo = struct_VkComputePipelineCreateInfo;
pub const struct_VkVertexInputBindingDescription = extern struct {
    binding: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
    inputRate: VkVertexInputRate = @import("std").mem.zeroes(VkVertexInputRate),
};
pub const VkVertexInputBindingDescription = struct_VkVertexInputBindingDescription;
pub const struct_VkVertexInputAttributeDescription = extern struct {
    location: u32 = @import("std").mem.zeroes(u32),
    binding: u32 = @import("std").mem.zeroes(u32),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    offset: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVertexInputAttributeDescription = struct_VkVertexInputAttributeDescription;
pub const struct_VkPipelineVertexInputStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineVertexInputStateCreateFlags = @import("std").mem.zeroes(VkPipelineVertexInputStateCreateFlags),
    vertexBindingDescriptionCount: u32 = @import("std").mem.zeroes(u32),
    pVertexBindingDescriptions: [*c]const VkVertexInputBindingDescription = @import("std").mem.zeroes([*c]const VkVertexInputBindingDescription),
    vertexAttributeDescriptionCount: u32 = @import("std").mem.zeroes(u32),
    pVertexAttributeDescriptions: [*c]const VkVertexInputAttributeDescription = @import("std").mem.zeroes([*c]const VkVertexInputAttributeDescription),
};
pub const VkPipelineVertexInputStateCreateInfo = struct_VkPipelineVertexInputStateCreateInfo;
pub const struct_VkPipelineInputAssemblyStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineInputAssemblyStateCreateFlags = @import("std").mem.zeroes(VkPipelineInputAssemblyStateCreateFlags),
    topology: VkPrimitiveTopology = @import("std").mem.zeroes(VkPrimitiveTopology),
    primitiveRestartEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPipelineInputAssemblyStateCreateInfo = struct_VkPipelineInputAssemblyStateCreateInfo;
pub const struct_VkPipelineTessellationStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineTessellationStateCreateFlags = @import("std").mem.zeroes(VkPipelineTessellationStateCreateFlags),
    patchControlPoints: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineTessellationStateCreateInfo = struct_VkPipelineTessellationStateCreateInfo;
pub const struct_VkViewport = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    width: f32 = @import("std").mem.zeroes(f32),
    height: f32 = @import("std").mem.zeroes(f32),
    minDepth: f32 = @import("std").mem.zeroes(f32),
    maxDepth: f32 = @import("std").mem.zeroes(f32),
};
pub const VkViewport = struct_VkViewport;
pub const struct_VkPipelineViewportStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineViewportStateCreateFlags = @import("std").mem.zeroes(VkPipelineViewportStateCreateFlags),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pViewports: [*c]const VkViewport = @import("std").mem.zeroes([*c]const VkViewport),
    scissorCount: u32 = @import("std").mem.zeroes(u32),
    pScissors: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkPipelineViewportStateCreateInfo = struct_VkPipelineViewportStateCreateInfo;
pub const struct_VkPipelineRasterizationStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationStateCreateFlags = @import("std").mem.zeroes(VkPipelineRasterizationStateCreateFlags),
    depthClampEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizerDiscardEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    polygonMode: VkPolygonMode = @import("std").mem.zeroes(VkPolygonMode),
    cullMode: VkCullModeFlags = @import("std").mem.zeroes(VkCullModeFlags),
    frontFace: VkFrontFace = @import("std").mem.zeroes(VkFrontFace),
    depthBiasEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBiasConstantFactor: f32 = @import("std").mem.zeroes(f32),
    depthBiasClamp: f32 = @import("std").mem.zeroes(f32),
    depthBiasSlopeFactor: f32 = @import("std").mem.zeroes(f32),
    lineWidth: f32 = @import("std").mem.zeroes(f32),
};
pub const VkPipelineRasterizationStateCreateInfo = struct_VkPipelineRasterizationStateCreateInfo;
pub const struct_VkPipelineMultisampleStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineMultisampleStateCreateFlags = @import("std").mem.zeroes(VkPipelineMultisampleStateCreateFlags),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    sampleShadingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minSampleShading: f32 = @import("std").mem.zeroes(f32),
    pSampleMask: [*c]const VkSampleMask = @import("std").mem.zeroes([*c]const VkSampleMask),
    alphaToCoverageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    alphaToOneEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPipelineMultisampleStateCreateInfo = struct_VkPipelineMultisampleStateCreateInfo;
pub const struct_VkStencilOpState = extern struct {
    failOp: VkStencilOp = @import("std").mem.zeroes(VkStencilOp),
    passOp: VkStencilOp = @import("std").mem.zeroes(VkStencilOp),
    depthFailOp: VkStencilOp = @import("std").mem.zeroes(VkStencilOp),
    compareOp: VkCompareOp = @import("std").mem.zeroes(VkCompareOp),
    compareMask: u32 = @import("std").mem.zeroes(u32),
    writeMask: u32 = @import("std").mem.zeroes(u32),
    reference: u32 = @import("std").mem.zeroes(u32),
};
pub const VkStencilOpState = struct_VkStencilOpState;
pub const struct_VkPipelineDepthStencilStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineDepthStencilStateCreateFlags = @import("std").mem.zeroes(VkPipelineDepthStencilStateCreateFlags),
    depthTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthWriteEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthCompareOp: VkCompareOp = @import("std").mem.zeroes(VkCompareOp),
    depthBoundsTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stencilTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    front: VkStencilOpState = @import("std").mem.zeroes(VkStencilOpState),
    back: VkStencilOpState = @import("std").mem.zeroes(VkStencilOpState),
    minDepthBounds: f32 = @import("std").mem.zeroes(f32),
    maxDepthBounds: f32 = @import("std").mem.zeroes(f32),
};
pub const VkPipelineDepthStencilStateCreateInfo = struct_VkPipelineDepthStencilStateCreateInfo;
pub const struct_VkPipelineColorBlendAttachmentState = extern struct {
    blendEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    srcColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    colorBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    srcAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    alphaBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    colorWriteMask: VkColorComponentFlags = @import("std").mem.zeroes(VkColorComponentFlags),
};
pub const VkPipelineColorBlendAttachmentState = struct_VkPipelineColorBlendAttachmentState;
pub const struct_VkPipelineColorBlendStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineColorBlendStateCreateFlags = @import("std").mem.zeroes(VkPipelineColorBlendStateCreateFlags),
    logicOpEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    logicOp: VkLogicOp = @import("std").mem.zeroes(VkLogicOp),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkPipelineColorBlendAttachmentState = @import("std").mem.zeroes([*c]const VkPipelineColorBlendAttachmentState),
    blendConstants: [4]f32 = @import("std").mem.zeroes([4]f32),
};
pub const VkPipelineColorBlendStateCreateInfo = struct_VkPipelineColorBlendStateCreateInfo;
pub const struct_VkPipelineDynamicStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineDynamicStateCreateFlags = @import("std").mem.zeroes(VkPipelineDynamicStateCreateFlags),
    dynamicStateCount: u32 = @import("std").mem.zeroes(u32),
    pDynamicStates: [*c]const VkDynamicState = @import("std").mem.zeroes([*c]const VkDynamicState),
};
pub const VkPipelineDynamicStateCreateInfo = struct_VkPipelineDynamicStateCreateInfo;
pub const struct_VkGraphicsPipelineCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    pVertexInputState: [*c]const VkPipelineVertexInputStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineVertexInputStateCreateInfo),
    pInputAssemblyState: [*c]const VkPipelineInputAssemblyStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineInputAssemblyStateCreateInfo),
    pTessellationState: [*c]const VkPipelineTessellationStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineTessellationStateCreateInfo),
    pViewportState: [*c]const VkPipelineViewportStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineViewportStateCreateInfo),
    pRasterizationState: [*c]const VkPipelineRasterizationStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineRasterizationStateCreateInfo),
    pMultisampleState: [*c]const VkPipelineMultisampleStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineMultisampleStateCreateInfo),
    pDepthStencilState: [*c]const VkPipelineDepthStencilStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineDepthStencilStateCreateInfo),
    pColorBlendState: [*c]const VkPipelineColorBlendStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineColorBlendStateCreateInfo),
    pDynamicState: [*c]const VkPipelineDynamicStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineDynamicStateCreateInfo),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    subpass: u32 = @import("std").mem.zeroes(u32),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
};
pub const VkGraphicsPipelineCreateInfo = struct_VkGraphicsPipelineCreateInfo;
pub const struct_VkPushConstantRange = extern struct {
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    offset: u32 = @import("std").mem.zeroes(u32),
    size: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPushConstantRange = struct_VkPushConstantRange;
pub const struct_VkPipelineLayoutCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineLayoutCreateFlags = @import("std").mem.zeroes(VkPipelineLayoutCreateFlags),
    setLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pSetLayouts: [*c]const VkDescriptorSetLayout = @import("std").mem.zeroes([*c]const VkDescriptorSetLayout),
    pushConstantRangeCount: u32 = @import("std").mem.zeroes(u32),
    pPushConstantRanges: [*c]const VkPushConstantRange = @import("std").mem.zeroes([*c]const VkPushConstantRange),
};
pub const VkPipelineLayoutCreateInfo = struct_VkPipelineLayoutCreateInfo;
pub const struct_VkSamplerCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSamplerCreateFlags = @import("std").mem.zeroes(VkSamplerCreateFlags),
    magFilter: VkFilter = @import("std").mem.zeroes(VkFilter),
    minFilter: VkFilter = @import("std").mem.zeroes(VkFilter),
    mipmapMode: VkSamplerMipmapMode = @import("std").mem.zeroes(VkSamplerMipmapMode),
    addressModeU: VkSamplerAddressMode = @import("std").mem.zeroes(VkSamplerAddressMode),
    addressModeV: VkSamplerAddressMode = @import("std").mem.zeroes(VkSamplerAddressMode),
    addressModeW: VkSamplerAddressMode = @import("std").mem.zeroes(VkSamplerAddressMode),
    mipLodBias: f32 = @import("std").mem.zeroes(f32),
    anisotropyEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxAnisotropy: f32 = @import("std").mem.zeroes(f32),
    compareEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    compareOp: VkCompareOp = @import("std").mem.zeroes(VkCompareOp),
    minLod: f32 = @import("std").mem.zeroes(f32),
    maxLod: f32 = @import("std").mem.zeroes(f32),
    borderColor: VkBorderColor = @import("std").mem.zeroes(VkBorderColor),
    unnormalizedCoordinates: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSamplerCreateInfo = struct_VkSamplerCreateInfo;
pub const struct_VkCopyDescriptorSet = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSet: VkDescriptorSet = @import("std").mem.zeroes(VkDescriptorSet),
    srcBinding: u32 = @import("std").mem.zeroes(u32),
    srcArrayElement: u32 = @import("std").mem.zeroes(u32),
    dstSet: VkDescriptorSet = @import("std").mem.zeroes(VkDescriptorSet),
    dstBinding: u32 = @import("std").mem.zeroes(u32),
    dstArrayElement: u32 = @import("std").mem.zeroes(u32),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCopyDescriptorSet = struct_VkCopyDescriptorSet;
pub const struct_VkDescriptorBufferInfo = extern struct {
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    range: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkDescriptorBufferInfo = struct_VkDescriptorBufferInfo;
pub const struct_VkDescriptorImageInfo = extern struct {
    sampler: VkSampler = @import("std").mem.zeroes(VkSampler),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkDescriptorImageInfo = struct_VkDescriptorImageInfo;
pub const struct_VkDescriptorPoolSize = extern struct {
    type: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorPoolSize = struct_VkDescriptorPoolSize;
pub const struct_VkDescriptorPoolCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDescriptorPoolCreateFlags = @import("std").mem.zeroes(VkDescriptorPoolCreateFlags),
    maxSets: u32 = @import("std").mem.zeroes(u32),
    poolSizeCount: u32 = @import("std").mem.zeroes(u32),
    pPoolSizes: [*c]const VkDescriptorPoolSize = @import("std").mem.zeroes([*c]const VkDescriptorPoolSize),
};
pub const VkDescriptorPoolCreateInfo = struct_VkDescriptorPoolCreateInfo;
pub const struct_VkDescriptorSetAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorPool: VkDescriptorPool = @import("std").mem.zeroes(VkDescriptorPool),
    descriptorSetCount: u32 = @import("std").mem.zeroes(u32),
    pSetLayouts: [*c]const VkDescriptorSetLayout = @import("std").mem.zeroes([*c]const VkDescriptorSetLayout),
};
pub const VkDescriptorSetAllocateInfo = struct_VkDescriptorSetAllocateInfo;
pub const struct_VkDescriptorSetLayoutBinding = extern struct {
    binding: u32 = @import("std").mem.zeroes(u32),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    pImmutableSamplers: [*c]const VkSampler = @import("std").mem.zeroes([*c]const VkSampler),
};
pub const VkDescriptorSetLayoutBinding = struct_VkDescriptorSetLayoutBinding;
pub const struct_VkDescriptorSetLayoutCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDescriptorSetLayoutCreateFlags = @import("std").mem.zeroes(VkDescriptorSetLayoutCreateFlags),
    bindingCount: u32 = @import("std").mem.zeroes(u32),
    pBindings: [*c]const VkDescriptorSetLayoutBinding = @import("std").mem.zeroes([*c]const VkDescriptorSetLayoutBinding),
};
pub const VkDescriptorSetLayoutCreateInfo = struct_VkDescriptorSetLayoutCreateInfo;
pub const struct_VkWriteDescriptorSet = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dstSet: VkDescriptorSet = @import("std").mem.zeroes(VkDescriptorSet),
    dstBinding: u32 = @import("std").mem.zeroes(u32),
    dstArrayElement: u32 = @import("std").mem.zeroes(u32),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    pImageInfo: [*c]const VkDescriptorImageInfo = @import("std").mem.zeroes([*c]const VkDescriptorImageInfo),
    pBufferInfo: [*c]const VkDescriptorBufferInfo = @import("std").mem.zeroes([*c]const VkDescriptorBufferInfo),
    pTexelBufferView: [*c]const VkBufferView = @import("std").mem.zeroes([*c]const VkBufferView),
};
pub const VkWriteDescriptorSet = struct_VkWriteDescriptorSet;
pub const struct_VkAttachmentDescription = extern struct {
    flags: VkAttachmentDescriptionFlags = @import("std").mem.zeroes(VkAttachmentDescriptionFlags),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    loadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    storeOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    stencilLoadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    stencilStoreOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    initialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    finalLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkAttachmentDescription = struct_VkAttachmentDescription;
pub const struct_VkAttachmentReference = extern struct {
    attachment: u32 = @import("std").mem.zeroes(u32),
    layout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkAttachmentReference = struct_VkAttachmentReference;
pub const struct_VkFramebufferCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkFramebufferCreateFlags = @import("std").mem.zeroes(VkFramebufferCreateFlags),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkImageView = @import("std").mem.zeroes([*c]const VkImageView),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    layers: u32 = @import("std").mem.zeroes(u32),
};
pub const VkFramebufferCreateInfo = struct_VkFramebufferCreateInfo;
pub const struct_VkSubpassDescription = extern struct {
    flags: VkSubpassDescriptionFlags = @import("std").mem.zeroes(VkSubpassDescriptionFlags),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    inputAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pInputAttachments: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachments: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    pResolveAttachments: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    pDepthStencilAttachment: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    preserveAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pPreserveAttachments: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkSubpassDescription = struct_VkSubpassDescription;
pub const struct_VkSubpassDependency = extern struct {
    srcSubpass: u32 = @import("std").mem.zeroes(u32),
    dstSubpass: u32 = @import("std").mem.zeroes(u32),
    srcStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    dstStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dependencyFlags: VkDependencyFlags = @import("std").mem.zeroes(VkDependencyFlags),
};
pub const VkSubpassDependency = struct_VkSubpassDependency;
pub const struct_VkRenderPassCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderPassCreateFlags = @import("std").mem.zeroes(VkRenderPassCreateFlags),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkAttachmentDescription = @import("std").mem.zeroes([*c]const VkAttachmentDescription),
    subpassCount: u32 = @import("std").mem.zeroes(u32),
    pSubpasses: [*c]const VkSubpassDescription = @import("std").mem.zeroes([*c]const VkSubpassDescription),
    dependencyCount: u32 = @import("std").mem.zeroes(u32),
    pDependencies: [*c]const VkSubpassDependency = @import("std").mem.zeroes([*c]const VkSubpassDependency),
};
pub const VkRenderPassCreateInfo = struct_VkRenderPassCreateInfo;
pub const struct_VkCommandPoolCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkCommandPoolCreateFlags = @import("std").mem.zeroes(VkCommandPoolCreateFlags),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCommandPoolCreateInfo = struct_VkCommandPoolCreateInfo;
pub const struct_VkCommandBufferAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    commandPool: VkCommandPool = @import("std").mem.zeroes(VkCommandPool),
    level: VkCommandBufferLevel = @import("std").mem.zeroes(VkCommandBufferLevel),
    commandBufferCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCommandBufferAllocateInfo = struct_VkCommandBufferAllocateInfo;
pub const struct_VkCommandBufferInheritanceInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    subpass: u32 = @import("std").mem.zeroes(u32),
    framebuffer: VkFramebuffer = @import("std").mem.zeroes(VkFramebuffer),
    occlusionQueryEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    queryFlags: VkQueryControlFlags = @import("std").mem.zeroes(VkQueryControlFlags),
    pipelineStatistics: VkQueryPipelineStatisticFlags = @import("std").mem.zeroes(VkQueryPipelineStatisticFlags),
};
pub const VkCommandBufferInheritanceInfo = struct_VkCommandBufferInheritanceInfo;
pub const struct_VkCommandBufferBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkCommandBufferUsageFlags = @import("std").mem.zeroes(VkCommandBufferUsageFlags),
    pInheritanceInfo: [*c]const VkCommandBufferInheritanceInfo = @import("std").mem.zeroes([*c]const VkCommandBufferInheritanceInfo),
};
pub const VkCommandBufferBeginInfo = struct_VkCommandBufferBeginInfo;
pub const struct_VkBufferCopy = extern struct {
    srcOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBufferCopy = struct_VkBufferCopy;
pub const struct_VkImageSubresourceLayers = extern struct {
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    mipLevel: u32 = @import("std").mem.zeroes(u32),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageSubresourceLayers = struct_VkImageSubresourceLayers;
pub const struct_VkBufferImageCopy = extern struct {
    bufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    bufferRowLength: u32 = @import("std").mem.zeroes(u32),
    bufferImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkBufferImageCopy = struct_VkBufferImageCopy;
pub const union_VkClearColorValue = extern union {
    float32: [4]f32,
    int32: [4]i32,
    uint32: [4]u32,
};
pub const VkClearColorValue = union_VkClearColorValue;
pub const struct_VkClearDepthStencilValue = extern struct {
    depth: f32 = @import("std").mem.zeroes(f32),
    stencil: u32 = @import("std").mem.zeroes(u32),
};
pub const VkClearDepthStencilValue = struct_VkClearDepthStencilValue;
pub const union_VkClearValue = extern union {
    color: VkClearColorValue,
    depthStencil: VkClearDepthStencilValue,
};
pub const VkClearValue = union_VkClearValue;
pub const struct_VkClearAttachment = extern struct {
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    colorAttachment: u32 = @import("std").mem.zeroes(u32),
    clearValue: VkClearValue = @import("std").mem.zeroes(VkClearValue),
};
pub const VkClearAttachment = struct_VkClearAttachment;
pub const struct_VkClearRect = extern struct {
    rect: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkClearRect = struct_VkClearRect;
pub const struct_VkImageBlit = extern struct {
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
};
pub const VkImageBlit = struct_VkImageBlit;
pub const struct_VkImageCopy = extern struct {
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkImageCopy = struct_VkImageCopy;
pub const struct_VkImageResolve = extern struct {
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkImageResolve = struct_VkImageResolve;
pub const struct_VkRenderPassBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    framebuffer: VkFramebuffer = @import("std").mem.zeroes(VkFramebuffer),
    renderArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    clearValueCount: u32 = @import("std").mem.zeroes(u32),
    pClearValues: [*c]const VkClearValue = @import("std").mem.zeroes([*c]const VkClearValue),
};
pub const VkRenderPassBeginInfo = struct_VkRenderPassBeginInfo;
pub const PFN_vkCreateInstance = ?*const fn ([*c]const VkInstanceCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkInstance) callconv(.C) VkResult;
pub const PFN_vkDestroyInstance = ?*const fn (VkInstance, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkEnumeratePhysicalDevices = ?*const fn (VkInstance, [*c]u32, [*c]VkPhysicalDevice) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceFeatures = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceFeatures) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties = ?*const fn (VkPhysicalDevice, VkFormat, [*c]VkFormatProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties = ?*const fn (VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, [*c]VkImageFormatProperties) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceProperties = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkQueueFamilyProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceMemoryProperties) callconv(.C) void;
pub const PFN_vkGetInstanceProcAddr = ?*const fn (VkInstance, [*c]const u8) callconv(.C) PFN_vkVoidFunction;
pub const PFN_vkGetDeviceProcAddr = ?*const fn (VkDevice, [*c]const u8) callconv(.C) PFN_vkVoidFunction;
pub const PFN_vkCreateDevice = ?*const fn (VkPhysicalDevice, [*c]const VkDeviceCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDevice) callconv(.C) VkResult;
pub const PFN_vkDestroyDevice = ?*const fn (VkDevice, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkEnumerateInstanceExtensionProperties = ?*const fn ([*c]const u8, [*c]u32, [*c]VkExtensionProperties) callconv(.C) VkResult;
pub const PFN_vkEnumerateDeviceExtensionProperties = ?*const fn (VkPhysicalDevice, [*c]const u8, [*c]u32, [*c]VkExtensionProperties) callconv(.C) VkResult;
pub const PFN_vkEnumerateInstanceLayerProperties = ?*const fn ([*c]u32, [*c]VkLayerProperties) callconv(.C) VkResult;
pub const PFN_vkEnumerateDeviceLayerProperties = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkLayerProperties) callconv(.C) VkResult;
pub const PFN_vkGetDeviceQueue = ?*const fn (VkDevice, u32, u32, [*c]VkQueue) callconv(.C) void;
pub const PFN_vkQueueSubmit = ?*const fn (VkQueue, u32, [*c]const VkSubmitInfo, VkFence) callconv(.C) VkResult;
pub const PFN_vkQueueWaitIdle = ?*const fn (VkQueue) callconv(.C) VkResult;
pub const PFN_vkDeviceWaitIdle = ?*const fn (VkDevice) callconv(.C) VkResult;
pub const PFN_vkAllocateMemory = ?*const fn (VkDevice, [*c]const VkMemoryAllocateInfo, [*c]const VkAllocationCallbacks, [*c]VkDeviceMemory) callconv(.C) VkResult;
pub const PFN_vkFreeMemory = ?*const fn (VkDevice, VkDeviceMemory, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkMapMemory = ?*const fn (VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, [*c]?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkUnmapMemory = ?*const fn (VkDevice, VkDeviceMemory) callconv(.C) void;
pub const PFN_vkFlushMappedMemoryRanges = ?*const fn (VkDevice, u32, [*c]const VkMappedMemoryRange) callconv(.C) VkResult;
pub const PFN_vkInvalidateMappedMemoryRanges = ?*const fn (VkDevice, u32, [*c]const VkMappedMemoryRange) callconv(.C) VkResult;
pub const PFN_vkGetDeviceMemoryCommitment = ?*const fn (VkDevice, VkDeviceMemory, [*c]VkDeviceSize) callconv(.C) void;
pub const PFN_vkBindBufferMemory = ?*const fn (VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize) callconv(.C) VkResult;
pub const PFN_vkBindImageMemory = ?*const fn (VkDevice, VkImage, VkDeviceMemory, VkDeviceSize) callconv(.C) VkResult;
pub const PFN_vkGetBufferMemoryRequirements = ?*const fn (VkDevice, VkBuffer, [*c]VkMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetImageMemoryRequirements = ?*const fn (VkDevice, VkImage, [*c]VkMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements = ?*const fn (VkDevice, VkImage, [*c]u32, [*c]VkSparseImageMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties = ?*const fn (VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlagBits, VkImageUsageFlags, VkImageTiling, [*c]u32, [*c]VkSparseImageFormatProperties) callconv(.C) void;
pub const PFN_vkQueueBindSparse = ?*const fn (VkQueue, u32, [*c]const VkBindSparseInfo, VkFence) callconv(.C) VkResult;
pub const PFN_vkCreateFence = ?*const fn (VkDevice, [*c]const VkFenceCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkFence) callconv(.C) VkResult;
pub const PFN_vkDestroyFence = ?*const fn (VkDevice, VkFence, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetFences = ?*const fn (VkDevice, u32, [*c]const VkFence) callconv(.C) VkResult;
pub const PFN_vkGetFenceStatus = ?*const fn (VkDevice, VkFence) callconv(.C) VkResult;
pub const PFN_vkWaitForFences = ?*const fn (VkDevice, u32, [*c]const VkFence, VkBool32, u64) callconv(.C) VkResult;
pub const PFN_vkCreateSemaphore = ?*const fn (VkDevice, [*c]const VkSemaphoreCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSemaphore) callconv(.C) VkResult;
pub const PFN_vkDestroySemaphore = ?*const fn (VkDevice, VkSemaphore, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateEvent = ?*const fn (VkDevice, [*c]const VkEventCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkEvent) callconv(.C) VkResult;
pub const PFN_vkDestroyEvent = ?*const fn (VkDevice, VkEvent, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetEventStatus = ?*const fn (VkDevice, VkEvent) callconv(.C) VkResult;
pub const PFN_vkSetEvent = ?*const fn (VkDevice, VkEvent) callconv(.C) VkResult;
pub const PFN_vkResetEvent = ?*const fn (VkDevice, VkEvent) callconv(.C) VkResult;
pub const PFN_vkCreateQueryPool = ?*const fn (VkDevice, [*c]const VkQueryPoolCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkQueryPool) callconv(.C) VkResult;
pub const PFN_vkDestroyQueryPool = ?*const fn (VkDevice, VkQueryPool, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetQueryPoolResults = ?*const fn (VkDevice, VkQueryPool, u32, u32, usize, ?*anyopaque, VkDeviceSize, VkQueryResultFlags) callconv(.C) VkResult;
pub const PFN_vkCreateBuffer = ?*const fn (VkDevice, [*c]const VkBufferCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkBuffer) callconv(.C) VkResult;
pub const PFN_vkDestroyBuffer = ?*const fn (VkDevice, VkBuffer, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateBufferView = ?*const fn (VkDevice, [*c]const VkBufferViewCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkBufferView) callconv(.C) VkResult;
pub const PFN_vkDestroyBufferView = ?*const fn (VkDevice, VkBufferView, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateImage = ?*const fn (VkDevice, [*c]const VkImageCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkImage) callconv(.C) VkResult;
pub const PFN_vkDestroyImage = ?*const fn (VkDevice, VkImage, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetImageSubresourceLayout = ?*const fn (VkDevice, VkImage, [*c]const VkImageSubresource, [*c]VkSubresourceLayout) callconv(.C) void;
pub const PFN_vkCreateImageView = ?*const fn (VkDevice, [*c]const VkImageViewCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkImageView) callconv(.C) VkResult;
pub const PFN_vkDestroyImageView = ?*const fn (VkDevice, VkImageView, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateShaderModule = ?*const fn (VkDevice, [*c]const VkShaderModuleCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkShaderModule) callconv(.C) VkResult;
pub const PFN_vkDestroyShaderModule = ?*const fn (VkDevice, VkShaderModule, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreatePipelineCache = ?*const fn (VkDevice, [*c]const VkPipelineCacheCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipelineCache) callconv(.C) VkResult;
pub const PFN_vkDestroyPipelineCache = ?*const fn (VkDevice, VkPipelineCache, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetPipelineCacheData = ?*const fn (VkDevice, VkPipelineCache, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkMergePipelineCaches = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkPipelineCache) callconv(.C) VkResult;
pub const PFN_vkCreateGraphicsPipelines = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkGraphicsPipelineCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkCreateComputePipelines = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkComputePipelineCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkDestroyPipeline = ?*const fn (VkDevice, VkPipeline, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreatePipelineLayout = ?*const fn (VkDevice, [*c]const VkPipelineLayoutCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipelineLayout) callconv(.C) VkResult;
pub const PFN_vkDestroyPipelineLayout = ?*const fn (VkDevice, VkPipelineLayout, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateSampler = ?*const fn (VkDevice, [*c]const VkSamplerCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSampler) callconv(.C) VkResult;
pub const PFN_vkDestroySampler = ?*const fn (VkDevice, VkSampler, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorSetLayout = ?*const fn (VkDevice, [*c]const VkDescriptorSetLayoutCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorSetLayout) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorSetLayout = ?*const fn (VkDevice, VkDescriptorSetLayout, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorPool = ?*const fn (VkDevice, [*c]const VkDescriptorPoolCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorPool) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorPool = ?*const fn (VkDevice, VkDescriptorPool, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetDescriptorPool = ?*const fn (VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags) callconv(.C) VkResult;
pub const PFN_vkAllocateDescriptorSets = ?*const fn (VkDevice, [*c]const VkDescriptorSetAllocateInfo, [*c]VkDescriptorSet) callconv(.C) VkResult;
pub const PFN_vkFreeDescriptorSets = ?*const fn (VkDevice, VkDescriptorPool, u32, [*c]const VkDescriptorSet) callconv(.C) VkResult;
pub const PFN_vkUpdateDescriptorSets = ?*const fn (VkDevice, u32, [*c]const VkWriteDescriptorSet, u32, [*c]const VkCopyDescriptorSet) callconv(.C) void;
pub const PFN_vkCreateFramebuffer = ?*const fn (VkDevice, [*c]const VkFramebufferCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkFramebuffer) callconv(.C) VkResult;
pub const PFN_vkDestroyFramebuffer = ?*const fn (VkDevice, VkFramebuffer, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateRenderPass = ?*const fn (VkDevice, [*c]const VkRenderPassCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkRenderPass) callconv(.C) VkResult;
pub const PFN_vkDestroyRenderPass = ?*const fn (VkDevice, VkRenderPass, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetRenderAreaGranularity = ?*const fn (VkDevice, VkRenderPass, [*c]VkExtent2D) callconv(.C) void;
pub const PFN_vkCreateCommandPool = ?*const fn (VkDevice, [*c]const VkCommandPoolCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkCommandPool) callconv(.C) VkResult;
pub const PFN_vkDestroyCommandPool = ?*const fn (VkDevice, VkCommandPool, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetCommandPool = ?*const fn (VkDevice, VkCommandPool, VkCommandPoolResetFlags) callconv(.C) VkResult;
pub const PFN_vkAllocateCommandBuffers = ?*const fn (VkDevice, [*c]const VkCommandBufferAllocateInfo, [*c]VkCommandBuffer) callconv(.C) VkResult;
pub const PFN_vkFreeCommandBuffers = ?*const fn (VkDevice, VkCommandPool, u32, [*c]const VkCommandBuffer) callconv(.C) void;
pub const PFN_vkBeginCommandBuffer = ?*const fn (VkCommandBuffer, [*c]const VkCommandBufferBeginInfo) callconv(.C) VkResult;
pub const PFN_vkEndCommandBuffer = ?*const fn (VkCommandBuffer) callconv(.C) VkResult;
pub const PFN_vkResetCommandBuffer = ?*const fn (VkCommandBuffer, VkCommandBufferResetFlags) callconv(.C) VkResult;
pub const PFN_vkCmdBindPipeline = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipeline) callconv(.C) void;
pub const PFN_vkCmdSetViewport = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkViewport) callconv(.C) void;
pub const PFN_vkCmdSetScissor = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdSetLineWidth = ?*const fn (VkCommandBuffer, f32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBias = ?*const fn (VkCommandBuffer, f32, f32, f32) callconv(.C) void;
pub const PFN_vkCmdSetBlendConstants = ?*const fn (VkCommandBuffer, [*c]const f32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBounds = ?*const fn (VkCommandBuffer, f32, f32) callconv(.C) void;
pub const PFN_vkCmdSetStencilCompareMask = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdSetStencilWriteMask = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdSetStencilReference = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorSets = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, [*c]const VkDescriptorSet, u32, [*c]const u32) callconv(.C) void;
pub const PFN_vkCmdBindIndexBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType) callconv(.C) void;
pub const PFN_vkCmdBindVertexBuffers = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdDraw = ?*const fn (VkCommandBuffer, u32, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexed = ?*const fn (VkCommandBuffer, u32, u32, u32, i32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndirect = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirect = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDispatch = ?*const fn (VkCommandBuffer, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchIndirect = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdCopyBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkBuffer, u32, [*c]const VkBufferCopy) callconv(.C) void;
pub const PFN_vkCmdCopyImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, [*c]const VkImageCopy) callconv(.C) void;
pub const PFN_vkCmdBlitImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, [*c]const VkImageBlit, VkFilter) callconv(.C) void;
pub const PFN_vkCmdCopyBufferToImage = ?*const fn (VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, u32, [*c]const VkBufferImageCopy) callconv(.C) void;
pub const PFN_vkCmdCopyImageToBuffer = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, u32, [*c]const VkBufferImageCopy) callconv(.C) void;
pub const PFN_vkCmdUpdateBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkCmdFillBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, u32) callconv(.C) void;
pub const PFN_vkCmdClearColorImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, [*c]const VkClearColorValue, u32, [*c]const VkImageSubresourceRange) callconv(.C) void;
pub const PFN_vkCmdClearDepthStencilImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, [*c]const VkClearDepthStencilValue, u32, [*c]const VkImageSubresourceRange) callconv(.C) void;
pub const PFN_vkCmdClearAttachments = ?*const fn (VkCommandBuffer, u32, [*c]const VkClearAttachment, u32, [*c]const VkClearRect) callconv(.C) void;
pub const PFN_vkCmdResolveImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, [*c]const VkImageResolve) callconv(.C) void;
pub const PFN_vkCmdSetEvent = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags) callconv(.C) void;
pub const PFN_vkCmdResetEvent = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags) callconv(.C) void;
pub const PFN_vkCmdWaitEvents = ?*const fn (VkCommandBuffer, u32, [*c]const VkEvent, VkPipelineStageFlags, VkPipelineStageFlags, u32, [*c]const VkMemoryBarrier, u32, [*c]const VkBufferMemoryBarrier, u32, [*c]const VkImageMemoryBarrier) callconv(.C) void;
pub const PFN_vkCmdPipelineBarrier = ?*const fn (VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, u32, [*c]const VkMemoryBarrier, u32, [*c]const VkBufferMemoryBarrier, u32, [*c]const VkImageMemoryBarrier) callconv(.C) void;
pub const PFN_vkCmdBeginQuery = ?*const fn (VkCommandBuffer, VkQueryPool, u32, VkQueryControlFlags) callconv(.C) void;
pub const PFN_vkCmdEndQuery = ?*const fn (VkCommandBuffer, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkCmdResetQueryPool = ?*const fn (VkCommandBuffer, VkQueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkCmdWriteTimestamp = ?*const fn (VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkCmdCopyQueryPoolResults = ?*const fn (VkCommandBuffer, VkQueryPool, u32, u32, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags) callconv(.C) void;
pub const PFN_vkCmdPushConstants = ?*const fn (VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, u32, u32, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkCmdBeginRenderPass = ?*const fn (VkCommandBuffer, [*c]const VkRenderPassBeginInfo, VkSubpassContents) callconv(.C) void;
pub const PFN_vkCmdNextSubpass = ?*const fn (VkCommandBuffer, VkSubpassContents) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdExecuteCommands = ?*const fn (VkCommandBuffer, u32, [*c]const VkCommandBuffer) callconv(.C) void;
pub const struct_VkSamplerYcbcrConversion_T = opaque {};
pub const VkSamplerYcbcrConversion = ?*struct_VkSamplerYcbcrConversion_T;
pub const struct_VkDescriptorUpdateTemplate_T = opaque {};
pub const VkDescriptorUpdateTemplate = ?*struct_VkDescriptorUpdateTemplate_T;
pub const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES: c_int = 0;
pub const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY: c_int = 1;
pub const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR: c_int = 0;
pub const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR: c_int = 1;
pub const VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPointClippingBehavior = c_uint;
pub const VkPointClippingBehavior = enum_VkPointClippingBehavior;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT: c_int = 0;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT: c_int = 1;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR: c_int = 0;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR: c_int = 1;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM: c_int = 2147483647;
pub const enum_VkTessellationDomainOrigin = c_uint;
pub const VkTessellationDomainOrigin = enum_VkTessellationDomainOrigin;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY: c_int = 0;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY: c_int = 1;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709: c_int = 2;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601: c_int = 3;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020: c_int = 4;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR: c_int = 0;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR: c_int = 1;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR: c_int = 2;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR: c_int = 3;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR: c_int = 4;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerYcbcrModelConversion = c_uint;
pub const VkSamplerYcbcrModelConversion = enum_VkSamplerYcbcrModelConversion;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_FULL: c_int = 0;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW: c_int = 1;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR: c_int = 0;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR: c_int = 1;
pub const VK_SAMPLER_YCBCR_RANGE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerYcbcrRange = c_uint;
pub const VkSamplerYcbcrRange = enum_VkSamplerYcbcrRange;
pub const VK_CHROMA_LOCATION_COSITED_EVEN: c_int = 0;
pub const VK_CHROMA_LOCATION_MIDPOINT: c_int = 1;
pub const VK_CHROMA_LOCATION_COSITED_EVEN_KHR: c_int = 0;
pub const VK_CHROMA_LOCATION_MIDPOINT_KHR: c_int = 1;
pub const VK_CHROMA_LOCATION_MAX_ENUM: c_int = 2147483647;
pub const enum_VkChromaLocation = c_uint;
pub const VkChromaLocation = enum_VkChromaLocation;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET: c_int = 0;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS: c_int = 1;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR: c_int = 1;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR: c_int = 0;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorUpdateTemplateType = c_uint;
pub const VkDescriptorUpdateTemplateType = enum_VkDescriptorUpdateTemplateType;
pub const VK_SUBGROUP_FEATURE_BASIC_BIT: c_int = 1;
pub const VK_SUBGROUP_FEATURE_VOTE_BIT: c_int = 2;
pub const VK_SUBGROUP_FEATURE_ARITHMETIC_BIT: c_int = 4;
pub const VK_SUBGROUP_FEATURE_BALLOT_BIT: c_int = 8;
pub const VK_SUBGROUP_FEATURE_SHUFFLE_BIT: c_int = 16;
pub const VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT: c_int = 32;
pub const VK_SUBGROUP_FEATURE_CLUSTERED_BIT: c_int = 64;
pub const VK_SUBGROUP_FEATURE_QUAD_BIT: c_int = 128;
pub const VK_SUBGROUP_FEATURE_ROTATE_BIT: c_int = 512;
pub const VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT: c_int = 1024;
pub const VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV: c_int = 256;
pub const VK_SUBGROUP_FEATURE_ROTATE_BIT_KHR: c_int = 512;
pub const VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR: c_int = 1024;
pub const VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubgroupFeatureFlagBits = c_uint;
pub const VkSubgroupFeatureFlagBits = enum_VkSubgroupFeatureFlagBits;
pub const VkSubgroupFeatureFlags = VkFlags;
pub const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT: c_int = 1;
pub const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT: c_int = 2;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT: c_int = 4;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT: c_int = 8;
pub const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR: c_int = 1;
pub const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR: c_int = 2;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR: c_int = 4;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR: c_int = 8;
pub const VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPeerMemoryFeatureFlagBits = c_uint;
pub const VkPeerMemoryFeatureFlagBits = enum_VkPeerMemoryFeatureFlagBits;
pub const VkPeerMemoryFeatureFlags = VkFlags;
pub const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT: c_int = 1;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT: c_int = 2;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: c_int = 4;
pub const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR: c_int = 1;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR: c_int = 2;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: c_int = 4;
pub const VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryAllocateFlagBits = c_uint;
pub const VkMemoryAllocateFlagBits = enum_VkMemoryAllocateFlagBits;
pub const VkMemoryAllocateFlags = VkFlags;
pub const VkCommandPoolTrimFlags = VkFlags;
pub const VkDescriptorUpdateTemplateCreateFlags = VkFlags;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT: c_int = 1;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT: c_int = 2;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: c_int = 4;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT: c_int = 8;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT: c_int = 16;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT: c_int = 32;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT: c_int = 64;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT: c_int = 512;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID: c_int = 1024;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT: c_int = 128;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT: c_int = 256;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA: c_int = 2048;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV: c_int = 4096;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX: c_int = 16384;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR: c_int = 8;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR: c_int = 16;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR: c_int = 32;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR: c_int = 64;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalMemoryHandleTypeFlagBits = c_uint;
pub const VkExternalMemoryHandleTypeFlagBits = enum_VkExternalMemoryHandleTypeFlagBits;
pub const VkExternalMemoryHandleTypeFlags = VkFlags;
pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT: c_int = 1;
pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT: c_int = 2;
pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT: c_int = 4;
pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalMemoryFeatureFlagBits = c_uint;
pub const VkExternalMemoryFeatureFlagBits = enum_VkExternalMemoryFeatureFlagBits;
pub const VkExternalMemoryFeatureFlags = VkFlags;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT: c_int = 1;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT: c_int = 2;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: c_int = 4;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT: c_int = 8;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR: c_int = 8;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalFenceHandleTypeFlagBits = c_uint;
pub const VkExternalFenceHandleTypeFlagBits = enum_VkExternalFenceHandleTypeFlagBits;
pub const VkExternalFenceHandleTypeFlags = VkFlags;
pub const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT: c_int = 1;
pub const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT: c_int = 2;
pub const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalFenceFeatureFlagBits = c_uint;
pub const VkExternalFenceFeatureFlagBits = enum_VkExternalFenceFeatureFlagBits;
pub const VkExternalFenceFeatureFlags = VkFlags;
pub const VK_FENCE_IMPORT_TEMPORARY_BIT: c_int = 1;
pub const VK_FENCE_IMPORT_TEMPORARY_BIT_KHR: c_int = 1;
pub const VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFenceImportFlagBits = c_uint;
pub const VkFenceImportFlagBits = enum_VkFenceImportFlagBits;
pub const VkFenceImportFlags = VkFlags;
pub const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT: c_int = 1;
pub const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR: c_int = 1;
pub const VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSemaphoreImportFlagBits = c_uint;
pub const VkSemaphoreImportFlagBits = enum_VkSemaphoreImportFlagBits;
pub const VkSemaphoreImportFlags = VkFlags;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: c_int = 4;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT: c_int = 8;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT: c_int = 16;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA: c_int = 128;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT: c_int = 8;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR: c_int = 8;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR: c_int = 16;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalSemaphoreHandleTypeFlagBits = c_uint;
pub const VkExternalSemaphoreHandleTypeFlagBits = enum_VkExternalSemaphoreHandleTypeFlagBits;
pub const VkExternalSemaphoreHandleTypeFlags = VkFlags;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalSemaphoreFeatureFlagBits = c_uint;
pub const VkExternalSemaphoreFeatureFlagBits = enum_VkExternalSemaphoreFeatureFlagBits;
pub const VkExternalSemaphoreFeatureFlags = VkFlags;
pub const struct_VkPhysicalDeviceSubgroupProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subgroupSize: u32 = @import("std").mem.zeroes(u32),
    supportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    supportedOperations: VkSubgroupFeatureFlags = @import("std").mem.zeroes(VkSubgroupFeatureFlags),
    quadOperationsInAllStages: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSubgroupProperties = struct_VkPhysicalDeviceSubgroupProperties;
pub const struct_VkBindBufferMemoryInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBindBufferMemoryInfo = struct_VkBindBufferMemoryInfo;
pub const struct_VkBindImageMemoryInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBindImageMemoryInfo = struct_VkBindImageMemoryInfo;
pub const struct_VkPhysicalDevice16BitStorageFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageInputOutput16: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevice16BitStorageFeatures = struct_VkPhysicalDevice16BitStorageFeatures;
pub const struct_VkMemoryDedicatedRequirements = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    prefersDedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    requiresDedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkMemoryDedicatedRequirements = struct_VkMemoryDedicatedRequirements;
pub const struct_VkMemoryDedicatedAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkMemoryDedicatedAllocateInfo = struct_VkMemoryDedicatedAllocateInfo;
pub const struct_VkMemoryAllocateFlagsInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkMemoryAllocateFlags = @import("std").mem.zeroes(VkMemoryAllocateFlags),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryAllocateFlagsInfo = struct_VkMemoryAllocateFlagsInfo;
pub const struct_VkDeviceGroupRenderPassBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
    deviceRenderAreaCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceRenderAreas: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkDeviceGroupRenderPassBeginInfo = struct_VkDeviceGroupRenderPassBeginInfo;
pub const struct_VkDeviceGroupCommandBufferBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceGroupCommandBufferBeginInfo = struct_VkDeviceGroupCommandBufferBeginInfo;
pub const struct_VkDeviceGroupSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphoreDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    commandBufferCount: u32 = @import("std").mem.zeroes(u32),
    pCommandBufferDeviceMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    signalSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphoreDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkDeviceGroupSubmitInfo = struct_VkDeviceGroupSubmitInfo;
pub const struct_VkDeviceGroupBindSparseInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    resourceDeviceIndex: u32 = @import("std").mem.zeroes(u32),
    memoryDeviceIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceGroupBindSparseInfo = struct_VkDeviceGroupBindSparseInfo;
pub const struct_VkBindBufferMemoryDeviceGroupInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceIndexCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkBindBufferMemoryDeviceGroupInfo = struct_VkBindBufferMemoryDeviceGroupInfo;
pub const struct_VkBindImageMemoryDeviceGroupInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceIndexCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    splitInstanceBindRegionCount: u32 = @import("std").mem.zeroes(u32),
    pSplitInstanceBindRegions: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkBindImageMemoryDeviceGroupInfo = struct_VkBindImageMemoryDeviceGroupInfo;
pub const struct_VkPhysicalDeviceGroupProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    physicalDeviceCount: u32 = @import("std").mem.zeroes(u32),
    physicalDevices: [32]VkPhysicalDevice = @import("std").mem.zeroes([32]VkPhysicalDevice),
    subsetAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceGroupProperties = struct_VkPhysicalDeviceGroupProperties;
pub const struct_VkDeviceGroupDeviceCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    physicalDeviceCount: u32 = @import("std").mem.zeroes(u32),
    pPhysicalDevices: [*c]const VkPhysicalDevice = @import("std").mem.zeroes([*c]const VkPhysicalDevice),
};
pub const VkDeviceGroupDeviceCreateInfo = struct_VkDeviceGroupDeviceCreateInfo;
pub const struct_VkBufferMemoryRequirementsInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkBufferMemoryRequirementsInfo2 = struct_VkBufferMemoryRequirementsInfo2;
pub const struct_VkImageMemoryRequirementsInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
};
pub const VkImageMemoryRequirementsInfo2 = struct_VkImageMemoryRequirementsInfo2;
pub const struct_VkImageSparseMemoryRequirementsInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
};
pub const VkImageSparseMemoryRequirementsInfo2 = struct_VkImageSparseMemoryRequirementsInfo2;
pub const struct_VkMemoryRequirements2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryRequirements: VkMemoryRequirements = @import("std").mem.zeroes(VkMemoryRequirements),
};
pub const VkMemoryRequirements2 = struct_VkMemoryRequirements2;
pub const struct_VkSparseImageMemoryRequirements2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryRequirements: VkSparseImageMemoryRequirements = @import("std").mem.zeroes(VkSparseImageMemoryRequirements),
};
pub const VkSparseImageMemoryRequirements2 = struct_VkSparseImageMemoryRequirements2;
pub const struct_VkPhysicalDeviceFeatures2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    features: VkPhysicalDeviceFeatures = @import("std").mem.zeroes(VkPhysicalDeviceFeatures),
};
pub const VkPhysicalDeviceFeatures2 = struct_VkPhysicalDeviceFeatures2;
pub const struct_VkPhysicalDeviceProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    properties: VkPhysicalDeviceProperties = @import("std").mem.zeroes(VkPhysicalDeviceProperties),
};
pub const VkPhysicalDeviceProperties2 = struct_VkPhysicalDeviceProperties2;
pub const struct_VkFormatProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    formatProperties: VkFormatProperties = @import("std").mem.zeroes(VkFormatProperties),
};
pub const VkFormatProperties2 = struct_VkFormatProperties2;
pub const struct_VkImageFormatProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageFormatProperties: VkImageFormatProperties = @import("std").mem.zeroes(VkImageFormatProperties),
};
pub const VkImageFormatProperties2 = struct_VkImageFormatProperties2;
pub const struct_VkPhysicalDeviceImageFormatInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    type: VkImageType = @import("std").mem.zeroes(VkImageType),
    tiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    flags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
};
pub const VkPhysicalDeviceImageFormatInfo2 = struct_VkPhysicalDeviceImageFormatInfo2;
pub const struct_VkQueueFamilyProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    queueFamilyProperties: VkQueueFamilyProperties = @import("std").mem.zeroes(VkQueueFamilyProperties),
};
pub const VkQueueFamilyProperties2 = struct_VkQueueFamilyProperties2;
pub const struct_VkPhysicalDeviceMemoryProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryProperties: VkPhysicalDeviceMemoryProperties = @import("std").mem.zeroes(VkPhysicalDeviceMemoryProperties),
};
pub const VkPhysicalDeviceMemoryProperties2 = struct_VkPhysicalDeviceMemoryProperties2;
pub const struct_VkSparseImageFormatProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    properties: VkSparseImageFormatProperties = @import("std").mem.zeroes(VkSparseImageFormatProperties),
};
pub const VkSparseImageFormatProperties2 = struct_VkSparseImageFormatProperties2;
pub const struct_VkPhysicalDeviceSparseImageFormatInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    type: VkImageType = @import("std").mem.zeroes(VkImageType),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    tiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
};
pub const VkPhysicalDeviceSparseImageFormatInfo2 = struct_VkPhysicalDeviceSparseImageFormatInfo2;
pub const struct_VkPhysicalDevicePointClippingProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pointClippingBehavior: VkPointClippingBehavior = @import("std").mem.zeroes(VkPointClippingBehavior),
};
pub const VkPhysicalDevicePointClippingProperties = struct_VkPhysicalDevicePointClippingProperties;
pub const struct_VkInputAttachmentAspectReference = extern struct {
    subpass: u32 = @import("std").mem.zeroes(u32),
    inputAttachmentIndex: u32 = @import("std").mem.zeroes(u32),
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
};
pub const VkInputAttachmentAspectReference = struct_VkInputAttachmentAspectReference;
pub const struct_VkRenderPassInputAttachmentAspectCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    aspectReferenceCount: u32 = @import("std").mem.zeroes(u32),
    pAspectReferences: [*c]const VkInputAttachmentAspectReference = @import("std").mem.zeroes([*c]const VkInputAttachmentAspectReference),
};
pub const VkRenderPassInputAttachmentAspectCreateInfo = struct_VkRenderPassInputAttachmentAspectCreateInfo;
pub const struct_VkImageViewUsageCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkImageViewUsageCreateInfo = struct_VkImageViewUsageCreateInfo;
pub const struct_VkPipelineTessellationDomainOriginStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    domainOrigin: VkTessellationDomainOrigin = @import("std").mem.zeroes(VkTessellationDomainOrigin),
};
pub const VkPipelineTessellationDomainOriginStateCreateInfo = struct_VkPipelineTessellationDomainOriginStateCreateInfo;
pub const struct_VkRenderPassMultiviewCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    subpassCount: u32 = @import("std").mem.zeroes(u32),
    pViewMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    dependencyCount: u32 = @import("std").mem.zeroes(u32),
    pViewOffsets: [*c]const i32 = @import("std").mem.zeroes([*c]const i32),
    correlationMaskCount: u32 = @import("std").mem.zeroes(u32),
    pCorrelationMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkRenderPassMultiviewCreateInfo = struct_VkRenderPassMultiviewCreateInfo;
pub const struct_VkPhysicalDeviceMultiviewFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiview: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewGeometryShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewTessellationShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultiviewFeatures = struct_VkPhysicalDeviceMultiviewFeatures;
pub const struct_VkPhysicalDeviceMultiviewProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    maxMultiviewInstanceIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceMultiviewProperties = struct_VkPhysicalDeviceMultiviewProperties;
pub const struct_VkPhysicalDeviceVariablePointersFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    variablePointersStorageBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variablePointers: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVariablePointersFeatures = struct_VkPhysicalDeviceVariablePointersFeatures;
pub const VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;
pub const struct_VkPhysicalDeviceProtectedMemoryFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    protectedMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceProtectedMemoryFeatures = struct_VkPhysicalDeviceProtectedMemoryFeatures;
pub const struct_VkPhysicalDeviceProtectedMemoryProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    protectedNoFault: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceProtectedMemoryProperties = struct_VkPhysicalDeviceProtectedMemoryProperties;
pub const struct_VkDeviceQueueInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceQueueCreateFlags = @import("std").mem.zeroes(VkDeviceQueueCreateFlags),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    queueIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceQueueInfo2 = struct_VkDeviceQueueInfo2;
pub const struct_VkProtectedSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    protectedSubmit: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkProtectedSubmitInfo = struct_VkProtectedSubmitInfo;
pub const struct_VkSamplerYcbcrConversionCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    ycbcrModel: VkSamplerYcbcrModelConversion = @import("std").mem.zeroes(VkSamplerYcbcrModelConversion),
    ycbcrRange: VkSamplerYcbcrRange = @import("std").mem.zeroes(VkSamplerYcbcrRange),
    components: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    xChromaOffset: VkChromaLocation = @import("std").mem.zeroes(VkChromaLocation),
    yChromaOffset: VkChromaLocation = @import("std").mem.zeroes(VkChromaLocation),
    chromaFilter: VkFilter = @import("std").mem.zeroes(VkFilter),
    forceExplicitReconstruction: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSamplerYcbcrConversionCreateInfo = struct_VkSamplerYcbcrConversionCreateInfo;
pub const struct_VkSamplerYcbcrConversionInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    conversion: VkSamplerYcbcrConversion = @import("std").mem.zeroes(VkSamplerYcbcrConversion),
};
pub const VkSamplerYcbcrConversionInfo = struct_VkSamplerYcbcrConversionInfo;
pub const struct_VkBindImagePlaneMemoryInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    planeAspect: VkImageAspectFlagBits = @import("std").mem.zeroes(VkImageAspectFlagBits),
};
pub const VkBindImagePlaneMemoryInfo = struct_VkBindImagePlaneMemoryInfo;
pub const struct_VkImagePlaneMemoryRequirementsInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    planeAspect: VkImageAspectFlagBits = @import("std").mem.zeroes(VkImageAspectFlagBits),
};
pub const VkImagePlaneMemoryRequirementsInfo = struct_VkImagePlaneMemoryRequirementsInfo;
pub const struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    samplerYcbcrConversion: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSamplerYcbcrConversionFeatures = struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures;
pub const struct_VkSamplerYcbcrConversionImageFormatProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    combinedImageSamplerDescriptorCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkSamplerYcbcrConversionImageFormatProperties = struct_VkSamplerYcbcrConversionImageFormatProperties;
pub const struct_VkDescriptorUpdateTemplateEntry = extern struct {
    dstBinding: u32 = @import("std").mem.zeroes(u32),
    dstArrayElement: u32 = @import("std").mem.zeroes(u32),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    offset: usize = @import("std").mem.zeroes(usize),
    stride: usize = @import("std").mem.zeroes(usize),
};
pub const VkDescriptorUpdateTemplateEntry = struct_VkDescriptorUpdateTemplateEntry;
pub const struct_VkDescriptorUpdateTemplateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDescriptorUpdateTemplateCreateFlags = @import("std").mem.zeroes(VkDescriptorUpdateTemplateCreateFlags),
    descriptorUpdateEntryCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorUpdateEntries: [*c]const VkDescriptorUpdateTemplateEntry = @import("std").mem.zeroes([*c]const VkDescriptorUpdateTemplateEntry),
    templateType: VkDescriptorUpdateTemplateType = @import("std").mem.zeroes(VkDescriptorUpdateTemplateType),
    descriptorSetLayout: VkDescriptorSetLayout = @import("std").mem.zeroes(VkDescriptorSetLayout),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipelineLayout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorUpdateTemplateCreateInfo = struct_VkDescriptorUpdateTemplateCreateInfo;
pub const struct_VkExternalMemoryProperties = extern struct {
    externalMemoryFeatures: VkExternalMemoryFeatureFlags = @import("std").mem.zeroes(VkExternalMemoryFeatureFlags),
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
};
pub const VkExternalMemoryProperties = struct_VkExternalMemoryProperties;
pub const struct_VkPhysicalDeviceExternalImageFormatInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
};
pub const VkPhysicalDeviceExternalImageFormatInfo = struct_VkPhysicalDeviceExternalImageFormatInfo;
pub const struct_VkExternalImageFormatProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    externalMemoryProperties: VkExternalMemoryProperties = @import("std").mem.zeroes(VkExternalMemoryProperties),
};
pub const VkExternalImageFormatProperties = struct_VkExternalImageFormatProperties;
pub const struct_VkPhysicalDeviceExternalBufferInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkBufferCreateFlags = @import("std").mem.zeroes(VkBufferCreateFlags),
    usage: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
};
pub const VkPhysicalDeviceExternalBufferInfo = struct_VkPhysicalDeviceExternalBufferInfo;
pub const struct_VkExternalBufferProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    externalMemoryProperties: VkExternalMemoryProperties = @import("std").mem.zeroes(VkExternalMemoryProperties),
};
pub const VkExternalBufferProperties = struct_VkExternalBufferProperties;
pub const struct_VkPhysicalDeviceIDProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    driverUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    deviceLUID: [8]u8 = @import("std").mem.zeroes([8]u8),
    deviceNodeMask: u32 = @import("std").mem.zeroes(u32),
    deviceLUIDValid: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceIDProperties = struct_VkPhysicalDeviceIDProperties;
pub const struct_VkExternalMemoryImageCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
};
pub const VkExternalMemoryImageCreateInfo = struct_VkExternalMemoryImageCreateInfo;
pub const struct_VkExternalMemoryBufferCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
};
pub const VkExternalMemoryBufferCreateInfo = struct_VkExternalMemoryBufferCreateInfo;
pub const struct_VkExportMemoryAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
};
pub const VkExportMemoryAllocateInfo = struct_VkExportMemoryAllocateInfo;
pub const struct_VkPhysicalDeviceExternalFenceInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalFenceHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlagBits),
};
pub const VkPhysicalDeviceExternalFenceInfo = struct_VkPhysicalDeviceExternalFenceInfo;
pub const struct_VkExternalFenceProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlags),
    compatibleHandleTypes: VkExternalFenceHandleTypeFlags = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlags),
    externalFenceFeatures: VkExternalFenceFeatureFlags = @import("std").mem.zeroes(VkExternalFenceFeatureFlags),
};
pub const VkExternalFenceProperties = struct_VkExternalFenceProperties;
pub const struct_VkExportFenceCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalFenceHandleTypeFlags = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlags),
};
pub const VkExportFenceCreateInfo = struct_VkExportFenceCreateInfo;
pub const struct_VkExportSemaphoreCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalSemaphoreHandleTypeFlags = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlags),
};
pub const VkExportSemaphoreCreateInfo = struct_VkExportSemaphoreCreateInfo;
pub const struct_VkPhysicalDeviceExternalSemaphoreInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalSemaphoreHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlagBits),
};
pub const VkPhysicalDeviceExternalSemaphoreInfo = struct_VkPhysicalDeviceExternalSemaphoreInfo;
pub const struct_VkExternalSemaphoreProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlags),
    compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlags),
    externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags = @import("std").mem.zeroes(VkExternalSemaphoreFeatureFlags),
};
pub const VkExternalSemaphoreProperties = struct_VkExternalSemaphoreProperties;
pub const struct_VkPhysicalDeviceMaintenance3Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxPerSetDescriptors: u32 = @import("std").mem.zeroes(u32),
    maxMemoryAllocationSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceMaintenance3Properties = struct_VkPhysicalDeviceMaintenance3Properties;
pub const struct_VkDescriptorSetLayoutSupport = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supported: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDescriptorSetLayoutSupport = struct_VkDescriptorSetLayoutSupport;
pub const struct_VkPhysicalDeviceShaderDrawParametersFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderDrawParameters: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderDrawParametersFeatures = struct_VkPhysicalDeviceShaderDrawParametersFeatures;
pub const VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;
pub const PFN_vkEnumerateInstanceVersion = ?*const fn ([*c]u32) callconv(.C) VkResult;
pub const PFN_vkBindBufferMemory2 = ?*const fn (VkDevice, u32, [*c]const VkBindBufferMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkBindImageMemory2 = ?*const fn (VkDevice, u32, [*c]const VkBindImageMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkGetDeviceGroupPeerMemoryFeatures = ?*const fn (VkDevice, u32, u32, u32, [*c]VkPeerMemoryFeatureFlags) callconv(.C) void;
pub const PFN_vkCmdSetDeviceMask = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchBase = ?*const fn (VkCommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.C) void;
pub const PFN_vkEnumeratePhysicalDeviceGroups = ?*const fn (VkInstance, [*c]u32, [*c]VkPhysicalDeviceGroupProperties) callconv(.C) VkResult;
pub const PFN_vkGetImageMemoryRequirements2 = ?*const fn (VkDevice, [*c]const VkImageMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetBufferMemoryRequirements2 = ?*const fn (VkDevice, [*c]const VkBufferMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements2 = ?*const fn (VkDevice, [*c]const VkImageSparseMemoryRequirementsInfo2, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFeatures2 = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceFeatures2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceProperties2 = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties2 = ?*const fn (VkPhysicalDevice, VkFormat, [*c]VkFormatProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties2 = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceImageFormatInfo2, [*c]VkImageFormatProperties2) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkQueueFamilyProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties2 = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceMemoryProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSparseImageFormatInfo2, [*c]u32, [*c]VkSparseImageFormatProperties2) callconv(.C) void;
pub const PFN_vkTrimCommandPool = ?*const fn (VkDevice, VkCommandPool, VkCommandPoolTrimFlags) callconv(.C) void;
pub const PFN_vkGetDeviceQueue2 = ?*const fn (VkDevice, [*c]const VkDeviceQueueInfo2, [*c]VkQueue) callconv(.C) void;
pub const PFN_vkCreateSamplerYcbcrConversion = ?*const fn (VkDevice, [*c]const VkSamplerYcbcrConversionCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSamplerYcbcrConversion) callconv(.C) VkResult;
pub const PFN_vkDestroySamplerYcbcrConversion = ?*const fn (VkDevice, VkSamplerYcbcrConversion, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorUpdateTemplate = ?*const fn (VkDevice, [*c]const VkDescriptorUpdateTemplateCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorUpdateTemplate) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorUpdateTemplate = ?*const fn (VkDevice, VkDescriptorUpdateTemplate, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkUpdateDescriptorSetWithTemplate = ?*const fn (VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalBufferProperties = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalBufferInfo, [*c]VkExternalBufferProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalFenceProperties = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalFenceInfo, [*c]VkExternalFenceProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalSemaphoreInfo, [*c]VkExternalSemaphoreProperties) callconv(.C) void;
pub const PFN_vkGetDescriptorSetLayoutSupport = ?*const fn (VkDevice, [*c]const VkDescriptorSetLayoutCreateInfo, [*c]VkDescriptorSetLayoutSupport) callconv(.C) void;
pub const VK_DRIVER_ID_AMD_PROPRIETARY: c_int = 1;
pub const VK_DRIVER_ID_AMD_OPEN_SOURCE: c_int = 2;
pub const VK_DRIVER_ID_MESA_RADV: c_int = 3;
pub const VK_DRIVER_ID_NVIDIA_PROPRIETARY: c_int = 4;
pub const VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS: c_int = 5;
pub const VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA: c_int = 6;
pub const VK_DRIVER_ID_IMAGINATION_PROPRIETARY: c_int = 7;
pub const VK_DRIVER_ID_QUALCOMM_PROPRIETARY: c_int = 8;
pub const VK_DRIVER_ID_ARM_PROPRIETARY: c_int = 9;
pub const VK_DRIVER_ID_GOOGLE_SWIFTSHADER: c_int = 10;
pub const VK_DRIVER_ID_GGP_PROPRIETARY: c_int = 11;
pub const VK_DRIVER_ID_BROADCOM_PROPRIETARY: c_int = 12;
pub const VK_DRIVER_ID_MESA_LLVMPIPE: c_int = 13;
pub const VK_DRIVER_ID_MOLTENVK: c_int = 14;
pub const VK_DRIVER_ID_COREAVI_PROPRIETARY: c_int = 15;
pub const VK_DRIVER_ID_JUICE_PROPRIETARY: c_int = 16;
pub const VK_DRIVER_ID_VERISILICON_PROPRIETARY: c_int = 17;
pub const VK_DRIVER_ID_MESA_TURNIP: c_int = 18;
pub const VK_DRIVER_ID_MESA_V3DV: c_int = 19;
pub const VK_DRIVER_ID_MESA_PANVK: c_int = 20;
pub const VK_DRIVER_ID_SAMSUNG_PROPRIETARY: c_int = 21;
pub const VK_DRIVER_ID_MESA_VENUS: c_int = 22;
pub const VK_DRIVER_ID_MESA_DOZEN: c_int = 23;
pub const VK_DRIVER_ID_MESA_NVK: c_int = 24;
pub const VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA: c_int = 25;
pub const VK_DRIVER_ID_MESA_HONEYKRISP: c_int = 26;
pub const VK_DRIVER_ID_RESERVED_27: c_int = 27;
pub const VK_DRIVER_ID_AMD_PROPRIETARY_KHR: c_int = 1;
pub const VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR: c_int = 2;
pub const VK_DRIVER_ID_MESA_RADV_KHR: c_int = 3;
pub const VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR: c_int = 4;
pub const VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR: c_int = 5;
pub const VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR: c_int = 6;
pub const VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR: c_int = 7;
pub const VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR: c_int = 8;
pub const VK_DRIVER_ID_ARM_PROPRIETARY_KHR: c_int = 9;
pub const VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR: c_int = 10;
pub const VK_DRIVER_ID_GGP_PROPRIETARY_KHR: c_int = 11;
pub const VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR: c_int = 12;
pub const VK_DRIVER_ID_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDriverId = c_uint;
pub const VkDriverId = enum_VkDriverId;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY: c_int = 0;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL: c_int = 1;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE: c_int = 2;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR: c_int = 0;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR: c_int = 1;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR: c_int = 2;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkShaderFloatControlsIndependence = c_uint;
pub const VkShaderFloatControlsIndependence = enum_VkShaderFloatControlsIndependence;
pub const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE: c_int = 0;
pub const VK_SAMPLER_REDUCTION_MODE_MIN: c_int = 1;
pub const VK_SAMPLER_REDUCTION_MODE_MAX: c_int = 2;
pub const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM: c_int = 1000521000;
pub const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT: c_int = 0;
pub const VK_SAMPLER_REDUCTION_MODE_MIN_EXT: c_int = 1;
pub const VK_SAMPLER_REDUCTION_MODE_MAX_EXT: c_int = 2;
pub const VK_SAMPLER_REDUCTION_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerReductionMode = c_uint;
pub const VkSamplerReductionMode = enum_VkSamplerReductionMode;
pub const VK_SEMAPHORE_TYPE_BINARY: c_int = 0;
pub const VK_SEMAPHORE_TYPE_TIMELINE: c_int = 1;
pub const VK_SEMAPHORE_TYPE_BINARY_KHR: c_int = 0;
pub const VK_SEMAPHORE_TYPE_TIMELINE_KHR: c_int = 1;
pub const VK_SEMAPHORE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSemaphoreType = c_uint;
pub const VkSemaphoreType = enum_VkSemaphoreType;
pub const VK_RESOLVE_MODE_NONE: c_int = 0;
pub const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT: c_int = 1;
pub const VK_RESOLVE_MODE_AVERAGE_BIT: c_int = 2;
pub const VK_RESOLVE_MODE_MIN_BIT: c_int = 4;
pub const VK_RESOLVE_MODE_MAX_BIT: c_int = 8;
pub const VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID: c_int = 16;
pub const VK_RESOLVE_MODE_NONE_KHR: c_int = 0;
pub const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR: c_int = 1;
pub const VK_RESOLVE_MODE_AVERAGE_BIT_KHR: c_int = 2;
pub const VK_RESOLVE_MODE_MIN_BIT_KHR: c_int = 4;
pub const VK_RESOLVE_MODE_MAX_BIT_KHR: c_int = 8;
pub const VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkResolveModeFlagBits = c_uint;
pub const VkResolveModeFlagBits = enum_VkResolveModeFlagBits;
pub const VkResolveModeFlags = VkFlags;
pub const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT: c_int = 1;
pub const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT: c_int = 2;
pub const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT: c_int = 4;
pub const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT: c_int = 8;
pub const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT: c_int = 1;
pub const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT: c_int = 2;
pub const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT: c_int = 4;
pub const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT: c_int = 8;
pub const VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorBindingFlagBits = c_uint;
pub const VkDescriptorBindingFlagBits = enum_VkDescriptorBindingFlagBits;
pub const VkDescriptorBindingFlags = VkFlags;
pub const VK_SEMAPHORE_WAIT_ANY_BIT: c_int = 1;
pub const VK_SEMAPHORE_WAIT_ANY_BIT_KHR: c_int = 1;
pub const VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSemaphoreWaitFlagBits = c_uint;
pub const VkSemaphoreWaitFlagBits = enum_VkSemaphoreWaitFlagBits;
pub const VkSemaphoreWaitFlags = VkFlags;
pub const struct_VkPhysicalDeviceVulkan11Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageInputOutput16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiview: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewGeometryShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewTessellationShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variablePointersStorageBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variablePointers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    protectedMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
    samplerYcbcrConversion: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDrawParameters: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVulkan11Features = struct_VkPhysicalDeviceVulkan11Features;
pub const struct_VkPhysicalDeviceVulkan11Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    driverUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    deviceLUID: [8]u8 = @import("std").mem.zeroes([8]u8),
    deviceNodeMask: u32 = @import("std").mem.zeroes(u32),
    deviceLUIDValid: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subgroupSize: u32 = @import("std").mem.zeroes(u32),
    subgroupSupportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    subgroupSupportedOperations: VkSubgroupFeatureFlags = @import("std").mem.zeroes(VkSubgroupFeatureFlags),
    subgroupQuadOperationsInAllStages: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pointClippingBehavior: VkPointClippingBehavior = @import("std").mem.zeroes(VkPointClippingBehavior),
    maxMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    maxMultiviewInstanceIndex: u32 = @import("std").mem.zeroes(u32),
    protectedNoFault: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxPerSetDescriptors: u32 = @import("std").mem.zeroes(u32),
    maxMemoryAllocationSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceVulkan11Properties = struct_VkPhysicalDeviceVulkan11Properties;
pub const struct_VkPhysicalDeviceVulkan12Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    samplerMirrorClampToEdge: VkBool32 = @import("std").mem.zeroes(VkBool32),
    drawIndirectCount: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant8: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt8: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingSampledImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUpdateUnusedWhilePending: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingPartiallyBound: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingVariableDescriptorCount: VkBool32 = @import("std").mem.zeroes(VkBool32),
    runtimeDescriptorArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
    samplerFilterMinmax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    scalarBlockLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    imagelessFramebuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformBufferStandardLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSubgroupExtendedTypes: VkBool32 = @import("std").mem.zeroes(VkBool32),
    separateDepthStencilLayouts: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hostQueryReset: VkBool32 = @import("std").mem.zeroes(VkBool32),
    timelineSemaphore: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddress: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressMultiDevice: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModel: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelDeviceScope: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderOutputViewportIndex: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderOutputLayer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subgroupBroadcastDynamicId: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVulkan12Features = struct_VkPhysicalDeviceVulkan12Features;
pub const struct_VkConformanceVersion = extern struct {
    major: u8 = @import("std").mem.zeroes(u8),
    minor: u8 = @import("std").mem.zeroes(u8),
    subminor: u8 = @import("std").mem.zeroes(u8),
    patch: u8 = @import("std").mem.zeroes(u8),
};
pub const VkConformanceVersion = struct_VkConformanceVersion;
pub const struct_VkPhysicalDeviceVulkan12Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    driverID: VkDriverId = @import("std").mem.zeroes(VkDriverId),
    driverName: [256]u8 = @import("std").mem.zeroes([256]u8),
    driverInfo: [256]u8 = @import("std").mem.zeroes([256]u8),
    conformanceVersion: VkConformanceVersion = @import("std").mem.zeroes(VkConformanceVersion),
    denormBehaviorIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    roundingModeIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    shaderSignedZeroInfNanPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxUpdateAfterBindDescriptorsInAllPools: u32 = @import("std").mem.zeroes(u32),
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    robustBufferAccessUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    quadDivergentImplicitLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxPerStageDescriptorUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxPerStageUpdateAfterBindResources: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
    supportedDepthResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    supportedStencilResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    independentResolveNone: VkBool32 = @import("std").mem.zeroes(VkBool32),
    independentResolve: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterMinmaxSingleComponentFormats: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterMinmaxImageComponentMapping: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxTimelineSemaphoreValueDifference: u64 = @import("std").mem.zeroes(u64),
    framebufferIntegerColorSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
};
pub const VkPhysicalDeviceVulkan12Properties = struct_VkPhysicalDeviceVulkan12Properties;
pub const struct_VkImageFormatListCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewFormatCount: u32 = @import("std").mem.zeroes(u32),
    pViewFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
};
pub const VkImageFormatListCreateInfo = struct_VkImageFormatListCreateInfo;
pub const struct_VkAttachmentDescription2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkAttachmentDescriptionFlags = @import("std").mem.zeroes(VkAttachmentDescriptionFlags),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    loadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    storeOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    stencilLoadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    stencilStoreOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    initialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    finalLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkAttachmentDescription2 = struct_VkAttachmentDescription2;
pub const struct_VkAttachmentReference2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachment: u32 = @import("std").mem.zeroes(u32),
    layout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
};
pub const VkAttachmentReference2 = struct_VkAttachmentReference2;
pub const struct_VkSubpassDescription2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSubpassDescriptionFlags = @import("std").mem.zeroes(VkSubpassDescriptionFlags),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    inputAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pInputAttachments: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachments: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    pResolveAttachments: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    pDepthStencilAttachment: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    preserveAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pPreserveAttachments: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkSubpassDescription2 = struct_VkSubpassDescription2;
pub const struct_VkSubpassDependency2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubpass: u32 = @import("std").mem.zeroes(u32),
    dstSubpass: u32 = @import("std").mem.zeroes(u32),
    srcStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    dstStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dependencyFlags: VkDependencyFlags = @import("std").mem.zeroes(VkDependencyFlags),
    viewOffset: i32 = @import("std").mem.zeroes(i32),
};
pub const VkSubpassDependency2 = struct_VkSubpassDependency2;
pub const struct_VkRenderPassCreateInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderPassCreateFlags = @import("std").mem.zeroes(VkRenderPassCreateFlags),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkAttachmentDescription2 = @import("std").mem.zeroes([*c]const VkAttachmentDescription2),
    subpassCount: u32 = @import("std").mem.zeroes(u32),
    pSubpasses: [*c]const VkSubpassDescription2 = @import("std").mem.zeroes([*c]const VkSubpassDescription2),
    dependencyCount: u32 = @import("std").mem.zeroes(u32),
    pDependencies: [*c]const VkSubpassDependency2 = @import("std").mem.zeroes([*c]const VkSubpassDependency2),
    correlatedViewMaskCount: u32 = @import("std").mem.zeroes(u32),
    pCorrelatedViewMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkRenderPassCreateInfo2 = struct_VkRenderPassCreateInfo2;
pub const struct_VkSubpassBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    contents: VkSubpassContents = @import("std").mem.zeroes(VkSubpassContents),
};
pub const VkSubpassBeginInfo = struct_VkSubpassBeginInfo;
pub const struct_VkSubpassEndInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkSubpassEndInfo = struct_VkSubpassEndInfo;
pub const struct_VkPhysicalDevice8BitStorageFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant8: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevice8BitStorageFeatures = struct_VkPhysicalDevice8BitStorageFeatures;
pub const struct_VkPhysicalDeviceDriverProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    driverID: VkDriverId = @import("std").mem.zeroes(VkDriverId),
    driverName: [256]u8 = @import("std").mem.zeroes([256]u8),
    driverInfo: [256]u8 = @import("std").mem.zeroes([256]u8),
    conformanceVersion: VkConformanceVersion = @import("std").mem.zeroes(VkConformanceVersion),
};
pub const VkPhysicalDeviceDriverProperties = struct_VkPhysicalDeviceDriverProperties;
pub const struct_VkPhysicalDeviceShaderAtomicInt64Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBufferInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderAtomicInt64Features = struct_VkPhysicalDeviceShaderAtomicInt64Features;
pub const struct_VkPhysicalDeviceShaderFloat16Int8Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt8: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderFloat16Int8Features = struct_VkPhysicalDeviceShaderFloat16Int8Features;
pub const struct_VkPhysicalDeviceFloatControlsProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    denormBehaviorIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    roundingModeIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    shaderSignedZeroInfNanPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFloatControlsProperties = struct_VkPhysicalDeviceFloatControlsProperties;
pub const struct_VkDescriptorSetLayoutBindingFlagsCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    bindingCount: u32 = @import("std").mem.zeroes(u32),
    pBindingFlags: [*c]const VkDescriptorBindingFlags = @import("std").mem.zeroes([*c]const VkDescriptorBindingFlags),
};
pub const VkDescriptorSetLayoutBindingFlagsCreateInfo = struct_VkDescriptorSetLayoutBindingFlagsCreateInfo;
pub const struct_VkPhysicalDeviceDescriptorIndexingFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderInputAttachmentArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingSampledImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUpdateUnusedWhilePending: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingPartiallyBound: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingVariableDescriptorCount: VkBool32 = @import("std").mem.zeroes(VkBool32),
    runtimeDescriptorArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDescriptorIndexingFeatures = struct_VkPhysicalDeviceDescriptorIndexingFeatures;
pub const struct_VkPhysicalDeviceDescriptorIndexingProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxUpdateAfterBindDescriptorsInAllPools: u32 = @import("std").mem.zeroes(u32),
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    robustBufferAccessUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    quadDivergentImplicitLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxPerStageDescriptorUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxPerStageUpdateAfterBindResources: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceDescriptorIndexingProperties = struct_VkPhysicalDeviceDescriptorIndexingProperties;
pub const struct_VkDescriptorSetVariableDescriptorCountAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorSetCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorCounts: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkDescriptorSetVariableDescriptorCountAllocateInfo = struct_VkDescriptorSetVariableDescriptorCountAllocateInfo;
pub const struct_VkDescriptorSetVariableDescriptorCountLayoutSupport = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxVariableDescriptorCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorSetVariableDescriptorCountLayoutSupport = struct_VkDescriptorSetVariableDescriptorCountLayoutSupport;
pub const struct_VkSubpassDescriptionDepthStencilResolve = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthResolveMode: VkResolveModeFlagBits = @import("std").mem.zeroes(VkResolveModeFlagBits),
    stencilResolveMode: VkResolveModeFlagBits = @import("std").mem.zeroes(VkResolveModeFlagBits),
    pDepthStencilResolveAttachment: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
};
pub const VkSubpassDescriptionDepthStencilResolve = struct_VkSubpassDescriptionDepthStencilResolve;
pub const struct_VkPhysicalDeviceDepthStencilResolveProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedDepthResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    supportedStencilResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    independentResolveNone: VkBool32 = @import("std").mem.zeroes(VkBool32),
    independentResolve: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthStencilResolveProperties = struct_VkPhysicalDeviceDepthStencilResolveProperties;
pub const struct_VkPhysicalDeviceScalarBlockLayoutFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    scalarBlockLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceScalarBlockLayoutFeatures = struct_VkPhysicalDeviceScalarBlockLayoutFeatures;
pub const struct_VkImageStencilUsageCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stencilUsage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkImageStencilUsageCreateInfo = struct_VkImageStencilUsageCreateInfo;
pub const struct_VkSamplerReductionModeCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    reductionMode: VkSamplerReductionMode = @import("std").mem.zeroes(VkSamplerReductionMode),
};
pub const VkSamplerReductionModeCreateInfo = struct_VkSamplerReductionModeCreateInfo;
pub const struct_VkPhysicalDeviceSamplerFilterMinmaxProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    filterMinmaxSingleComponentFormats: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterMinmaxImageComponentMapping: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSamplerFilterMinmaxProperties = struct_VkPhysicalDeviceSamplerFilterMinmaxProperties;
pub const struct_VkPhysicalDeviceVulkanMemoryModelFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vulkanMemoryModel: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelDeviceScope: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVulkanMemoryModelFeatures = struct_VkPhysicalDeviceVulkanMemoryModelFeatures;
pub const struct_VkPhysicalDeviceImagelessFramebufferFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imagelessFramebuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImagelessFramebufferFeatures = struct_VkPhysicalDeviceImagelessFramebufferFeatures;
pub const struct_VkFramebufferAttachmentImageInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    viewFormatCount: u32 = @import("std").mem.zeroes(u32),
    pViewFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
};
pub const VkFramebufferAttachmentImageInfo = struct_VkFramebufferAttachmentImageInfo;
pub const struct_VkFramebufferAttachmentsCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentImageInfoCount: u32 = @import("std").mem.zeroes(u32),
    pAttachmentImageInfos: [*c]const VkFramebufferAttachmentImageInfo = @import("std").mem.zeroes([*c]const VkFramebufferAttachmentImageInfo),
};
pub const VkFramebufferAttachmentsCreateInfo = struct_VkFramebufferAttachmentsCreateInfo;
pub const struct_VkRenderPassAttachmentBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkImageView = @import("std").mem.zeroes([*c]const VkImageView),
};
pub const VkRenderPassAttachmentBeginInfo = struct_VkRenderPassAttachmentBeginInfo;
pub const struct_VkPhysicalDeviceUniformBufferStandardLayoutFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    uniformBufferStandardLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceUniformBufferStandardLayoutFeatures = struct_VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
pub const struct_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupExtendedTypes: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures = struct_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
pub const struct_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    separateDepthStencilLayouts: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures = struct_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
pub const struct_VkAttachmentReferenceStencilLayout = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stencilLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkAttachmentReferenceStencilLayout = struct_VkAttachmentReferenceStencilLayout;
pub const struct_VkAttachmentDescriptionStencilLayout = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stencilInitialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    stencilFinalLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkAttachmentDescriptionStencilLayout = struct_VkAttachmentDescriptionStencilLayout;
pub const struct_VkPhysicalDeviceHostQueryResetFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hostQueryReset: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceHostQueryResetFeatures = struct_VkPhysicalDeviceHostQueryResetFeatures;
pub const struct_VkPhysicalDeviceTimelineSemaphoreFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    timelineSemaphore: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTimelineSemaphoreFeatures = struct_VkPhysicalDeviceTimelineSemaphoreFeatures;
pub const struct_VkPhysicalDeviceTimelineSemaphoreProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxTimelineSemaphoreValueDifference: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPhysicalDeviceTimelineSemaphoreProperties = struct_VkPhysicalDeviceTimelineSemaphoreProperties;
pub const struct_VkSemaphoreTypeCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphoreType: VkSemaphoreType = @import("std").mem.zeroes(VkSemaphoreType),
    initialValue: u64 = @import("std").mem.zeroes(u64),
};
pub const VkSemaphoreTypeCreateInfo = struct_VkSemaphoreTypeCreateInfo;
pub const struct_VkTimelineSemaphoreSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreValueCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphoreValues: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    signalSemaphoreValueCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphoreValues: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
};
pub const VkTimelineSemaphoreSubmitInfo = struct_VkTimelineSemaphoreSubmitInfo;
pub const struct_VkSemaphoreWaitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSemaphoreWaitFlags = @import("std").mem.zeroes(VkSemaphoreWaitFlags),
    semaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    pValues: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
};
pub const VkSemaphoreWaitInfo = struct_VkSemaphoreWaitInfo;
pub const struct_VkSemaphoreSignalInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    value: u64 = @import("std").mem.zeroes(u64),
};
pub const VkSemaphoreSignalInfo = struct_VkSemaphoreSignalInfo;
pub const struct_VkPhysicalDeviceBufferDeviceAddressFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    bufferDeviceAddress: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressMultiDevice: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceBufferDeviceAddressFeatures = struct_VkPhysicalDeviceBufferDeviceAddressFeatures;
pub const struct_VkBufferDeviceAddressInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkBufferDeviceAddressInfo = struct_VkBufferDeviceAddressInfo;
pub const struct_VkBufferOpaqueCaptureAddressCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    opaqueCaptureAddress: u64 = @import("std").mem.zeroes(u64),
};
pub const VkBufferOpaqueCaptureAddressCreateInfo = struct_VkBufferOpaqueCaptureAddressCreateInfo;
pub const struct_VkMemoryOpaqueCaptureAddressAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    opaqueCaptureAddress: u64 = @import("std").mem.zeroes(u64),
};
pub const VkMemoryOpaqueCaptureAddressAllocateInfo = struct_VkMemoryOpaqueCaptureAddressAllocateInfo;
pub const struct_VkDeviceMemoryOpaqueCaptureAddressInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
};
pub const VkDeviceMemoryOpaqueCaptureAddressInfo = struct_VkDeviceMemoryOpaqueCaptureAddressInfo;
pub const PFN_vkCmdDrawIndirectCount = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCount = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCreateRenderPass2 = ?*const fn (VkDevice, [*c]const VkRenderPassCreateInfo2, [*c]const VkAllocationCallbacks, [*c]VkRenderPass) callconv(.C) VkResult;
pub const PFN_vkCmdBeginRenderPass2 = ?*const fn (VkCommandBuffer, [*c]const VkRenderPassBeginInfo, [*c]const VkSubpassBeginInfo) callconv(.C) void;
pub const PFN_vkCmdNextSubpass2 = ?*const fn (VkCommandBuffer, [*c]const VkSubpassBeginInfo, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass2 = ?*const fn (VkCommandBuffer, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub const PFN_vkResetQueryPool = ?*const fn (VkDevice, VkQueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkGetSemaphoreCounterValue = ?*const fn (VkDevice, VkSemaphore, [*c]u64) callconv(.C) VkResult;
pub const PFN_vkWaitSemaphores = ?*const fn (VkDevice, [*c]const VkSemaphoreWaitInfo, u64) callconv(.C) VkResult;
pub const PFN_vkSignalSemaphore = ?*const fn (VkDevice, [*c]const VkSemaphoreSignalInfo) callconv(.C) VkResult;
pub const PFN_vkGetBufferDeviceAddress = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) VkDeviceAddress;
pub const PFN_vkGetBufferOpaqueCaptureAddress = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) u64;
pub const PFN_vkGetDeviceMemoryOpaqueCaptureAddress = ?*const fn (VkDevice, [*c]const VkDeviceMemoryOpaqueCaptureAddressInfo) callconv(.C) u64;
pub const VkFlags64 = u64;
pub const struct_VkPrivateDataSlot_T = opaque {};
pub const VkPrivateDataSlot = ?*struct_VkPrivateDataSlot_T;
pub const VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT: c_int = 1;
pub const VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT: c_int = 2;
pub const VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT: c_int = 4;
pub const VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT: c_int = 2;
pub const VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT: c_int = 4;
pub const VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCreationFeedbackFlagBits = c_uint;
pub const VkPipelineCreationFeedbackFlagBits = enum_VkPipelineCreationFeedbackFlagBits;
pub const VkPipelineCreationFeedbackFlags = VkFlags;
pub const VK_TOOL_PURPOSE_VALIDATION_BIT: c_int = 1;
pub const VK_TOOL_PURPOSE_PROFILING_BIT: c_int = 2;
pub const VK_TOOL_PURPOSE_TRACING_BIT: c_int = 4;
pub const VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT: c_int = 8;
pub const VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT: c_int = 16;
pub const VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT: c_int = 32;
pub const VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT: c_int = 64;
pub const VK_TOOL_PURPOSE_VALIDATION_BIT_EXT: c_int = 1;
pub const VK_TOOL_PURPOSE_PROFILING_BIT_EXT: c_int = 2;
pub const VK_TOOL_PURPOSE_TRACING_BIT_EXT: c_int = 4;
pub const VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT: c_int = 8;
pub const VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT: c_int = 16;
pub const VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkToolPurposeFlagBits = c_uint;
pub const VkToolPurposeFlagBits = enum_VkToolPurposeFlagBits;
pub const VkToolPurposeFlags = VkFlags;
pub const VkPrivateDataSlotCreateFlags = VkFlags;
pub const VkPipelineStageFlags2 = VkFlags64;
pub const VkPipelineStageFlagBits2 = VkFlags64;
pub const VK_PIPELINE_STAGE_2_NONE: VkPipelineStageFlagBits2 = 0;
pub const VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT: VkPipelineStageFlagBits2 = 1;
pub const VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT: VkPipelineStageFlagBits2 = 2;
pub const VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT: VkPipelineStageFlagBits2 = 4;
pub const VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT: VkPipelineStageFlagBits2 = 8;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT: VkPipelineStageFlagBits2 = 16;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT: VkPipelineStageFlagBits2 = 32;
pub const VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT: VkPipelineStageFlagBits2 = 64;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT: VkPipelineStageFlagBits2 = 128;
pub const VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_PIPELINE_STAGE_2_HOST_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_PIPELINE_STAGE_2_COPY_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_PIPELINE_STAGE_2_RESOLVE_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_PIPELINE_STAGE_2_BLIT_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_PIPELINE_STAGE_2_CLEAR_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 34359738368)))));
pub const VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 68719476736)))));
pub const VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 137438953472)))));
pub const VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 274877906944)))));
pub const VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 67108864)))));
pub const VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 134217728)))));
pub const VK_PIPELINE_STAGE_2_NONE_KHR: VkPipelineStageFlagBits2 = 0;
pub const VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2 = 1;
pub const VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR: VkPipelineStageFlagBits2 = 2;
pub const VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = 4;
pub const VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 8;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 16;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 32;
pub const VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 64;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 128;
pub const VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_PIPELINE_STAGE_2_HOST_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_PIPELINE_STAGE_2_COPY_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_PIPELINE_STAGE_2_BLIT_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 34359738368)))));
pub const VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 68719476736)))));
pub const VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 137438953472)))));
pub const VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 274877906944)))));
pub const VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16777216)))));
pub const VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 549755813888)))));
pub const VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 549755813888)))));
pub const VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1099511627776)))));
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 268435456)))));
pub const VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1073741824)))));
pub const VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2199023255552)))));
pub const VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 536870912)))));
pub const VkAccessFlags2 = VkFlags64;
pub const VkAccessFlagBits2 = VkFlags64;
pub const VK_ACCESS_2_NONE: VkAccessFlagBits2 = 0;
pub const VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT: VkAccessFlagBits2 = 1;
pub const VK_ACCESS_2_INDEX_READ_BIT: VkAccessFlagBits2 = 2;
pub const VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT: VkAccessFlagBits2 = 4;
pub const VK_ACCESS_2_UNIFORM_READ_BIT: VkAccessFlagBits2 = 8;
pub const VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 16;
pub const VK_ACCESS_2_SHADER_READ_BIT: VkAccessFlagBits2 = 32;
pub const VK_ACCESS_2_SHADER_WRITE_BIT: VkAccessFlagBits2 = 64;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 128;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_ACCESS_2_TRANSFER_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_ACCESS_2_TRANSFER_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_ACCESS_2_HOST_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_ACCESS_2_HOST_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_ACCESS_2_MEMORY_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_ACCESS_2_MEMORY_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_ACCESS_2_SHADER_SAMPLED_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_ACCESS_2_SHADER_STORAGE_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 34359738368)))));
pub const VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 68719476736)))));
pub const VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 137438953472)))));
pub const VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 274877906944)))));
pub const VK_ACCESS_2_NONE_KHR: VkAccessFlagBits2 = 0;
pub const VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR: VkAccessFlagBits2 = 1;
pub const VK_ACCESS_2_INDEX_READ_BIT_KHR: VkAccessFlagBits2 = 2;
pub const VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR: VkAccessFlagBits2 = 4;
pub const VK_ACCESS_2_UNIFORM_READ_BIT_KHR: VkAccessFlagBits2 = 8;
pub const VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 16;
pub const VK_ACCESS_2_SHADER_READ_BIT_KHR: VkAccessFlagBits2 = 32;
pub const VK_ACCESS_2_SHADER_WRITE_BIT_KHR: VkAccessFlagBits2 = 64;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 128;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_ACCESS_2_TRANSFER_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_ACCESS_2_HOST_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_ACCESS_2_HOST_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_ACCESS_2_MEMORY_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_ACCESS_2_MEMORY_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 67108864)))));
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 134217728)))));
pub const VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16777216)))));
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2199023255552)))));
pub const VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 549755813888)))));
pub const VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1099511627776)))));
pub const VK_ACCESS_2_MICROMAP_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17592186044416)))));
pub const VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 35184372088832)))));
pub const VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4398046511104)))));
pub const VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8796093022208)))));
pub const VK_SUBMIT_PROTECTED_BIT: c_int = 1;
pub const VK_SUBMIT_PROTECTED_BIT_KHR: c_int = 1;
pub const VK_SUBMIT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubmitFlagBits = c_uint;
pub const VkSubmitFlagBits = enum_VkSubmitFlagBits;
pub const VkSubmitFlags = VkFlags;
pub const VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT: c_int = 1;
pub const VK_RENDERING_SUSPENDING_BIT: c_int = 2;
pub const VK_RENDERING_RESUMING_BIT: c_int = 4;
pub const VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT: c_int = 8;
pub const VK_RENDERING_CONTENTS_INLINE_BIT_KHR: c_int = 16;
pub const VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR: c_int = 1;
pub const VK_RENDERING_SUSPENDING_BIT_KHR: c_int = 2;
pub const VK_RENDERING_RESUMING_BIT_KHR: c_int = 4;
pub const VK_RENDERING_CONTENTS_INLINE_BIT_EXT: c_int = 16;
pub const VK_RENDERING_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkRenderingFlagBits = c_uint;
pub const VkRenderingFlagBits = enum_VkRenderingFlagBits;
pub const VkRenderingFlags = VkFlags;
pub const VkFormatFeatureFlags2 = VkFlags64;
pub const VkFormatFeatureFlagBits2 = VkFlags64;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT: VkFormatFeatureFlagBits2 = 1;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT: VkFormatFeatureFlagBits2 = 2;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT: VkFormatFeatureFlagBits2 = 4;
pub const VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits2 = 8;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits2 = 16;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT: VkFormatFeatureFlagBits2 = 32;
pub const VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT: VkFormatFeatureFlagBits2 = 64;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT: VkFormatFeatureFlagBits2 = 128;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_FORMAT_FEATURE_2_BLIT_SRC_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_FORMAT_FEATURE_2_BLIT_DST_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_FORMAT_FEATURE_2_DISJOINT_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2147483648)))));
pub const VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 70368744177664)))));
pub const VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 67108864)))));
pub const VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 536870912)))));
pub const VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16777216)))));
pub const VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1073741824)))));
pub const VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 70368744177664)))));
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 134217728)))));
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 268435456)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR: VkFormatFeatureFlagBits2 = 1;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR: VkFormatFeatureFlagBits2 = 2;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR: VkFormatFeatureFlagBits2 = 4;
pub const VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 8;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 16;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR: VkFormatFeatureFlagBits2 = 32;
pub const VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 64;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = 128;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2147483648)))));
pub const VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 274877906944)))));
pub const VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 34359738368)))));
pub const VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 68719476736)))));
pub const VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 137438953472)))));
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1099511627776)))));
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2199023255552)))));
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4398046511104)))));
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 562949953421312)))));
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1125899906842624)))));
pub const struct_VkPhysicalDeviceVulkan13Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustImageAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    inlineUniformBlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineCreationCacheControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    privateData: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDemoteToHelperInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTerminateInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subgroupSizeControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    computeFullSubgroups: VkBool32 = @import("std").mem.zeroes(VkBool32),
    synchronization2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionASTC_HDR: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderZeroInitializeWorkgroupMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dynamicRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderIntegerDotProduct: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maintenance4: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVulkan13Features = struct_VkPhysicalDeviceVulkan13Features;
pub const struct_VkPhysicalDeviceVulkan13Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkgroupSubgroups: u32 = @import("std").mem.zeroes(u32),
    requiredSubgroupSizeStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    maxInlineUniformBlockSize: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxInlineUniformTotalSize: u32 = @import("std").mem.zeroes(u32),
    integerDotProduct8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    storageTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    uniformTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxBufferSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceVulkan13Properties = struct_VkPhysicalDeviceVulkan13Properties;
pub const struct_VkPipelineCreationFeedback = extern struct {
    flags: VkPipelineCreationFeedbackFlags = @import("std").mem.zeroes(VkPipelineCreationFeedbackFlags),
    duration: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPipelineCreationFeedback = struct_VkPipelineCreationFeedback;
pub const struct_VkPipelineCreationFeedbackCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pPipelineCreationFeedback: [*c]VkPipelineCreationFeedback = @import("std").mem.zeroes([*c]VkPipelineCreationFeedback),
    pipelineStageCreationFeedbackCount: u32 = @import("std").mem.zeroes(u32),
    pPipelineStageCreationFeedbacks: [*c]VkPipelineCreationFeedback = @import("std").mem.zeroes([*c]VkPipelineCreationFeedback),
};
pub const VkPipelineCreationFeedbackCreateInfo = struct_VkPipelineCreationFeedbackCreateInfo;
pub const struct_VkPhysicalDeviceShaderTerminateInvocationFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderTerminateInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderTerminateInvocationFeatures = struct_VkPhysicalDeviceShaderTerminateInvocationFeatures;
pub const struct_VkPhysicalDeviceToolProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    version: [256]u8 = @import("std").mem.zeroes([256]u8),
    purposes: VkToolPurposeFlags = @import("std").mem.zeroes(VkToolPurposeFlags),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    layer: [256]u8 = @import("std").mem.zeroes([256]u8),
};
pub const VkPhysicalDeviceToolProperties = struct_VkPhysicalDeviceToolProperties;
pub const struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderDemoteToHelperInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures = struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;
pub const struct_VkPhysicalDevicePrivateDataFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    privateData: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePrivateDataFeatures = struct_VkPhysicalDevicePrivateDataFeatures;
pub const struct_VkDevicePrivateDataCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    privateDataSlotRequestCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDevicePrivateDataCreateInfo = struct_VkDevicePrivateDataCreateInfo;
pub const struct_VkPrivateDataSlotCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPrivateDataSlotCreateFlags = @import("std").mem.zeroes(VkPrivateDataSlotCreateFlags),
};
pub const VkPrivateDataSlotCreateInfo = struct_VkPrivateDataSlotCreateInfo;
pub const struct_VkPhysicalDevicePipelineCreationCacheControlFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineCreationCacheControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineCreationCacheControlFeatures = struct_VkPhysicalDevicePipelineCreationCacheControlFeatures;
pub const struct_VkMemoryBarrier2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    srcAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    dstStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    dstAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
};
pub const VkMemoryBarrier2 = struct_VkMemoryBarrier2;
pub const struct_VkBufferMemoryBarrier2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    srcAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    dstStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    dstAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBufferMemoryBarrier2 = struct_VkBufferMemoryBarrier2;
pub const struct_VkImageMemoryBarrier2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    srcAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    dstStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    dstAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    oldLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    newLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
};
pub const VkImageMemoryBarrier2 = struct_VkImageMemoryBarrier2;
pub const struct_VkDependencyInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dependencyFlags: VkDependencyFlags = @import("std").mem.zeroes(VkDependencyFlags),
    memoryBarrierCount: u32 = @import("std").mem.zeroes(u32),
    pMemoryBarriers: [*c]const VkMemoryBarrier2 = @import("std").mem.zeroes([*c]const VkMemoryBarrier2),
    bufferMemoryBarrierCount: u32 = @import("std").mem.zeroes(u32),
    pBufferMemoryBarriers: [*c]const VkBufferMemoryBarrier2 = @import("std").mem.zeroes([*c]const VkBufferMemoryBarrier2),
    imageMemoryBarrierCount: u32 = @import("std").mem.zeroes(u32),
    pImageMemoryBarriers: [*c]const VkImageMemoryBarrier2 = @import("std").mem.zeroes([*c]const VkImageMemoryBarrier2),
};
pub const VkDependencyInfo = struct_VkDependencyInfo;
pub const struct_VkSemaphoreSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    value: u64 = @import("std").mem.zeroes(u64),
    stageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    deviceIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkSemaphoreSubmitInfo = struct_VkSemaphoreSubmitInfo;
pub const struct_VkCommandBufferSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    commandBuffer: VkCommandBuffer = @import("std").mem.zeroes(VkCommandBuffer),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCommandBufferSubmitInfo = struct_VkCommandBufferSubmitInfo;
pub const struct_VkSubmitInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSubmitFlags = @import("std").mem.zeroes(VkSubmitFlags),
    waitSemaphoreInfoCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphoreInfos: [*c]const VkSemaphoreSubmitInfo = @import("std").mem.zeroes([*c]const VkSemaphoreSubmitInfo),
    commandBufferInfoCount: u32 = @import("std").mem.zeroes(u32),
    pCommandBufferInfos: [*c]const VkCommandBufferSubmitInfo = @import("std").mem.zeroes([*c]const VkCommandBufferSubmitInfo),
    signalSemaphoreInfoCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphoreInfos: [*c]const VkSemaphoreSubmitInfo = @import("std").mem.zeroes([*c]const VkSemaphoreSubmitInfo),
};
pub const VkSubmitInfo2 = struct_VkSubmitInfo2;
pub const struct_VkPhysicalDeviceSynchronization2Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    synchronization2: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSynchronization2Features = struct_VkPhysicalDeviceSynchronization2Features;
pub const struct_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderZeroInitializeWorkgroupMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = struct_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
pub const struct_VkPhysicalDeviceImageRobustnessFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustImageAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageRobustnessFeatures = struct_VkPhysicalDeviceImageRobustnessFeatures;
pub const struct_VkBufferCopy2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBufferCopy2 = struct_VkBufferCopy2;
pub const struct_VkCopyBufferInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    dstBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkBufferCopy2 = @import("std").mem.zeroes([*c]const VkBufferCopy2),
};
pub const VkCopyBufferInfo2 = struct_VkCopyBufferInfo2;
pub const struct_VkImageCopy2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkImageCopy2 = struct_VkImageCopy2;
pub const struct_VkCopyImageInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageCopy2 = @import("std").mem.zeroes([*c]const VkImageCopy2),
};
pub const VkCopyImageInfo2 = struct_VkCopyImageInfo2;
pub const struct_VkBufferImageCopy2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    bufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    bufferRowLength: u32 = @import("std").mem.zeroes(u32),
    bufferImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkBufferImageCopy2 = struct_VkBufferImageCopy2;
pub const struct_VkCopyBufferToImageInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkBufferImageCopy2 = @import("std").mem.zeroes([*c]const VkBufferImageCopy2),
};
pub const VkCopyBufferToImageInfo2 = struct_VkCopyBufferToImageInfo2;
pub const struct_VkCopyImageToBufferInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkBufferImageCopy2 = @import("std").mem.zeroes([*c]const VkBufferImageCopy2),
};
pub const VkCopyImageToBufferInfo2 = struct_VkCopyImageToBufferInfo2;
pub const struct_VkImageBlit2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
};
pub const VkImageBlit2 = struct_VkImageBlit2;
pub const struct_VkBlitImageInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageBlit2 = @import("std").mem.zeroes([*c]const VkImageBlit2),
    filter: VkFilter = @import("std").mem.zeroes(VkFilter),
};
pub const VkBlitImageInfo2 = struct_VkBlitImageInfo2;
pub const struct_VkImageResolve2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkImageResolve2 = struct_VkImageResolve2;
pub const struct_VkResolveImageInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageResolve2 = @import("std").mem.zeroes([*c]const VkImageResolve2),
};
pub const VkResolveImageInfo2 = struct_VkResolveImageInfo2;
pub const struct_VkPhysicalDeviceSubgroupSizeControlFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subgroupSizeControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    computeFullSubgroups: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSubgroupSizeControlFeatures = struct_VkPhysicalDeviceSubgroupSizeControlFeatures;
pub const struct_VkPhysicalDeviceSubgroupSizeControlProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkgroupSubgroups: u32 = @import("std").mem.zeroes(u32),
    requiredSubgroupSizeStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
};
pub const VkPhysicalDeviceSubgroupSizeControlProperties = struct_VkPhysicalDeviceSubgroupSizeControlProperties;
pub const struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    requiredSubgroupSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineShaderStageRequiredSubgroupSizeCreateInfo = struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
pub const struct_VkPhysicalDeviceInlineUniformBlockFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    inlineUniformBlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceInlineUniformBlockFeatures = struct_VkPhysicalDeviceInlineUniformBlockFeatures;
pub const struct_VkPhysicalDeviceInlineUniformBlockProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxInlineUniformBlockSize: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceInlineUniformBlockProperties = struct_VkPhysicalDeviceInlineUniformBlockProperties;
pub const struct_VkWriteDescriptorSetInlineUniformBlock = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dataSize: u32 = @import("std").mem.zeroes(u32),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkWriteDescriptorSetInlineUniformBlock = struct_VkWriteDescriptorSetInlineUniformBlock;
pub const struct_VkDescriptorPoolInlineUniformBlockCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxInlineUniformBlockBindings: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorPoolInlineUniformBlockCreateInfo = struct_VkDescriptorPoolInlineUniformBlockCreateInfo;
pub const struct_VkPhysicalDeviceTextureCompressionASTCHDRFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    textureCompressionASTC_HDR: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTextureCompressionASTCHDRFeatures = struct_VkPhysicalDeviceTextureCompressionASTCHDRFeatures;
pub const struct_VkRenderingAttachmentInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    resolveMode: VkResolveModeFlagBits = @import("std").mem.zeroes(VkResolveModeFlagBits),
    resolveImageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    resolveImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    loadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    storeOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    clearValue: VkClearValue = @import("std").mem.zeroes(VkClearValue),
};
pub const VkRenderingAttachmentInfo = struct_VkRenderingAttachmentInfo;
pub const struct_VkRenderingInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderingFlags = @import("std").mem.zeroes(VkRenderingFlags),
    renderArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachments: [*c]const VkRenderingAttachmentInfo = @import("std").mem.zeroes([*c]const VkRenderingAttachmentInfo),
    pDepthAttachment: [*c]const VkRenderingAttachmentInfo = @import("std").mem.zeroes([*c]const VkRenderingAttachmentInfo),
    pStencilAttachment: [*c]const VkRenderingAttachmentInfo = @import("std").mem.zeroes([*c]const VkRenderingAttachmentInfo),
};
pub const VkRenderingInfo = struct_VkRenderingInfo;
pub const struct_VkPipelineRenderingCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
    depthAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    stencilAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkPipelineRenderingCreateInfo = struct_VkPipelineRenderingCreateInfo;
pub const struct_VkPhysicalDeviceDynamicRenderingFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDynamicRenderingFeatures = struct_VkPhysicalDeviceDynamicRenderingFeatures;
pub const struct_VkCommandBufferInheritanceRenderingInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderingFlags = @import("std").mem.zeroes(VkRenderingFlags),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
    depthAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    stencilAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
};
pub const VkCommandBufferInheritanceRenderingInfo = struct_VkCommandBufferInheritanceRenderingInfo;
pub const struct_VkPhysicalDeviceShaderIntegerDotProductFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderIntegerDotProduct: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderIntegerDotProductFeatures = struct_VkPhysicalDeviceShaderIntegerDotProductFeatures;
pub const struct_VkPhysicalDeviceShaderIntegerDotProductProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    integerDotProduct8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderIntegerDotProductProperties = struct_VkPhysicalDeviceShaderIntegerDotProductProperties;
pub const struct_VkPhysicalDeviceTexelBufferAlignmentProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    storageTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    uniformTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTexelBufferAlignmentProperties = struct_VkPhysicalDeviceTexelBufferAlignmentProperties;
pub const struct_VkFormatProperties3 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    linearTilingFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
    optimalTilingFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
    bufferFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
};
pub const VkFormatProperties3 = struct_VkFormatProperties3;
pub const struct_VkPhysicalDeviceMaintenance4Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance4: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance4Features = struct_VkPhysicalDeviceMaintenance4Features;
pub const struct_VkPhysicalDeviceMaintenance4Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxBufferSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceMaintenance4Properties = struct_VkPhysicalDeviceMaintenance4Properties;
pub const struct_VkDeviceBufferMemoryRequirements = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pCreateInfo: [*c]const VkBufferCreateInfo = @import("std").mem.zeroes([*c]const VkBufferCreateInfo),
};
pub const VkDeviceBufferMemoryRequirements = struct_VkDeviceBufferMemoryRequirements;
pub const struct_VkDeviceImageMemoryRequirements = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pCreateInfo: [*c]const VkImageCreateInfo = @import("std").mem.zeroes([*c]const VkImageCreateInfo),
    planeAspect: VkImageAspectFlagBits = @import("std").mem.zeroes(VkImageAspectFlagBits),
};
pub const VkDeviceImageMemoryRequirements = struct_VkDeviceImageMemoryRequirements;
pub const PFN_vkGetPhysicalDeviceToolProperties = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkPhysicalDeviceToolProperties) callconv(.C) VkResult;
pub const PFN_vkCreatePrivateDataSlot = ?*const fn (VkDevice, [*c]const VkPrivateDataSlotCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPrivateDataSlot) callconv(.C) VkResult;
pub const PFN_vkDestroyPrivateDataSlot = ?*const fn (VkDevice, VkPrivateDataSlot, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkSetPrivateData = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, u64) callconv(.C) VkResult;
pub const PFN_vkGetPrivateData = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, [*c]u64) callconv(.C) void;
pub const PFN_vkCmdSetEvent2 = ?*const fn (VkCommandBuffer, VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdResetEvent2 = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags2) callconv(.C) void;
pub const PFN_vkCmdWaitEvents2 = ?*const fn (VkCommandBuffer, u32, [*c]const VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdPipelineBarrier2 = ?*const fn (VkCommandBuffer, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdWriteTimestamp2 = ?*const fn (VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkQueueSubmit2 = ?*const fn (VkQueue, u32, [*c]const VkSubmitInfo2, VkFence) callconv(.C) VkResult;
pub const PFN_vkCmdCopyBuffer2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImage2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyBufferToImage2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferToImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImageToBuffer2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageToBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdBlitImage2 = ?*const fn (VkCommandBuffer, [*c]const VkBlitImageInfo2) callconv(.C) void;
pub const PFN_vkCmdResolveImage2 = ?*const fn (VkCommandBuffer, [*c]const VkResolveImageInfo2) callconv(.C) void;
pub const PFN_vkCmdBeginRendering = ?*const fn (VkCommandBuffer, [*c]const VkRenderingInfo) callconv(.C) void;
pub const PFN_vkCmdEndRendering = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdSetCullMode = ?*const fn (VkCommandBuffer, VkCullModeFlags) callconv(.C) void;
pub const PFN_vkCmdSetFrontFace = ?*const fn (VkCommandBuffer, VkFrontFace) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveTopology = ?*const fn (VkCommandBuffer, VkPrimitiveTopology) callconv(.C) void;
pub const PFN_vkCmdSetViewportWithCount = ?*const fn (VkCommandBuffer, u32, [*c]const VkViewport) callconv(.C) void;
pub const PFN_vkCmdSetScissorWithCount = ?*const fn (VkCommandBuffer, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdBindVertexBuffers2 = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize, [*c]const VkDeviceSize, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdSetDepthTestEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthWriteEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthCompareOp = ?*const fn (VkCommandBuffer, VkCompareOp) callconv(.C) void;
pub const PFN_vkCmdSetDepthBoundsTestEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilTestEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilOp = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp) callconv(.C) void;
pub const PFN_vkCmdSetRasterizerDiscardEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBiasEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveRestartEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkGetDeviceBufferMemoryRequirements = ?*const fn (VkDevice, [*c]const VkDeviceBufferMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageMemoryRequirements = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageSparseMemoryRequirements = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT: c_int = 0;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED: c_int = 1;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS: c_int = 2;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2: c_int = 3;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT: c_int = 0;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT: c_int = 1;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT: c_int = 2;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT: c_int = 3;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineRobustnessBufferBehavior = c_uint;
pub const VkPipelineRobustnessBufferBehavior = enum_VkPipelineRobustnessBufferBehavior;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT: c_int = 0;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED: c_int = 1;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS: c_int = 2;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2: c_int = 3;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT: c_int = 0;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT: c_int = 1;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT: c_int = 2;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT: c_int = 3;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineRobustnessImageBehavior = c_uint;
pub const VkPipelineRobustnessImageBehavior = enum_VkPipelineRobustnessImageBehavior;
pub const VK_QUEUE_GLOBAL_PRIORITY_LOW: c_int = 128;
pub const VK_QUEUE_GLOBAL_PRIORITY_MEDIUM: c_int = 256;
pub const VK_QUEUE_GLOBAL_PRIORITY_HIGH: c_int = 512;
pub const VK_QUEUE_GLOBAL_PRIORITY_REALTIME: c_int = 1024;
pub const VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT: c_int = 128;
pub const VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT: c_int = 256;
pub const VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT: c_int = 512;
pub const VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT: c_int = 1024;
pub const VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR: c_int = 128;
pub const VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR: c_int = 256;
pub const VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR: c_int = 512;
pub const VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR: c_int = 1024;
pub const VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueueGlobalPriority = c_uint;
pub const VkQueueGlobalPriority = enum_VkQueueGlobalPriority;
pub const VK_LINE_RASTERIZATION_MODE_DEFAULT: c_int = 0;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR: c_int = 1;
pub const VK_LINE_RASTERIZATION_MODE_BRESENHAM: c_int = 2;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH: c_int = 3;
pub const VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT: c_int = 0;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT: c_int = 1;
pub const VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT: c_int = 2;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT: c_int = 3;
pub const VK_LINE_RASTERIZATION_MODE_DEFAULT_KHR: c_int = 0;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR: c_int = 1;
pub const VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR: c_int = 2;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR: c_int = 3;
pub const VK_LINE_RASTERIZATION_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkLineRasterizationMode = c_uint;
pub const VkLineRasterizationMode = enum_VkLineRasterizationMode;
pub const VK_MEMORY_UNMAP_RESERVE_BIT_EXT: c_int = 1;
pub const VK_MEMORY_UNMAP_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryUnmapFlagBits = c_uint;
pub const VkMemoryUnmapFlagBits = enum_VkMemoryUnmapFlagBits;
pub const VkMemoryUnmapFlags = VkFlags;
pub const VkPipelineCreateFlags2 = VkFlags64;
pub const VkPipelineCreateFlagBits2 = VkFlags64;
pub const VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT: VkPipelineCreateFlagBits2 = 1;
pub const VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT: VkPipelineCreateFlagBits2 = 2;
pub const VK_PIPELINE_CREATE_2_DERIVATIVE_BIT: VkPipelineCreateFlagBits2 = 4;
pub const VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT: VkPipelineCreateFlagBits2 = 8;
pub const VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT: VkPipelineCreateFlagBits2 = 16;
pub const VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 134217728)))));
pub const VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1073741824)))));
pub const VK_PIPELINE_CREATE_2_ENABLE_LEGACY_DITHERING_BIT_EXT: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR: VkPipelineCreateFlagBits2 = 1;
pub const VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR: VkPipelineCreateFlagBits2 = 2;
pub const VK_PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR: VkPipelineCreateFlagBits2 = 4;
pub const VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR: VkPipelineCreateFlagBits2 = 8;
pub const VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR: VkPipelineCreateFlagBits2 = 16;
pub const VK_PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV: VkPipelineCreateFlagBits2 = 32;
pub const VK_PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR: VkPipelineCreateFlagBits2 = 64;
pub const VK_PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR: VkPipelineCreateFlagBits2 = 128;
pub const VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16777216)))));
pub const VK_PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 67108864)))));
pub const VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 134217728)))));
pub const VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1073741824)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 268435456)))));
pub const VK_PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 536870912)))));
pub const VK_PIPELINE_CREATE_2_CAPTURE_DATA_BIT_KHR: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2147483648)))));
pub const VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_EXT: VkPipelineCreateFlagBits2 = @as(VkPipelineCreateFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 274877906944)))));
pub const VkBufferUsageFlags2 = VkFlags64;
pub const VkBufferUsageFlagBits2 = VkFlags64;
pub const VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT: VkBufferUsageFlagBits2 = 1;
pub const VK_BUFFER_USAGE_2_TRANSFER_DST_BIT: VkBufferUsageFlagBits2 = 2;
pub const VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits2 = 4;
pub const VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits2 = 8;
pub const VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT: VkBufferUsageFlagBits2 = 16;
pub const VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT: VkBufferUsageFlagBits2 = 32;
pub const VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT: VkBufferUsageFlagBits2 = 64;
pub const VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT: VkBufferUsageFlagBits2 = 128;
pub const VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR: VkBufferUsageFlagBits2 = 1;
pub const VK_BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR: VkBufferUsageFlagBits2 = 2;
pub const VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 4;
pub const VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 8;
pub const VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 16;
pub const VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 32;
pub const VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 64;
pub const VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 128;
pub const VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_BUFFER_USAGE_2_RAY_TRACING_BIT_NV: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_BUFFER_USAGE_2_VIDEO_ENCODE_DST_BIT_KHR: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_BUFFER_USAGE_2_VIDEO_ENCODE_SRC_BIT_KHR: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 67108864)))));
pub const VK_BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16777216)))));
pub const VK_BUFFER_USAGE_2_PREPROCESS_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 = @as(VkBufferUsageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2147483648)))));
pub const VK_HOST_IMAGE_COPY_MEMCPY: c_int = 1;
pub const VK_HOST_IMAGE_COPY_MEMCPY_EXT: c_int = 1;
pub const VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkHostImageCopyFlagBits = c_uint;
pub const VkHostImageCopyFlagBits = enum_VkHostImageCopyFlagBits;
pub const VkHostImageCopyFlags = VkFlags;
pub const struct_VkPhysicalDeviceVulkan14Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    globalPriorityQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSubgroupRotate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSubgroupRotateClustered: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderFloatControls2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderExpectAssume: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rectangularLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bresenhamLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    smoothLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledRectangularLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledBresenhamLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledSmoothLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vertexAttributeInstanceRateDivisor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vertexAttributeInstanceRateZeroDivisor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    indexTypeUint8: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dynamicRenderingLocalRead: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maintenance5: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maintenance6: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineProtectedAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineRobustness: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hostImageCopy: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pushDescriptor: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVulkan14Features = struct_VkPhysicalDeviceVulkan14Features;
pub const struct_VkPhysicalDeviceVulkan14Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    lineSubPixelPrecisionBits: u32 = @import("std").mem.zeroes(u32),
    maxVertexAttribDivisor: u32 = @import("std").mem.zeroes(u32),
    supportsNonZeroFirstInstance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxPushDescriptors: u32 = @import("std").mem.zeroes(u32),
    dynamicRenderingLocalReadDepthStencilAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dynamicRenderingLocalReadMultisampledAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
    earlyFragmentMultisampleCoverageAfterSampleCounting: VkBool32 = @import("std").mem.zeroes(VkBool32),
    earlyFragmentSampleMaskTestBeforeSampleCounting: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthStencilSwizzleOneSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
    polygonModePointSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nonStrictSinglePixelWideLinesUseParallelogram: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nonStrictWideLinesUseParallelogram: VkBool32 = @import("std").mem.zeroes(VkBool32),
    blockTexelViewCompatibleMultipleLayers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxCombinedImageSamplerDescriptorCount: u32 = @import("std").mem.zeroes(u32),
    fragmentShadingRateClampCombinerInputs: VkBool32 = @import("std").mem.zeroes(VkBool32),
    defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    defaultRobustnessImages: VkPipelineRobustnessImageBehavior = @import("std").mem.zeroes(VkPipelineRobustnessImageBehavior),
    copySrcLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pCopySrcLayouts: [*c]VkImageLayout = @import("std").mem.zeroes([*c]VkImageLayout),
    copyDstLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pCopyDstLayouts: [*c]VkImageLayout = @import("std").mem.zeroes([*c]VkImageLayout),
    optimalTilingLayoutUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    identicalMemoryTypeRequirements: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVulkan14Properties = struct_VkPhysicalDeviceVulkan14Properties;
pub const struct_VkDeviceQueueGlobalPriorityCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    globalPriority: VkQueueGlobalPriority = @import("std").mem.zeroes(VkQueueGlobalPriority),
};
pub const VkDeviceQueueGlobalPriorityCreateInfo = struct_VkDeviceQueueGlobalPriorityCreateInfo;
pub const struct_VkPhysicalDeviceGlobalPriorityQueryFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    globalPriorityQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceGlobalPriorityQueryFeatures = struct_VkPhysicalDeviceGlobalPriorityQueryFeatures;
pub const struct_VkQueueFamilyGlobalPriorityProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    priorityCount: u32 = @import("std").mem.zeroes(u32),
    priorities: [16]VkQueueGlobalPriority = @import("std").mem.zeroes([16]VkQueueGlobalPriority),
};
pub const VkQueueFamilyGlobalPriorityProperties = struct_VkQueueFamilyGlobalPriorityProperties;
pub const struct_VkPhysicalDeviceShaderSubgroupRotateFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupRotate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSubgroupRotateClustered: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderSubgroupRotateFeatures = struct_VkPhysicalDeviceShaderSubgroupRotateFeatures;
pub const struct_VkPhysicalDeviceShaderFloatControls2Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderFloatControls2: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderFloatControls2Features = struct_VkPhysicalDeviceShaderFloatControls2Features;
pub const struct_VkPhysicalDeviceShaderExpectAssumeFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderExpectAssume: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderExpectAssumeFeatures = struct_VkPhysicalDeviceShaderExpectAssumeFeatures;
pub const struct_VkPhysicalDeviceLineRasterizationFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rectangularLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bresenhamLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    smoothLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledRectangularLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledBresenhamLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledSmoothLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceLineRasterizationFeatures = struct_VkPhysicalDeviceLineRasterizationFeatures;
pub const struct_VkPhysicalDeviceLineRasterizationProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    lineSubPixelPrecisionBits: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceLineRasterizationProperties = struct_VkPhysicalDeviceLineRasterizationProperties;
pub const struct_VkPipelineRasterizationLineStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    lineRasterizationMode: VkLineRasterizationMode = @import("std").mem.zeroes(VkLineRasterizationMode),
    stippledLineEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    lineStippleFactor: u32 = @import("std").mem.zeroes(u32),
    lineStipplePattern: u16 = @import("std").mem.zeroes(u16),
};
pub const VkPipelineRasterizationLineStateCreateInfo = struct_VkPipelineRasterizationLineStateCreateInfo;
pub const struct_VkPhysicalDeviceVertexAttributeDivisorProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxVertexAttribDivisor: u32 = @import("std").mem.zeroes(u32),
    supportsNonZeroFirstInstance: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVertexAttributeDivisorProperties = struct_VkPhysicalDeviceVertexAttributeDivisorProperties;
pub const struct_VkVertexInputBindingDivisorDescription = extern struct {
    binding: u32 = @import("std").mem.zeroes(u32),
    divisor: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVertexInputBindingDivisorDescription = struct_VkVertexInputBindingDivisorDescription;
pub const struct_VkPipelineVertexInputDivisorStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexBindingDivisorCount: u32 = @import("std").mem.zeroes(u32),
    pVertexBindingDivisors: [*c]const VkVertexInputBindingDivisorDescription = @import("std").mem.zeroes([*c]const VkVertexInputBindingDivisorDescription),
};
pub const VkPipelineVertexInputDivisorStateCreateInfo = struct_VkPipelineVertexInputDivisorStateCreateInfo;
pub const struct_VkPhysicalDeviceVertexAttributeDivisorFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vertexAttributeInstanceRateDivisor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vertexAttributeInstanceRateZeroDivisor: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVertexAttributeDivisorFeatures = struct_VkPhysicalDeviceVertexAttributeDivisorFeatures;
pub const struct_VkPhysicalDeviceIndexTypeUint8Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    indexTypeUint8: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceIndexTypeUint8Features = struct_VkPhysicalDeviceIndexTypeUint8Features;
pub const struct_VkMemoryMapInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkMemoryMapFlags = @import("std").mem.zeroes(VkMemoryMapFlags),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkMemoryMapInfo = struct_VkMemoryMapInfo;
pub const struct_VkMemoryUnmapInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkMemoryUnmapFlags = @import("std").mem.zeroes(VkMemoryUnmapFlags),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
};
pub const VkMemoryUnmapInfo = struct_VkMemoryUnmapInfo;
pub const struct_VkPhysicalDeviceMaintenance5Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance5: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance5Features = struct_VkPhysicalDeviceMaintenance5Features;
pub const struct_VkPhysicalDeviceMaintenance5Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    earlyFragmentMultisampleCoverageAfterSampleCounting: VkBool32 = @import("std").mem.zeroes(VkBool32),
    earlyFragmentSampleMaskTestBeforeSampleCounting: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthStencilSwizzleOneSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
    polygonModePointSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nonStrictSinglePixelWideLinesUseParallelogram: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nonStrictWideLinesUseParallelogram: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance5Properties = struct_VkPhysicalDeviceMaintenance5Properties;
pub const struct_VkRenderingAreaInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
    depthAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    stencilAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkRenderingAreaInfo = struct_VkRenderingAreaInfo;
pub const struct_VkImageSubresource2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageSubresource: VkImageSubresource = @import("std").mem.zeroes(VkImageSubresource),
};
pub const VkImageSubresource2 = struct_VkImageSubresource2;
pub const struct_VkDeviceImageSubresourceInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pCreateInfo: [*c]const VkImageCreateInfo = @import("std").mem.zeroes([*c]const VkImageCreateInfo),
    pSubresource: [*c]const VkImageSubresource2 = @import("std").mem.zeroes([*c]const VkImageSubresource2),
};
pub const VkDeviceImageSubresourceInfo = struct_VkDeviceImageSubresourceInfo;
pub const struct_VkSubresourceLayout2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subresourceLayout: VkSubresourceLayout = @import("std").mem.zeroes(VkSubresourceLayout),
};
pub const VkSubresourceLayout2 = struct_VkSubresourceLayout2;
pub const struct_VkPipelineCreateFlags2CreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags2 = @import("std").mem.zeroes(VkPipelineCreateFlags2),
};
pub const VkPipelineCreateFlags2CreateInfo = struct_VkPipelineCreateFlags2CreateInfo;
pub const struct_VkBufferUsageFlags2CreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    usage: VkBufferUsageFlags2 = @import("std").mem.zeroes(VkBufferUsageFlags2),
};
pub const VkBufferUsageFlags2CreateInfo = struct_VkBufferUsageFlags2CreateInfo;
pub const struct_VkPhysicalDevicePushDescriptorProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxPushDescriptors: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDevicePushDescriptorProperties = struct_VkPhysicalDevicePushDescriptorProperties;
pub const struct_VkPhysicalDeviceDynamicRenderingLocalReadFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicRenderingLocalRead: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDynamicRenderingLocalReadFeatures = struct_VkPhysicalDeviceDynamicRenderingLocalReadFeatures;
pub const struct_VkRenderingAttachmentLocationInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentLocations: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkRenderingAttachmentLocationInfo = struct_VkRenderingAttachmentLocationInfo;
pub const struct_VkRenderingInputAttachmentIndexInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentInputIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pDepthInputAttachmentIndex: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pStencilInputAttachmentIndex: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkRenderingInputAttachmentIndexInfo = struct_VkRenderingInputAttachmentIndexInfo;
pub const struct_VkPhysicalDeviceMaintenance6Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance6: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance6Features = struct_VkPhysicalDeviceMaintenance6Features;
pub const struct_VkPhysicalDeviceMaintenance6Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    blockTexelViewCompatibleMultipleLayers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxCombinedImageSamplerDescriptorCount: u32 = @import("std").mem.zeroes(u32),
    fragmentShadingRateClampCombinerInputs: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance6Properties = struct_VkPhysicalDeviceMaintenance6Properties;
pub const struct_VkBindMemoryStatus = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pResult: [*c]VkResult = @import("std").mem.zeroes([*c]VkResult),
};
pub const VkBindMemoryStatus = struct_VkBindMemoryStatus;
pub const struct_VkBindDescriptorSetsInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    firstSet: u32 = @import("std").mem.zeroes(u32),
    descriptorSetCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorSets: [*c]const VkDescriptorSet = @import("std").mem.zeroes([*c]const VkDescriptorSet),
    dynamicOffsetCount: u32 = @import("std").mem.zeroes(u32),
    pDynamicOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkBindDescriptorSetsInfo = struct_VkBindDescriptorSetsInfo;
pub const struct_VkPushConstantsInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    offset: u32 = @import("std").mem.zeroes(u32),
    size: u32 = @import("std").mem.zeroes(u32),
    pValues: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkPushConstantsInfo = struct_VkPushConstantsInfo;
pub const struct_VkPushDescriptorSetInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
    descriptorWriteCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorWrites: [*c]const VkWriteDescriptorSet = @import("std").mem.zeroes([*c]const VkWriteDescriptorSet),
};
pub const VkPushDescriptorSetInfo = struct_VkPushDescriptorSetInfo;
pub const struct_VkPushDescriptorSetWithTemplateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorUpdateTemplate: VkDescriptorUpdateTemplate = @import("std").mem.zeroes(VkDescriptorUpdateTemplate),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkPushDescriptorSetWithTemplateInfo = struct_VkPushDescriptorSetWithTemplateInfo;
pub const struct_VkPhysicalDevicePipelineProtectedAccessFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineProtectedAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineProtectedAccessFeatures = struct_VkPhysicalDevicePipelineProtectedAccessFeatures;
pub const struct_VkPhysicalDevicePipelineRobustnessFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineRobustness: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineRobustnessFeatures = struct_VkPhysicalDevicePipelineRobustnessFeatures;
pub const struct_VkPhysicalDevicePipelineRobustnessProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    defaultRobustnessImages: VkPipelineRobustnessImageBehavior = @import("std").mem.zeroes(VkPipelineRobustnessImageBehavior),
};
pub const VkPhysicalDevicePipelineRobustnessProperties = struct_VkPhysicalDevicePipelineRobustnessProperties;
pub const struct_VkPipelineRobustnessCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    storageBuffers: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    uniformBuffers: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    vertexInputs: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    images: VkPipelineRobustnessImageBehavior = @import("std").mem.zeroes(VkPipelineRobustnessImageBehavior),
};
pub const VkPipelineRobustnessCreateInfo = struct_VkPipelineRobustnessCreateInfo;
pub const struct_VkPhysicalDeviceHostImageCopyFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hostImageCopy: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceHostImageCopyFeatures = struct_VkPhysicalDeviceHostImageCopyFeatures;
pub const struct_VkPhysicalDeviceHostImageCopyProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    copySrcLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pCopySrcLayouts: [*c]VkImageLayout = @import("std").mem.zeroes([*c]VkImageLayout),
    copyDstLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pCopyDstLayouts: [*c]VkImageLayout = @import("std").mem.zeroes([*c]VkImageLayout),
    optimalTilingLayoutUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    identicalMemoryTypeRequirements: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceHostImageCopyProperties = struct_VkPhysicalDeviceHostImageCopyProperties;
pub const struct_VkMemoryToImageCopy = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pHostPointer: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memoryRowLength: u32 = @import("std").mem.zeroes(u32),
    memoryImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkMemoryToImageCopy = struct_VkMemoryToImageCopy;
pub const struct_VkImageToMemoryCopy = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pHostPointer: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryRowLength: u32 = @import("std").mem.zeroes(u32),
    memoryImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkImageToMemoryCopy = struct_VkImageToMemoryCopy;
pub const struct_VkCopyMemoryToImageInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHostImageCopyFlags = @import("std").mem.zeroes(VkHostImageCopyFlags),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkMemoryToImageCopy = @import("std").mem.zeroes([*c]const VkMemoryToImageCopy),
};
pub const VkCopyMemoryToImageInfo = struct_VkCopyMemoryToImageInfo;
pub const struct_VkCopyImageToMemoryInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHostImageCopyFlags = @import("std").mem.zeroes(VkHostImageCopyFlags),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageToMemoryCopy = @import("std").mem.zeroes([*c]const VkImageToMemoryCopy),
};
pub const VkCopyImageToMemoryInfo = struct_VkCopyImageToMemoryInfo;
pub const struct_VkCopyImageToImageInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHostImageCopyFlags = @import("std").mem.zeroes(VkHostImageCopyFlags),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageCopy2 = @import("std").mem.zeroes([*c]const VkImageCopy2),
};
pub const VkCopyImageToImageInfo = struct_VkCopyImageToImageInfo;
pub const struct_VkHostImageLayoutTransitionInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    oldLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    newLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
};
pub const VkHostImageLayoutTransitionInfo = struct_VkHostImageLayoutTransitionInfo;
pub const struct_VkSubresourceHostMemcpySize = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkSubresourceHostMemcpySize = struct_VkSubresourceHostMemcpySize;
pub const struct_VkHostImageCopyDevicePerformanceQuery = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    optimalDeviceAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    identicalMemoryLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkHostImageCopyDevicePerformanceQuery = struct_VkHostImageCopyDevicePerformanceQuery;
pub const PFN_vkCmdSetLineStipple = ?*const fn (VkCommandBuffer, u32, u16) callconv(.C) void;
pub const PFN_vkMapMemory2 = ?*const fn (VkDevice, [*c]const VkMemoryMapInfo, [*c]?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkUnmapMemory2 = ?*const fn (VkDevice, [*c]const VkMemoryUnmapInfo) callconv(.C) VkResult;
pub const PFN_vkCmdBindIndexBuffer2 = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, VkIndexType) callconv(.C) void;
pub const PFN_vkGetRenderingAreaGranularity = ?*const fn (VkDevice, [*c]const VkRenderingAreaInfo, [*c]VkExtent2D) callconv(.C) void;
pub const PFN_vkGetDeviceImageSubresourceLayout = ?*const fn (VkDevice, [*c]const VkDeviceImageSubresourceInfo, [*c]VkSubresourceLayout2) callconv(.C) void;
pub const PFN_vkGetImageSubresourceLayout2 = ?*const fn (VkDevice, VkImage, [*c]const VkImageSubresource2, [*c]VkSubresourceLayout2) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSet = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, [*c]const VkWriteDescriptorSet) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSetWithTemplate = ?*const fn (VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, u32, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkCmdSetRenderingAttachmentLocations = ?*const fn (VkCommandBuffer, [*c]const VkRenderingAttachmentLocationInfo) callconv(.C) void;
pub const PFN_vkCmdSetRenderingInputAttachmentIndices = ?*const fn (VkCommandBuffer, [*c]const VkRenderingInputAttachmentIndexInfo) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorSets2 = ?*const fn (VkCommandBuffer, [*c]const VkBindDescriptorSetsInfo) callconv(.C) void;
pub const PFN_vkCmdPushConstants2 = ?*const fn (VkCommandBuffer, [*c]const VkPushConstantsInfo) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSet2 = ?*const fn (VkCommandBuffer, [*c]const VkPushDescriptorSetInfo) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSetWithTemplate2 = ?*const fn (VkCommandBuffer, [*c]const VkPushDescriptorSetWithTemplateInfo) callconv(.C) void;
pub const PFN_vkCopyMemoryToImage = ?*const fn (VkDevice, [*c]const VkCopyMemoryToImageInfo) callconv(.C) VkResult;
pub const PFN_vkCopyImageToMemory = ?*const fn (VkDevice, [*c]const VkCopyImageToMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkCopyImageToImage = ?*const fn (VkDevice, [*c]const VkCopyImageToImageInfo) callconv(.C) VkResult;
pub const PFN_vkTransitionImageLayout = ?*const fn (VkDevice, u32, [*c]const VkHostImageLayoutTransitionInfo) callconv(.C) VkResult;
pub const struct_VkSurfaceKHR_T = opaque {};
pub const VkSurfaceKHR = ?*struct_VkSurfaceKHR_T;
pub const VK_PRESENT_MODE_IMMEDIATE_KHR: c_int = 0;
pub const VK_PRESENT_MODE_MAILBOX_KHR: c_int = 1;
pub const VK_PRESENT_MODE_FIFO_KHR: c_int = 2;
pub const VK_PRESENT_MODE_FIFO_RELAXED_KHR: c_int = 3;
pub const VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR: c_int = 1000111000;
pub const VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR: c_int = 1000111001;
pub const VK_PRESENT_MODE_FIFO_LATEST_READY_EXT: c_int = 1000361000;
pub const VK_PRESENT_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPresentModeKHR = c_uint;
pub const VkPresentModeKHR = enum_VkPresentModeKHR;
pub const VK_COLOR_SPACE_SRGB_NONLINEAR_KHR: c_int = 0;
pub const VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT: c_int = 1000104001;
pub const VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT: c_int = 1000104002;
pub const VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT: c_int = 1000104003;
pub const VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT: c_int = 1000104004;
pub const VK_COLOR_SPACE_BT709_LINEAR_EXT: c_int = 1000104005;
pub const VK_COLOR_SPACE_BT709_NONLINEAR_EXT: c_int = 1000104006;
pub const VK_COLOR_SPACE_BT2020_LINEAR_EXT: c_int = 1000104007;
pub const VK_COLOR_SPACE_HDR10_ST2084_EXT: c_int = 1000104008;
pub const VK_COLOR_SPACE_DOLBYVISION_EXT: c_int = 1000104009;
pub const VK_COLOR_SPACE_HDR10_HLG_EXT: c_int = 1000104010;
pub const VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT: c_int = 1000104011;
pub const VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT: c_int = 1000104012;
pub const VK_COLOR_SPACE_PASS_THROUGH_EXT: c_int = 1000104013;
pub const VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT: c_int = 1000104014;
pub const VK_COLOR_SPACE_DISPLAY_NATIVE_AMD: c_int = 1000213000;
pub const VK_COLORSPACE_SRGB_NONLINEAR_KHR: c_int = 0;
pub const VK_COLOR_SPACE_DCI_P3_LINEAR_EXT: c_int = 1000104003;
pub const VK_COLOR_SPACE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkColorSpaceKHR = c_uint;
pub const VkColorSpaceKHR = enum_VkColorSpaceKHR;
pub const VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR: c_int = 1;
pub const VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR: c_int = 2;
pub const VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR: c_int = 4;
pub const VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR: c_int = 8;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR: c_int = 16;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR: c_int = 32;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR: c_int = 64;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR: c_int = 128;
pub const VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR: c_int = 256;
pub const VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkSurfaceTransformFlagBitsKHR = c_uint;
pub const VkSurfaceTransformFlagBitsKHR = enum_VkSurfaceTransformFlagBitsKHR;
pub const VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR: c_int = 1;
pub const VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR: c_int = 2;
pub const VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR: c_int = 4;
pub const VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR: c_int = 8;
pub const VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkCompositeAlphaFlagBitsKHR = c_uint;
pub const VkCompositeAlphaFlagBitsKHR = enum_VkCompositeAlphaFlagBitsKHR;
pub const VkCompositeAlphaFlagsKHR = VkFlags;
pub const VkSurfaceTransformFlagsKHR = VkFlags;
pub const struct_VkSurfaceCapabilitiesKHR = extern struct {
    minImageCount: u32 = @import("std").mem.zeroes(u32),
    maxImageCount: u32 = @import("std").mem.zeroes(u32),
    currentExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    supportedTransforms: VkSurfaceTransformFlagsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagsKHR),
    currentTransform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR = @import("std").mem.zeroes(VkCompositeAlphaFlagsKHR),
    supportedUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkSurfaceCapabilitiesKHR = struct_VkSurfaceCapabilitiesKHR;
pub const struct_VkSurfaceFormatKHR = extern struct {
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    colorSpace: VkColorSpaceKHR = @import("std").mem.zeroes(VkColorSpaceKHR),
};
pub const VkSurfaceFormatKHR = struct_VkSurfaceFormatKHR;
pub const PFN_vkDestroySurfaceKHR = ?*const fn (VkInstance, VkSurfaceKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSurfaceSupportKHR = ?*const fn (VkPhysicalDevice, u32, VkSurfaceKHR, [*c]VkBool32) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]VkSurfaceCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]u32, [*c]VkSurfaceFormatKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]u32, [*c]VkPresentModeKHR) callconv(.C) VkResult;
pub const struct_VkSwapchainKHR_T = opaque {};
pub const VkSwapchainKHR = ?*struct_VkSwapchainKHR_T;
pub const VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: c_int = 1;
pub const VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR: c_int = 2;
pub const VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR: c_int = 4;
pub const VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT: c_int = 8;
pub const VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkSwapchainCreateFlagBitsKHR = c_uint;
pub const VkSwapchainCreateFlagBitsKHR = enum_VkSwapchainCreateFlagBitsKHR;
pub const VkSwapchainCreateFlagsKHR = VkFlags;
pub const VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR: c_int = 1;
pub const VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR: c_int = 2;
pub const VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR: c_int = 4;
pub const VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR: c_int = 8;
pub const VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkDeviceGroupPresentModeFlagBitsKHR = c_uint;
pub const VkDeviceGroupPresentModeFlagBitsKHR = enum_VkDeviceGroupPresentModeFlagBitsKHR;
pub const VkDeviceGroupPresentModeFlagsKHR = VkFlags;
pub const struct_VkSwapchainCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSwapchainCreateFlagsKHR = @import("std").mem.zeroes(VkSwapchainCreateFlagsKHR),
    surface: VkSurfaceKHR = @import("std").mem.zeroes(VkSurfaceKHR),
    minImageCount: u32 = @import("std").mem.zeroes(u32),
    imageFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    imageColorSpace: VkColorSpaceKHR = @import("std").mem.zeroes(VkColorSpaceKHR),
    imageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    imageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    imageUsage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    imageSharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    preTransform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    compositeAlpha: VkCompositeAlphaFlagBitsKHR = @import("std").mem.zeroes(VkCompositeAlphaFlagBitsKHR),
    presentMode: VkPresentModeKHR = @import("std").mem.zeroes(VkPresentModeKHR),
    clipped: VkBool32 = @import("std").mem.zeroes(VkBool32),
    oldSwapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
};
pub const VkSwapchainCreateInfoKHR = struct_VkSwapchainCreateInfoKHR;
pub const struct_VkPresentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pSwapchains: [*c]const VkSwapchainKHR = @import("std").mem.zeroes([*c]const VkSwapchainKHR),
    pImageIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pResults: [*c]VkResult = @import("std").mem.zeroes([*c]VkResult),
};
pub const VkPresentInfoKHR = struct_VkPresentInfoKHR;
pub const struct_VkImageSwapchainCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
};
pub const VkImageSwapchainCreateInfoKHR = struct_VkImageSwapchainCreateInfoKHR;
pub const struct_VkBindImageMemorySwapchainInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
    imageIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkBindImageMemorySwapchainInfoKHR = struct_VkBindImageMemorySwapchainInfoKHR;
pub const struct_VkAcquireNextImageInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
    timeout: u64 = @import("std").mem.zeroes(u64),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    fence: VkFence = @import("std").mem.zeroes(VkFence),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkAcquireNextImageInfoKHR = struct_VkAcquireNextImageInfoKHR;
pub const struct_VkDeviceGroupPresentCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentMask: [32]u32 = @import("std").mem.zeroes([32]u32),
    modes: VkDeviceGroupPresentModeFlagsKHR = @import("std").mem.zeroes(VkDeviceGroupPresentModeFlagsKHR),
};
pub const VkDeviceGroupPresentCapabilitiesKHR = struct_VkDeviceGroupPresentCapabilitiesKHR;
pub const struct_VkDeviceGroupPresentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    mode: VkDeviceGroupPresentModeFlagBitsKHR = @import("std").mem.zeroes(VkDeviceGroupPresentModeFlagBitsKHR),
};
pub const VkDeviceGroupPresentInfoKHR = struct_VkDeviceGroupPresentInfoKHR;
pub const struct_VkDeviceGroupSwapchainCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    modes: VkDeviceGroupPresentModeFlagsKHR = @import("std").mem.zeroes(VkDeviceGroupPresentModeFlagsKHR),
};
pub const VkDeviceGroupSwapchainCreateInfoKHR = struct_VkDeviceGroupSwapchainCreateInfoKHR;
pub const PFN_vkCreateSwapchainKHR = ?*const fn (VkDevice, [*c]const VkSwapchainCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkSwapchainKHR) callconv(.C) VkResult;
pub const PFN_vkDestroySwapchainKHR = ?*const fn (VkDevice, VkSwapchainKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetSwapchainImagesKHR = ?*const fn (VkDevice, VkSwapchainKHR, [*c]u32, [*c]VkImage) callconv(.C) VkResult;
pub const PFN_vkAcquireNextImageKHR = ?*const fn (VkDevice, VkSwapchainKHR, u64, VkSemaphore, VkFence, [*c]u32) callconv(.C) VkResult;
pub const PFN_vkQueuePresentKHR = ?*const fn (VkQueue, [*c]const VkPresentInfoKHR) callconv(.C) VkResult;
pub const PFN_vkGetDeviceGroupPresentCapabilitiesKHR = ?*const fn (VkDevice, [*c]VkDeviceGroupPresentCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetDeviceGroupSurfacePresentModesKHR = ?*const fn (VkDevice, VkSurfaceKHR, [*c]VkDeviceGroupPresentModeFlagsKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDevicePresentRectanglesKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]u32, [*c]VkRect2D) callconv(.C) VkResult;
pub const PFN_vkAcquireNextImage2KHR = ?*const fn (VkDevice, [*c]const VkAcquireNextImageInfoKHR, [*c]u32) callconv(.C) VkResult;
pub const struct_VkDisplayKHR_T = opaque {};
pub const VkDisplayKHR = ?*struct_VkDisplayKHR_T;
pub const struct_VkDisplayModeKHR_T = opaque {};
pub const VkDisplayModeKHR = ?*struct_VkDisplayModeKHR_T;
pub const VkDisplayModeCreateFlagsKHR = VkFlags;
pub const VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR: c_int = 1;
pub const VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR: c_int = 2;
pub const VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR: c_int = 4;
pub const VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR: c_int = 8;
pub const VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkDisplayPlaneAlphaFlagBitsKHR = c_uint;
pub const VkDisplayPlaneAlphaFlagBitsKHR = enum_VkDisplayPlaneAlphaFlagBitsKHR;
pub const VkDisplayPlaneAlphaFlagsKHR = VkFlags;
pub const VkDisplaySurfaceCreateFlagsKHR = VkFlags;
pub const struct_VkDisplayModeParametersKHR = extern struct {
    visibleRegion: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    refreshRate: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDisplayModeParametersKHR = struct_VkDisplayModeParametersKHR;
pub const struct_VkDisplayModeCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDisplayModeCreateFlagsKHR = @import("std").mem.zeroes(VkDisplayModeCreateFlagsKHR),
    parameters: VkDisplayModeParametersKHR = @import("std").mem.zeroes(VkDisplayModeParametersKHR),
};
pub const VkDisplayModeCreateInfoKHR = struct_VkDisplayModeCreateInfoKHR;
pub const struct_VkDisplayModePropertiesKHR = extern struct {
    displayMode: VkDisplayModeKHR = @import("std").mem.zeroes(VkDisplayModeKHR),
    parameters: VkDisplayModeParametersKHR = @import("std").mem.zeroes(VkDisplayModeParametersKHR),
};
pub const VkDisplayModePropertiesKHR = struct_VkDisplayModePropertiesKHR;
pub const struct_VkDisplayPlaneCapabilitiesKHR = extern struct {
    supportedAlpha: VkDisplayPlaneAlphaFlagsKHR = @import("std").mem.zeroes(VkDisplayPlaneAlphaFlagsKHR),
    minSrcPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    maxSrcPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    minSrcExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxSrcExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minDstPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    maxDstPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    minDstExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxDstExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkDisplayPlaneCapabilitiesKHR = struct_VkDisplayPlaneCapabilitiesKHR;
pub const struct_VkDisplayPlanePropertiesKHR = extern struct {
    currentDisplay: VkDisplayKHR = @import("std").mem.zeroes(VkDisplayKHR),
    currentStackIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDisplayPlanePropertiesKHR = struct_VkDisplayPlanePropertiesKHR;
pub const struct_VkDisplayPropertiesKHR = extern struct {
    display: VkDisplayKHR = @import("std").mem.zeroes(VkDisplayKHR),
    displayName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    physicalDimensions: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    physicalResolution: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    supportedTransforms: VkSurfaceTransformFlagsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagsKHR),
    planeReorderPossible: VkBool32 = @import("std").mem.zeroes(VkBool32),
    persistentContent: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDisplayPropertiesKHR = struct_VkDisplayPropertiesKHR;
pub const struct_VkDisplaySurfaceCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDisplaySurfaceCreateFlagsKHR = @import("std").mem.zeroes(VkDisplaySurfaceCreateFlagsKHR),
    displayMode: VkDisplayModeKHR = @import("std").mem.zeroes(VkDisplayModeKHR),
    planeIndex: u32 = @import("std").mem.zeroes(u32),
    planeStackIndex: u32 = @import("std").mem.zeroes(u32),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    globalAlpha: f32 = @import("std").mem.zeroes(f32),
    alphaMode: VkDisplayPlaneAlphaFlagBitsKHR = @import("std").mem.zeroes(VkDisplayPlaneAlphaFlagBitsKHR),
    imageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkDisplaySurfaceCreateInfoKHR = struct_VkDisplaySurfaceCreateInfoKHR;
pub const PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayPropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayPlanePropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayPlaneSupportedDisplaysKHR = ?*const fn (VkPhysicalDevice, u32, [*c]u32, [*c]VkDisplayKHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayModePropertiesKHR = ?*const fn (VkPhysicalDevice, VkDisplayKHR, [*c]u32, [*c]VkDisplayModePropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkCreateDisplayModeKHR = ?*const fn (VkPhysicalDevice, VkDisplayKHR, [*c]const VkDisplayModeCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkDisplayModeKHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayPlaneCapabilitiesKHR = ?*const fn (VkPhysicalDevice, VkDisplayModeKHR, u32, [*c]VkDisplayPlaneCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkCreateDisplayPlaneSurfaceKHR = ?*const fn (VkInstance, [*c]const VkDisplaySurfaceCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkSurfaceKHR) callconv(.C) VkResult;
pub const struct_VkDisplayPresentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcRect: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    dstRect: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    persistent: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDisplayPresentInfoKHR = struct_VkDisplayPresentInfoKHR;
pub const PFN_vkCreateSharedSwapchainsKHR = ?*const fn (VkDevice, u32, [*c]const VkSwapchainCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkSwapchainKHR) callconv(.C) VkResult;
pub const struct_VkVideoSessionKHR_T = opaque {};
pub const VkVideoSessionKHR = ?*struct_VkVideoSessionKHR_T;
pub const struct_VkVideoSessionParametersKHR_T = opaque {};
pub const VkVideoSessionParametersKHR = ?*struct_VkVideoSessionParametersKHR_T;
pub const VK_QUERY_RESULT_STATUS_ERROR_KHR: c_int = -1;
pub const VK_QUERY_RESULT_STATUS_NOT_READY_KHR: c_int = 0;
pub const VK_QUERY_RESULT_STATUS_COMPLETE_KHR: c_int = 1;
pub const VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR: c_int = -1000299000;
pub const VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkQueryResultStatusKHR = c_int;
pub const VkQueryResultStatusKHR = enum_VkQueryResultStatusKHR;
pub const VK_VIDEO_CODEC_OPERATION_NONE_KHR: c_int = 0;
pub const VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR: c_int = 65536;
pub const VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR: c_int = 131072;
pub const VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR: c_int = 1;
pub const VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR: c_int = 2;
pub const VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR: c_int = 4;
pub const VK_VIDEO_CODEC_OPERATION_ENCODE_AV1_BIT_KHR: c_int = 262144;
pub const VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoCodecOperationFlagBitsKHR = c_uint;
pub const VkVideoCodecOperationFlagBitsKHR = enum_VkVideoCodecOperationFlagBitsKHR;
pub const VkVideoCodecOperationFlagsKHR = VkFlags;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR: c_int = 0;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR: c_int = 1;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR: c_int = 2;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR: c_int = 4;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR: c_int = 8;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoChromaSubsamplingFlagBitsKHR = c_uint;
pub const VkVideoChromaSubsamplingFlagBitsKHR = enum_VkVideoChromaSubsamplingFlagBitsKHR;
pub const VkVideoChromaSubsamplingFlagsKHR = VkFlags;
pub const VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR: c_int = 0;
pub const VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR: c_int = 1;
pub const VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR: c_int = 4;
pub const VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR: c_int = 16;
pub const VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoComponentBitDepthFlagBitsKHR = c_uint;
pub const VkVideoComponentBitDepthFlagBitsKHR = enum_VkVideoComponentBitDepthFlagBitsKHR;
pub const VkVideoComponentBitDepthFlagsKHR = VkFlags;
pub const VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR: c_int = 1;
pub const VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR: c_int = 2;
pub const VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoCapabilityFlagBitsKHR = c_uint;
pub const VkVideoCapabilityFlagBitsKHR = enum_VkVideoCapabilityFlagBitsKHR;
pub const VkVideoCapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR: c_int = 1;
pub const VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR: c_int = 2;
pub const VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR: c_int = 4;
pub const VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR: c_int = 8;
pub const VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_EMPHASIS_MAP_BIT_KHR: c_int = 16;
pub const VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoSessionCreateFlagBitsKHR = c_uint;
pub const VkVideoSessionCreateFlagBitsKHR = enum_VkVideoSessionCreateFlagBitsKHR;
pub const VkVideoSessionCreateFlagsKHR = VkFlags;
pub const VK_VIDEO_SESSION_PARAMETERS_CREATE_QUANTIZATION_MAP_COMPATIBLE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_SESSION_PARAMETERS_CREATE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoSessionParametersCreateFlagBitsKHR = c_uint;
pub const VkVideoSessionParametersCreateFlagBitsKHR = enum_VkVideoSessionParametersCreateFlagBitsKHR;
pub const VkVideoSessionParametersCreateFlagsKHR = VkFlags;
pub const VkVideoBeginCodingFlagsKHR = VkFlags;
pub const VkVideoEndCodingFlagsKHR = VkFlags;
pub const VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR: c_int = 1;
pub const VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR: c_int = 2;
pub const VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR: c_int = 4;
pub const VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoCodingControlFlagBitsKHR = c_uint;
pub const VkVideoCodingControlFlagBitsKHR = enum_VkVideoCodingControlFlagBitsKHR;
pub const VkVideoCodingControlFlagsKHR = VkFlags;
pub const struct_VkQueueFamilyQueryResultStatusPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    queryResultStatusSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkQueueFamilyQueryResultStatusPropertiesKHR = struct_VkQueueFamilyQueryResultStatusPropertiesKHR;
pub const struct_VkQueueFamilyVideoPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    videoCodecOperations: VkVideoCodecOperationFlagsKHR = @import("std").mem.zeroes(VkVideoCodecOperationFlagsKHR),
};
pub const VkQueueFamilyVideoPropertiesKHR = struct_VkQueueFamilyVideoPropertiesKHR;
pub const struct_VkVideoProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoCodecOperation: VkVideoCodecOperationFlagBitsKHR = @import("std").mem.zeroes(VkVideoCodecOperationFlagBitsKHR),
    chromaSubsampling: VkVideoChromaSubsamplingFlagsKHR = @import("std").mem.zeroes(VkVideoChromaSubsamplingFlagsKHR),
    lumaBitDepth: VkVideoComponentBitDepthFlagsKHR = @import("std").mem.zeroes(VkVideoComponentBitDepthFlagsKHR),
    chromaBitDepth: VkVideoComponentBitDepthFlagsKHR = @import("std").mem.zeroes(VkVideoComponentBitDepthFlagsKHR),
};
pub const VkVideoProfileInfoKHR = struct_VkVideoProfileInfoKHR;
pub const struct_VkVideoProfileListInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    profileCount: u32 = @import("std").mem.zeroes(u32),
    pProfiles: [*c]const VkVideoProfileInfoKHR = @import("std").mem.zeroes([*c]const VkVideoProfileInfoKHR),
};
pub const VkVideoProfileListInfoKHR = struct_VkVideoProfileListInfoKHR;
pub const struct_VkVideoCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoCapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoCapabilityFlagsKHR),
    minBitstreamBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minBitstreamBufferSizeAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    pictureAccessGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minCodedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxCodedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxDpbSlots: u32 = @import("std").mem.zeroes(u32),
    maxActiveReferencePictures: u32 = @import("std").mem.zeroes(u32),
    stdHeaderVersion: VkExtensionProperties = @import("std").mem.zeroes(VkExtensionProperties),
};
pub const VkVideoCapabilitiesKHR = struct_VkVideoCapabilitiesKHR;
pub const struct_VkPhysicalDeviceVideoFormatInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageUsage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkPhysicalDeviceVideoFormatInfoKHR = struct_VkPhysicalDeviceVideoFormatInfoKHR;
pub const struct_VkVideoFormatPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    componentMapping: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    imageCreateFlags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
    imageType: VkImageType = @import("std").mem.zeroes(VkImageType),
    imageTiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
    imageUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkVideoFormatPropertiesKHR = struct_VkVideoFormatPropertiesKHR;
pub const struct_VkVideoPictureResourceInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    codedOffset: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    codedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    imageViewBinding: VkImageView = @import("std").mem.zeroes(VkImageView),
};
pub const VkVideoPictureResourceInfoKHR = struct_VkVideoPictureResourceInfoKHR;
pub const struct_VkVideoReferenceSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    slotIndex: i32 = @import("std").mem.zeroes(i32),
    pPictureResource: [*c]const VkVideoPictureResourceInfoKHR = @import("std").mem.zeroes([*c]const VkVideoPictureResourceInfoKHR),
};
pub const VkVideoReferenceSlotInfoKHR = struct_VkVideoReferenceSlotInfoKHR;
pub const struct_VkVideoSessionMemoryRequirementsKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryBindIndex: u32 = @import("std").mem.zeroes(u32),
    memoryRequirements: VkMemoryRequirements = @import("std").mem.zeroes(VkMemoryRequirements),
};
pub const VkVideoSessionMemoryRequirementsKHR = struct_VkVideoSessionMemoryRequirementsKHR;
pub const struct_VkBindVideoSessionMemoryInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memoryBindIndex: u32 = @import("std").mem.zeroes(u32),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memorySize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBindVideoSessionMemoryInfoKHR = struct_VkBindVideoSessionMemoryInfoKHR;
pub const struct_VkVideoSessionCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    flags: VkVideoSessionCreateFlagsKHR = @import("std").mem.zeroes(VkVideoSessionCreateFlagsKHR),
    pVideoProfile: [*c]const VkVideoProfileInfoKHR = @import("std").mem.zeroes([*c]const VkVideoProfileInfoKHR),
    pictureFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    maxCodedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    referencePictureFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    maxDpbSlots: u32 = @import("std").mem.zeroes(u32),
    maxActiveReferencePictures: u32 = @import("std").mem.zeroes(u32),
    pStdHeaderVersion: [*c]const VkExtensionProperties = @import("std").mem.zeroes([*c]const VkExtensionProperties),
};
pub const VkVideoSessionCreateInfoKHR = struct_VkVideoSessionCreateInfoKHR;
pub const struct_VkVideoSessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoSessionParametersCreateFlagsKHR = @import("std").mem.zeroes(VkVideoSessionParametersCreateFlagsKHR),
    videoSessionParametersTemplate: VkVideoSessionParametersKHR = @import("std").mem.zeroes(VkVideoSessionParametersKHR),
    videoSession: VkVideoSessionKHR = @import("std").mem.zeroes(VkVideoSessionKHR),
};
pub const VkVideoSessionParametersCreateInfoKHR = struct_VkVideoSessionParametersCreateInfoKHR;
pub const struct_VkVideoSessionParametersUpdateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    updateSequenceCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoSessionParametersUpdateInfoKHR = struct_VkVideoSessionParametersUpdateInfoKHR;
pub const struct_VkVideoBeginCodingInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoBeginCodingFlagsKHR = @import("std").mem.zeroes(VkVideoBeginCodingFlagsKHR),
    videoSession: VkVideoSessionKHR = @import("std").mem.zeroes(VkVideoSessionKHR),
    videoSessionParameters: VkVideoSessionParametersKHR = @import("std").mem.zeroes(VkVideoSessionParametersKHR),
    referenceSlotCount: u32 = @import("std").mem.zeroes(u32),
    pReferenceSlots: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
};
pub const VkVideoBeginCodingInfoKHR = struct_VkVideoBeginCodingInfoKHR;
pub const struct_VkVideoEndCodingInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEndCodingFlagsKHR = @import("std").mem.zeroes(VkVideoEndCodingFlagsKHR),
};
pub const VkVideoEndCodingInfoKHR = struct_VkVideoEndCodingInfoKHR;
pub const struct_VkVideoCodingControlInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoCodingControlFlagsKHR = @import("std").mem.zeroes(VkVideoCodingControlFlagsKHR),
};
pub const VkVideoCodingControlInfoKHR = struct_VkVideoCodingControlInfoKHR;
pub const PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkVideoProfileInfoKHR, [*c]VkVideoCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceVideoFormatInfoKHR, [*c]u32, [*c]VkVideoFormatPropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkCreateVideoSessionKHR = ?*const fn (VkDevice, [*c]const VkVideoSessionCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkVideoSessionKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyVideoSessionKHR = ?*const fn (VkDevice, VkVideoSessionKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetVideoSessionMemoryRequirementsKHR = ?*const fn (VkDevice, VkVideoSessionKHR, [*c]u32, [*c]VkVideoSessionMemoryRequirementsKHR) callconv(.C) VkResult;
pub const PFN_vkBindVideoSessionMemoryKHR = ?*const fn (VkDevice, VkVideoSessionKHR, u32, [*c]const VkBindVideoSessionMemoryInfoKHR) callconv(.C) VkResult;
pub const PFN_vkCreateVideoSessionParametersKHR = ?*const fn (VkDevice, [*c]const VkVideoSessionParametersCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkVideoSessionParametersKHR) callconv(.C) VkResult;
pub const PFN_vkUpdateVideoSessionParametersKHR = ?*const fn (VkDevice, VkVideoSessionParametersKHR, [*c]const VkVideoSessionParametersUpdateInfoKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyVideoSessionParametersKHR = ?*const fn (VkDevice, VkVideoSessionParametersKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdBeginVideoCodingKHR = ?*const fn (VkCommandBuffer, [*c]const VkVideoBeginCodingInfoKHR) callconv(.C) void;
pub const PFN_vkCmdEndVideoCodingKHR = ?*const fn (VkCommandBuffer, [*c]const VkVideoEndCodingInfoKHR) callconv(.C) void;
pub const PFN_vkCmdControlVideoCodingKHR = ?*const fn (VkCommandBuffer, [*c]const VkVideoCodingControlInfoKHR) callconv(.C) void;
pub const VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR: c_int = 2;
pub const VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoDecodeCapabilityFlagBitsKHR = c_uint;
pub const VkVideoDecodeCapabilityFlagBitsKHR = enum_VkVideoDecodeCapabilityFlagBitsKHR;
pub const VkVideoDecodeCapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_DECODE_USAGE_DEFAULT_KHR: c_int = 0;
pub const VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR: c_int = 1;
pub const VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR: c_int = 2;
pub const VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR: c_int = 4;
pub const VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoDecodeUsageFlagBitsKHR = c_uint;
pub const VkVideoDecodeUsageFlagBitsKHR = enum_VkVideoDecodeUsageFlagBitsKHR;
pub const VkVideoDecodeUsageFlagsKHR = VkFlags;
pub const VkVideoDecodeFlagsKHR = VkFlags;
pub const struct_VkVideoDecodeCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoDecodeCapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoDecodeCapabilityFlagsKHR),
};
pub const VkVideoDecodeCapabilitiesKHR = struct_VkVideoDecodeCapabilitiesKHR;
pub const struct_VkVideoDecodeUsageInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoUsageHints: VkVideoDecodeUsageFlagsKHR = @import("std").mem.zeroes(VkVideoDecodeUsageFlagsKHR),
};
pub const VkVideoDecodeUsageInfoKHR = struct_VkVideoDecodeUsageInfoKHR;
pub const struct_VkVideoDecodeInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoDecodeFlagsKHR = @import("std").mem.zeroes(VkVideoDecodeFlagsKHR),
    srcBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    srcBufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    srcBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstPictureResource: VkVideoPictureResourceInfoKHR = @import("std").mem.zeroes(VkVideoPictureResourceInfoKHR),
    pSetupReferenceSlot: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
    referenceSlotCount: u32 = @import("std").mem.zeroes(u32),
    pReferenceSlots: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
};
pub const VkVideoDecodeInfoKHR = struct_VkVideoDecodeInfoKHR;
pub const PFN_vkCmdDecodeVideoKHR = ?*const fn (VkCommandBuffer, [*c]const VkVideoDecodeInfoKHR) callconv(.C) void;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME: c_int = 0;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_420: c_int = 1;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_422: c_int = 2;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_444: c_int = 3;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264ChromaFormatIdc = c_uint;
pub const StdVideoH264ChromaFormatIdc = enum_StdVideoH264ChromaFormatIdc;
pub const STD_VIDEO_H264_PROFILE_IDC_BASELINE: c_int = 66;
pub const STD_VIDEO_H264_PROFILE_IDC_MAIN: c_int = 77;
pub const STD_VIDEO_H264_PROFILE_IDC_HIGH: c_int = 100;
pub const STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE: c_int = 244;
pub const STD_VIDEO_H264_PROFILE_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264ProfileIdc = c_uint;
pub const StdVideoH264ProfileIdc = enum_StdVideoH264ProfileIdc;
pub const STD_VIDEO_H264_LEVEL_IDC_1_0: c_int = 0;
pub const STD_VIDEO_H264_LEVEL_IDC_1_1: c_int = 1;
pub const STD_VIDEO_H264_LEVEL_IDC_1_2: c_int = 2;
pub const STD_VIDEO_H264_LEVEL_IDC_1_3: c_int = 3;
pub const STD_VIDEO_H264_LEVEL_IDC_2_0: c_int = 4;
pub const STD_VIDEO_H264_LEVEL_IDC_2_1: c_int = 5;
pub const STD_VIDEO_H264_LEVEL_IDC_2_2: c_int = 6;
pub const STD_VIDEO_H264_LEVEL_IDC_3_0: c_int = 7;
pub const STD_VIDEO_H264_LEVEL_IDC_3_1: c_int = 8;
pub const STD_VIDEO_H264_LEVEL_IDC_3_2: c_int = 9;
pub const STD_VIDEO_H264_LEVEL_IDC_4_0: c_int = 10;
pub const STD_VIDEO_H264_LEVEL_IDC_4_1: c_int = 11;
pub const STD_VIDEO_H264_LEVEL_IDC_4_2: c_int = 12;
pub const STD_VIDEO_H264_LEVEL_IDC_5_0: c_int = 13;
pub const STD_VIDEO_H264_LEVEL_IDC_5_1: c_int = 14;
pub const STD_VIDEO_H264_LEVEL_IDC_5_2: c_int = 15;
pub const STD_VIDEO_H264_LEVEL_IDC_6_0: c_int = 16;
pub const STD_VIDEO_H264_LEVEL_IDC_6_1: c_int = 17;
pub const STD_VIDEO_H264_LEVEL_IDC_6_2: c_int = 18;
pub const STD_VIDEO_H264_LEVEL_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264LevelIdc = c_uint;
pub const StdVideoH264LevelIdc = enum_StdVideoH264LevelIdc;
pub const STD_VIDEO_H264_POC_TYPE_0: c_int = 0;
pub const STD_VIDEO_H264_POC_TYPE_1: c_int = 1;
pub const STD_VIDEO_H264_POC_TYPE_2: c_int = 2;
pub const STD_VIDEO_H264_POC_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_POC_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264PocType = c_uint;
pub const StdVideoH264PocType = enum_StdVideoH264PocType;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED: c_int = 0;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE: c_int = 1;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11: c_int = 2;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11: c_int = 3;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11: c_int = 4;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33: c_int = 5;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11: c_int = 6;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11: c_int = 7;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11: c_int = 8;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33: c_int = 9;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11: c_int = 10;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11: c_int = 11;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33: c_int = 12;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99: c_int = 13;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3: c_int = 14;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2: c_int = 15;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1: c_int = 16;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR: c_int = 255;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264AspectRatioIdc = c_uint;
pub const StdVideoH264AspectRatioIdc = enum_StdVideoH264AspectRatioIdc;
pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT: c_int = 0;
pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT: c_int = 1;
pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT: c_int = 2;
pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264WeightedBipredIdc = c_uint;
pub const StdVideoH264WeightedBipredIdc = enum_StdVideoH264WeightedBipredIdc;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT: c_int = 0;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD: c_int = 1;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM: c_int = 2;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END: c_int = 3;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264ModificationOfPicNumsIdc = c_uint;
pub const StdVideoH264ModificationOfPicNumsIdc = enum_StdVideoH264ModificationOfPicNumsIdc;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END: c_int = 0;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM: c_int = 1;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM: c_int = 2;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM: c_int = 3;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX: c_int = 4;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL: c_int = 5;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM: c_int = 6;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264MemMgmtControlOp = c_uint;
pub const StdVideoH264MemMgmtControlOp = enum_StdVideoH264MemMgmtControlOp;
pub const STD_VIDEO_H264_CABAC_INIT_IDC_0: c_int = 0;
pub const STD_VIDEO_H264_CABAC_INIT_IDC_1: c_int = 1;
pub const STD_VIDEO_H264_CABAC_INIT_IDC_2: c_int = 2;
pub const STD_VIDEO_H264_CABAC_INIT_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264CabacInitIdc = c_uint;
pub const StdVideoH264CabacInitIdc = enum_StdVideoH264CabacInitIdc;
pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED: c_int = 0;
pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED: c_int = 1;
pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL: c_int = 2;
pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264DisableDeblockingFilterIdc = c_uint;
pub const StdVideoH264DisableDeblockingFilterIdc = enum_StdVideoH264DisableDeblockingFilterIdc;
pub const STD_VIDEO_H264_SLICE_TYPE_P: c_int = 0;
pub const STD_VIDEO_H264_SLICE_TYPE_B: c_int = 1;
pub const STD_VIDEO_H264_SLICE_TYPE_I: c_int = 2;
pub const STD_VIDEO_H264_SLICE_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264SliceType = c_uint;
pub const StdVideoH264SliceType = enum_StdVideoH264SliceType;
pub const STD_VIDEO_H264_PICTURE_TYPE_P: c_int = 0;
pub const STD_VIDEO_H264_PICTURE_TYPE_B: c_int = 1;
pub const STD_VIDEO_H264_PICTURE_TYPE_I: c_int = 2;
pub const STD_VIDEO_H264_PICTURE_TYPE_IDR: c_int = 5;
pub const STD_VIDEO_H264_PICTURE_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264PictureType = c_uint;
pub const StdVideoH264PictureType = enum_StdVideoH264PictureType;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS: c_int = 0;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS: c_int = 1;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD: c_int = 2;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX: c_int = 3;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE: c_int = 4;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM: c_int = 5;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED: c_int = 6;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264NonVclNaluType = c_uint;
pub const StdVideoH264NonVclNaluType = enum_StdVideoH264NonVclNaluType;
// /usr/include/vk_video/vulkan_video_codec_h264std.h:181:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH264SpsVuiFlags = opaque {};
pub const StdVideoH264SpsVuiFlags = struct_StdVideoH264SpsVuiFlags;
pub const struct_StdVideoH264HrdParameters = extern struct {
    cpb_cnt_minus1: u8 = @import("std").mem.zeroes(u8),
    bit_rate_scale: u8 = @import("std").mem.zeroes(u8),
    cpb_size_scale: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    bit_rate_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    cpb_size_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    cbr_flag: [32]u8 = @import("std").mem.zeroes([32]u8),
    initial_cpb_removal_delay_length_minus1: u32 = @import("std").mem.zeroes(u32),
    cpb_removal_delay_length_minus1: u32 = @import("std").mem.zeroes(u32),
    dpb_output_delay_length_minus1: u32 = @import("std").mem.zeroes(u32),
    time_offset_length: u32 = @import("std").mem.zeroes(u32),
};
pub const StdVideoH264HrdParameters = struct_StdVideoH264HrdParameters;
pub const struct_StdVideoH264SequenceParameterSetVui = extern struct {
    flags: StdVideoH264SpsVuiFlags = @import("std").mem.zeroes(StdVideoH264SpsVuiFlags),
    aspect_ratio_idc: StdVideoH264AspectRatioIdc = @import("std").mem.zeroes(StdVideoH264AspectRatioIdc),
    sar_width: u16 = @import("std").mem.zeroes(u16),
    sar_height: u16 = @import("std").mem.zeroes(u16),
    video_format: u8 = @import("std").mem.zeroes(u8),
    colour_primaries: u8 = @import("std").mem.zeroes(u8),
    transfer_characteristics: u8 = @import("std").mem.zeroes(u8),
    matrix_coefficients: u8 = @import("std").mem.zeroes(u8),
    num_units_in_tick: u32 = @import("std").mem.zeroes(u32),
    time_scale: u32 = @import("std").mem.zeroes(u32),
    max_num_reorder_frames: u8 = @import("std").mem.zeroes(u8),
    max_dec_frame_buffering: u8 = @import("std").mem.zeroes(u8),
    chroma_sample_loc_type_top_field: u8 = @import("std").mem.zeroes(u8),
    chroma_sample_loc_type_bottom_field: u8 = @import("std").mem.zeroes(u8),
    reserved1: u32 = @import("std").mem.zeroes(u32),
    pHrdParameters: [*c]const StdVideoH264HrdParameters = @import("std").mem.zeroes([*c]const StdVideoH264HrdParameters),
};
pub const StdVideoH264SequenceParameterSetVui = struct_StdVideoH264SequenceParameterSetVui;
// /usr/include/vk_video/vulkan_video_codec_h264std.h:229:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH264SpsFlags = opaque {};
pub const StdVideoH264SpsFlags = struct_StdVideoH264SpsFlags;
pub const struct_StdVideoH264ScalingLists = extern struct {
    scaling_list_present_mask: u16 = @import("std").mem.zeroes(u16),
    use_default_scaling_matrix_mask: u16 = @import("std").mem.zeroes(u16),
    ScalingList4x4: [6][16]u8 = @import("std").mem.zeroes([6][16]u8),
    ScalingList8x8: [6][64]u8 = @import("std").mem.zeroes([6][64]u8),
};
pub const StdVideoH264ScalingLists = struct_StdVideoH264ScalingLists;
pub const struct_StdVideoH264SequenceParameterSet = extern struct {
    flags: StdVideoH264SpsFlags = @import("std").mem.zeroes(StdVideoH264SpsFlags),
    profile_idc: StdVideoH264ProfileIdc = @import("std").mem.zeroes(StdVideoH264ProfileIdc),
    level_idc: StdVideoH264LevelIdc = @import("std").mem.zeroes(StdVideoH264LevelIdc),
    chroma_format_idc: StdVideoH264ChromaFormatIdc = @import("std").mem.zeroes(StdVideoH264ChromaFormatIdc),
    seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    bit_depth_luma_minus8: u8 = @import("std").mem.zeroes(u8),
    bit_depth_chroma_minus8: u8 = @import("std").mem.zeroes(u8),
    log2_max_frame_num_minus4: u8 = @import("std").mem.zeroes(u8),
    pic_order_cnt_type: StdVideoH264PocType = @import("std").mem.zeroes(StdVideoH264PocType),
    offset_for_non_ref_pic: i32 = @import("std").mem.zeroes(i32),
    offset_for_top_to_bottom_field: i32 = @import("std").mem.zeroes(i32),
    log2_max_pic_order_cnt_lsb_minus4: u8 = @import("std").mem.zeroes(u8),
    num_ref_frames_in_pic_order_cnt_cycle: u8 = @import("std").mem.zeroes(u8),
    max_num_ref_frames: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    pic_width_in_mbs_minus1: u32 = @import("std").mem.zeroes(u32),
    pic_height_in_map_units_minus1: u32 = @import("std").mem.zeroes(u32),
    frame_crop_left_offset: u32 = @import("std").mem.zeroes(u32),
    frame_crop_right_offset: u32 = @import("std").mem.zeroes(u32),
    frame_crop_top_offset: u32 = @import("std").mem.zeroes(u32),
    frame_crop_bottom_offset: u32 = @import("std").mem.zeroes(u32),
    reserved2: u32 = @import("std").mem.zeroes(u32),
    pOffsetForRefFrame: [*c]const i32 = @import("std").mem.zeroes([*c]const i32),
    pScalingLists: [*c]const StdVideoH264ScalingLists = @import("std").mem.zeroes([*c]const StdVideoH264ScalingLists),
    pSequenceParameterSetVui: ?*const StdVideoH264SequenceParameterSetVui = @import("std").mem.zeroes(?*const StdVideoH264SequenceParameterSetVui),
};
pub const StdVideoH264SequenceParameterSet = struct_StdVideoH264SequenceParameterSet;
// /usr/include/vk_video/vulkan_video_codec_h264std.h:283:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH264PpsFlags = opaque {};
pub const StdVideoH264PpsFlags = struct_StdVideoH264PpsFlags;
pub const struct_StdVideoH264PictureParameterSet = extern struct {
    flags: StdVideoH264PpsFlags = @import("std").mem.zeroes(StdVideoH264PpsFlags),
    seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l0_default_active_minus1: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l1_default_active_minus1: u8 = @import("std").mem.zeroes(u8),
    weighted_bipred_idc: StdVideoH264WeightedBipredIdc = @import("std").mem.zeroes(StdVideoH264WeightedBipredIdc),
    pic_init_qp_minus26: i8 = @import("std").mem.zeroes(i8),
    pic_init_qs_minus26: i8 = @import("std").mem.zeroes(i8),
    chroma_qp_index_offset: i8 = @import("std").mem.zeroes(i8),
    second_chroma_qp_index_offset: i8 = @import("std").mem.zeroes(i8),
    pScalingLists: [*c]const StdVideoH264ScalingLists = @import("std").mem.zeroes([*c]const StdVideoH264ScalingLists),
};
pub const StdVideoH264PictureParameterSet = struct_StdVideoH264PictureParameterSet;
pub const struct_StdVideoEncodeH264WeightTableFlags = extern struct {
    luma_weight_l0_flag: u32 = @import("std").mem.zeroes(u32),
    chroma_weight_l0_flag: u32 = @import("std").mem.zeroes(u32),
    luma_weight_l1_flag: u32 = @import("std").mem.zeroes(u32),
    chroma_weight_l1_flag: u32 = @import("std").mem.zeroes(u32),
};
pub const StdVideoEncodeH264WeightTableFlags = struct_StdVideoEncodeH264WeightTableFlags;
pub const struct_StdVideoEncodeH264WeightTable = extern struct {
    flags: StdVideoEncodeH264WeightTableFlags = @import("std").mem.zeroes(StdVideoEncodeH264WeightTableFlags),
    luma_log2_weight_denom: u8 = @import("std").mem.zeroes(u8),
    chroma_log2_weight_denom: u8 = @import("std").mem.zeroes(u8),
    luma_weight_l0: [32]i8 = @import("std").mem.zeroes([32]i8),
    luma_offset_l0: [32]i8 = @import("std").mem.zeroes([32]i8),
    chroma_weight_l0: [32][2]i8 = @import("std").mem.zeroes([32][2]i8),
    chroma_offset_l0: [32][2]i8 = @import("std").mem.zeroes([32][2]i8),
    luma_weight_l1: [32]i8 = @import("std").mem.zeroes([32]i8),
    luma_offset_l1: [32]i8 = @import("std").mem.zeroes([32]i8),
    chroma_weight_l1: [32][2]i8 = @import("std").mem.zeroes([32][2]i8),
    chroma_offset_l1: [32][2]i8 = @import("std").mem.zeroes([32][2]i8),
};
pub const StdVideoEncodeH264WeightTable = struct_StdVideoEncodeH264WeightTable;
// /usr/include/vk_video/vulkan_video_codec_h264std_encode.h:52:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH264SliceHeaderFlags = opaque {};
pub const StdVideoEncodeH264SliceHeaderFlags = struct_StdVideoEncodeH264SliceHeaderFlags;
// /usr/include/vk_video/vulkan_video_codec_h264std_encode.h:58:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH264PictureInfoFlags = opaque {};
pub const StdVideoEncodeH264PictureInfoFlags = struct_StdVideoEncodeH264PictureInfoFlags;
// /usr/include/vk_video/vulkan_video_codec_h264std_encode.h:67:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH264ReferenceInfoFlags = opaque {};
pub const StdVideoEncodeH264ReferenceInfoFlags = struct_StdVideoEncodeH264ReferenceInfoFlags;
// /usr/include/vk_video/vulkan_video_codec_h264std_encode.h:72:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH264ReferenceListsInfoFlags = opaque {};
pub const StdVideoEncodeH264ReferenceListsInfoFlags = struct_StdVideoEncodeH264ReferenceListsInfoFlags;
pub const struct_StdVideoEncodeH264RefListModEntry = extern struct {
    modification_of_pic_nums_idc: StdVideoH264ModificationOfPicNumsIdc = @import("std").mem.zeroes(StdVideoH264ModificationOfPicNumsIdc),
    abs_diff_pic_num_minus1: u16 = @import("std").mem.zeroes(u16),
    long_term_pic_num: u16 = @import("std").mem.zeroes(u16),
};
pub const StdVideoEncodeH264RefListModEntry = struct_StdVideoEncodeH264RefListModEntry;
pub const struct_StdVideoEncodeH264RefPicMarkingEntry = extern struct {
    memory_management_control_operation: StdVideoH264MemMgmtControlOp = @import("std").mem.zeroes(StdVideoH264MemMgmtControlOp),
    difference_of_pic_nums_minus1: u16 = @import("std").mem.zeroes(u16),
    long_term_pic_num: u16 = @import("std").mem.zeroes(u16),
    long_term_frame_idx: u16 = @import("std").mem.zeroes(u16),
    max_long_term_frame_idx_plus1: u16 = @import("std").mem.zeroes(u16),
};
pub const StdVideoEncodeH264RefPicMarkingEntry = struct_StdVideoEncodeH264RefPicMarkingEntry;
pub const struct_StdVideoEncodeH264ReferenceListsInfo = extern struct {
    flags: StdVideoEncodeH264ReferenceListsInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH264ReferenceListsInfoFlags),
    num_ref_idx_l0_active_minus1: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l1_active_minus1: u8 = @import("std").mem.zeroes(u8),
    RefPicList0: [32]u8 = @import("std").mem.zeroes([32]u8),
    RefPicList1: [32]u8 = @import("std").mem.zeroes([32]u8),
    refList0ModOpCount: u8 = @import("std").mem.zeroes(u8),
    refList1ModOpCount: u8 = @import("std").mem.zeroes(u8),
    refPicMarkingOpCount: u8 = @import("std").mem.zeroes(u8),
    reserved1: [7]u8 = @import("std").mem.zeroes([7]u8),
    pRefList0ModOperations: [*c]const StdVideoEncodeH264RefListModEntry = @import("std").mem.zeroes([*c]const StdVideoEncodeH264RefListModEntry),
    pRefList1ModOperations: [*c]const StdVideoEncodeH264RefListModEntry = @import("std").mem.zeroes([*c]const StdVideoEncodeH264RefListModEntry),
    pRefPicMarkingOperations: [*c]const StdVideoEncodeH264RefPicMarkingEntry = @import("std").mem.zeroes([*c]const StdVideoEncodeH264RefPicMarkingEntry),
};
pub const StdVideoEncodeH264ReferenceListsInfo = struct_StdVideoEncodeH264ReferenceListsInfo;
pub const struct_StdVideoEncodeH264PictureInfo = extern struct {
    flags: StdVideoEncodeH264PictureInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH264PictureInfoFlags),
    seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    idr_pic_id: u16 = @import("std").mem.zeroes(u16),
    primary_pic_type: StdVideoH264PictureType = @import("std").mem.zeroes(StdVideoH264PictureType),
    frame_num: u32 = @import("std").mem.zeroes(u32),
    PicOrderCnt: i32 = @import("std").mem.zeroes(i32),
    temporal_id: u8 = @import("std").mem.zeroes(u8),
    reserved1: [3]u8 = @import("std").mem.zeroes([3]u8),
    pRefLists: ?*const StdVideoEncodeH264ReferenceListsInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH264ReferenceListsInfo),
};
pub const StdVideoEncodeH264PictureInfo = struct_StdVideoEncodeH264PictureInfo;
pub const struct_StdVideoEncodeH264ReferenceInfo = extern struct {
    flags: StdVideoEncodeH264ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH264ReferenceInfoFlags),
    primary_pic_type: StdVideoH264PictureType = @import("std").mem.zeroes(StdVideoH264PictureType),
    FrameNum: u32 = @import("std").mem.zeroes(u32),
    PicOrderCnt: i32 = @import("std").mem.zeroes(i32),
    long_term_pic_num: u16 = @import("std").mem.zeroes(u16),
    long_term_frame_idx: u16 = @import("std").mem.zeroes(u16),
    temporal_id: u8 = @import("std").mem.zeroes(u8),
};
pub const StdVideoEncodeH264ReferenceInfo = struct_StdVideoEncodeH264ReferenceInfo;
pub const struct_StdVideoEncodeH264SliceHeader = extern struct {
    flags: StdVideoEncodeH264SliceHeaderFlags = @import("std").mem.zeroes(StdVideoEncodeH264SliceHeaderFlags),
    first_mb_in_slice: u32 = @import("std").mem.zeroes(u32),
    slice_type: StdVideoH264SliceType = @import("std").mem.zeroes(StdVideoH264SliceType),
    slice_alpha_c0_offset_div2: i8 = @import("std").mem.zeroes(i8),
    slice_beta_offset_div2: i8 = @import("std").mem.zeroes(i8),
    slice_qp_delta: i8 = @import("std").mem.zeroes(i8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    cabac_init_idc: StdVideoH264CabacInitIdc = @import("std").mem.zeroes(StdVideoH264CabacInitIdc),
    disable_deblocking_filter_idc: StdVideoH264DisableDeblockingFilterIdc = @import("std").mem.zeroes(StdVideoH264DisableDeblockingFilterIdc),
    pWeightTable: [*c]const StdVideoEncodeH264WeightTable = @import("std").mem.zeroes([*c]const StdVideoEncodeH264WeightTable),
};
pub const StdVideoEncodeH264SliceHeader = struct_StdVideoEncodeH264SliceHeader;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR: c_int = 32;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR: c_int = 64;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR: c_int = 128;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR: c_int = 256;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_MB_QP_DIFF_WRAPAROUND_BIT_KHR: c_int = 512;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH264CapabilityFlagBitsKHR = c_uint;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR = enum_VkVideoEncodeH264CapabilityFlagBitsKHR;
pub const VkVideoEncodeH264CapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR: c_int = 32;
pub const VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR: c_int = 64;
pub const VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR: c_int = 128;
pub const VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR: c_int = 256;
pub const VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR: c_int = 512;
pub const VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR: c_int = 1024;
pub const VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR: c_int = 2048;
pub const VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR: c_int = 4096;
pub const VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR: c_int = 8192;
pub const VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR: c_int = 16384;
pub const VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR: c_int = 32768;
pub const VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR: c_int = 65536;
pub const VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR: c_int = 131072;
pub const VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR: c_int = 524288;
pub const VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR: c_int = 1048576;
pub const VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH264StdFlagBitsKHR = c_uint;
pub const VkVideoEncodeH264StdFlagBitsKHR = enum_VkVideoEncodeH264StdFlagBitsKHR;
pub const VkVideoEncodeH264StdFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH264RateControlFlagBitsKHR = c_uint;
pub const VkVideoEncodeH264RateControlFlagBitsKHR = enum_VkVideoEncodeH264RateControlFlagBitsKHR;
pub const VkVideoEncodeH264RateControlFlagsKHR = VkFlags;
pub const struct_VkVideoEncodeH264CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoEncodeH264CapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264CapabilityFlagsKHR),
    maxLevelIdc: StdVideoH264LevelIdc = @import("std").mem.zeroes(StdVideoH264LevelIdc),
    maxSliceCount: u32 = @import("std").mem.zeroes(u32),
    maxPPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxBPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxTemporalLayerCount: u32 = @import("std").mem.zeroes(u32),
    expectDyadicTemporalLayerPattern: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: i32 = @import("std").mem.zeroes(i32),
    maxQp: i32 = @import("std").mem.zeroes(i32),
    prefersGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    requiresGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdSyntaxFlags: VkVideoEncodeH264StdFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264StdFlagsKHR),
};
pub const VkVideoEncodeH264CapabilitiesKHR = struct_VkVideoEncodeH264CapabilitiesKHR;
pub const struct_VkVideoEncodeH264QpKHR = extern struct {
    qpI: i32 = @import("std").mem.zeroes(i32),
    qpP: i32 = @import("std").mem.zeroes(i32),
    qpB: i32 = @import("std").mem.zeroes(i32),
};
pub const VkVideoEncodeH264QpKHR = struct_VkVideoEncodeH264QpKHR;
pub const struct_VkVideoEncodeH264QualityLevelPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    preferredRateControlFlags: VkVideoEncodeH264RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264RateControlFlagsKHR),
    preferredGopFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredIdrPeriod: u32 = @import("std").mem.zeroes(u32),
    preferredConsecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredTemporalLayerCount: u32 = @import("std").mem.zeroes(u32),
    preferredConstantQp: VkVideoEncodeH264QpKHR = @import("std").mem.zeroes(VkVideoEncodeH264QpKHR),
    preferredMaxL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredMaxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredStdEntropyCodingModeFlag: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeH264QualityLevelPropertiesKHR = struct_VkVideoEncodeH264QualityLevelPropertiesKHR;
pub const struct_VkVideoEncodeH264SessionCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMaxLevelIdc: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxLevelIdc: StdVideoH264LevelIdc = @import("std").mem.zeroes(StdVideoH264LevelIdc),
};
pub const VkVideoEncodeH264SessionCreateInfoKHR = struct_VkVideoEncodeH264SessionCreateInfoKHR;
pub const struct_VkVideoEncodeH264SessionParametersAddInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH264SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH264SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH264PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH264PictureParameterSet),
};
pub const VkVideoEncodeH264SessionParametersAddInfoKHR = struct_VkVideoEncodeH264SessionParametersAddInfoKHR;
pub const struct_VkVideoEncodeH264SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoEncodeH264SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH264SessionParametersAddInfoKHR),
};
pub const VkVideoEncodeH264SessionParametersCreateInfoKHR = struct_VkVideoEncodeH264SessionParametersCreateInfoKHR;
pub const struct_VkVideoEncodeH264SessionParametersGetInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    writeStdSPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    writeStdPPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdSPSId: u32 = @import("std").mem.zeroes(u32),
    stdPPSId: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH264SessionParametersGetInfoKHR = struct_VkVideoEncodeH264SessionParametersGetInfoKHR;
pub const struct_VkVideoEncodeH264SessionParametersFeedbackInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasStdSPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasStdPPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeH264SessionParametersFeedbackInfoKHR = struct_VkVideoEncodeH264SessionParametersFeedbackInfoKHR;
pub const struct_VkVideoEncodeH264NaluSliceInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    constantQp: i32 = @import("std").mem.zeroes(i32),
    pStdSliceHeader: ?*const StdVideoEncodeH264SliceHeader = @import("std").mem.zeroes(?*const StdVideoEncodeH264SliceHeader),
};
pub const VkVideoEncodeH264NaluSliceInfoKHR = struct_VkVideoEncodeH264NaluSliceInfoKHR;
pub const struct_VkVideoEncodeH264PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    naluSliceEntryCount: u32 = @import("std").mem.zeroes(u32),
    pNaluSliceEntries: [*c]const VkVideoEncodeH264NaluSliceInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH264NaluSliceInfoKHR),
    pStdPictureInfo: ?*const StdVideoEncodeH264PictureInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH264PictureInfo),
    generatePrefixNalu: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeH264PictureInfoKHR = struct_VkVideoEncodeH264PictureInfoKHR;
pub const struct_VkVideoEncodeH264DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoEncodeH264ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH264ReferenceInfo),
};
pub const VkVideoEncodeH264DpbSlotInfoKHR = struct_VkVideoEncodeH264DpbSlotInfoKHR;
pub const struct_VkVideoEncodeH264ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH264ProfileIdc = @import("std").mem.zeroes(StdVideoH264ProfileIdc),
};
pub const VkVideoEncodeH264ProfileInfoKHR = struct_VkVideoEncodeH264ProfileInfoKHR;
pub const struct_VkVideoEncodeH264RateControlInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeH264RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264RateControlFlagsKHR),
    gopFrameCount: u32 = @import("std").mem.zeroes(u32),
    idrPeriod: u32 = @import("std").mem.zeroes(u32),
    consecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    temporalLayerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH264RateControlInfoKHR = struct_VkVideoEncodeH264RateControlInfoKHR;
pub const struct_VkVideoEncodeH264FrameSizeKHR = extern struct {
    frameISize: u32 = @import("std").mem.zeroes(u32),
    framePSize: u32 = @import("std").mem.zeroes(u32),
    frameBSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH264FrameSizeKHR = struct_VkVideoEncodeH264FrameSizeKHR;
pub const struct_VkVideoEncodeH264RateControlLayerInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMinQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: VkVideoEncodeH264QpKHR = @import("std").mem.zeroes(VkVideoEncodeH264QpKHR),
    useMaxQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxQp: VkVideoEncodeH264QpKHR = @import("std").mem.zeroes(VkVideoEncodeH264QpKHR),
    useMaxFrameSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxFrameSize: VkVideoEncodeH264FrameSizeKHR = @import("std").mem.zeroes(VkVideoEncodeH264FrameSizeKHR),
};
pub const VkVideoEncodeH264RateControlLayerInfoKHR = struct_VkVideoEncodeH264RateControlLayerInfoKHR;
pub const struct_VkVideoEncodeH264GopRemainingFrameInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    gopRemainingI: u32 = @import("std").mem.zeroes(u32),
    gopRemainingP: u32 = @import("std").mem.zeroes(u32),
    gopRemainingB: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH264GopRemainingFrameInfoKHR = struct_VkVideoEncodeH264GopRemainingFrameInfoKHR;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME: c_int = 0;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_420: c_int = 1;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_422: c_int = 2;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_444: c_int = 3;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265ChromaFormatIdc = c_uint;
pub const StdVideoH265ChromaFormatIdc = enum_StdVideoH265ChromaFormatIdc;
pub const STD_VIDEO_H265_PROFILE_IDC_MAIN: c_int = 1;
pub const STD_VIDEO_H265_PROFILE_IDC_MAIN_10: c_int = 2;
pub const STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE: c_int = 3;
pub const STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS: c_int = 4;
pub const STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS: c_int = 9;
pub const STD_VIDEO_H265_PROFILE_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265ProfileIdc = c_uint;
pub const StdVideoH265ProfileIdc = enum_StdVideoH265ProfileIdc;
pub const STD_VIDEO_H265_LEVEL_IDC_1_0: c_int = 0;
pub const STD_VIDEO_H265_LEVEL_IDC_2_0: c_int = 1;
pub const STD_VIDEO_H265_LEVEL_IDC_2_1: c_int = 2;
pub const STD_VIDEO_H265_LEVEL_IDC_3_0: c_int = 3;
pub const STD_VIDEO_H265_LEVEL_IDC_3_1: c_int = 4;
pub const STD_VIDEO_H265_LEVEL_IDC_4_0: c_int = 5;
pub const STD_VIDEO_H265_LEVEL_IDC_4_1: c_int = 6;
pub const STD_VIDEO_H265_LEVEL_IDC_5_0: c_int = 7;
pub const STD_VIDEO_H265_LEVEL_IDC_5_1: c_int = 8;
pub const STD_VIDEO_H265_LEVEL_IDC_5_2: c_int = 9;
pub const STD_VIDEO_H265_LEVEL_IDC_6_0: c_int = 10;
pub const STD_VIDEO_H265_LEVEL_IDC_6_1: c_int = 11;
pub const STD_VIDEO_H265_LEVEL_IDC_6_2: c_int = 12;
pub const STD_VIDEO_H265_LEVEL_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265LevelIdc = c_uint;
pub const StdVideoH265LevelIdc = enum_StdVideoH265LevelIdc;
pub const STD_VIDEO_H265_SLICE_TYPE_B: c_int = 0;
pub const STD_VIDEO_H265_SLICE_TYPE_P: c_int = 1;
pub const STD_VIDEO_H265_SLICE_TYPE_I: c_int = 2;
pub const STD_VIDEO_H265_SLICE_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265SliceType = c_uint;
pub const StdVideoH265SliceType = enum_StdVideoH265SliceType;
pub const STD_VIDEO_H265_PICTURE_TYPE_P: c_int = 0;
pub const STD_VIDEO_H265_PICTURE_TYPE_B: c_int = 1;
pub const STD_VIDEO_H265_PICTURE_TYPE_I: c_int = 2;
pub const STD_VIDEO_H265_PICTURE_TYPE_IDR: c_int = 3;
pub const STD_VIDEO_H265_PICTURE_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265PictureType = c_uint;
pub const StdVideoH265PictureType = enum_StdVideoH265PictureType;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED: c_int = 0;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE: c_int = 1;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11: c_int = 2;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11: c_int = 3;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11: c_int = 4;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33: c_int = 5;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11: c_int = 6;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11: c_int = 7;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11: c_int = 8;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33: c_int = 9;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11: c_int = 10;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11: c_int = 11;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33: c_int = 12;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99: c_int = 13;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3: c_int = 14;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2: c_int = 15;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1: c_int = 16;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR: c_int = 255;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265AspectRatioIdc = c_uint;
pub const StdVideoH265AspectRatioIdc = enum_StdVideoH265AspectRatioIdc;
pub const struct_StdVideoH265DecPicBufMgr = extern struct {
    max_latency_increase_plus1: [7]u32 = @import("std").mem.zeroes([7]u32),
    max_dec_pic_buffering_minus1: [7]u8 = @import("std").mem.zeroes([7]u8),
    max_num_reorder_pics: [7]u8 = @import("std").mem.zeroes([7]u8),
};
pub const StdVideoH265DecPicBufMgr = struct_StdVideoH265DecPicBufMgr;
pub const struct_StdVideoH265SubLayerHrdParameters = extern struct {
    bit_rate_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    cpb_size_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    cpb_size_du_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    bit_rate_du_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    cbr_flag: u32 = @import("std").mem.zeroes(u32),
};
pub const StdVideoH265SubLayerHrdParameters = struct_StdVideoH265SubLayerHrdParameters;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:140:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265HrdFlags = opaque {};
pub const StdVideoH265HrdFlags = struct_StdVideoH265HrdFlags;
pub const struct_StdVideoH265HrdParameters = extern struct {
    flags: StdVideoH265HrdFlags = @import("std").mem.zeroes(StdVideoH265HrdFlags),
    tick_divisor_minus2: u8 = @import("std").mem.zeroes(u8),
    du_cpb_removal_delay_increment_length_minus1: u8 = @import("std").mem.zeroes(u8),
    dpb_output_delay_du_length_minus1: u8 = @import("std").mem.zeroes(u8),
    bit_rate_scale: u8 = @import("std").mem.zeroes(u8),
    cpb_size_scale: u8 = @import("std").mem.zeroes(u8),
    cpb_size_du_scale: u8 = @import("std").mem.zeroes(u8),
    initial_cpb_removal_delay_length_minus1: u8 = @import("std").mem.zeroes(u8),
    au_cpb_removal_delay_length_minus1: u8 = @import("std").mem.zeroes(u8),
    dpb_output_delay_length_minus1: u8 = @import("std").mem.zeroes(u8),
    cpb_cnt_minus1: [7]u8 = @import("std").mem.zeroes([7]u8),
    elemental_duration_in_tc_minus1: [7]u16 = @import("std").mem.zeroes([7]u16),
    reserved: [3]u16 = @import("std").mem.zeroes([3]u16),
    pSubLayerHrdParametersNal: [*c]const StdVideoH265SubLayerHrdParameters = @import("std").mem.zeroes([*c]const StdVideoH265SubLayerHrdParameters),
    pSubLayerHrdParametersVcl: [*c]const StdVideoH265SubLayerHrdParameters = @import("std").mem.zeroes([*c]const StdVideoH265SubLayerHrdParameters),
};
pub const StdVideoH265HrdParameters = struct_StdVideoH265HrdParameters;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:168:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265VpsFlags = opaque {};
pub const StdVideoH265VpsFlags = struct_StdVideoH265VpsFlags;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:175:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265ProfileTierLevelFlags = opaque {};
pub const StdVideoH265ProfileTierLevelFlags = struct_StdVideoH265ProfileTierLevelFlags;
pub const struct_StdVideoH265ProfileTierLevel = extern struct {
    flags: StdVideoH265ProfileTierLevelFlags = @import("std").mem.zeroes(StdVideoH265ProfileTierLevelFlags),
    general_profile_idc: StdVideoH265ProfileIdc = @import("std").mem.zeroes(StdVideoH265ProfileIdc),
    general_level_idc: StdVideoH265LevelIdc = @import("std").mem.zeroes(StdVideoH265LevelIdc),
};
pub const StdVideoH265ProfileTierLevel = struct_StdVideoH265ProfileTierLevel;
pub const struct_StdVideoH265VideoParameterSet = extern struct {
    flags: StdVideoH265VpsFlags = @import("std").mem.zeroes(StdVideoH265VpsFlags),
    vps_video_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    vps_max_sub_layers_minus1: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    vps_num_units_in_tick: u32 = @import("std").mem.zeroes(u32),
    vps_time_scale: u32 = @import("std").mem.zeroes(u32),
    vps_num_ticks_poc_diff_one_minus1: u32 = @import("std").mem.zeroes(u32),
    reserved3: u32 = @import("std").mem.zeroes(u32),
    pDecPicBufMgr: [*c]const StdVideoH265DecPicBufMgr = @import("std").mem.zeroes([*c]const StdVideoH265DecPicBufMgr),
    pHrdParameters: ?*const StdVideoH265HrdParameters = @import("std").mem.zeroes(?*const StdVideoH265HrdParameters),
    pProfileTierLevel: ?*const StdVideoH265ProfileTierLevel = @import("std").mem.zeroes(?*const StdVideoH265ProfileTierLevel),
};
pub const StdVideoH265VideoParameterSet = struct_StdVideoH265VideoParameterSet;
pub const struct_StdVideoH265ScalingLists = extern struct {
    ScalingList4x4: [6][16]u8 = @import("std").mem.zeroes([6][16]u8),
    ScalingList8x8: [6][64]u8 = @import("std").mem.zeroes([6][64]u8),
    ScalingList16x16: [6][64]u8 = @import("std").mem.zeroes([6][64]u8),
    ScalingList32x32: [2][64]u8 = @import("std").mem.zeroes([2][64]u8),
    ScalingListDCCoef16x16: [6]u8 = @import("std").mem.zeroes([6]u8),
    ScalingListDCCoef32x32: [2]u8 = @import("std").mem.zeroes([2]u8),
};
pub const StdVideoH265ScalingLists = struct_StdVideoH265ScalingLists;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:213:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265SpsVuiFlags = opaque {};
pub const StdVideoH265SpsVuiFlags = struct_StdVideoH265SpsVuiFlags;
pub const struct_StdVideoH265SequenceParameterSetVui = extern struct {
    flags: StdVideoH265SpsVuiFlags = @import("std").mem.zeroes(StdVideoH265SpsVuiFlags),
    aspect_ratio_idc: StdVideoH265AspectRatioIdc = @import("std").mem.zeroes(StdVideoH265AspectRatioIdc),
    sar_width: u16 = @import("std").mem.zeroes(u16),
    sar_height: u16 = @import("std").mem.zeroes(u16),
    video_format: u8 = @import("std").mem.zeroes(u8),
    colour_primaries: u8 = @import("std").mem.zeroes(u8),
    transfer_characteristics: u8 = @import("std").mem.zeroes(u8),
    matrix_coeffs: u8 = @import("std").mem.zeroes(u8),
    chroma_sample_loc_type_top_field: u8 = @import("std").mem.zeroes(u8),
    chroma_sample_loc_type_bottom_field: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    def_disp_win_left_offset: u16 = @import("std").mem.zeroes(u16),
    def_disp_win_right_offset: u16 = @import("std").mem.zeroes(u16),
    def_disp_win_top_offset: u16 = @import("std").mem.zeroes(u16),
    def_disp_win_bottom_offset: u16 = @import("std").mem.zeroes(u16),
    vui_num_units_in_tick: u32 = @import("std").mem.zeroes(u32),
    vui_time_scale: u32 = @import("std").mem.zeroes(u32),
    vui_num_ticks_poc_diff_one_minus1: u32 = @import("std").mem.zeroes(u32),
    min_spatial_segmentation_idc: u16 = @import("std").mem.zeroes(u16),
    reserved3: u16 = @import("std").mem.zeroes(u16),
    max_bytes_per_pic_denom: u8 = @import("std").mem.zeroes(u8),
    max_bits_per_min_cu_denom: u8 = @import("std").mem.zeroes(u8),
    log2_max_mv_length_horizontal: u8 = @import("std").mem.zeroes(u8),
    log2_max_mv_length_vertical: u8 = @import("std").mem.zeroes(u8),
    pHrdParameters: ?*const StdVideoH265HrdParameters = @import("std").mem.zeroes(?*const StdVideoH265HrdParameters),
};
pub const StdVideoH265SequenceParameterSetVui = struct_StdVideoH265SequenceParameterSetVui;
pub const struct_StdVideoH265PredictorPaletteEntries = extern struct {
    PredictorPaletteEntries: [3][128]u16 = @import("std").mem.zeroes([3][128]u16),
};
pub const StdVideoH265PredictorPaletteEntries = struct_StdVideoH265PredictorPaletteEntries;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:267:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265SpsFlags = opaque {};
pub const StdVideoH265SpsFlags = struct_StdVideoH265SpsFlags;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:300:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265ShortTermRefPicSetFlags = opaque {};
pub const StdVideoH265ShortTermRefPicSetFlags = struct_StdVideoH265ShortTermRefPicSetFlags;
pub const struct_StdVideoH265ShortTermRefPicSet = extern struct {
    flags: StdVideoH265ShortTermRefPicSetFlags = @import("std").mem.zeroes(StdVideoH265ShortTermRefPicSetFlags),
    delta_idx_minus1: u32 = @import("std").mem.zeroes(u32),
    use_delta_flag: u16 = @import("std").mem.zeroes(u16),
    abs_delta_rps_minus1: u16 = @import("std").mem.zeroes(u16),
    used_by_curr_pic_flag: u16 = @import("std").mem.zeroes(u16),
    used_by_curr_pic_s0_flag: u16 = @import("std").mem.zeroes(u16),
    used_by_curr_pic_s1_flag: u16 = @import("std").mem.zeroes(u16),
    reserved1: u16 = @import("std").mem.zeroes(u16),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    reserved3: u8 = @import("std").mem.zeroes(u8),
    num_negative_pics: u8 = @import("std").mem.zeroes(u8),
    num_positive_pics: u8 = @import("std").mem.zeroes(u8),
    delta_poc_s0_minus1: [16]u16 = @import("std").mem.zeroes([16]u16),
    delta_poc_s1_minus1: [16]u16 = @import("std").mem.zeroes([16]u16),
};
pub const StdVideoH265ShortTermRefPicSet = struct_StdVideoH265ShortTermRefPicSet;
pub const struct_StdVideoH265LongTermRefPicsSps = extern struct {
    used_by_curr_pic_lt_sps_flag: u32 = @import("std").mem.zeroes(u32),
    lt_ref_pic_poc_lsb_sps: [32]u32 = @import("std").mem.zeroes([32]u32),
};
pub const StdVideoH265LongTermRefPicsSps = struct_StdVideoH265LongTermRefPicsSps;
pub const struct_StdVideoH265SequenceParameterSet = extern struct {
    flags: StdVideoH265SpsFlags = @import("std").mem.zeroes(StdVideoH265SpsFlags),
    chroma_format_idc: StdVideoH265ChromaFormatIdc = @import("std").mem.zeroes(StdVideoH265ChromaFormatIdc),
    pic_width_in_luma_samples: u32 = @import("std").mem.zeroes(u32),
    pic_height_in_luma_samples: u32 = @import("std").mem.zeroes(u32),
    sps_video_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    sps_max_sub_layers_minus1: u8 = @import("std").mem.zeroes(u8),
    sps_seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    bit_depth_luma_minus8: u8 = @import("std").mem.zeroes(u8),
    bit_depth_chroma_minus8: u8 = @import("std").mem.zeroes(u8),
    log2_max_pic_order_cnt_lsb_minus4: u8 = @import("std").mem.zeroes(u8),
    log2_min_luma_coding_block_size_minus3: u8 = @import("std").mem.zeroes(u8),
    log2_diff_max_min_luma_coding_block_size: u8 = @import("std").mem.zeroes(u8),
    log2_min_luma_transform_block_size_minus2: u8 = @import("std").mem.zeroes(u8),
    log2_diff_max_min_luma_transform_block_size: u8 = @import("std").mem.zeroes(u8),
    max_transform_hierarchy_depth_inter: u8 = @import("std").mem.zeroes(u8),
    max_transform_hierarchy_depth_intra: u8 = @import("std").mem.zeroes(u8),
    num_short_term_ref_pic_sets: u8 = @import("std").mem.zeroes(u8),
    num_long_term_ref_pics_sps: u8 = @import("std").mem.zeroes(u8),
    pcm_sample_bit_depth_luma_minus1: u8 = @import("std").mem.zeroes(u8),
    pcm_sample_bit_depth_chroma_minus1: u8 = @import("std").mem.zeroes(u8),
    log2_min_pcm_luma_coding_block_size_minus3: u8 = @import("std").mem.zeroes(u8),
    log2_diff_max_min_pcm_luma_coding_block_size: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    palette_max_size: u8 = @import("std").mem.zeroes(u8),
    delta_palette_max_predictor_size: u8 = @import("std").mem.zeroes(u8),
    motion_vector_resolution_control_idc: u8 = @import("std").mem.zeroes(u8),
    sps_num_palette_predictor_initializers_minus1: u8 = @import("std").mem.zeroes(u8),
    conf_win_left_offset: u32 = @import("std").mem.zeroes(u32),
    conf_win_right_offset: u32 = @import("std").mem.zeroes(u32),
    conf_win_top_offset: u32 = @import("std").mem.zeroes(u32),
    conf_win_bottom_offset: u32 = @import("std").mem.zeroes(u32),
    pProfileTierLevel: ?*const StdVideoH265ProfileTierLevel = @import("std").mem.zeroes(?*const StdVideoH265ProfileTierLevel),
    pDecPicBufMgr: [*c]const StdVideoH265DecPicBufMgr = @import("std").mem.zeroes([*c]const StdVideoH265DecPicBufMgr),
    pScalingLists: [*c]const StdVideoH265ScalingLists = @import("std").mem.zeroes([*c]const StdVideoH265ScalingLists),
    pShortTermRefPicSet: ?*const StdVideoH265ShortTermRefPicSet = @import("std").mem.zeroes(?*const StdVideoH265ShortTermRefPicSet),
    pLongTermRefPicsSps: [*c]const StdVideoH265LongTermRefPicsSps = @import("std").mem.zeroes([*c]const StdVideoH265LongTermRefPicsSps),
    pSequenceParameterSetVui: ?*const StdVideoH265SequenceParameterSetVui = @import("std").mem.zeroes(?*const StdVideoH265SequenceParameterSetVui),
    pPredictorPaletteEntries: [*c]const StdVideoH265PredictorPaletteEntries = @import("std").mem.zeroes([*c]const StdVideoH265PredictorPaletteEntries),
};
pub const StdVideoH265SequenceParameterSet = struct_StdVideoH265SequenceParameterSet;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:369:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265PpsFlags = opaque {};
pub const StdVideoH265PpsFlags = struct_StdVideoH265PpsFlags;
pub const struct_StdVideoH265PictureParameterSet = extern struct {
    flags: StdVideoH265PpsFlags = @import("std").mem.zeroes(StdVideoH265PpsFlags),
    pps_pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pps_seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    sps_video_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    num_extra_slice_header_bits: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l0_default_active_minus1: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l1_default_active_minus1: u8 = @import("std").mem.zeroes(u8),
    init_qp_minus26: i8 = @import("std").mem.zeroes(i8),
    diff_cu_qp_delta_depth: u8 = @import("std").mem.zeroes(u8),
    pps_cb_qp_offset: i8 = @import("std").mem.zeroes(i8),
    pps_cr_qp_offset: i8 = @import("std").mem.zeroes(i8),
    pps_beta_offset_div2: i8 = @import("std").mem.zeroes(i8),
    pps_tc_offset_div2: i8 = @import("std").mem.zeroes(i8),
    log2_parallel_merge_level_minus2: u8 = @import("std").mem.zeroes(u8),
    log2_max_transform_skip_block_size_minus2: u8 = @import("std").mem.zeroes(u8),
    diff_cu_chroma_qp_offset_depth: u8 = @import("std").mem.zeroes(u8),
    chroma_qp_offset_list_len_minus1: u8 = @import("std").mem.zeroes(u8),
    cb_qp_offset_list: [6]i8 = @import("std").mem.zeroes([6]i8),
    cr_qp_offset_list: [6]i8 = @import("std").mem.zeroes([6]i8),
    log2_sao_offset_scale_luma: u8 = @import("std").mem.zeroes(u8),
    log2_sao_offset_scale_chroma: u8 = @import("std").mem.zeroes(u8),
    pps_act_y_qp_offset_plus5: i8 = @import("std").mem.zeroes(i8),
    pps_act_cb_qp_offset_plus5: i8 = @import("std").mem.zeroes(i8),
    pps_act_cr_qp_offset_plus3: i8 = @import("std").mem.zeroes(i8),
    pps_num_palette_predictor_initializers: u8 = @import("std").mem.zeroes(u8),
    luma_bit_depth_entry_minus8: u8 = @import("std").mem.zeroes(u8),
    chroma_bit_depth_entry_minus8: u8 = @import("std").mem.zeroes(u8),
    num_tile_columns_minus1: u8 = @import("std").mem.zeroes(u8),
    num_tile_rows_minus1: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    column_width_minus1: [19]u16 = @import("std").mem.zeroes([19]u16),
    row_height_minus1: [21]u16 = @import("std").mem.zeroes([21]u16),
    reserved3: u32 = @import("std").mem.zeroes(u32),
    pScalingLists: [*c]const StdVideoH265ScalingLists = @import("std").mem.zeroes([*c]const StdVideoH265ScalingLists),
    pPredictorPaletteEntries: [*c]const StdVideoH265PredictorPaletteEntries = @import("std").mem.zeroes([*c]const StdVideoH265PredictorPaletteEntries),
};
pub const StdVideoH265PictureParameterSet = struct_StdVideoH265PictureParameterSet;
pub const struct_StdVideoEncodeH265WeightTableFlags = extern struct {
    luma_weight_l0_flag: u16 = @import("std").mem.zeroes(u16),
    chroma_weight_l0_flag: u16 = @import("std").mem.zeroes(u16),
    luma_weight_l1_flag: u16 = @import("std").mem.zeroes(u16),
    chroma_weight_l1_flag: u16 = @import("std").mem.zeroes(u16),
};
pub const StdVideoEncodeH265WeightTableFlags = struct_StdVideoEncodeH265WeightTableFlags;
pub const struct_StdVideoEncodeH265WeightTable = extern struct {
    flags: StdVideoEncodeH265WeightTableFlags = @import("std").mem.zeroes(StdVideoEncodeH265WeightTableFlags),
    luma_log2_weight_denom: u8 = @import("std").mem.zeroes(u8),
    delta_chroma_log2_weight_denom: i8 = @import("std").mem.zeroes(i8),
    delta_luma_weight_l0: [15]i8 = @import("std").mem.zeroes([15]i8),
    luma_offset_l0: [15]i8 = @import("std").mem.zeroes([15]i8),
    delta_chroma_weight_l0: [15][2]i8 = @import("std").mem.zeroes([15][2]i8),
    delta_chroma_offset_l0: [15][2]i8 = @import("std").mem.zeroes([15][2]i8),
    delta_luma_weight_l1: [15]i8 = @import("std").mem.zeroes([15]i8),
    luma_offset_l1: [15]i8 = @import("std").mem.zeroes([15]i8),
    delta_chroma_weight_l1: [15][2]i8 = @import("std").mem.zeroes([15][2]i8),
    delta_chroma_offset_l1: [15][2]i8 = @import("std").mem.zeroes([15][2]i8),
};
pub const StdVideoEncodeH265WeightTable = struct_StdVideoEncodeH265WeightTable;
// /usr/include/vk_video/vulkan_video_codec_h265std_encode.h:52:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH265SliceSegmentHeaderFlags = opaque {};
pub const StdVideoEncodeH265SliceSegmentHeaderFlags = struct_StdVideoEncodeH265SliceSegmentHeaderFlags;
pub const struct_StdVideoEncodeH265SliceSegmentHeader = extern struct {
    flags: StdVideoEncodeH265SliceSegmentHeaderFlags = @import("std").mem.zeroes(StdVideoEncodeH265SliceSegmentHeaderFlags),
    slice_type: StdVideoH265SliceType = @import("std").mem.zeroes(StdVideoH265SliceType),
    slice_segment_address: u32 = @import("std").mem.zeroes(u32),
    collocated_ref_idx: u8 = @import("std").mem.zeroes(u8),
    MaxNumMergeCand: u8 = @import("std").mem.zeroes(u8),
    slice_cb_qp_offset: i8 = @import("std").mem.zeroes(i8),
    slice_cr_qp_offset: i8 = @import("std").mem.zeroes(i8),
    slice_beta_offset_div2: i8 = @import("std").mem.zeroes(i8),
    slice_tc_offset_div2: i8 = @import("std").mem.zeroes(i8),
    slice_act_y_qp_offset: i8 = @import("std").mem.zeroes(i8),
    slice_act_cb_qp_offset: i8 = @import("std").mem.zeroes(i8),
    slice_act_cr_qp_offset: i8 = @import("std").mem.zeroes(i8),
    slice_qp_delta: i8 = @import("std").mem.zeroes(i8),
    reserved1: u16 = @import("std").mem.zeroes(u16),
    pWeightTable: [*c]const StdVideoEncodeH265WeightTable = @import("std").mem.zeroes([*c]const StdVideoEncodeH265WeightTable),
};
pub const StdVideoEncodeH265SliceSegmentHeader = struct_StdVideoEncodeH265SliceSegmentHeader;
// /usr/include/vk_video/vulkan_video_codec_h265std_encode.h:86:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH265ReferenceListsInfoFlags = opaque {};
pub const StdVideoEncodeH265ReferenceListsInfoFlags = struct_StdVideoEncodeH265ReferenceListsInfoFlags;
pub const struct_StdVideoEncodeH265ReferenceListsInfo = extern struct {
    flags: StdVideoEncodeH265ReferenceListsInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH265ReferenceListsInfoFlags),
    num_ref_idx_l0_active_minus1: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l1_active_minus1: u8 = @import("std").mem.zeroes(u8),
    RefPicList0: [15]u8 = @import("std").mem.zeroes([15]u8),
    RefPicList1: [15]u8 = @import("std").mem.zeroes([15]u8),
    list_entry_l0: [15]u8 = @import("std").mem.zeroes([15]u8),
    list_entry_l1: [15]u8 = @import("std").mem.zeroes([15]u8),
};
pub const StdVideoEncodeH265ReferenceListsInfo = struct_StdVideoEncodeH265ReferenceListsInfo;
// /usr/include/vk_video/vulkan_video_codec_h265std_encode.h:102:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH265PictureInfoFlags = opaque {};
pub const StdVideoEncodeH265PictureInfoFlags = struct_StdVideoEncodeH265PictureInfoFlags;
pub const struct_StdVideoEncodeH265LongTermRefPics = extern struct {
    num_long_term_sps: u8 = @import("std").mem.zeroes(u8),
    num_long_term_pics: u8 = @import("std").mem.zeroes(u8),
    lt_idx_sps: [32]u8 = @import("std").mem.zeroes([32]u8),
    poc_lsb_lt: [16]u8 = @import("std").mem.zeroes([16]u8),
    used_by_curr_pic_lt_flag: u16 = @import("std").mem.zeroes(u16),
    delta_poc_msb_present_flag: [48]u8 = @import("std").mem.zeroes([48]u8),
    delta_poc_msb_cycle_lt: [48]u8 = @import("std").mem.zeroes([48]u8),
};
pub const StdVideoEncodeH265LongTermRefPics = struct_StdVideoEncodeH265LongTermRefPics;
pub const struct_StdVideoEncodeH265PictureInfo = extern struct {
    flags: StdVideoEncodeH265PictureInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH265PictureInfoFlags),
    pic_type: StdVideoH265PictureType = @import("std").mem.zeroes(StdVideoH265PictureType),
    sps_video_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pps_seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pps_pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    short_term_ref_pic_set_idx: u8 = @import("std").mem.zeroes(u8),
    PicOrderCntVal: i32 = @import("std").mem.zeroes(i32),
    TemporalId: u8 = @import("std").mem.zeroes(u8),
    reserved1: [7]u8 = @import("std").mem.zeroes([7]u8),
    pRefLists: ?*const StdVideoEncodeH265ReferenceListsInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH265ReferenceListsInfo),
    pShortTermRefPicSet: ?*const StdVideoH265ShortTermRefPicSet = @import("std").mem.zeroes(?*const StdVideoH265ShortTermRefPicSet),
    pLongTermRefPics: [*c]const StdVideoEncodeH265LongTermRefPics = @import("std").mem.zeroes([*c]const StdVideoEncodeH265LongTermRefPics),
};
pub const StdVideoEncodeH265PictureInfo = struct_StdVideoEncodeH265PictureInfo;
// /usr/include/vk_video/vulkan_video_codec_h265std_encode.h:140:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH265ReferenceInfoFlags = opaque {};
pub const StdVideoEncodeH265ReferenceInfoFlags = struct_StdVideoEncodeH265ReferenceInfoFlags;
pub const struct_StdVideoEncodeH265ReferenceInfo = extern struct {
    flags: StdVideoEncodeH265ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH265ReferenceInfoFlags),
    pic_type: StdVideoH265PictureType = @import("std").mem.zeroes(StdVideoH265PictureType),
    PicOrderCntVal: i32 = @import("std").mem.zeroes(i32),
    TemporalId: u8 = @import("std").mem.zeroes(u8),
};
pub const StdVideoEncodeH265ReferenceInfo = struct_StdVideoEncodeH265ReferenceInfo;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR: c_int = 32;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR: c_int = 64;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR: c_int = 128;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR: c_int = 256;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR: c_int = 512;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_CU_QP_DIFF_WRAPAROUND_BIT_KHR: c_int = 1024;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH265CapabilityFlagBitsKHR = c_uint;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR = enum_VkVideoEncodeH265CapabilityFlagBitsKHR;
pub const VkVideoEncodeH265CapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR: c_int = 32;
pub const VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR: c_int = 64;
pub const VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR: c_int = 128;
pub const VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR: c_int = 256;
pub const VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR: c_int = 512;
pub const VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR: c_int = 1024;
pub const VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR: c_int = 2048;
pub const VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR: c_int = 4096;
pub const VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR: c_int = 8192;
pub const VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR: c_int = 16384;
pub const VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR: c_int = 32768;
pub const VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR: c_int = 65536;
pub const VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR: c_int = 131072;
pub const VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR: c_int = 262144;
pub const VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR: c_int = 524288;
pub const VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR: c_int = 1048576;
pub const VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH265StdFlagBitsKHR = c_uint;
pub const VkVideoEncodeH265StdFlagBitsKHR = enum_VkVideoEncodeH265StdFlagBitsKHR;
pub const VkVideoEncodeH265StdFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH265CtbSizeFlagBitsKHR = c_uint;
pub const VkVideoEncodeH265CtbSizeFlagBitsKHR = enum_VkVideoEncodeH265CtbSizeFlagBitsKHR;
pub const VkVideoEncodeH265CtbSizeFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = c_uint;
pub const VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = enum_VkVideoEncodeH265TransformBlockSizeFlagBitsKHR;
pub const VkVideoEncodeH265TransformBlockSizeFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH265RateControlFlagBitsKHR = c_uint;
pub const VkVideoEncodeH265RateControlFlagBitsKHR = enum_VkVideoEncodeH265RateControlFlagBitsKHR;
pub const VkVideoEncodeH265RateControlFlagsKHR = VkFlags;
pub const struct_VkVideoEncodeH265CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoEncodeH265CapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265CapabilityFlagsKHR),
    maxLevelIdc: StdVideoH265LevelIdc = @import("std").mem.zeroes(StdVideoH265LevelIdc),
    maxSliceSegmentCount: u32 = @import("std").mem.zeroes(u32),
    maxTiles: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    ctbSizes: VkVideoEncodeH265CtbSizeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265CtbSizeFlagsKHR),
    transformBlockSizes: VkVideoEncodeH265TransformBlockSizeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265TransformBlockSizeFlagsKHR),
    maxPPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxBPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxSubLayerCount: u32 = @import("std").mem.zeroes(u32),
    expectDyadicTemporalSubLayerPattern: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: i32 = @import("std").mem.zeroes(i32),
    maxQp: i32 = @import("std").mem.zeroes(i32),
    prefersGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    requiresGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdSyntaxFlags: VkVideoEncodeH265StdFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265StdFlagsKHR),
};
pub const VkVideoEncodeH265CapabilitiesKHR = struct_VkVideoEncodeH265CapabilitiesKHR;
pub const struct_VkVideoEncodeH265SessionCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMaxLevelIdc: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxLevelIdc: StdVideoH265LevelIdc = @import("std").mem.zeroes(StdVideoH265LevelIdc),
};
pub const VkVideoEncodeH265SessionCreateInfoKHR = struct_VkVideoEncodeH265SessionCreateInfoKHR;
pub const struct_VkVideoEncodeH265QpKHR = extern struct {
    qpI: i32 = @import("std").mem.zeroes(i32),
    qpP: i32 = @import("std").mem.zeroes(i32),
    qpB: i32 = @import("std").mem.zeroes(i32),
};
pub const VkVideoEncodeH265QpKHR = struct_VkVideoEncodeH265QpKHR;
pub const struct_VkVideoEncodeH265QualityLevelPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    preferredRateControlFlags: VkVideoEncodeH265RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265RateControlFlagsKHR),
    preferredGopFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredIdrPeriod: u32 = @import("std").mem.zeroes(u32),
    preferredConsecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredSubLayerCount: u32 = @import("std").mem.zeroes(u32),
    preferredConstantQp: VkVideoEncodeH265QpKHR = @import("std").mem.zeroes(VkVideoEncodeH265QpKHR),
    preferredMaxL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredMaxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH265QualityLevelPropertiesKHR = struct_VkVideoEncodeH265QualityLevelPropertiesKHR;
pub const struct_VkVideoEncodeH265SessionParametersAddInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdVPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdVPSs: ?*const StdVideoH265VideoParameterSet = @import("std").mem.zeroes(?*const StdVideoH265VideoParameterSet),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH265SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH265SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH265PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH265PictureParameterSet),
};
pub const VkVideoEncodeH265SessionParametersAddInfoKHR = struct_VkVideoEncodeH265SessionParametersAddInfoKHR;
pub const struct_VkVideoEncodeH265SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdVPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoEncodeH265SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH265SessionParametersAddInfoKHR),
};
pub const VkVideoEncodeH265SessionParametersCreateInfoKHR = struct_VkVideoEncodeH265SessionParametersCreateInfoKHR;
pub const struct_VkVideoEncodeH265SessionParametersGetInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    writeStdVPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    writeStdSPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    writeStdPPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdVPSId: u32 = @import("std").mem.zeroes(u32),
    stdSPSId: u32 = @import("std").mem.zeroes(u32),
    stdPPSId: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH265SessionParametersGetInfoKHR = struct_VkVideoEncodeH265SessionParametersGetInfoKHR;
pub const struct_VkVideoEncodeH265SessionParametersFeedbackInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasStdVPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasStdSPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasStdPPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeH265SessionParametersFeedbackInfoKHR = struct_VkVideoEncodeH265SessionParametersFeedbackInfoKHR;
pub const struct_VkVideoEncodeH265NaluSliceSegmentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    constantQp: i32 = @import("std").mem.zeroes(i32),
    pStdSliceSegmentHeader: ?*const StdVideoEncodeH265SliceSegmentHeader = @import("std").mem.zeroes(?*const StdVideoEncodeH265SliceSegmentHeader),
};
pub const VkVideoEncodeH265NaluSliceSegmentInfoKHR = struct_VkVideoEncodeH265NaluSliceSegmentInfoKHR;
pub const struct_VkVideoEncodeH265PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    naluSliceSegmentEntryCount: u32 = @import("std").mem.zeroes(u32),
    pNaluSliceSegmentEntries: [*c]const VkVideoEncodeH265NaluSliceSegmentInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH265NaluSliceSegmentInfoKHR),
    pStdPictureInfo: ?*const StdVideoEncodeH265PictureInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH265PictureInfo),
};
pub const VkVideoEncodeH265PictureInfoKHR = struct_VkVideoEncodeH265PictureInfoKHR;
pub const struct_VkVideoEncodeH265DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoEncodeH265ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH265ReferenceInfo),
};
pub const VkVideoEncodeH265DpbSlotInfoKHR = struct_VkVideoEncodeH265DpbSlotInfoKHR;
pub const struct_VkVideoEncodeH265ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH265ProfileIdc = @import("std").mem.zeroes(StdVideoH265ProfileIdc),
};
pub const VkVideoEncodeH265ProfileInfoKHR = struct_VkVideoEncodeH265ProfileInfoKHR;
pub const struct_VkVideoEncodeH265RateControlInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeH265RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265RateControlFlagsKHR),
    gopFrameCount: u32 = @import("std").mem.zeroes(u32),
    idrPeriod: u32 = @import("std").mem.zeroes(u32),
    consecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    subLayerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH265RateControlInfoKHR = struct_VkVideoEncodeH265RateControlInfoKHR;
pub const struct_VkVideoEncodeH265FrameSizeKHR = extern struct {
    frameISize: u32 = @import("std").mem.zeroes(u32),
    framePSize: u32 = @import("std").mem.zeroes(u32),
    frameBSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH265FrameSizeKHR = struct_VkVideoEncodeH265FrameSizeKHR;
pub const struct_VkVideoEncodeH265RateControlLayerInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMinQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: VkVideoEncodeH265QpKHR = @import("std").mem.zeroes(VkVideoEncodeH265QpKHR),
    useMaxQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxQp: VkVideoEncodeH265QpKHR = @import("std").mem.zeroes(VkVideoEncodeH265QpKHR),
    useMaxFrameSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxFrameSize: VkVideoEncodeH265FrameSizeKHR = @import("std").mem.zeroes(VkVideoEncodeH265FrameSizeKHR),
};
pub const VkVideoEncodeH265RateControlLayerInfoKHR = struct_VkVideoEncodeH265RateControlLayerInfoKHR;
pub const struct_VkVideoEncodeH265GopRemainingFrameInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    gopRemainingI: u32 = @import("std").mem.zeroes(u32),
    gopRemainingP: u32 = @import("std").mem.zeroes(u32),
    gopRemainingB: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH265GopRemainingFrameInfoKHR = struct_VkVideoEncodeH265GopRemainingFrameInfoKHR;
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP: c_int = 0;
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM: c_int = 1;
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID: c_int = 2147483647;
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoDecodeH264FieldOrderCount = c_uint;
pub const StdVideoDecodeH264FieldOrderCount = enum_StdVideoDecodeH264FieldOrderCount;
// /usr/include/vk_video/vulkan_video_codec_h264std_decode.h:39:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeH264PictureInfoFlags = opaque {};
pub const StdVideoDecodeH264PictureInfoFlags = struct_StdVideoDecodeH264PictureInfoFlags;
pub const struct_StdVideoDecodeH264PictureInfo = extern struct {
    flags: StdVideoDecodeH264PictureInfoFlags = @import("std").mem.zeroes(StdVideoDecodeH264PictureInfoFlags),
    seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    frame_num: u16 = @import("std").mem.zeroes(u16),
    idr_pic_id: u16 = @import("std").mem.zeroes(u16),
    PicOrderCnt: [2]i32 = @import("std").mem.zeroes([2]i32),
};
pub const StdVideoDecodeH264PictureInfo = struct_StdVideoDecodeH264PictureInfo;
// /usr/include/vk_video/vulkan_video_codec_h264std_decode.h:59:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeH264ReferenceInfoFlags = opaque {};
pub const StdVideoDecodeH264ReferenceInfoFlags = struct_StdVideoDecodeH264ReferenceInfoFlags;
pub const struct_StdVideoDecodeH264ReferenceInfo = extern struct {
    flags: StdVideoDecodeH264ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoDecodeH264ReferenceInfoFlags),
    FrameNum: u16 = @import("std").mem.zeroes(u16),
    reserved: u16 = @import("std").mem.zeroes(u16),
    PicOrderCnt: [2]i32 = @import("std").mem.zeroes([2]i32),
};
pub const StdVideoDecodeH264ReferenceInfo = struct_StdVideoDecodeH264ReferenceInfo;
pub const VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR: c_int = 0;
pub const VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR: c_int = 1;
pub const VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR: c_int = 2;
pub const VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoDecodeH264PictureLayoutFlagBitsKHR = c_uint;
pub const VkVideoDecodeH264PictureLayoutFlagBitsKHR = enum_VkVideoDecodeH264PictureLayoutFlagBitsKHR;
pub const VkVideoDecodeH264PictureLayoutFlagsKHR = VkFlags;
pub const struct_VkVideoDecodeH264ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH264ProfileIdc = @import("std").mem.zeroes(StdVideoH264ProfileIdc),
    pictureLayout: VkVideoDecodeH264PictureLayoutFlagBitsKHR = @import("std").mem.zeroes(VkVideoDecodeH264PictureLayoutFlagBitsKHR),
};
pub const VkVideoDecodeH264ProfileInfoKHR = struct_VkVideoDecodeH264ProfileInfoKHR;
pub const struct_VkVideoDecodeH264CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxLevelIdc: StdVideoH264LevelIdc = @import("std").mem.zeroes(StdVideoH264LevelIdc),
    fieldOffsetGranularity: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
};
pub const VkVideoDecodeH264CapabilitiesKHR = struct_VkVideoDecodeH264CapabilitiesKHR;
pub const struct_VkVideoDecodeH264SessionParametersAddInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH264SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH264SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH264PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH264PictureParameterSet),
};
pub const VkVideoDecodeH264SessionParametersAddInfoKHR = struct_VkVideoDecodeH264SessionParametersAddInfoKHR;
pub const struct_VkVideoDecodeH264SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoDecodeH264SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoDecodeH264SessionParametersAddInfoKHR),
};
pub const VkVideoDecodeH264SessionParametersCreateInfoKHR = struct_VkVideoDecodeH264SessionParametersCreateInfoKHR;
pub const struct_VkVideoDecodeH264PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdPictureInfo: ?*const StdVideoDecodeH264PictureInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH264PictureInfo),
    sliceCount: u32 = @import("std").mem.zeroes(u32),
    pSliceOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkVideoDecodeH264PictureInfoKHR = struct_VkVideoDecodeH264PictureInfoKHR;
pub const struct_VkVideoDecodeH264DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoDecodeH264ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH264ReferenceInfo),
};
pub const VkVideoDecodeH264DpbSlotInfoKHR = struct_VkVideoDecodeH264DpbSlotInfoKHR;
pub const VkRenderingFlagsKHR = VkRenderingFlags;
pub const VkRenderingFlagBitsKHR = VkRenderingFlagBits;
pub const VkRenderingInfoKHR = VkRenderingInfo;
pub const VkRenderingAttachmentInfoKHR = VkRenderingAttachmentInfo;
pub const VkPipelineRenderingCreateInfoKHR = VkPipelineRenderingCreateInfo;
pub const VkPhysicalDeviceDynamicRenderingFeaturesKHR = VkPhysicalDeviceDynamicRenderingFeatures;
pub const VkCommandBufferInheritanceRenderingInfoKHR = VkCommandBufferInheritanceRenderingInfo;
pub const PFN_vkCmdBeginRenderingKHR = ?*const fn (VkCommandBuffer, [*c]const VkRenderingInfo) callconv(.C) void;
pub const PFN_vkCmdEndRenderingKHR = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;
pub const VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;
pub const VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;
pub const VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;
pub const VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;
pub const VkFormatProperties2KHR = VkFormatProperties2;
pub const VkImageFormatProperties2KHR = VkImageFormatProperties2;
pub const VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;
pub const VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;
pub const VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;
pub const VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;
pub const VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;
pub const PFN_vkGetPhysicalDeviceFeatures2KHR = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceFeatures2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties2KHR = ?*const fn (VkPhysicalDevice, VkFormat, [*c]VkFormatProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceImageFormatInfo2, [*c]VkImageFormatProperties2) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkQueueFamilyProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceMemoryProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSparseImageFormatInfo2, [*c]u32, [*c]VkSparseImageFormatProperties2) callconv(.C) void;
pub const VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags;
pub const VkPeerMemoryFeatureFlagBitsKHR = VkPeerMemoryFeatureFlagBits;
pub const VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags;
pub const VkMemoryAllocateFlagBitsKHR = VkMemoryAllocateFlagBits;
pub const VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;
pub const VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;
pub const VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;
pub const VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;
pub const VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;
pub const VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;
pub const VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;
pub const PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = ?*const fn (VkDevice, u32, u32, u32, [*c]VkPeerMemoryFeatureFlags) callconv(.C) void;
pub const PFN_vkCmdSetDeviceMaskKHR = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchBaseKHR = ?*const fn (VkCommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.C) void;
pub const VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags;
pub const PFN_vkTrimCommandPoolKHR = ?*const fn (VkDevice, VkCommandPool, VkCommandPoolTrimFlags) callconv(.C) void;
pub const VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;
pub const VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;
pub const PFN_vkEnumeratePhysicalDeviceGroupsKHR = ?*const fn (VkInstance, [*c]u32, [*c]VkPhysicalDeviceGroupProperties) callconv(.C) VkResult;
pub const VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags;
pub const VkExternalMemoryHandleTypeFlagBitsKHR = VkExternalMemoryHandleTypeFlagBits;
pub const VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags;
pub const VkExternalMemoryFeatureFlagBitsKHR = VkExternalMemoryFeatureFlagBits;
pub const VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;
pub const VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;
pub const VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;
pub const VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;
pub const VkExternalBufferPropertiesKHR = VkExternalBufferProperties;
pub const VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;
pub const PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalBufferInfo, [*c]VkExternalBufferProperties) callconv(.C) void;
pub const VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;
pub const VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;
pub const VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;
pub const struct_VkImportMemoryFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
    fd: c_int = @import("std").mem.zeroes(c_int),
};
pub const VkImportMemoryFdInfoKHR = struct_VkImportMemoryFdInfoKHR;
pub const struct_VkMemoryFdPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryTypeBits: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryFdPropertiesKHR = struct_VkMemoryFdPropertiesKHR;
pub const struct_VkMemoryGetFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
};
pub const VkMemoryGetFdInfoKHR = struct_VkMemoryGetFdInfoKHR;
pub const PFN_vkGetMemoryFdKHR = ?*const fn (VkDevice, [*c]const VkMemoryGetFdInfoKHR, [*c]c_int) callconv(.C) VkResult;
pub const PFN_vkGetMemoryFdPropertiesKHR = ?*const fn (VkDevice, VkExternalMemoryHandleTypeFlagBits, c_int, [*c]VkMemoryFdPropertiesKHR) callconv(.C) VkResult;
pub const VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags;
pub const VkExternalSemaphoreHandleTypeFlagBitsKHR = VkExternalSemaphoreHandleTypeFlagBits;
pub const VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags;
pub const VkExternalSemaphoreFeatureFlagBitsKHR = VkExternalSemaphoreFeatureFlagBits;
pub const VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;
pub const VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;
pub const PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalSemaphoreInfo, [*c]VkExternalSemaphoreProperties) callconv(.C) void;
pub const VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags;
pub const VkSemaphoreImportFlagBitsKHR = VkSemaphoreImportFlagBits;
pub const VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;
pub const struct_VkImportSemaphoreFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    flags: VkSemaphoreImportFlags = @import("std").mem.zeroes(VkSemaphoreImportFlags),
    handleType: VkExternalSemaphoreHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlagBits),
    fd: c_int = @import("std").mem.zeroes(c_int),
};
pub const VkImportSemaphoreFdInfoKHR = struct_VkImportSemaphoreFdInfoKHR;
pub const struct_VkSemaphoreGetFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    handleType: VkExternalSemaphoreHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlagBits),
};
pub const VkSemaphoreGetFdInfoKHR = struct_VkSemaphoreGetFdInfoKHR;
pub const PFN_vkImportSemaphoreFdKHR = ?*const fn (VkDevice, [*c]const VkImportSemaphoreFdInfoKHR) callconv(.C) VkResult;
pub const PFN_vkGetSemaphoreFdKHR = ?*const fn (VkDevice, [*c]const VkSemaphoreGetFdInfoKHR, [*c]c_int) callconv(.C) VkResult;
pub const VkPhysicalDevicePushDescriptorPropertiesKHR = VkPhysicalDevicePushDescriptorProperties;
pub const PFN_vkCmdPushDescriptorSetKHR = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, [*c]const VkWriteDescriptorSet) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSetWithTemplateKHR = ?*const fn (VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, u32, ?*const anyopaque) callconv(.C) void;
pub const VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub const VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub const VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;
pub const struct_VkRectLayerKHR = extern struct {
    offset: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    extent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    layer: u32 = @import("std").mem.zeroes(u32),
};
pub const VkRectLayerKHR = struct_VkRectLayerKHR;
pub const struct_VkPresentRegionKHR = extern struct {
    rectangleCount: u32 = @import("std").mem.zeroes(u32),
    pRectangles: [*c]const VkRectLayerKHR = @import("std").mem.zeroes([*c]const VkRectLayerKHR),
};
pub const VkPresentRegionKHR = struct_VkPresentRegionKHR;
pub const struct_VkPresentRegionsKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkPresentRegionKHR = @import("std").mem.zeroes([*c]const VkPresentRegionKHR),
};
pub const VkPresentRegionsKHR = struct_VkPresentRegionsKHR;
pub const VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;
pub const VkDescriptorUpdateTemplateTypeKHR = VkDescriptorUpdateTemplateType;
pub const VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags;
pub const VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;
pub const VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;
pub const PFN_vkCreateDescriptorUpdateTemplateKHR = ?*const fn (VkDevice, [*c]const VkDescriptorUpdateTemplateCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorUpdateTemplate) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorUpdateTemplateKHR = ?*const fn (VkDevice, VkDescriptorUpdateTemplate, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkUpdateDescriptorSetWithTemplateKHR = ?*const fn (VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, ?*const anyopaque) callconv(.C) void;
pub const VkPhysicalDeviceImagelessFramebufferFeaturesKHR = VkPhysicalDeviceImagelessFramebufferFeatures;
pub const VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo;
pub const VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo;
pub const VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo;
pub const VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2;
pub const VkAttachmentDescription2KHR = VkAttachmentDescription2;
pub const VkAttachmentReference2KHR = VkAttachmentReference2;
pub const VkSubpassDescription2KHR = VkSubpassDescription2;
pub const VkSubpassDependency2KHR = VkSubpassDependency2;
pub const VkSubpassBeginInfoKHR = VkSubpassBeginInfo;
pub const VkSubpassEndInfoKHR = VkSubpassEndInfo;
pub const PFN_vkCreateRenderPass2KHR = ?*const fn (VkDevice, [*c]const VkRenderPassCreateInfo2, [*c]const VkAllocationCallbacks, [*c]VkRenderPass) callconv(.C) VkResult;
pub const PFN_vkCmdBeginRenderPass2KHR = ?*const fn (VkCommandBuffer, [*c]const VkRenderPassBeginInfo, [*c]const VkSubpassBeginInfo) callconv(.C) void;
pub const PFN_vkCmdNextSubpass2KHR = ?*const fn (VkCommandBuffer, [*c]const VkSubpassBeginInfo, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass2KHR = ?*const fn (VkCommandBuffer, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub const struct_VkSharedPresentSurfaceCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sharedPresentSupportedUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkSharedPresentSurfaceCapabilitiesKHR = struct_VkSharedPresentSurfaceCapabilitiesKHR;
pub const PFN_vkGetSwapchainStatusKHR = ?*const fn (VkDevice, VkSwapchainKHR) callconv(.C) VkResult;
pub const VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags;
pub const VkExternalFenceHandleTypeFlagBitsKHR = VkExternalFenceHandleTypeFlagBits;
pub const VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags;
pub const VkExternalFenceFeatureFlagBitsKHR = VkExternalFenceFeatureFlagBits;
pub const VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;
pub const VkExternalFencePropertiesKHR = VkExternalFenceProperties;
pub const PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalFenceInfo, [*c]VkExternalFenceProperties) callconv(.C) void;
pub const VkFenceImportFlagsKHR = VkFenceImportFlags;
pub const VkFenceImportFlagBitsKHR = VkFenceImportFlagBits;
pub const VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;
pub const struct_VkImportFenceFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fence: VkFence = @import("std").mem.zeroes(VkFence),
    flags: VkFenceImportFlags = @import("std").mem.zeroes(VkFenceImportFlags),
    handleType: VkExternalFenceHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlagBits),
    fd: c_int = @import("std").mem.zeroes(c_int),
};
pub const VkImportFenceFdInfoKHR = struct_VkImportFenceFdInfoKHR;
pub const struct_VkFenceGetFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fence: VkFence = @import("std").mem.zeroes(VkFence),
    handleType: VkExternalFenceHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlagBits),
};
pub const VkFenceGetFdInfoKHR = struct_VkFenceGetFdInfoKHR;
pub const PFN_vkImportFenceFdKHR = ?*const fn (VkDevice, [*c]const VkImportFenceFdInfoKHR) callconv(.C) VkResult;
pub const PFN_vkGetFenceFdKHR = ?*const fn (VkDevice, [*c]const VkFenceGetFdInfoKHR, [*c]c_int) callconv(.C) VkResult;
pub const VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR: c_int = 0;
pub const VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR: c_int = 3;
pub const VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR: c_int = 4;
pub const VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR: c_int = 5;
pub const VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR: c_int = 6;
pub const VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR: c_int = 7;
pub const VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR: c_int = 8;
pub const VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR: c_int = 9;
pub const VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR: c_int = 10;
pub const VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterUnitKHR = c_uint;
pub const VkPerformanceCounterUnitKHR = enum_VkPerformanceCounterUnitKHR;
pub const VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR: c_int = 0;
pub const VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR: c_int = 2;
pub const VK_QUERY_SCOPE_COMMAND_BUFFER_KHR: c_int = 0;
pub const VK_QUERY_SCOPE_RENDER_PASS_KHR: c_int = 1;
pub const VK_QUERY_SCOPE_COMMAND_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterScopeKHR = c_uint;
pub const VkPerformanceCounterScopeKHR = enum_VkPerformanceCounterScopeKHR;
pub const VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR: c_int = 0;
pub const VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR: c_int = 3;
pub const VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR: c_int = 4;
pub const VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR: c_int = 5;
pub const VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterStorageKHR = c_uint;
pub const VkPerformanceCounterStorageKHR = enum_VkPerformanceCounterStorageKHR;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterDescriptionFlagBitsKHR = c_uint;
pub const VkPerformanceCounterDescriptionFlagBitsKHR = enum_VkPerformanceCounterDescriptionFlagBitsKHR;
pub const VkPerformanceCounterDescriptionFlagsKHR = VkFlags;
pub const VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAcquireProfilingLockFlagBitsKHR = c_uint;
pub const VkAcquireProfilingLockFlagBitsKHR = enum_VkAcquireProfilingLockFlagBitsKHR;
pub const VkAcquireProfilingLockFlagsKHR = VkFlags;
pub const struct_VkPhysicalDevicePerformanceQueryFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    performanceCounterQueryPools: VkBool32 = @import("std").mem.zeroes(VkBool32),
    performanceCounterMultipleQueryPools: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePerformanceQueryFeaturesKHR = struct_VkPhysicalDevicePerformanceQueryFeaturesKHR;
pub const struct_VkPhysicalDevicePerformanceQueryPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    allowCommandBufferQueryCopies: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePerformanceQueryPropertiesKHR = struct_VkPhysicalDevicePerformanceQueryPropertiesKHR;
pub const struct_VkPerformanceCounterKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    unit: VkPerformanceCounterUnitKHR = @import("std").mem.zeroes(VkPerformanceCounterUnitKHR),
    scope: VkPerformanceCounterScopeKHR = @import("std").mem.zeroes(VkPerformanceCounterScopeKHR),
    storage: VkPerformanceCounterStorageKHR = @import("std").mem.zeroes(VkPerformanceCounterStorageKHR),
    uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const VkPerformanceCounterKHR = struct_VkPerformanceCounterKHR;
pub const struct_VkPerformanceCounterDescriptionKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkPerformanceCounterDescriptionFlagsKHR = @import("std").mem.zeroes(VkPerformanceCounterDescriptionFlagsKHR),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    category: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
};
pub const VkPerformanceCounterDescriptionKHR = struct_VkPerformanceCounterDescriptionKHR;
pub const struct_VkQueryPoolPerformanceCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    counterIndexCount: u32 = @import("std").mem.zeroes(u32),
    pCounterIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkQueryPoolPerformanceCreateInfoKHR = struct_VkQueryPoolPerformanceCreateInfoKHR;
pub const union_VkPerformanceCounterResultKHR = extern union {
    int32: i32,
    int64: i64,
    uint32: u32,
    uint64: u64,
    float32: f32,
    float64: f64,
};
pub const VkPerformanceCounterResultKHR = union_VkPerformanceCounterResultKHR;
pub const struct_VkAcquireProfilingLockInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkAcquireProfilingLockFlagsKHR = @import("std").mem.zeroes(VkAcquireProfilingLockFlagsKHR),
    timeout: u64 = @import("std").mem.zeroes(u64),
};
pub const VkAcquireProfilingLockInfoKHR = struct_VkAcquireProfilingLockInfoKHR;
pub const struct_VkPerformanceQuerySubmitInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    counterPassIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPerformanceQuerySubmitInfoKHR = struct_VkPerformanceQuerySubmitInfoKHR;
pub const PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = ?*const fn (VkPhysicalDevice, u32, [*c]u32, [*c]VkPerformanceCounterKHR, [*c]VkPerformanceCounterDescriptionKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkQueryPoolPerformanceCreateInfoKHR, [*c]u32) callconv(.C) void;
pub const PFN_vkAcquireProfilingLockKHR = ?*const fn (VkDevice, [*c]const VkAcquireProfilingLockInfoKHR) callconv(.C) VkResult;
pub const PFN_vkReleaseProfilingLockKHR = ?*const fn (VkDevice) callconv(.C) void;
pub const VkPointClippingBehaviorKHR = VkPointClippingBehavior;
pub const VkTessellationDomainOriginKHR = VkTessellationDomainOrigin;
pub const VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;
pub const VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo;
pub const VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;
pub const VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;
pub const VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo;
pub const struct_VkPhysicalDeviceSurfaceInfo2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    surface: VkSurfaceKHR = @import("std").mem.zeroes(VkSurfaceKHR),
};
pub const VkPhysicalDeviceSurfaceInfo2KHR = struct_VkPhysicalDeviceSurfaceInfo2KHR;
pub const struct_VkSurfaceCapabilities2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    surfaceCapabilities: VkSurfaceCapabilitiesKHR = @import("std").mem.zeroes(VkSurfaceCapabilitiesKHR),
};
pub const VkSurfaceCapabilities2KHR = struct_VkSurfaceCapabilities2KHR;
pub const struct_VkSurfaceFormat2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    surfaceFormat: VkSurfaceFormatKHR = @import("std").mem.zeroes(VkSurfaceFormatKHR),
};
pub const VkSurfaceFormat2KHR = struct_VkSurfaceFormat2KHR;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSurfaceInfo2KHR, [*c]VkSurfaceCapabilities2KHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSurfaceInfo2KHR, [*c]u32, [*c]VkSurfaceFormat2KHR) callconv(.C) VkResult;
pub const VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub const VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub const struct_VkDisplayProperties2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    displayProperties: VkDisplayPropertiesKHR = @import("std").mem.zeroes(VkDisplayPropertiesKHR),
};
pub const VkDisplayProperties2KHR = struct_VkDisplayProperties2KHR;
pub const struct_VkDisplayPlaneProperties2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    displayPlaneProperties: VkDisplayPlanePropertiesKHR = @import("std").mem.zeroes(VkDisplayPlanePropertiesKHR),
};
pub const VkDisplayPlaneProperties2KHR = struct_VkDisplayPlaneProperties2KHR;
pub const struct_VkDisplayModeProperties2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    displayModeProperties: VkDisplayModePropertiesKHR = @import("std").mem.zeroes(VkDisplayModePropertiesKHR),
};
pub const VkDisplayModeProperties2KHR = struct_VkDisplayModeProperties2KHR;
pub const struct_VkDisplayPlaneInfo2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mode: VkDisplayModeKHR = @import("std").mem.zeroes(VkDisplayModeKHR),
    planeIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDisplayPlaneInfo2KHR = struct_VkDisplayPlaneInfo2KHR;
pub const struct_VkDisplayPlaneCapabilities2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    capabilities: VkDisplayPlaneCapabilitiesKHR = @import("std").mem.zeroes(VkDisplayPlaneCapabilitiesKHR),
};
pub const VkDisplayPlaneCapabilities2KHR = struct_VkDisplayPlaneCapabilities2KHR;
pub const PFN_vkGetPhysicalDeviceDisplayProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayProperties2KHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayPlaneProperties2KHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayModeProperties2KHR = ?*const fn (VkPhysicalDevice, VkDisplayKHR, [*c]u32, [*c]VkDisplayModeProperties2KHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayPlaneCapabilities2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkDisplayPlaneInfo2KHR, [*c]VkDisplayPlaneCapabilities2KHR) callconv(.C) VkResult;
pub const VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;
pub const VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;
pub const VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;
pub const VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;
pub const VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;
pub const VkMemoryRequirements2KHR = VkMemoryRequirements2;
pub const VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;
pub const PFN_vkGetImageMemoryRequirements2KHR = ?*const fn (VkDevice, [*c]const VkImageMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetBufferMemoryRequirements2KHR = ?*const fn (VkDevice, [*c]const VkBufferMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements2KHR = ?*const fn (VkDevice, [*c]const VkImageSparseMemoryRequirementsInfo2, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub const VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo;
pub const VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion;
pub const VkSamplerYcbcrModelConversionKHR = VkSamplerYcbcrModelConversion;
pub const VkSamplerYcbcrRangeKHR = VkSamplerYcbcrRange;
pub const VkChromaLocationKHR = VkChromaLocation;
pub const VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;
pub const VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;
pub const VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;
pub const VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;
pub const VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures;
pub const VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties;
pub const PFN_vkCreateSamplerYcbcrConversionKHR = ?*const fn (VkDevice, [*c]const VkSamplerYcbcrConversionCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSamplerYcbcrConversion) callconv(.C) VkResult;
pub const PFN_vkDestroySamplerYcbcrConversionKHR = ?*const fn (VkDevice, VkSamplerYcbcrConversion, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;
pub const VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;
pub const PFN_vkBindBufferMemory2KHR = ?*const fn (VkDevice, u32, [*c]const VkBindBufferMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkBindImageMemory2KHR = ?*const fn (VkDevice, u32, [*c]const VkBindImageMemoryInfo) callconv(.C) VkResult;
pub const VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;
pub const VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;
pub const PFN_vkGetDescriptorSetLayoutSupportKHR = ?*const fn (VkDevice, [*c]const VkDescriptorSetLayoutCreateInfo, [*c]VkDescriptorSetLayoutSupport) callconv(.C) void;
pub const PFN_vkCmdDrawIndirectCountKHR = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCountKHR = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
pub const VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures;
pub const VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features;
pub const struct_VkPhysicalDeviceShaderClockFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupClock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDeviceClock: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderClockFeaturesKHR = struct_VkPhysicalDeviceShaderClockFeaturesKHR;
// /usr/include/vk_video/vulkan_video_codec_h265std_decode.h:32:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeH265PictureInfoFlags = opaque {};
pub const StdVideoDecodeH265PictureInfoFlags = struct_StdVideoDecodeH265PictureInfoFlags;
pub const struct_StdVideoDecodeH265PictureInfo = extern struct {
    flags: StdVideoDecodeH265PictureInfoFlags = @import("std").mem.zeroes(StdVideoDecodeH265PictureInfoFlags),
    sps_video_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pps_seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pps_pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    NumDeltaPocsOfRefRpsIdx: u8 = @import("std").mem.zeroes(u8),
    PicOrderCntVal: i32 = @import("std").mem.zeroes(i32),
    NumBitsForSTRefPicSetInSlice: u16 = @import("std").mem.zeroes(u16),
    reserved: u16 = @import("std").mem.zeroes(u16),
    RefPicSetStCurrBefore: [8]u8 = @import("std").mem.zeroes([8]u8),
    RefPicSetStCurrAfter: [8]u8 = @import("std").mem.zeroes([8]u8),
    RefPicSetLtCurr: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const StdVideoDecodeH265PictureInfo = struct_StdVideoDecodeH265PictureInfo;
// /usr/include/vk_video/vulkan_video_codec_h265std_decode.h:53:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeH265ReferenceInfoFlags = opaque {};
pub const StdVideoDecodeH265ReferenceInfoFlags = struct_StdVideoDecodeH265ReferenceInfoFlags;
pub const struct_StdVideoDecodeH265ReferenceInfo = extern struct {
    flags: StdVideoDecodeH265ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoDecodeH265ReferenceInfoFlags),
    PicOrderCntVal: i32 = @import("std").mem.zeroes(i32),
};
pub const StdVideoDecodeH265ReferenceInfo = struct_StdVideoDecodeH265ReferenceInfo;
pub const struct_VkVideoDecodeH265ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH265ProfileIdc = @import("std").mem.zeroes(StdVideoH265ProfileIdc),
};
pub const VkVideoDecodeH265ProfileInfoKHR = struct_VkVideoDecodeH265ProfileInfoKHR;
pub const struct_VkVideoDecodeH265CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxLevelIdc: StdVideoH265LevelIdc = @import("std").mem.zeroes(StdVideoH265LevelIdc),
};
pub const VkVideoDecodeH265CapabilitiesKHR = struct_VkVideoDecodeH265CapabilitiesKHR;
pub const struct_VkVideoDecodeH265SessionParametersAddInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdVPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdVPSs: ?*const StdVideoH265VideoParameterSet = @import("std").mem.zeroes(?*const StdVideoH265VideoParameterSet),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH265SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH265SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH265PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH265PictureParameterSet),
};
pub const VkVideoDecodeH265SessionParametersAddInfoKHR = struct_VkVideoDecodeH265SessionParametersAddInfoKHR;
pub const struct_VkVideoDecodeH265SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdVPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoDecodeH265SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoDecodeH265SessionParametersAddInfoKHR),
};
pub const VkVideoDecodeH265SessionParametersCreateInfoKHR = struct_VkVideoDecodeH265SessionParametersCreateInfoKHR;
pub const struct_VkVideoDecodeH265PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdPictureInfo: ?*const StdVideoDecodeH265PictureInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH265PictureInfo),
    sliceSegmentCount: u32 = @import("std").mem.zeroes(u32),
    pSliceSegmentOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkVideoDecodeH265PictureInfoKHR = struct_VkVideoDecodeH265PictureInfoKHR;
pub const struct_VkVideoDecodeH265DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoDecodeH265ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH265ReferenceInfo),
};
pub const VkVideoDecodeH265DpbSlotInfoKHR = struct_VkVideoDecodeH265DpbSlotInfoKHR;
pub const VkQueueGlobalPriorityKHR = VkQueueGlobalPriority;
pub const VkDeviceQueueGlobalPriorityCreateInfoKHR = VkDeviceQueueGlobalPriorityCreateInfo;
pub const VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR = VkPhysicalDeviceGlobalPriorityQueryFeatures;
pub const VkQueueFamilyGlobalPriorityPropertiesKHR = VkQueueFamilyGlobalPriorityProperties;
pub const VkDriverIdKHR = VkDriverId;
pub const VkConformanceVersionKHR = VkConformanceVersion;
pub const VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties;
pub const VkShaderFloatControlsIndependenceKHR = VkShaderFloatControlsIndependence;
pub const VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties;
pub const VkResolveModeFlagBitsKHR = VkResolveModeFlagBits;
pub const VkResolveModeFlagsKHR = VkResolveModeFlags;
pub const VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve;
pub const VkPhysicalDeviceDepthStencilResolvePropertiesKHR = VkPhysicalDeviceDepthStencilResolveProperties;
pub const VkSemaphoreTypeKHR = VkSemaphoreType;
pub const VkSemaphoreWaitFlagBitsKHR = VkSemaphoreWaitFlagBits;
pub const VkSemaphoreWaitFlagsKHR = VkSemaphoreWaitFlags;
pub const VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures;
pub const VkPhysicalDeviceTimelineSemaphorePropertiesKHR = VkPhysicalDeviceTimelineSemaphoreProperties;
pub const VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo;
pub const VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo;
pub const VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo;
pub const VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo;
pub const PFN_vkGetSemaphoreCounterValueKHR = ?*const fn (VkDevice, VkSemaphore, [*c]u64) callconv(.C) VkResult;
pub const PFN_vkWaitSemaphoresKHR = ?*const fn (VkDevice, [*c]const VkSemaphoreWaitInfo, u64) callconv(.C) VkResult;
pub const PFN_vkSignalSemaphoreKHR = ?*const fn (VkDevice, [*c]const VkSemaphoreSignalInfo) callconv(.C) VkResult;
pub const VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures;
pub const VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR = VkPhysicalDeviceShaderTerminateInvocationFeatures;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR: c_int = 0;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR: c_int = 1;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR: c_int = 2;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR: c_int = 3;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR: c_int = 4;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkFragmentShadingRateCombinerOpKHR = c_uint;
pub const VkFragmentShadingRateCombinerOpKHR = enum_VkFragmentShadingRateCombinerOpKHR;
pub const struct_VkFragmentShadingRateAttachmentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pFragmentShadingRateAttachment: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    shadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkFragmentShadingRateAttachmentInfoKHR = struct_VkFragmentShadingRateAttachmentInfoKHR;
pub const struct_VkPipelineFragmentShadingRateStateCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fragmentSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    combinerOps: [2]VkFragmentShadingRateCombinerOpKHR = @import("std").mem.zeroes([2]VkFragmentShadingRateCombinerOpKHR),
};
pub const VkPipelineFragmentShadingRateStateCreateInfoKHR = struct_VkPipelineFragmentShadingRateStateCreateInfoKHR;
pub const struct_VkPhysicalDeviceFragmentShadingRateFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineFragmentShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitiveFragmentShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    attachmentFragmentShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShadingRateFeaturesKHR = struct_VkPhysicalDeviceFragmentShadingRateFeaturesKHR;
pub const struct_VkPhysicalDeviceFragmentShadingRatePropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minFragmentShadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentShadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentShadingRateAttachmentTexelSizeAspectRatio: u32 = @import("std").mem.zeroes(u32),
    primitiveFragmentShadingRateWithMultipleViewports: VkBool32 = @import("std").mem.zeroes(VkBool32),
    layeredShadingRateAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateNonTrivialCombinerOps: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxFragmentSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentSizeAspectRatio: u32 = @import("std").mem.zeroes(u32),
    maxFragmentShadingRateCoverageSamples: u32 = @import("std").mem.zeroes(u32),
    maxFragmentShadingRateRasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    fragmentShadingRateWithShaderDepthStencilWrites: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithSampleMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithShaderSampleMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithConservativeRasterization: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithFragmentShaderInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithCustomSampleLocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateStrictMultiplyCombiner: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShadingRatePropertiesKHR = struct_VkPhysicalDeviceFragmentShadingRatePropertiesKHR;
pub const struct_VkPhysicalDeviceFragmentShadingRateKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    fragmentSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkPhysicalDeviceFragmentShadingRateKHR = struct_VkPhysicalDeviceFragmentShadingRateKHR;
pub const struct_VkRenderingFragmentShadingRateAttachmentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    shadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkRenderingFragmentShadingRateAttachmentInfoKHR = struct_VkRenderingFragmentShadingRateAttachmentInfoKHR;
pub const PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkPhysicalDeviceFragmentShadingRateKHR) callconv(.C) VkResult;
pub const PFN_vkCmdSetFragmentShadingRateKHR = ?*const fn (VkCommandBuffer, [*c]const VkExtent2D, [*c]const VkFragmentShadingRateCombinerOpKHR) callconv(.C) void;
pub const VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR = VkPhysicalDeviceDynamicRenderingLocalReadFeatures;
pub const VkRenderingAttachmentLocationInfoKHR = VkRenderingAttachmentLocationInfo;
pub const VkRenderingInputAttachmentIndexInfoKHR = VkRenderingInputAttachmentIndexInfo;
pub const PFN_vkCmdSetRenderingAttachmentLocationsKHR = ?*const fn (VkCommandBuffer, [*c]const VkRenderingAttachmentLocationInfo) callconv(.C) void;
pub const PFN_vkCmdSetRenderingInputAttachmentIndicesKHR = ?*const fn (VkCommandBuffer, [*c]const VkRenderingInputAttachmentIndexInfo) callconv(.C) void;
pub const struct_VkPhysicalDeviceShaderQuadControlFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderQuadControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderQuadControlFeaturesKHR = struct_VkPhysicalDeviceShaderQuadControlFeaturesKHR;
pub const struct_VkSurfaceProtectedCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    supportsProtected: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSurfaceProtectedCapabilitiesKHR = struct_VkSurfaceProtectedCapabilitiesKHR;
pub const VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
pub const VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout;
pub const VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout;
pub const struct_VkPhysicalDevicePresentWaitFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentWait: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePresentWaitFeaturesKHR = struct_VkPhysicalDevicePresentWaitFeaturesKHR;
pub const PFN_vkWaitForPresentKHR = ?*const fn (VkDevice, VkSwapchainKHR, u64, u64) callconv(.C) VkResult;
pub const VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
pub const VkPhysicalDeviceBufferDeviceAddressFeaturesKHR = VkPhysicalDeviceBufferDeviceAddressFeatures;
pub const VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo;
pub const VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo;
pub const VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo;
pub const VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo;
pub const PFN_vkGetBufferDeviceAddressKHR = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) VkDeviceAddress;
pub const PFN_vkGetBufferOpaqueCaptureAddressKHR = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) u64;
pub const PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = ?*const fn (VkDevice, [*c]const VkDeviceMemoryOpaqueCaptureAddressInfo) callconv(.C) u64;
pub const struct_VkDeferredOperationKHR_T = opaque {};
pub const VkDeferredOperationKHR = ?*struct_VkDeferredOperationKHR_T;
pub const PFN_vkCreateDeferredOperationKHR = ?*const fn (VkDevice, [*c]const VkAllocationCallbacks, [*c]VkDeferredOperationKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyDeferredOperationKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetDeferredOperationMaxConcurrencyKHR = ?*const fn (VkDevice, VkDeferredOperationKHR) callconv(.C) u32;
pub const PFN_vkGetDeferredOperationResultKHR = ?*const fn (VkDevice, VkDeferredOperationKHR) callconv(.C) VkResult;
pub const PFN_vkDeferredOperationJoinKHR = ?*const fn (VkDevice, VkDeferredOperationKHR) callconv(.C) VkResult;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR: c_int = 0;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR: c_int = 1;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR: c_int = 2;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR: c_int = 3;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPipelineExecutableStatisticFormatKHR = c_uint;
pub const VkPipelineExecutableStatisticFormatKHR = enum_VkPipelineExecutableStatisticFormatKHR;
pub const struct_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineExecutableInfo: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR = struct_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
pub const struct_VkPipelineInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
};
pub const VkPipelineInfoKHR = struct_VkPipelineInfoKHR;
pub const struct_VkPipelineExecutablePropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    subgroupSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineExecutablePropertiesKHR = struct_VkPipelineExecutablePropertiesKHR;
pub const struct_VkPipelineExecutableInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    executableIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineExecutableInfoKHR = struct_VkPipelineExecutableInfoKHR;
pub const union_VkPipelineExecutableStatisticValueKHR = extern union {
    b32: VkBool32,
    i64: i64,
    u64: u64,
    f64: f64,
};
pub const VkPipelineExecutableStatisticValueKHR = union_VkPipelineExecutableStatisticValueKHR;
pub const struct_VkPipelineExecutableStatisticKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    format: VkPipelineExecutableStatisticFormatKHR = @import("std").mem.zeroes(VkPipelineExecutableStatisticFormatKHR),
    value: VkPipelineExecutableStatisticValueKHR = @import("std").mem.zeroes(VkPipelineExecutableStatisticValueKHR),
};
pub const VkPipelineExecutableStatisticKHR = struct_VkPipelineExecutableStatisticKHR;
pub const struct_VkPipelineExecutableInternalRepresentationKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    isText: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkPipelineExecutableInternalRepresentationKHR = struct_VkPipelineExecutableInternalRepresentationKHR;
pub const PFN_vkGetPipelineExecutablePropertiesKHR = ?*const fn (VkDevice, [*c]const VkPipelineInfoKHR, [*c]u32, [*c]VkPipelineExecutablePropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPipelineExecutableStatisticsKHR = ?*const fn (VkDevice, [*c]const VkPipelineExecutableInfoKHR, [*c]u32, [*c]VkPipelineExecutableStatisticKHR) callconv(.C) VkResult;
pub const PFN_vkGetPipelineExecutableInternalRepresentationsKHR = ?*const fn (VkDevice, [*c]const VkPipelineExecutableInfoKHR, [*c]u32, [*c]VkPipelineExecutableInternalRepresentationKHR) callconv(.C) VkResult;
pub const VkMemoryUnmapFlagBitsKHR = VkMemoryUnmapFlagBits;
pub const VkMemoryUnmapFlagsKHR = VkMemoryUnmapFlags;
pub const VkMemoryMapInfoKHR = VkMemoryMapInfo;
pub const VkMemoryUnmapInfoKHR = VkMemoryUnmapInfo;
pub const PFN_vkMapMemory2KHR = ?*const fn (VkDevice, [*c]const VkMemoryMapInfo, [*c]?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkUnmapMemory2KHR = ?*const fn (VkDevice, [*c]const VkMemoryUnmapInfo) callconv(.C) VkResult;
pub const VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR = VkPhysicalDeviceShaderIntegerDotProductFeatures;
pub const VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR = VkPhysicalDeviceShaderIntegerDotProductProperties;
pub const struct_VkPipelineLibraryCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    libraryCount: u32 = @import("std").mem.zeroes(u32),
    pLibraries: [*c]const VkPipeline = @import("std").mem.zeroes([*c]const VkPipeline),
};
pub const VkPipelineLibraryCreateInfoKHR = struct_VkPipelineLibraryCreateInfoKHR;
pub const struct_VkPresentIdKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pPresentIds: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
};
pub const VkPresentIdKHR = struct_VkPresentIdKHR;
pub const struct_VkPhysicalDevicePresentIdFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentId: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePresentIdFeaturesKHR = struct_VkPhysicalDevicePresentIdFeaturesKHR;
pub const VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR: c_int = 0;
pub const VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR: c_int = 3;
pub const VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeTuningModeKHR = c_uint;
pub const VkVideoEncodeTuningModeKHR = enum_VkVideoEncodeTuningModeKHR;
pub const VK_VIDEO_ENCODE_WITH_QUANTIZATION_DELTA_MAP_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_WITH_EMPHASIS_MAP_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeFlagBitsKHR = c_uint;
pub const VkVideoEncodeFlagBitsKHR = enum_VkVideoEncodeFlagBitsKHR;
pub const VkVideoEncodeFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_CAPABILITY_QUANTIZATION_DELTA_MAP_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_CAPABILITY_EMPHASIS_MAP_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeCapabilityFlagBitsKHR = c_uint;
pub const VkVideoEncodeCapabilityFlagBitsKHR = enum_VkVideoEncodeCapabilityFlagBitsKHR;
pub const VkVideoEncodeCapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR: c_int = 0;
pub const VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeRateControlModeFlagBitsKHR = c_uint;
pub const VkVideoEncodeRateControlModeFlagBitsKHR = enum_VkVideoEncodeRateControlModeFlagBitsKHR;
pub const VkVideoEncodeRateControlModeFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeFeedbackFlagBitsKHR = c_uint;
pub const VkVideoEncodeFeedbackFlagBitsKHR = enum_VkVideoEncodeFeedbackFlagBitsKHR;
pub const VkVideoEncodeFeedbackFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR: c_int = 0;
pub const VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeUsageFlagBitsKHR = c_uint;
pub const VkVideoEncodeUsageFlagBitsKHR = enum_VkVideoEncodeUsageFlagBitsKHR;
pub const VkVideoEncodeUsageFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR: c_int = 0;
pub const VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeContentFlagBitsKHR = c_uint;
pub const VkVideoEncodeContentFlagBitsKHR = enum_VkVideoEncodeContentFlagBitsKHR;
pub const VkVideoEncodeContentFlagsKHR = VkFlags;
pub const VkVideoEncodeRateControlFlagsKHR = VkFlags;
pub const struct_VkVideoEncodeInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeFlagsKHR),
    dstBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    dstBufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    srcPictureResource: VkVideoPictureResourceInfoKHR = @import("std").mem.zeroes(VkVideoPictureResourceInfoKHR),
    pSetupReferenceSlot: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
    referenceSlotCount: u32 = @import("std").mem.zeroes(u32),
    pReferenceSlots: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
    precedingExternallyEncodedBytes: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeInfoKHR = struct_VkVideoEncodeInfoKHR;
pub const struct_VkVideoEncodeCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoEncodeCapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeCapabilityFlagsKHR),
    rateControlModes: VkVideoEncodeRateControlModeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlModeFlagsKHR),
    maxRateControlLayers: u32 = @import("std").mem.zeroes(u32),
    maxBitrate: u64 = @import("std").mem.zeroes(u64),
    maxQualityLevels: u32 = @import("std").mem.zeroes(u32),
    encodeInputPictureGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    supportedEncodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeFeedbackFlagsKHR),
};
pub const VkVideoEncodeCapabilitiesKHR = struct_VkVideoEncodeCapabilitiesKHR;
pub const struct_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    encodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeFeedbackFlagsKHR),
};
pub const VkQueryPoolVideoEncodeFeedbackCreateInfoKHR = struct_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR;
pub const struct_VkVideoEncodeUsageInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoUsageHints: VkVideoEncodeUsageFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeUsageFlagsKHR),
    videoContentHints: VkVideoEncodeContentFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeContentFlagsKHR),
    tuningMode: VkVideoEncodeTuningModeKHR = @import("std").mem.zeroes(VkVideoEncodeTuningModeKHR),
};
pub const VkVideoEncodeUsageInfoKHR = struct_VkVideoEncodeUsageInfoKHR;
pub const struct_VkVideoEncodeRateControlLayerInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    averageBitrate: u64 = @import("std").mem.zeroes(u64),
    maxBitrate: u64 = @import("std").mem.zeroes(u64),
    frameRateNumerator: u32 = @import("std").mem.zeroes(u32),
    frameRateDenominator: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeRateControlLayerInfoKHR = struct_VkVideoEncodeRateControlLayerInfoKHR;
pub const struct_VkVideoEncodeRateControlInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeRateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlFlagsKHR),
    rateControlMode: VkVideoEncodeRateControlModeFlagBitsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlModeFlagBitsKHR),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    pLayers: [*c]const VkVideoEncodeRateControlLayerInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeRateControlLayerInfoKHR),
    virtualBufferSizeInMs: u32 = @import("std").mem.zeroes(u32),
    initialVirtualBufferSizeInMs: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeRateControlInfoKHR = struct_VkVideoEncodeRateControlInfoKHR;
pub const struct_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pVideoProfile: [*c]const VkVideoProfileInfoKHR = @import("std").mem.zeroes([*c]const VkVideoProfileInfoKHR),
    qualityLevel: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR = struct_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR;
pub const struct_VkVideoEncodeQualityLevelPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    preferredRateControlMode: VkVideoEncodeRateControlModeFlagBitsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlModeFlagBitsKHR),
    preferredRateControlLayerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeQualityLevelPropertiesKHR = struct_VkVideoEncodeQualityLevelPropertiesKHR;
pub const struct_VkVideoEncodeQualityLevelInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    qualityLevel: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeQualityLevelInfoKHR = struct_VkVideoEncodeQualityLevelInfoKHR;
pub const struct_VkVideoEncodeSessionParametersGetInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoSessionParameters: VkVideoSessionParametersKHR = @import("std").mem.zeroes(VkVideoSessionParametersKHR),
};
pub const VkVideoEncodeSessionParametersGetInfoKHR = struct_VkVideoEncodeSessionParametersGetInfoKHR;
pub const struct_VkVideoEncodeSessionParametersFeedbackInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeSessionParametersFeedbackInfoKHR = struct_VkVideoEncodeSessionParametersFeedbackInfoKHR;
pub const PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR, [*c]VkVideoEncodeQualityLevelPropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetEncodedVideoSessionParametersKHR = ?*const fn (VkDevice, [*c]const VkVideoEncodeSessionParametersGetInfoKHR, [*c]VkVideoEncodeSessionParametersFeedbackInfoKHR, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCmdEncodeVideoKHR = ?*const fn (VkCommandBuffer, [*c]const VkVideoEncodeInfoKHR) callconv(.C) void;
pub const VkPipelineStageFlags2KHR = VkPipelineStageFlags2;
pub const VkPipelineStageFlagBits2KHR = VkPipelineStageFlagBits2;
pub const VkAccessFlags2KHR = VkAccessFlags2;
pub const VkAccessFlagBits2KHR = VkAccessFlagBits2;
pub const VkSubmitFlagBitsKHR = VkSubmitFlagBits;
pub const VkSubmitFlagsKHR = VkSubmitFlags;
pub const VkMemoryBarrier2KHR = VkMemoryBarrier2;
pub const VkBufferMemoryBarrier2KHR = VkBufferMemoryBarrier2;
pub const VkImageMemoryBarrier2KHR = VkImageMemoryBarrier2;
pub const VkDependencyInfoKHR = VkDependencyInfo;
pub const VkSubmitInfo2KHR = VkSubmitInfo2;
pub const VkSemaphoreSubmitInfoKHR = VkSemaphoreSubmitInfo;
pub const VkCommandBufferSubmitInfoKHR = VkCommandBufferSubmitInfo;
pub const VkPhysicalDeviceSynchronization2FeaturesKHR = VkPhysicalDeviceSynchronization2Features;
pub const PFN_vkCmdSetEvent2KHR = ?*const fn (VkCommandBuffer, VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdResetEvent2KHR = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags2) callconv(.C) void;
pub const PFN_vkCmdWaitEvents2KHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdPipelineBarrier2KHR = ?*const fn (VkCommandBuffer, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdWriteTimestamp2KHR = ?*const fn (VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkQueueSubmit2KHR = ?*const fn (VkQueue, u32, [*c]const VkSubmitInfo2, VkFence) callconv(.C) VkResult;
pub const struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentShaderBarycentric: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR = struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
pub const struct_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    triStripVertexOrderIndependentOfProvokingVertex: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR = struct_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR;
pub const struct_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupUniformControlFlow: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR = struct_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;
pub const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
pub const struct_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    workgroupMemoryExplicitLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    workgroupMemoryExplicitLayoutScalarBlockLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    workgroupMemoryExplicitLayout8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    workgroupMemoryExplicitLayout16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR = struct_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;
pub const VkCopyBufferInfo2KHR = VkCopyBufferInfo2;
pub const VkCopyImageInfo2KHR = VkCopyImageInfo2;
pub const VkCopyBufferToImageInfo2KHR = VkCopyBufferToImageInfo2;
pub const VkCopyImageToBufferInfo2KHR = VkCopyImageToBufferInfo2;
pub const VkBlitImageInfo2KHR = VkBlitImageInfo2;
pub const VkResolveImageInfo2KHR = VkResolveImageInfo2;
pub const VkBufferCopy2KHR = VkBufferCopy2;
pub const VkImageCopy2KHR = VkImageCopy2;
pub const VkImageBlit2KHR = VkImageBlit2;
pub const VkBufferImageCopy2KHR = VkBufferImageCopy2;
pub const VkImageResolve2KHR = VkImageResolve2;
pub const PFN_vkCmdCopyBuffer2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyBufferToImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferToImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImageToBuffer2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageToBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdBlitImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkBlitImageInfo2) callconv(.C) void;
pub const PFN_vkCmdResolveImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkResolveImageInfo2) callconv(.C) void;
pub const VkFormatFeatureFlags2KHR = VkFormatFeatureFlags2;
pub const VkFormatFeatureFlagBits2KHR = VkFormatFeatureFlagBits2;
pub const VkFormatProperties3KHR = VkFormatProperties3;
pub const struct_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingMaintenance1: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineTraceRaysIndirect2: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR = struct_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR;
pub const struct_VkTraceRaysIndirectCommand2KHR = extern struct {
    raygenShaderRecordAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    raygenShaderRecordSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    missShaderBindingTableAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    missShaderBindingTableSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    missShaderBindingTableStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    hitShaderBindingTableAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    hitShaderBindingTableSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    hitShaderBindingTableStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    callableShaderBindingTableAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    callableShaderBindingTableSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    callableShaderBindingTableStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    depth: u32 = @import("std").mem.zeroes(u32),
};
pub const VkTraceRaysIndirectCommand2KHR = struct_VkTraceRaysIndirectCommand2KHR;
pub const PFN_vkCmdTraceRaysIndirect2KHR = ?*const fn (VkCommandBuffer, VkDeviceAddress) callconv(.C) void;
pub const VkPhysicalDeviceMaintenance4FeaturesKHR = VkPhysicalDeviceMaintenance4Features;
pub const VkPhysicalDeviceMaintenance4PropertiesKHR = VkPhysicalDeviceMaintenance4Properties;
pub const VkDeviceBufferMemoryRequirementsKHR = VkDeviceBufferMemoryRequirements;
pub const VkDeviceImageMemoryRequirementsKHR = VkDeviceImageMemoryRequirements;
pub const PFN_vkGetDeviceBufferMemoryRequirementsKHR = ?*const fn (VkDevice, [*c]const VkDeviceBufferMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageMemoryRequirementsKHR = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageSparseMemoryRequirementsKHR = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub const VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR = VkPhysicalDeviceShaderSubgroupRotateFeatures;
pub const struct_VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderMaximalReconvergence: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR = struct_VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR;
pub const VkPipelineCreateFlags2KHR = VkPipelineCreateFlags2;
pub const VkPipelineCreateFlagBits2KHR = VkPipelineCreateFlagBits2;
pub const VkBufferUsageFlags2KHR = VkBufferUsageFlags2;
pub const VkBufferUsageFlagBits2KHR = VkBufferUsageFlagBits2;
pub const VkPhysicalDeviceMaintenance5FeaturesKHR = VkPhysicalDeviceMaintenance5Features;
pub const VkPhysicalDeviceMaintenance5PropertiesKHR = VkPhysicalDeviceMaintenance5Properties;
pub const VkRenderingAreaInfoKHR = VkRenderingAreaInfo;
pub const VkDeviceImageSubresourceInfoKHR = VkDeviceImageSubresourceInfo;
pub const VkImageSubresource2KHR = VkImageSubresource2;
pub const VkSubresourceLayout2KHR = VkSubresourceLayout2;
pub const VkPipelineCreateFlags2CreateInfoKHR = VkPipelineCreateFlags2CreateInfo;
pub const VkBufferUsageFlags2CreateInfoKHR = VkBufferUsageFlags2CreateInfo;
pub const PFN_vkCmdBindIndexBuffer2KHR = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, VkIndexType) callconv(.C) void;
pub const PFN_vkGetRenderingAreaGranularityKHR = ?*const fn (VkDevice, [*c]const VkRenderingAreaInfo, [*c]VkExtent2D) callconv(.C) void;
pub const PFN_vkGetDeviceImageSubresourceLayoutKHR = ?*const fn (VkDevice, [*c]const VkDeviceImageSubresourceInfo, [*c]VkSubresourceLayout2) callconv(.C) void;
pub const PFN_vkGetImageSubresourceLayout2KHR = ?*const fn (VkDevice, VkImage, [*c]const VkImageSubresource2, [*c]VkSubresourceLayout2) callconv(.C) void;
pub const struct_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingPositionFetch: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR = struct_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR;
pub const struct_VkPipelineBinaryKHR_T = opaque {};
pub const VkPipelineBinaryKHR = ?*struct_VkPipelineBinaryKHR_T;
pub const struct_VkPhysicalDevicePipelineBinaryFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineBinaries: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineBinaryFeaturesKHR = struct_VkPhysicalDevicePipelineBinaryFeaturesKHR;
pub const struct_VkPhysicalDevicePipelineBinaryPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineBinaryInternalCache: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineBinaryInternalCacheControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineBinaryPrefersInternalCache: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineBinaryPrecompiledInternalCache: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineBinaryCompressedData: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineBinaryPropertiesKHR = struct_VkPhysicalDevicePipelineBinaryPropertiesKHR;
pub const struct_VkDevicePipelineBinaryInternalCacheControlKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    disableInternalCache: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDevicePipelineBinaryInternalCacheControlKHR = struct_VkDevicePipelineBinaryInternalCacheControlKHR;
pub const struct_VkPipelineBinaryKeyKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    keySize: u32 = @import("std").mem.zeroes(u32),
    key: [32]u8 = @import("std").mem.zeroes([32]u8),
};
pub const VkPipelineBinaryKeyKHR = struct_VkPipelineBinaryKeyKHR;
pub const struct_VkPipelineBinaryDataKHR = extern struct {
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkPipelineBinaryDataKHR = struct_VkPipelineBinaryDataKHR;
pub const struct_VkPipelineBinaryKeysAndDataKHR = extern struct {
    binaryCount: u32 = @import("std").mem.zeroes(u32),
    pPipelineBinaryKeys: [*c]const VkPipelineBinaryKeyKHR = @import("std").mem.zeroes([*c]const VkPipelineBinaryKeyKHR),
    pPipelineBinaryData: [*c]const VkPipelineBinaryDataKHR = @import("std").mem.zeroes([*c]const VkPipelineBinaryDataKHR),
};
pub const VkPipelineBinaryKeysAndDataKHR = struct_VkPipelineBinaryKeysAndDataKHR;
pub const struct_VkPipelineCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkPipelineCreateInfoKHR = struct_VkPipelineCreateInfoKHR;
pub const struct_VkPipelineBinaryCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pKeysAndDataInfo: [*c]const VkPipelineBinaryKeysAndDataKHR = @import("std").mem.zeroes([*c]const VkPipelineBinaryKeysAndDataKHR),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    pPipelineCreateInfo: [*c]const VkPipelineCreateInfoKHR = @import("std").mem.zeroes([*c]const VkPipelineCreateInfoKHR),
};
pub const VkPipelineBinaryCreateInfoKHR = struct_VkPipelineBinaryCreateInfoKHR;
pub const struct_VkPipelineBinaryInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    binaryCount: u32 = @import("std").mem.zeroes(u32),
    pPipelineBinaries: [*c]const VkPipelineBinaryKHR = @import("std").mem.zeroes([*c]const VkPipelineBinaryKHR),
};
pub const VkPipelineBinaryInfoKHR = struct_VkPipelineBinaryInfoKHR;
pub const struct_VkReleaseCapturedPipelineDataInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
};
pub const VkReleaseCapturedPipelineDataInfoKHR = struct_VkReleaseCapturedPipelineDataInfoKHR;
pub const struct_VkPipelineBinaryDataInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineBinary: VkPipelineBinaryKHR = @import("std").mem.zeroes(VkPipelineBinaryKHR),
};
pub const VkPipelineBinaryDataInfoKHR = struct_VkPipelineBinaryDataInfoKHR;
pub const struct_VkPipelineBinaryHandlesInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipelineBinaryCount: u32 = @import("std").mem.zeroes(u32),
    pPipelineBinaries: [*c]VkPipelineBinaryKHR = @import("std").mem.zeroes([*c]VkPipelineBinaryKHR),
};
pub const VkPipelineBinaryHandlesInfoKHR = struct_VkPipelineBinaryHandlesInfoKHR;
pub const PFN_vkCreatePipelineBinariesKHR = ?*const fn (VkDevice, [*c]const VkPipelineBinaryCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkPipelineBinaryHandlesInfoKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyPipelineBinaryKHR = ?*const fn (VkDevice, VkPipelineBinaryKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetPipelineKeyKHR = ?*const fn (VkDevice, [*c]const VkPipelineCreateInfoKHR, [*c]VkPipelineBinaryKeyKHR) callconv(.C) VkResult;
pub const PFN_vkGetPipelineBinaryDataKHR = ?*const fn (VkDevice, [*c]const VkPipelineBinaryDataInfoKHR, [*c]VkPipelineBinaryKeyKHR, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkReleaseCapturedPipelineDataKHR = ?*const fn (VkDevice, [*c]const VkReleaseCapturedPipelineDataInfoKHR, [*c]const VkAllocationCallbacks) callconv(.C) VkResult;
pub const VK_COMPONENT_TYPE_FLOAT16_KHR: c_int = 0;
pub const VK_COMPONENT_TYPE_FLOAT32_KHR: c_int = 1;
pub const VK_COMPONENT_TYPE_FLOAT64_KHR: c_int = 2;
pub const VK_COMPONENT_TYPE_SINT8_KHR: c_int = 3;
pub const VK_COMPONENT_TYPE_SINT16_KHR: c_int = 4;
pub const VK_COMPONENT_TYPE_SINT32_KHR: c_int = 5;
pub const VK_COMPONENT_TYPE_SINT64_KHR: c_int = 6;
pub const VK_COMPONENT_TYPE_UINT8_KHR: c_int = 7;
pub const VK_COMPONENT_TYPE_UINT16_KHR: c_int = 8;
pub const VK_COMPONENT_TYPE_UINT32_KHR: c_int = 9;
pub const VK_COMPONENT_TYPE_UINT64_KHR: c_int = 10;
pub const VK_COMPONENT_TYPE_FLOAT16_NV: c_int = 0;
pub const VK_COMPONENT_TYPE_FLOAT32_NV: c_int = 1;
pub const VK_COMPONENT_TYPE_FLOAT64_NV: c_int = 2;
pub const VK_COMPONENT_TYPE_SINT8_NV: c_int = 3;
pub const VK_COMPONENT_TYPE_SINT16_NV: c_int = 4;
pub const VK_COMPONENT_TYPE_SINT32_NV: c_int = 5;
pub const VK_COMPONENT_TYPE_SINT64_NV: c_int = 6;
pub const VK_COMPONENT_TYPE_UINT8_NV: c_int = 7;
pub const VK_COMPONENT_TYPE_UINT16_NV: c_int = 8;
pub const VK_COMPONENT_TYPE_UINT32_NV: c_int = 9;
pub const VK_COMPONENT_TYPE_UINT64_NV: c_int = 10;
pub const VK_COMPONENT_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkComponentTypeKHR = c_uint;
pub const VkComponentTypeKHR = enum_VkComponentTypeKHR;
pub const VK_SCOPE_DEVICE_KHR: c_int = 1;
pub const VK_SCOPE_WORKGROUP_KHR: c_int = 2;
pub const VK_SCOPE_SUBGROUP_KHR: c_int = 3;
pub const VK_SCOPE_QUEUE_FAMILY_KHR: c_int = 5;
pub const VK_SCOPE_DEVICE_NV: c_int = 1;
pub const VK_SCOPE_WORKGROUP_NV: c_int = 2;
pub const VK_SCOPE_SUBGROUP_NV: c_int = 3;
pub const VK_SCOPE_QUEUE_FAMILY_NV: c_int = 5;
pub const VK_SCOPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkScopeKHR = c_uint;
pub const VkScopeKHR = enum_VkScopeKHR;
pub const struct_VkCooperativeMatrixPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    MSize: u32 = @import("std").mem.zeroes(u32),
    NSize: u32 = @import("std").mem.zeroes(u32),
    KSize: u32 = @import("std").mem.zeroes(u32),
    AType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    BType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    CType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    ResultType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    saturatingAccumulation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    scope: VkScopeKHR = @import("std").mem.zeroes(VkScopeKHR),
};
pub const VkCooperativeMatrixPropertiesKHR = struct_VkCooperativeMatrixPropertiesKHR;
pub const struct_VkPhysicalDeviceCooperativeMatrixFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrix: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixRobustBufferAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCooperativeMatrixFeaturesKHR = struct_VkPhysicalDeviceCooperativeMatrixFeaturesKHR;
pub const struct_VkPhysicalDeviceCooperativeMatrixPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrixSupportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
};
pub const VkPhysicalDeviceCooperativeMatrixPropertiesKHR = struct_VkPhysicalDeviceCooperativeMatrixPropertiesKHR;
pub const PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkCooperativeMatrixPropertiesKHR) callconv(.C) VkResult;
pub const struct_VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    computeDerivativeGroupQuads: VkBool32 = @import("std").mem.zeroes(VkBool32),
    computeDerivativeGroupLinear: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR = struct_VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR;
pub const struct_VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    meshAndTaskShaderDerivatives: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR = struct_VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR;
pub const STD_VIDEO_AV1_PROFILE_MAIN: c_int = 0;
pub const STD_VIDEO_AV1_PROFILE_HIGH: c_int = 1;
pub const STD_VIDEO_AV1_PROFILE_PROFESSIONAL: c_int = 2;
pub const STD_VIDEO_AV1_PROFILE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_PROFILE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1Profile = c_uint;
pub const StdVideoAV1Profile = enum_StdVideoAV1Profile;
pub const STD_VIDEO_AV1_LEVEL_2_0: c_int = 0;
pub const STD_VIDEO_AV1_LEVEL_2_1: c_int = 1;
pub const STD_VIDEO_AV1_LEVEL_2_2: c_int = 2;
pub const STD_VIDEO_AV1_LEVEL_2_3: c_int = 3;
pub const STD_VIDEO_AV1_LEVEL_3_0: c_int = 4;
pub const STD_VIDEO_AV1_LEVEL_3_1: c_int = 5;
pub const STD_VIDEO_AV1_LEVEL_3_2: c_int = 6;
pub const STD_VIDEO_AV1_LEVEL_3_3: c_int = 7;
pub const STD_VIDEO_AV1_LEVEL_4_0: c_int = 8;
pub const STD_VIDEO_AV1_LEVEL_4_1: c_int = 9;
pub const STD_VIDEO_AV1_LEVEL_4_2: c_int = 10;
pub const STD_VIDEO_AV1_LEVEL_4_3: c_int = 11;
pub const STD_VIDEO_AV1_LEVEL_5_0: c_int = 12;
pub const STD_VIDEO_AV1_LEVEL_5_1: c_int = 13;
pub const STD_VIDEO_AV1_LEVEL_5_2: c_int = 14;
pub const STD_VIDEO_AV1_LEVEL_5_3: c_int = 15;
pub const STD_VIDEO_AV1_LEVEL_6_0: c_int = 16;
pub const STD_VIDEO_AV1_LEVEL_6_1: c_int = 17;
pub const STD_VIDEO_AV1_LEVEL_6_2: c_int = 18;
pub const STD_VIDEO_AV1_LEVEL_6_3: c_int = 19;
pub const STD_VIDEO_AV1_LEVEL_7_0: c_int = 20;
pub const STD_VIDEO_AV1_LEVEL_7_1: c_int = 21;
pub const STD_VIDEO_AV1_LEVEL_7_2: c_int = 22;
pub const STD_VIDEO_AV1_LEVEL_7_3: c_int = 23;
pub const STD_VIDEO_AV1_LEVEL_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_LEVEL_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1Level = c_uint;
pub const StdVideoAV1Level = enum_StdVideoAV1Level;
pub const STD_VIDEO_AV1_FRAME_TYPE_KEY: c_int = 0;
pub const STD_VIDEO_AV1_FRAME_TYPE_INTER: c_int = 1;
pub const STD_VIDEO_AV1_FRAME_TYPE_INTRA_ONLY: c_int = 2;
pub const STD_VIDEO_AV1_FRAME_TYPE_SWITCH: c_int = 3;
pub const STD_VIDEO_AV1_FRAME_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_FRAME_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1FrameType = c_uint;
pub const StdVideoAV1FrameType = enum_StdVideoAV1FrameType;
pub const STD_VIDEO_AV1_REFERENCE_NAME_INTRA_FRAME: c_int = 0;
pub const STD_VIDEO_AV1_REFERENCE_NAME_LAST_FRAME: c_int = 1;
pub const STD_VIDEO_AV1_REFERENCE_NAME_LAST2_FRAME: c_int = 2;
pub const STD_VIDEO_AV1_REFERENCE_NAME_LAST3_FRAME: c_int = 3;
pub const STD_VIDEO_AV1_REFERENCE_NAME_GOLDEN_FRAME: c_int = 4;
pub const STD_VIDEO_AV1_REFERENCE_NAME_BWDREF_FRAME: c_int = 5;
pub const STD_VIDEO_AV1_REFERENCE_NAME_ALTREF2_FRAME: c_int = 6;
pub const STD_VIDEO_AV1_REFERENCE_NAME_ALTREF_FRAME: c_int = 7;
pub const STD_VIDEO_AV1_REFERENCE_NAME_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_REFERENCE_NAME_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1ReferenceName = c_uint;
pub const StdVideoAV1ReferenceName = enum_StdVideoAV1ReferenceName;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP: c_int = 0;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SMOOTH: c_int = 1;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SHARP: c_int = 2;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_BILINEAR: c_int = 3;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_SWITCHABLE: c_int = 4;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1InterpolationFilter = c_uint;
pub const StdVideoAV1InterpolationFilter = enum_StdVideoAV1InterpolationFilter;
pub const STD_VIDEO_AV1_TX_MODE_ONLY_4X4: c_int = 0;
pub const STD_VIDEO_AV1_TX_MODE_LARGEST: c_int = 1;
pub const STD_VIDEO_AV1_TX_MODE_SELECT: c_int = 2;
pub const STD_VIDEO_AV1_TX_MODE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_TX_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1TxMode = c_uint;
pub const StdVideoAV1TxMode = enum_StdVideoAV1TxMode;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_NONE: c_int = 0;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_WIENER: c_int = 1;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SGRPROJ: c_int = 2;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SWITCHABLE: c_int = 3;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1FrameRestorationType = c_uint;
pub const StdVideoAV1FrameRestorationType = enum_StdVideoAV1FrameRestorationType;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_709: c_int = 1;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_UNSPECIFIED: c_int = 2;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_M: c_int = 4;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_B_G: c_int = 5;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_601: c_int = 6;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_240: c_int = 7;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_GENERIC_FILM: c_int = 8;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_2020: c_int = 9;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_XYZ: c_int = 10;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_431: c_int = 11;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_432: c_int = 12;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_EBU_3213: c_int = 22;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_UNSPECIFIED: c_int = 2;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1ColorPrimaries = c_uint;
pub const StdVideoAV1ColorPrimaries = enum_StdVideoAV1ColorPrimaries;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_0: c_int = 0;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_709: c_int = 1;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_UNSPECIFIED: c_int = 2;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_3: c_int = 3;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_M: c_int = 4;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_B_G: c_int = 5;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_601: c_int = 6;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_240: c_int = 7;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LINEAR: c_int = 8;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100: c_int = 9;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100_SQRT10: c_int = 10;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_IEC_61966: c_int = 11;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_1361: c_int = 12;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SRGB: c_int = 13;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_10_BIT: c_int = 14;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_12_BIT: c_int = 15;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_2084: c_int = 16;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_428: c_int = 17;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_HLG: c_int = 18;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1TransferCharacteristics = c_uint;
pub const StdVideoAV1TransferCharacteristics = enum_StdVideoAV1TransferCharacteristics;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_IDENTITY: c_int = 0;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_709: c_int = 1;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_UNSPECIFIED: c_int = 2;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_RESERVED_3: c_int = 3;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_FCC: c_int = 4;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_470_B_G: c_int = 5;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_601: c_int = 6;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_240: c_int = 7;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_YCGCO: c_int = 8;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_NCL: c_int = 9;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_CL: c_int = 10;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_2085: c_int = 11;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_NCL: c_int = 12;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_CL: c_int = 13;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_ICTCP: c_int = 14;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1MatrixCoefficients = c_uint;
pub const StdVideoAV1MatrixCoefficients = enum_StdVideoAV1MatrixCoefficients;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_UNKNOWN: c_int = 0;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_VERTICAL: c_int = 1;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_COLOCATED: c_int = 2;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_RESERVED: c_int = 3;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1ChromaSamplePosition = c_uint;
pub const StdVideoAV1ChromaSamplePosition = enum_StdVideoAV1ChromaSamplePosition;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:205:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1ColorConfigFlags = opaque {};
pub const StdVideoAV1ColorConfigFlags = struct_StdVideoAV1ColorConfigFlags;
pub const struct_StdVideoAV1ColorConfig = extern struct {
    flags: StdVideoAV1ColorConfigFlags = @import("std").mem.zeroes(StdVideoAV1ColorConfigFlags),
    BitDepth: u8 = @import("std").mem.zeroes(u8),
    subsampling_x: u8 = @import("std").mem.zeroes(u8),
    subsampling_y: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    color_primaries: StdVideoAV1ColorPrimaries = @import("std").mem.zeroes(StdVideoAV1ColorPrimaries),
    transfer_characteristics: StdVideoAV1TransferCharacteristics = @import("std").mem.zeroes(StdVideoAV1TransferCharacteristics),
    matrix_coefficients: StdVideoAV1MatrixCoefficients = @import("std").mem.zeroes(StdVideoAV1MatrixCoefficients),
    chroma_sample_position: StdVideoAV1ChromaSamplePosition = @import("std").mem.zeroes(StdVideoAV1ChromaSamplePosition),
};
pub const StdVideoAV1ColorConfig = struct_StdVideoAV1ColorConfig;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:225:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1TimingInfoFlags = opaque {};
pub const StdVideoAV1TimingInfoFlags = struct_StdVideoAV1TimingInfoFlags;
pub const struct_StdVideoAV1TimingInfo = extern struct {
    flags: StdVideoAV1TimingInfoFlags = @import("std").mem.zeroes(StdVideoAV1TimingInfoFlags),
    num_units_in_display_tick: u32 = @import("std").mem.zeroes(u32),
    time_scale: u32 = @import("std").mem.zeroes(u32),
    num_ticks_per_picture_minus_1: u32 = @import("std").mem.zeroes(u32),
};
pub const StdVideoAV1TimingInfo = struct_StdVideoAV1TimingInfo;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:237:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1LoopFilterFlags = opaque {};
pub const StdVideoAV1LoopFilterFlags = struct_StdVideoAV1LoopFilterFlags;
pub const struct_StdVideoAV1LoopFilter = extern struct {
    flags: StdVideoAV1LoopFilterFlags = @import("std").mem.zeroes(StdVideoAV1LoopFilterFlags),
    loop_filter_level: [4]u8 = @import("std").mem.zeroes([4]u8),
    loop_filter_sharpness: u8 = @import("std").mem.zeroes(u8),
    update_ref_delta: u8 = @import("std").mem.zeroes(u8),
    loop_filter_ref_deltas: [8]i8 = @import("std").mem.zeroes([8]i8),
    update_mode_delta: u8 = @import("std").mem.zeroes(u8),
    loop_filter_mode_deltas: [2]i8 = @import("std").mem.zeroes([2]i8),
};
pub const StdVideoAV1LoopFilter = struct_StdVideoAV1LoopFilter;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:253:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1QuantizationFlags = opaque {};
pub const StdVideoAV1QuantizationFlags = struct_StdVideoAV1QuantizationFlags;
pub const struct_StdVideoAV1Quantization = extern struct {
    flags: StdVideoAV1QuantizationFlags = @import("std").mem.zeroes(StdVideoAV1QuantizationFlags),
    base_q_idx: u8 = @import("std").mem.zeroes(u8),
    DeltaQYDc: i8 = @import("std").mem.zeroes(i8),
    DeltaQUDc: i8 = @import("std").mem.zeroes(i8),
    DeltaQUAc: i8 = @import("std").mem.zeroes(i8),
    DeltaQVDc: i8 = @import("std").mem.zeroes(i8),
    DeltaQVAc: i8 = @import("std").mem.zeroes(i8),
    qm_y: u8 = @import("std").mem.zeroes(u8),
    qm_u: u8 = @import("std").mem.zeroes(u8),
    qm_v: u8 = @import("std").mem.zeroes(u8),
};
pub const StdVideoAV1Quantization = struct_StdVideoAV1Quantization;
pub const struct_StdVideoAV1Segmentation = extern struct {
    FeatureEnabled: [8]u8 = @import("std").mem.zeroes([8]u8),
    FeatureData: [8][8]i16 = @import("std").mem.zeroes([8][8]i16),
};
pub const StdVideoAV1Segmentation = struct_StdVideoAV1Segmentation;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:277:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1TileInfoFlags = opaque {};
pub const StdVideoAV1TileInfoFlags = struct_StdVideoAV1TileInfoFlags;
pub const struct_StdVideoAV1TileInfo = extern struct {
    flags: StdVideoAV1TileInfoFlags = @import("std").mem.zeroes(StdVideoAV1TileInfoFlags),
    TileCols: u8 = @import("std").mem.zeroes(u8),
    TileRows: u8 = @import("std").mem.zeroes(u8),
    context_update_tile_id: u16 = @import("std").mem.zeroes(u16),
    tile_size_bytes_minus_1: u8 = @import("std").mem.zeroes(u8),
    reserved1: [7]u8 = @import("std").mem.zeroes([7]u8),
    pMiColStarts: [*c]const u16 = @import("std").mem.zeroes([*c]const u16),
    pMiRowStarts: [*c]const u16 = @import("std").mem.zeroes([*c]const u16),
    pWidthInSbsMinus1: [*c]const u16 = @import("std").mem.zeroes([*c]const u16),
    pHeightInSbsMinus1: [*c]const u16 = @import("std").mem.zeroes([*c]const u16),
};
pub const StdVideoAV1TileInfo = struct_StdVideoAV1TileInfo;
pub const struct_StdVideoAV1CDEF = extern struct {
    cdef_damping_minus_3: u8 = @import("std").mem.zeroes(u8),
    cdef_bits: u8 = @import("std").mem.zeroes(u8),
    cdef_y_pri_strength: [8]u8 = @import("std").mem.zeroes([8]u8),
    cdef_y_sec_strength: [8]u8 = @import("std").mem.zeroes([8]u8),
    cdef_uv_pri_strength: [8]u8 = @import("std").mem.zeroes([8]u8),
    cdef_uv_sec_strength: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const StdVideoAV1CDEF = struct_StdVideoAV1CDEF;
pub const struct_StdVideoAV1LoopRestoration = extern struct {
    FrameRestorationType: [3]StdVideoAV1FrameRestorationType = @import("std").mem.zeroes([3]StdVideoAV1FrameRestorationType),
    LoopRestorationSize: [3]u16 = @import("std").mem.zeroes([3]u16),
};
pub const StdVideoAV1LoopRestoration = struct_StdVideoAV1LoopRestoration;
pub const struct_StdVideoAV1GlobalMotion = extern struct {
    GmType: [8]u8 = @import("std").mem.zeroes([8]u8),
    gm_params: [8][6]i32 = @import("std").mem.zeroes([8][6]i32),
};
pub const StdVideoAV1GlobalMotion = struct_StdVideoAV1GlobalMotion;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:314:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1FilmGrainFlags = opaque {};
pub const StdVideoAV1FilmGrainFlags = struct_StdVideoAV1FilmGrainFlags;
pub const struct_StdVideoAV1FilmGrain = extern struct {
    flags: StdVideoAV1FilmGrainFlags = @import("std").mem.zeroes(StdVideoAV1FilmGrainFlags),
    grain_scaling_minus_8: u8 = @import("std").mem.zeroes(u8),
    ar_coeff_lag: u8 = @import("std").mem.zeroes(u8),
    ar_coeff_shift_minus_6: u8 = @import("std").mem.zeroes(u8),
    grain_scale_shift: u8 = @import("std").mem.zeroes(u8),
    grain_seed: u16 = @import("std").mem.zeroes(u16),
    film_grain_params_ref_idx: u8 = @import("std").mem.zeroes(u8),
    num_y_points: u8 = @import("std").mem.zeroes(u8),
    point_y_value: [14]u8 = @import("std").mem.zeroes([14]u8),
    point_y_scaling: [14]u8 = @import("std").mem.zeroes([14]u8),
    num_cb_points: u8 = @import("std").mem.zeroes(u8),
    point_cb_value: [10]u8 = @import("std").mem.zeroes([10]u8),
    point_cb_scaling: [10]u8 = @import("std").mem.zeroes([10]u8),
    num_cr_points: u8 = @import("std").mem.zeroes(u8),
    point_cr_value: [10]u8 = @import("std").mem.zeroes([10]u8),
    point_cr_scaling: [10]u8 = @import("std").mem.zeroes([10]u8),
    ar_coeffs_y_plus_128: [24]i8 = @import("std").mem.zeroes([24]i8),
    ar_coeffs_cb_plus_128: [25]i8 = @import("std").mem.zeroes([25]i8),
    ar_coeffs_cr_plus_128: [25]i8 = @import("std").mem.zeroes([25]i8),
    cb_mult: u8 = @import("std").mem.zeroes(u8),
    cb_luma_mult: u8 = @import("std").mem.zeroes(u8),
    cb_offset: u16 = @import("std").mem.zeroes(u16),
    cr_mult: u8 = @import("std").mem.zeroes(u8),
    cr_luma_mult: u8 = @import("std").mem.zeroes(u8),
    cr_offset: u16 = @import("std").mem.zeroes(u16),
};
pub const StdVideoAV1FilmGrain = struct_StdVideoAV1FilmGrain;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:350:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1SequenceHeaderFlags = opaque {};
pub const StdVideoAV1SequenceHeaderFlags = struct_StdVideoAV1SequenceHeaderFlags;
pub const struct_StdVideoAV1SequenceHeader = extern struct {
    flags: StdVideoAV1SequenceHeaderFlags = @import("std").mem.zeroes(StdVideoAV1SequenceHeaderFlags),
    seq_profile: StdVideoAV1Profile = @import("std").mem.zeroes(StdVideoAV1Profile),
    frame_width_bits_minus_1: u8 = @import("std").mem.zeroes(u8),
    frame_height_bits_minus_1: u8 = @import("std").mem.zeroes(u8),
    max_frame_width_minus_1: u16 = @import("std").mem.zeroes(u16),
    max_frame_height_minus_1: u16 = @import("std").mem.zeroes(u16),
    delta_frame_id_length_minus_2: u8 = @import("std").mem.zeroes(u8),
    additional_frame_id_length_minus_1: u8 = @import("std").mem.zeroes(u8),
    order_hint_bits_minus_1: u8 = @import("std").mem.zeroes(u8),
    seq_force_integer_mv: u8 = @import("std").mem.zeroes(u8),
    seq_force_screen_content_tools: u8 = @import("std").mem.zeroes(u8),
    reserved1: [5]u8 = @import("std").mem.zeroes([5]u8),
    pColorConfig: ?*const StdVideoAV1ColorConfig = @import("std").mem.zeroes(?*const StdVideoAV1ColorConfig),
    pTimingInfo: ?*const StdVideoAV1TimingInfo = @import("std").mem.zeroes(?*const StdVideoAV1TimingInfo),
};
pub const StdVideoAV1SequenceHeader = struct_StdVideoAV1SequenceHeader;
// /usr/include/vk_video/vulkan_video_codec_av1std_decode.h:31:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeAV1PictureInfoFlags = opaque {};
pub const StdVideoDecodeAV1PictureInfoFlags = struct_StdVideoDecodeAV1PictureInfoFlags;
pub const struct_StdVideoDecodeAV1PictureInfo = extern struct {
    flags: StdVideoDecodeAV1PictureInfoFlags = @import("std").mem.zeroes(StdVideoDecodeAV1PictureInfoFlags),
    frame_type: StdVideoAV1FrameType = @import("std").mem.zeroes(StdVideoAV1FrameType),
    current_frame_id: u32 = @import("std").mem.zeroes(u32),
    OrderHint: u8 = @import("std").mem.zeroes(u8),
    primary_ref_frame: u8 = @import("std").mem.zeroes(u8),
    refresh_frame_flags: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    interpolation_filter: StdVideoAV1InterpolationFilter = @import("std").mem.zeroes(StdVideoAV1InterpolationFilter),
    TxMode: StdVideoAV1TxMode = @import("std").mem.zeroes(StdVideoAV1TxMode),
    delta_q_res: u8 = @import("std").mem.zeroes(u8),
    delta_lf_res: u8 = @import("std").mem.zeroes(u8),
    SkipModeFrame: [2]u8 = @import("std").mem.zeroes([2]u8),
    coded_denom: u8 = @import("std").mem.zeroes(u8),
    reserved2: [3]u8 = @import("std").mem.zeroes([3]u8),
    OrderHints: [8]u8 = @import("std").mem.zeroes([8]u8),
    expectedFrameId: [8]u32 = @import("std").mem.zeroes([8]u32),
    pTileInfo: ?*const StdVideoAV1TileInfo = @import("std").mem.zeroes(?*const StdVideoAV1TileInfo),
    pQuantization: ?*const StdVideoAV1Quantization = @import("std").mem.zeroes(?*const StdVideoAV1Quantization),
    pSegmentation: [*c]const StdVideoAV1Segmentation = @import("std").mem.zeroes([*c]const StdVideoAV1Segmentation),
    pLoopFilter: ?*const StdVideoAV1LoopFilter = @import("std").mem.zeroes(?*const StdVideoAV1LoopFilter),
    pCDEF: [*c]const StdVideoAV1CDEF = @import("std").mem.zeroes([*c]const StdVideoAV1CDEF),
    pLoopRestoration: [*c]const StdVideoAV1LoopRestoration = @import("std").mem.zeroes([*c]const StdVideoAV1LoopRestoration),
    pGlobalMotion: [*c]const StdVideoAV1GlobalMotion = @import("std").mem.zeroes([*c]const StdVideoAV1GlobalMotion),
    pFilmGrain: ?*const StdVideoAV1FilmGrain = @import("std").mem.zeroes(?*const StdVideoAV1FilmGrain),
};
pub const StdVideoDecodeAV1PictureInfo = struct_StdVideoDecodeAV1PictureInfo;
// /usr/include/vk_video/vulkan_video_codec_av1std_decode.h:91:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeAV1ReferenceInfoFlags = opaque {};
pub const StdVideoDecodeAV1ReferenceInfoFlags = struct_StdVideoDecodeAV1ReferenceInfoFlags;
pub const struct_StdVideoDecodeAV1ReferenceInfo = extern struct {
    flags: StdVideoDecodeAV1ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoDecodeAV1ReferenceInfoFlags),
    frame_type: u8 = @import("std").mem.zeroes(u8),
    RefFrameSignBias: u8 = @import("std").mem.zeroes(u8),
    OrderHint: u8 = @import("std").mem.zeroes(u8),
    SavedOrderHints: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const StdVideoDecodeAV1ReferenceInfo = struct_StdVideoDecodeAV1ReferenceInfo;
pub const struct_VkVideoDecodeAV1ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfile: StdVideoAV1Profile = @import("std").mem.zeroes(StdVideoAV1Profile),
    filmGrainSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoDecodeAV1ProfileInfoKHR = struct_VkVideoDecodeAV1ProfileInfoKHR;
pub const struct_VkVideoDecodeAV1CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxLevel: StdVideoAV1Level = @import("std").mem.zeroes(StdVideoAV1Level),
};
pub const VkVideoDecodeAV1CapabilitiesKHR = struct_VkVideoDecodeAV1CapabilitiesKHR;
pub const struct_VkVideoDecodeAV1SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdSequenceHeader: ?*const StdVideoAV1SequenceHeader = @import("std").mem.zeroes(?*const StdVideoAV1SequenceHeader),
};
pub const VkVideoDecodeAV1SessionParametersCreateInfoKHR = struct_VkVideoDecodeAV1SessionParametersCreateInfoKHR;
pub const struct_VkVideoDecodeAV1PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdPictureInfo: ?*const StdVideoDecodeAV1PictureInfo = @import("std").mem.zeroes(?*const StdVideoDecodeAV1PictureInfo),
    referenceNameSlotIndices: [7]i32 = @import("std").mem.zeroes([7]i32),
    frameHeaderOffset: u32 = @import("std").mem.zeroes(u32),
    tileCount: u32 = @import("std").mem.zeroes(u32),
    pTileOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pTileSizes: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkVideoDecodeAV1PictureInfoKHR = struct_VkVideoDecodeAV1PictureInfoKHR;
pub const struct_VkVideoDecodeAV1DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoDecodeAV1ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoDecodeAV1ReferenceInfo),
};
pub const VkVideoDecodeAV1DpbSlotInfoKHR = struct_VkVideoDecodeAV1DpbSlotInfoKHR;
pub const struct_StdVideoEncodeAV1DecoderModelInfo = extern struct {
    buffer_delay_length_minus_1: u8 = @import("std").mem.zeroes(u8),
    buffer_removal_time_length_minus_1: u8 = @import("std").mem.zeroes(u8),
    frame_presentation_time_length_minus_1: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    num_units_in_decoding_tick: u32 = @import("std").mem.zeroes(u32),
};
pub const StdVideoEncodeAV1DecoderModelInfo = struct_StdVideoEncodeAV1DecoderModelInfo;
pub const struct_StdVideoEncodeAV1ExtensionHeader = extern struct {
    temporal_id: u8 = @import("std").mem.zeroes(u8),
    spatial_id: u8 = @import("std").mem.zeroes(u8),
};
pub const StdVideoEncodeAV1ExtensionHeader = struct_StdVideoEncodeAV1ExtensionHeader;
// /usr/include/vk_video/vulkan_video_codec_av1std_encode.h:44:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeAV1OperatingPointInfoFlags = opaque {};
pub const StdVideoEncodeAV1OperatingPointInfoFlags = struct_StdVideoEncodeAV1OperatingPointInfoFlags;
pub const struct_StdVideoEncodeAV1OperatingPointInfo = extern struct {
    flags: StdVideoEncodeAV1OperatingPointInfoFlags = @import("std").mem.zeroes(StdVideoEncodeAV1OperatingPointInfoFlags),
    operating_point_idc: u16 = @import("std").mem.zeroes(u16),
    seq_level_idx: u8 = @import("std").mem.zeroes(u8),
    seq_tier: u8 = @import("std").mem.zeroes(u8),
    decoder_buffer_delay: u32 = @import("std").mem.zeroes(u32),
    encoder_buffer_delay: u32 = @import("std").mem.zeroes(u32),
    initial_display_delay_minus_1: u8 = @import("std").mem.zeroes(u8),
};
pub const StdVideoEncodeAV1OperatingPointInfo = struct_StdVideoEncodeAV1OperatingPointInfo;
// /usr/include/vk_video/vulkan_video_codec_av1std_encode.h:61:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeAV1PictureInfoFlags = opaque {};
pub const StdVideoEncodeAV1PictureInfoFlags = struct_StdVideoEncodeAV1PictureInfoFlags;
pub const struct_StdVideoEncodeAV1PictureInfo = extern struct {
    flags: StdVideoEncodeAV1PictureInfoFlags = @import("std").mem.zeroes(StdVideoEncodeAV1PictureInfoFlags),
    frame_type: StdVideoAV1FrameType = @import("std").mem.zeroes(StdVideoAV1FrameType),
    frame_presentation_time: u32 = @import("std").mem.zeroes(u32),
    current_frame_id: u32 = @import("std").mem.zeroes(u32),
    order_hint: u8 = @import("std").mem.zeroes(u8),
    primary_ref_frame: u8 = @import("std").mem.zeroes(u8),
    refresh_frame_flags: u8 = @import("std").mem.zeroes(u8),
    coded_denom: u8 = @import("std").mem.zeroes(u8),
    render_width_minus_1: u16 = @import("std").mem.zeroes(u16),
    render_height_minus_1: u16 = @import("std").mem.zeroes(u16),
    interpolation_filter: StdVideoAV1InterpolationFilter = @import("std").mem.zeroes(StdVideoAV1InterpolationFilter),
    TxMode: StdVideoAV1TxMode = @import("std").mem.zeroes(StdVideoAV1TxMode),
    delta_q_res: u8 = @import("std").mem.zeroes(u8),
    delta_lf_res: u8 = @import("std").mem.zeroes(u8),
    ref_order_hint: [8]u8 = @import("std").mem.zeroes([8]u8),
    ref_frame_idx: [7]i8 = @import("std").mem.zeroes([7]i8),
    reserved1: [3]u8 = @import("std").mem.zeroes([3]u8),
    delta_frame_id_minus_1: [7]u32 = @import("std").mem.zeroes([7]u32),
    pTileInfo: ?*const StdVideoAV1TileInfo = @import("std").mem.zeroes(?*const StdVideoAV1TileInfo),
    pQuantization: ?*const StdVideoAV1Quantization = @import("std").mem.zeroes(?*const StdVideoAV1Quantization),
    pSegmentation: [*c]const StdVideoAV1Segmentation = @import("std").mem.zeroes([*c]const StdVideoAV1Segmentation),
    pLoopFilter: ?*const StdVideoAV1LoopFilter = @import("std").mem.zeroes(?*const StdVideoAV1LoopFilter),
    pCDEF: [*c]const StdVideoAV1CDEF = @import("std").mem.zeroes([*c]const StdVideoAV1CDEF),
    pLoopRestoration: [*c]const StdVideoAV1LoopRestoration = @import("std").mem.zeroes([*c]const StdVideoAV1LoopRestoration),
    pGlobalMotion: [*c]const StdVideoAV1GlobalMotion = @import("std").mem.zeroes([*c]const StdVideoAV1GlobalMotion),
    pExtensionHeader: [*c]const StdVideoEncodeAV1ExtensionHeader = @import("std").mem.zeroes([*c]const StdVideoEncodeAV1ExtensionHeader),
    pBufferRemovalTimes: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const StdVideoEncodeAV1PictureInfo = struct_StdVideoEncodeAV1PictureInfo;
// /usr/include/vk_video/vulkan_video_codec_av1std_encode.h:124:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeAV1ReferenceInfoFlags = opaque {};
pub const StdVideoEncodeAV1ReferenceInfoFlags = struct_StdVideoEncodeAV1ReferenceInfoFlags;
pub const struct_StdVideoEncodeAV1ReferenceInfo = extern struct {
    flags: StdVideoEncodeAV1ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoEncodeAV1ReferenceInfoFlags),
    RefFrameId: u32 = @import("std").mem.zeroes(u32),
    frame_type: StdVideoAV1FrameType = @import("std").mem.zeroes(StdVideoAV1FrameType),
    OrderHint: u8 = @import("std").mem.zeroes(u8),
    reserved1: [3]u8 = @import("std").mem.zeroes([3]u8),
    pExtensionHeader: [*c]const StdVideoEncodeAV1ExtensionHeader = @import("std").mem.zeroes([*c]const StdVideoEncodeAV1ExtensionHeader),
};
pub const StdVideoEncodeAV1ReferenceInfo = struct_StdVideoEncodeAV1ReferenceInfo;
pub const VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_INTRA_ONLY_KHR: c_int = 0;
pub const VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_SINGLE_REFERENCE_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_UNIDIRECTIONAL_COMPOUND_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_BIDIRECTIONAL_COMPOUND_KHR: c_int = 3;
pub const VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeAV1PredictionModeKHR = c_uint;
pub const VkVideoEncodeAV1PredictionModeKHR = enum_VkVideoEncodeAV1PredictionModeKHR;
pub const VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_INTRA_KHR: c_int = 0;
pub const VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_PREDICTIVE_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_BIPREDICTIVE_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeAV1RateControlGroupKHR = c_uint;
pub const VkVideoEncodeAV1RateControlGroupKHR = enum_VkVideoEncodeAV1RateControlGroupKHR;
pub const VK_VIDEO_ENCODE_AV1_CAPABILITY_PER_RATE_CONTROL_GROUP_MIN_MAX_Q_INDEX_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_AV1_CAPABILITY_GENERATE_OBU_EXTENSION_HEADER_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_AV1_CAPABILITY_PRIMARY_REFERENCE_CDF_ONLY_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_AV1_CAPABILITY_FRAME_SIZE_OVERRIDE_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_AV1_CAPABILITY_MOTION_VECTOR_SCALING_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_AV1_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeAV1CapabilityFlagBitsKHR = c_uint;
pub const VkVideoEncodeAV1CapabilityFlagBitsKHR = enum_VkVideoEncodeAV1CapabilityFlagBitsKHR;
pub const VkVideoEncodeAV1CapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_AV1_STD_UNIFORM_TILE_SPACING_FLAG_SET_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_AV1_STD_SKIP_MODE_PRESENT_UNSET_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_AV1_STD_PRIMARY_REF_FRAME_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_AV1_STD_DELTA_Q_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_AV1_STD_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeAV1StdFlagBitsKHR = c_uint;
pub const VkVideoEncodeAV1StdFlagBitsKHR = enum_VkVideoEncodeAV1StdFlagBitsKHR;
pub const VkVideoEncodeAV1StdFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_64_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_128_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeAV1SuperblockSizeFlagBitsKHR = c_uint;
pub const VkVideoEncodeAV1SuperblockSizeFlagBitsKHR = enum_VkVideoEncodeAV1SuperblockSizeFlagBitsKHR;
pub const VkVideoEncodeAV1SuperblockSizeFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REGULAR_GOP_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_AV1_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_AV1_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeAV1RateControlFlagBitsKHR = c_uint;
pub const VkVideoEncodeAV1RateControlFlagBitsKHR = enum_VkVideoEncodeAV1RateControlFlagBitsKHR;
pub const VkVideoEncodeAV1RateControlFlagsKHR = VkFlags;
pub const struct_VkPhysicalDeviceVideoEncodeAV1FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    videoEncodeAV1: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVideoEncodeAV1FeaturesKHR = struct_VkPhysicalDeviceVideoEncodeAV1FeaturesKHR;
pub const struct_VkVideoEncodeAV1CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoEncodeAV1CapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeAV1CapabilityFlagsKHR),
    maxLevel: StdVideoAV1Level = @import("std").mem.zeroes(StdVideoAV1Level),
    codedPictureAlignment: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxTiles: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minTileSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxTileSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    superblockSizes: VkVideoEncodeAV1SuperblockSizeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeAV1SuperblockSizeFlagsKHR),
    maxSingleReferenceCount: u32 = @import("std").mem.zeroes(u32),
    singleReferenceNameMask: u32 = @import("std").mem.zeroes(u32),
    maxUnidirectionalCompoundReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxUnidirectionalCompoundGroup1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    unidirectionalCompoundReferenceNameMask: u32 = @import("std").mem.zeroes(u32),
    maxBidirectionalCompoundReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxBidirectionalCompoundGroup1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxBidirectionalCompoundGroup2ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    bidirectionalCompoundReferenceNameMask: u32 = @import("std").mem.zeroes(u32),
    maxTemporalLayerCount: u32 = @import("std").mem.zeroes(u32),
    maxSpatialLayerCount: u32 = @import("std").mem.zeroes(u32),
    maxOperatingPoints: u32 = @import("std").mem.zeroes(u32),
    minQIndex: u32 = @import("std").mem.zeroes(u32),
    maxQIndex: u32 = @import("std").mem.zeroes(u32),
    prefersGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    requiresGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdSyntaxFlags: VkVideoEncodeAV1StdFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeAV1StdFlagsKHR),
};
pub const VkVideoEncodeAV1CapabilitiesKHR = struct_VkVideoEncodeAV1CapabilitiesKHR;
pub const struct_VkVideoEncodeAV1QIndexKHR = extern struct {
    intraQIndex: u32 = @import("std").mem.zeroes(u32),
    predictiveQIndex: u32 = @import("std").mem.zeroes(u32),
    bipredictiveQIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeAV1QIndexKHR = struct_VkVideoEncodeAV1QIndexKHR;
pub const struct_VkVideoEncodeAV1QualityLevelPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    preferredRateControlFlags: VkVideoEncodeAV1RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeAV1RateControlFlagsKHR),
    preferredGopFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredKeyFramePeriod: u32 = @import("std").mem.zeroes(u32),
    preferredConsecutiveBipredictiveFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredTemporalLayerCount: u32 = @import("std").mem.zeroes(u32),
    preferredConstantQIndex: VkVideoEncodeAV1QIndexKHR = @import("std").mem.zeroes(VkVideoEncodeAV1QIndexKHR),
    preferredMaxSingleReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredSingleReferenceNameMask: u32 = @import("std").mem.zeroes(u32),
    preferredMaxUnidirectionalCompoundReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredMaxUnidirectionalCompoundGroup1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredUnidirectionalCompoundReferenceNameMask: u32 = @import("std").mem.zeroes(u32),
    preferredMaxBidirectionalCompoundReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredMaxBidirectionalCompoundGroup1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredMaxBidirectionalCompoundGroup2ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredBidirectionalCompoundReferenceNameMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeAV1QualityLevelPropertiesKHR = struct_VkVideoEncodeAV1QualityLevelPropertiesKHR;
pub const struct_VkVideoEncodeAV1SessionCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMaxLevel: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxLevel: StdVideoAV1Level = @import("std").mem.zeroes(StdVideoAV1Level),
};
pub const VkVideoEncodeAV1SessionCreateInfoKHR = struct_VkVideoEncodeAV1SessionCreateInfoKHR;
pub const struct_VkVideoEncodeAV1SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdSequenceHeader: ?*const StdVideoAV1SequenceHeader = @import("std").mem.zeroes(?*const StdVideoAV1SequenceHeader),
    pStdDecoderModelInfo: [*c]const StdVideoEncodeAV1DecoderModelInfo = @import("std").mem.zeroes([*c]const StdVideoEncodeAV1DecoderModelInfo),
    stdOperatingPointCount: u32 = @import("std").mem.zeroes(u32),
    pStdOperatingPoints: ?*const StdVideoEncodeAV1OperatingPointInfo = @import("std").mem.zeroes(?*const StdVideoEncodeAV1OperatingPointInfo),
};
pub const VkVideoEncodeAV1SessionParametersCreateInfoKHR = struct_VkVideoEncodeAV1SessionParametersCreateInfoKHR;
pub const struct_VkVideoEncodeAV1PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    predictionMode: VkVideoEncodeAV1PredictionModeKHR = @import("std").mem.zeroes(VkVideoEncodeAV1PredictionModeKHR),
    rateControlGroup: VkVideoEncodeAV1RateControlGroupKHR = @import("std").mem.zeroes(VkVideoEncodeAV1RateControlGroupKHR),
    constantQIndex: u32 = @import("std").mem.zeroes(u32),
    pStdPictureInfo: ?*const StdVideoEncodeAV1PictureInfo = @import("std").mem.zeroes(?*const StdVideoEncodeAV1PictureInfo),
    referenceNameSlotIndices: [7]i32 = @import("std").mem.zeroes([7]i32),
    primaryReferenceCdfOnly: VkBool32 = @import("std").mem.zeroes(VkBool32),
    generateObuExtensionHeader: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeAV1PictureInfoKHR = struct_VkVideoEncodeAV1PictureInfoKHR;
pub const struct_VkVideoEncodeAV1DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoEncodeAV1ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoEncodeAV1ReferenceInfo),
};
pub const VkVideoEncodeAV1DpbSlotInfoKHR = struct_VkVideoEncodeAV1DpbSlotInfoKHR;
pub const struct_VkVideoEncodeAV1ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfile: StdVideoAV1Profile = @import("std").mem.zeroes(StdVideoAV1Profile),
};
pub const VkVideoEncodeAV1ProfileInfoKHR = struct_VkVideoEncodeAV1ProfileInfoKHR;
pub const struct_VkVideoEncodeAV1FrameSizeKHR = extern struct {
    intraFrameSize: u32 = @import("std").mem.zeroes(u32),
    predictiveFrameSize: u32 = @import("std").mem.zeroes(u32),
    bipredictiveFrameSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeAV1FrameSizeKHR = struct_VkVideoEncodeAV1FrameSizeKHR;
pub const struct_VkVideoEncodeAV1GopRemainingFrameInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    gopRemainingIntra: u32 = @import("std").mem.zeroes(u32),
    gopRemainingPredictive: u32 = @import("std").mem.zeroes(u32),
    gopRemainingBipredictive: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeAV1GopRemainingFrameInfoKHR = struct_VkVideoEncodeAV1GopRemainingFrameInfoKHR;
pub const struct_VkVideoEncodeAV1RateControlInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeAV1RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeAV1RateControlFlagsKHR),
    gopFrameCount: u32 = @import("std").mem.zeroes(u32),
    keyFramePeriod: u32 = @import("std").mem.zeroes(u32),
    consecutiveBipredictiveFrameCount: u32 = @import("std").mem.zeroes(u32),
    temporalLayerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeAV1RateControlInfoKHR = struct_VkVideoEncodeAV1RateControlInfoKHR;
pub const struct_VkVideoEncodeAV1RateControlLayerInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMinQIndex: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQIndex: VkVideoEncodeAV1QIndexKHR = @import("std").mem.zeroes(VkVideoEncodeAV1QIndexKHR),
    useMaxQIndex: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxQIndex: VkVideoEncodeAV1QIndexKHR = @import("std").mem.zeroes(VkVideoEncodeAV1QIndexKHR),
    useMaxFrameSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxFrameSize: VkVideoEncodeAV1FrameSizeKHR = @import("std").mem.zeroes(VkVideoEncodeAV1FrameSizeKHR),
};
pub const VkVideoEncodeAV1RateControlLayerInfoKHR = struct_VkVideoEncodeAV1RateControlLayerInfoKHR;
pub const struct_VkPhysicalDeviceVideoMaintenance1FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    videoMaintenance1: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVideoMaintenance1FeaturesKHR = struct_VkPhysicalDeviceVideoMaintenance1FeaturesKHR;
pub const struct_VkVideoInlineQueryInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queryPool: VkQueryPool = @import("std").mem.zeroes(VkQueryPool),
    firstQuery: u32 = @import("std").mem.zeroes(u32),
    queryCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoInlineQueryInfoKHR = struct_VkVideoInlineQueryInfoKHR;
pub const VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR = VkPhysicalDeviceVertexAttributeDivisorProperties;
pub const VkVertexInputBindingDivisorDescriptionKHR = VkVertexInputBindingDivisorDescription;
pub const VkPipelineVertexInputDivisorStateCreateInfoKHR = VkPipelineVertexInputDivisorStateCreateInfo;
pub const VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR = VkPhysicalDeviceVertexAttributeDivisorFeatures;
pub const VkPhysicalDeviceShaderFloatControls2FeaturesKHR = VkPhysicalDeviceShaderFloatControls2Features;
pub const VkPhysicalDeviceIndexTypeUint8FeaturesKHR = VkPhysicalDeviceIndexTypeUint8Features;
pub const VkLineRasterizationModeKHR = VkLineRasterizationMode;
pub const VkPhysicalDeviceLineRasterizationFeaturesKHR = VkPhysicalDeviceLineRasterizationFeatures;
pub const VkPhysicalDeviceLineRasterizationPropertiesKHR = VkPhysicalDeviceLineRasterizationProperties;
pub const VkPipelineRasterizationLineStateCreateInfoKHR = VkPipelineRasterizationLineStateCreateInfo;
pub const PFN_vkCmdSetLineStippleKHR = ?*const fn (VkCommandBuffer, u32, u16) callconv(.C) void;
pub const VK_TIME_DOMAIN_DEVICE_KHR: c_int = 0;
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR: c_int = 1;
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR: c_int = 2;
pub const VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR: c_int = 3;
pub const VK_TIME_DOMAIN_DEVICE_EXT: c_int = 0;
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT: c_int = 1;
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT: c_int = 2;
pub const VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT: c_int = 3;
pub const VK_TIME_DOMAIN_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkTimeDomainKHR = c_uint;
pub const VkTimeDomainKHR = enum_VkTimeDomainKHR;
pub const struct_VkCalibratedTimestampInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    timeDomain: VkTimeDomainKHR = @import("std").mem.zeroes(VkTimeDomainKHR),
};
pub const VkCalibratedTimestampInfoKHR = struct_VkCalibratedTimestampInfoKHR;
pub const PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkTimeDomainKHR) callconv(.C) VkResult;
pub const PFN_vkGetCalibratedTimestampsKHR = ?*const fn (VkDevice, u32, [*c]const VkCalibratedTimestampInfoKHR, [*c]u64, [*c]u64) callconv(.C) VkResult;
pub const VkPhysicalDeviceShaderExpectAssumeFeaturesKHR = VkPhysicalDeviceShaderExpectAssumeFeatures;
pub const VkPhysicalDeviceMaintenance6FeaturesKHR = VkPhysicalDeviceMaintenance6Features;
pub const VkPhysicalDeviceMaintenance6PropertiesKHR = VkPhysicalDeviceMaintenance6Properties;
pub const VkBindMemoryStatusKHR = VkBindMemoryStatus;
pub const VkBindDescriptorSetsInfoKHR = VkBindDescriptorSetsInfo;
pub const VkPushConstantsInfoKHR = VkPushConstantsInfo;
pub const VkPushDescriptorSetInfoKHR = VkPushDescriptorSetInfo;
pub const VkPushDescriptorSetWithTemplateInfoKHR = VkPushDescriptorSetWithTemplateInfo;
pub const struct_VkSetDescriptorBufferOffsetsInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    firstSet: u32 = @import("std").mem.zeroes(u32),
    setCount: u32 = @import("std").mem.zeroes(u32),
    pBufferIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pOffsets: [*c]const VkDeviceSize = @import("std").mem.zeroes([*c]const VkDeviceSize),
};
pub const VkSetDescriptorBufferOffsetsInfoEXT = struct_VkSetDescriptorBufferOffsetsInfoEXT;
pub const struct_VkBindDescriptorBufferEmbeddedSamplersInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
};
pub const VkBindDescriptorBufferEmbeddedSamplersInfoEXT = struct_VkBindDescriptorBufferEmbeddedSamplersInfoEXT;
pub const PFN_vkCmdBindDescriptorSets2KHR = ?*const fn (VkCommandBuffer, [*c]const VkBindDescriptorSetsInfo) callconv(.C) void;
pub const PFN_vkCmdPushConstants2KHR = ?*const fn (VkCommandBuffer, [*c]const VkPushConstantsInfo) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSet2KHR = ?*const fn (VkCommandBuffer, [*c]const VkPushDescriptorSetInfo) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSetWithTemplate2KHR = ?*const fn (VkCommandBuffer, [*c]const VkPushDescriptorSetWithTemplateInfo) callconv(.C) void;
pub const PFN_vkCmdSetDescriptorBufferOffsets2EXT = ?*const fn (VkCommandBuffer, [*c]const VkSetDescriptorBufferOffsetsInfoEXT) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = ?*const fn (VkCommandBuffer, [*c]const VkBindDescriptorBufferEmbeddedSamplersInfoEXT) callconv(.C) void;
pub const struct_VkVideoEncodeQuantizationMapCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxQuantizationMapExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkVideoEncodeQuantizationMapCapabilitiesKHR = struct_VkVideoEncodeQuantizationMapCapabilitiesKHR;
pub const struct_VkVideoFormatQuantizationMapPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    quantizationMapTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkVideoFormatQuantizationMapPropertiesKHR = struct_VkVideoFormatQuantizationMapPropertiesKHR;
pub const struct_VkVideoEncodeQuantizationMapInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    quantizationMap: VkImageView = @import("std").mem.zeroes(VkImageView),
    quantizationMapExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkVideoEncodeQuantizationMapInfoKHR = struct_VkVideoEncodeQuantizationMapInfoKHR;
pub const struct_VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    quantizationMapTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR = struct_VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR;
pub const struct_VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    videoEncodeQuantizationMap: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR = struct_VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR;
pub const struct_VkVideoEncodeH264QuantizationMapCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minQpDelta: i32 = @import("std").mem.zeroes(i32),
    maxQpDelta: i32 = @import("std").mem.zeroes(i32),
};
pub const VkVideoEncodeH264QuantizationMapCapabilitiesKHR = struct_VkVideoEncodeH264QuantizationMapCapabilitiesKHR;
pub const struct_VkVideoEncodeH265QuantizationMapCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minQpDelta: i32 = @import("std").mem.zeroes(i32),
    maxQpDelta: i32 = @import("std").mem.zeroes(i32),
};
pub const VkVideoEncodeH265QuantizationMapCapabilitiesKHR = struct_VkVideoEncodeH265QuantizationMapCapabilitiesKHR;
pub const struct_VkVideoFormatH265QuantizationMapPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    compatibleCtbSizes: VkVideoEncodeH265CtbSizeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265CtbSizeFlagsKHR),
};
pub const VkVideoFormatH265QuantizationMapPropertiesKHR = struct_VkVideoFormatH265QuantizationMapPropertiesKHR;
pub const struct_VkVideoEncodeAV1QuantizationMapCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minQIndexDelta: i32 = @import("std").mem.zeroes(i32),
    maxQIndexDelta: i32 = @import("std").mem.zeroes(i32),
};
pub const VkVideoEncodeAV1QuantizationMapCapabilitiesKHR = struct_VkVideoEncodeAV1QuantizationMapCapabilitiesKHR;
pub const struct_VkVideoFormatAV1QuantizationMapPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    compatibleSuperblockSizes: VkVideoEncodeAV1SuperblockSizeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeAV1SuperblockSizeFlagsKHR),
};
pub const VkVideoFormatAV1QuantizationMapPropertiesKHR = struct_VkVideoFormatAV1QuantizationMapPropertiesKHR;
pub const struct_VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderRelaxedExtendedInstruction: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR = struct_VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR;
pub const VK_PHYSICAL_DEVICE_LAYERED_API_VULKAN_KHR: c_int = 0;
pub const VK_PHYSICAL_DEVICE_LAYERED_API_D3D12_KHR: c_int = 1;
pub const VK_PHYSICAL_DEVICE_LAYERED_API_METAL_KHR: c_int = 2;
pub const VK_PHYSICAL_DEVICE_LAYERED_API_OPENGL_KHR: c_int = 3;
pub const VK_PHYSICAL_DEVICE_LAYERED_API_OPENGLES_KHR: c_int = 4;
pub const VK_PHYSICAL_DEVICE_LAYERED_API_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPhysicalDeviceLayeredApiKHR = c_uint;
pub const VkPhysicalDeviceLayeredApiKHR = enum_VkPhysicalDeviceLayeredApiKHR;
pub const struct_VkPhysicalDeviceMaintenance7FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance7: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance7FeaturesKHR = struct_VkPhysicalDeviceMaintenance7FeaturesKHR;
pub const struct_VkPhysicalDeviceMaintenance7PropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustFragmentShadingRateAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    separateDepthStencilAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxDescriptorSetTotalUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetTotalStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetTotalBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindTotalBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceMaintenance7PropertiesKHR = struct_VkPhysicalDeviceMaintenance7PropertiesKHR;
pub const struct_VkPhysicalDeviceLayeredApiPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vendorID: u32 = @import("std").mem.zeroes(u32),
    deviceID: u32 = @import("std").mem.zeroes(u32),
    layeredAPI: VkPhysicalDeviceLayeredApiKHR = @import("std").mem.zeroes(VkPhysicalDeviceLayeredApiKHR),
    deviceName: [256]u8 = @import("std").mem.zeroes([256]u8),
};
pub const VkPhysicalDeviceLayeredApiPropertiesKHR = struct_VkPhysicalDeviceLayeredApiPropertiesKHR;
pub const struct_VkPhysicalDeviceLayeredApiPropertiesListKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    layeredApiCount: u32 = @import("std").mem.zeroes(u32),
    pLayeredApis: [*c]VkPhysicalDeviceLayeredApiPropertiesKHR = @import("std").mem.zeroes([*c]VkPhysicalDeviceLayeredApiPropertiesKHR),
};
pub const VkPhysicalDeviceLayeredApiPropertiesListKHR = struct_VkPhysicalDeviceLayeredApiPropertiesListKHR;
pub const struct_VkPhysicalDeviceLayeredApiVulkanPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    properties: VkPhysicalDeviceProperties2 = @import("std").mem.zeroes(VkPhysicalDeviceProperties2),
};
pub const VkPhysicalDeviceLayeredApiVulkanPropertiesKHR = struct_VkPhysicalDeviceLayeredApiVulkanPropertiesKHR;
pub const struct_VkDebugReportCallbackEXT_T = opaque {};
pub const VkDebugReportCallbackEXT = ?*struct_VkDebugReportCallbackEXT_T;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT: c_int = 0;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT: c_int = 1;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT: c_int = 2;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT: c_int = 3;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT: c_int = 4;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT: c_int = 5;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT: c_int = 6;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT: c_int = 7;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT: c_int = 8;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT: c_int = 9;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT: c_int = 10;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT: c_int = 11;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT: c_int = 12;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT: c_int = 13;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT: c_int = 14;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT: c_int = 15;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT: c_int = 16;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT: c_int = 17;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT: c_int = 18;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT: c_int = 19;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT: c_int = 20;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT: c_int = 21;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT: c_int = 22;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT: c_int = 23;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT: c_int = 24;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT: c_int = 25;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT: c_int = 26;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT: c_int = 27;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT: c_int = 28;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT: c_int = 29;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT: c_int = 30;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT: c_int = 33;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT: c_int = 1000156000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT: c_int = 1000085000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT: c_int = 1000029000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT: c_int = 1000029001;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT: c_int = 1000150000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT: c_int = 1000165000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT: c_int = 1000307000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT: c_int = 1000307001;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT: c_int = 1000366000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT: c_int = 28;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT: c_int = 33;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT: c_int = 1000085000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT: c_int = 1000156000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugReportObjectTypeEXT = c_uint;
pub const VkDebugReportObjectTypeEXT = enum_VkDebugReportObjectTypeEXT;
pub const VK_DEBUG_REPORT_INFORMATION_BIT_EXT: c_int = 1;
pub const VK_DEBUG_REPORT_WARNING_BIT_EXT: c_int = 2;
pub const VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT: c_int = 4;
pub const VK_DEBUG_REPORT_ERROR_BIT_EXT: c_int = 8;
pub const VK_DEBUG_REPORT_DEBUG_BIT_EXT: c_int = 16;
pub const VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugReportFlagBitsEXT = c_uint;
pub const VkDebugReportFlagBitsEXT = enum_VkDebugReportFlagBitsEXT;
pub const VkDebugReportFlagsEXT = VkFlags;
pub const PFN_vkDebugReportCallbackEXT = ?*const fn (VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, u64, usize, i32, [*c]const u8, [*c]const u8, ?*anyopaque) callconv(.C) VkBool32;
pub const struct_VkDebugReportCallbackCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDebugReportFlagsEXT = @import("std").mem.zeroes(VkDebugReportFlagsEXT),
    pfnCallback: PFN_vkDebugReportCallbackEXT = @import("std").mem.zeroes(PFN_vkDebugReportCallbackEXT),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkDebugReportCallbackCreateInfoEXT = struct_VkDebugReportCallbackCreateInfoEXT;
pub const PFN_vkCreateDebugReportCallbackEXT = ?*const fn (VkInstance, [*c]const VkDebugReportCallbackCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkDebugReportCallbackEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyDebugReportCallbackEXT = ?*const fn (VkInstance, VkDebugReportCallbackEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkDebugReportMessageEXT = ?*const fn (VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, u64, usize, i32, [*c]const u8, [*c]const u8) callconv(.C) void;
pub const VK_RASTERIZATION_ORDER_STRICT_AMD: c_int = 0;
pub const VK_RASTERIZATION_ORDER_RELAXED_AMD: c_int = 1;
pub const VK_RASTERIZATION_ORDER_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkRasterizationOrderAMD = c_uint;
pub const VkRasterizationOrderAMD = enum_VkRasterizationOrderAMD;
pub const struct_VkPipelineRasterizationStateRasterizationOrderAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    rasterizationOrder: VkRasterizationOrderAMD = @import("std").mem.zeroes(VkRasterizationOrderAMD),
};
pub const VkPipelineRasterizationStateRasterizationOrderAMD = struct_VkPipelineRasterizationStateRasterizationOrderAMD;
pub const struct_VkDebugMarkerObjectNameInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkDebugReportObjectTypeEXT = @import("std").mem.zeroes(VkDebugReportObjectTypeEXT),
    object: u64 = @import("std").mem.zeroes(u64),
    pObjectName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkDebugMarkerObjectNameInfoEXT = struct_VkDebugMarkerObjectNameInfoEXT;
pub const struct_VkDebugMarkerObjectTagInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkDebugReportObjectTypeEXT = @import("std").mem.zeroes(VkDebugReportObjectTypeEXT),
    object: u64 = @import("std").mem.zeroes(u64),
    tagName: u64 = @import("std").mem.zeroes(u64),
    tagSize: usize = @import("std").mem.zeroes(usize),
    pTag: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkDebugMarkerObjectTagInfoEXT = struct_VkDebugMarkerObjectTagInfoEXT;
pub const struct_VkDebugMarkerMarkerInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pMarkerName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    color: [4]f32 = @import("std").mem.zeroes([4]f32),
};
pub const VkDebugMarkerMarkerInfoEXT = struct_VkDebugMarkerMarkerInfoEXT;
pub const PFN_vkDebugMarkerSetObjectTagEXT = ?*const fn (VkDevice, [*c]const VkDebugMarkerObjectTagInfoEXT) callconv(.C) VkResult;
pub const PFN_vkDebugMarkerSetObjectNameEXT = ?*const fn (VkDevice, [*c]const VkDebugMarkerObjectNameInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCmdDebugMarkerBeginEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugMarkerMarkerInfoEXT) callconv(.C) void;
pub const PFN_vkCmdDebugMarkerEndEXT = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdDebugMarkerInsertEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugMarkerMarkerInfoEXT) callconv(.C) void;
pub const struct_VkDedicatedAllocationImageCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDedicatedAllocationImageCreateInfoNV = struct_VkDedicatedAllocationImageCreateInfoNV;
pub const struct_VkDedicatedAllocationBufferCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDedicatedAllocationBufferCreateInfoNV = struct_VkDedicatedAllocationBufferCreateInfoNV;
pub const struct_VkDedicatedAllocationMemoryAllocateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkDedicatedAllocationMemoryAllocateInfoNV = struct_VkDedicatedAllocationMemoryAllocateInfoNV;
pub const VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceTransformFeedbackFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    transformFeedback: VkBool32 = @import("std").mem.zeroes(VkBool32),
    geometryStreams: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTransformFeedbackFeaturesEXT = struct_VkPhysicalDeviceTransformFeedbackFeaturesEXT;
pub const struct_VkPhysicalDeviceTransformFeedbackPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxTransformFeedbackStreams: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBuffers: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBufferSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxTransformFeedbackStreamDataSize: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBufferDataSize: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBufferDataStride: u32 = @import("std").mem.zeroes(u32),
    transformFeedbackQueries: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackStreamsLinesTriangles: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackRasterizationStreamSelect: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackDraw: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTransformFeedbackPropertiesEXT = struct_VkPhysicalDeviceTransformFeedbackPropertiesEXT;
pub const struct_VkPipelineRasterizationStateStreamCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationStateStreamCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineRasterizationStateStreamCreateFlagsEXT),
    rasterizationStream: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineRasterizationStateStreamCreateInfoEXT = struct_VkPipelineRasterizationStateStreamCreateInfoEXT;
pub const PFN_vkCmdBindTransformFeedbackBuffersEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdBeginTransformFeedbackEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdEndTransformFeedbackEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdBeginQueryIndexedEXT = ?*const fn (VkCommandBuffer, VkQueryPool, u32, VkQueryControlFlags, u32) callconv(.C) void;
pub const PFN_vkCmdEndQueryIndexedEXT = ?*const fn (VkCommandBuffer, VkQueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndirectByteCountEXT = ?*const fn (VkCommandBuffer, u32, u32, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const struct_VkCuModuleNVX_T = opaque {};
pub const VkCuModuleNVX = ?*struct_VkCuModuleNVX_T;
pub const struct_VkCuFunctionNVX_T = opaque {};
pub const VkCuFunctionNVX = ?*struct_VkCuFunctionNVX_T;
pub const struct_VkCuModuleCreateInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkCuModuleCreateInfoNVX = struct_VkCuModuleCreateInfoNVX;
pub const struct_VkCuModuleTexturingModeCreateInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    use64bitTexturing: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkCuModuleTexturingModeCreateInfoNVX = struct_VkCuModuleTexturingModeCreateInfoNVX;
pub const struct_VkCuFunctionCreateInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    module: VkCuModuleNVX = @import("std").mem.zeroes(VkCuModuleNVX),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkCuFunctionCreateInfoNVX = struct_VkCuFunctionCreateInfoNVX;
pub const struct_VkCuLaunchInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    function: VkCuFunctionNVX = @import("std").mem.zeroes(VkCuFunctionNVX),
    gridDimX: u32 = @import("std").mem.zeroes(u32),
    gridDimY: u32 = @import("std").mem.zeroes(u32),
    gridDimZ: u32 = @import("std").mem.zeroes(u32),
    blockDimX: u32 = @import("std").mem.zeroes(u32),
    blockDimY: u32 = @import("std").mem.zeroes(u32),
    blockDimZ: u32 = @import("std").mem.zeroes(u32),
    sharedMemBytes: u32 = @import("std").mem.zeroes(u32),
    paramCount: usize = @import("std").mem.zeroes(usize),
    pParams: [*c]const ?*const anyopaque = @import("std").mem.zeroes([*c]const ?*const anyopaque),
    extraCount: usize = @import("std").mem.zeroes(usize),
    pExtras: [*c]const ?*const anyopaque = @import("std").mem.zeroes([*c]const ?*const anyopaque),
};
pub const VkCuLaunchInfoNVX = struct_VkCuLaunchInfoNVX;
pub const PFN_vkCreateCuModuleNVX = ?*const fn (VkDevice, [*c]const VkCuModuleCreateInfoNVX, [*c]const VkAllocationCallbacks, [*c]VkCuModuleNVX) callconv(.C) VkResult;
pub const PFN_vkCreateCuFunctionNVX = ?*const fn (VkDevice, [*c]const VkCuFunctionCreateInfoNVX, [*c]const VkAllocationCallbacks, [*c]VkCuFunctionNVX) callconv(.C) VkResult;
pub const PFN_vkDestroyCuModuleNVX = ?*const fn (VkDevice, VkCuModuleNVX, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkDestroyCuFunctionNVX = ?*const fn (VkDevice, VkCuFunctionNVX, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdCuLaunchKernelNVX = ?*const fn (VkCommandBuffer, [*c]const VkCuLaunchInfoNVX) callconv(.C) void;
pub const struct_VkImageViewHandleInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    sampler: VkSampler = @import("std").mem.zeroes(VkSampler),
};
pub const VkImageViewHandleInfoNVX = struct_VkImageViewHandleInfoNVX;
pub const struct_VkImageViewAddressPropertiesNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkImageViewAddressPropertiesNVX = struct_VkImageViewAddressPropertiesNVX;
pub const PFN_vkGetImageViewHandleNVX = ?*const fn (VkDevice, [*c]const VkImageViewHandleInfoNVX) callconv(.C) u32;
pub const PFN_vkGetImageViewHandle64NVX = ?*const fn (VkDevice, [*c]const VkImageViewHandleInfoNVX) callconv(.C) u64;
pub const PFN_vkGetImageViewAddressNVX = ?*const fn (VkDevice, VkImageView, [*c]VkImageViewAddressPropertiesNVX) callconv(.C) VkResult;
pub const PFN_vkCmdDrawIndirectCountAMD = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCountAMD = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const struct_VkTextureLODGatherFormatPropertiesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsTextureGatherLODBiasAMD: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkTextureLODGatherFormatPropertiesAMD = struct_VkTextureLODGatherFormatPropertiesAMD;
pub const VK_SHADER_INFO_TYPE_STATISTICS_AMD: c_int = 0;
pub const VK_SHADER_INFO_TYPE_BINARY_AMD: c_int = 1;
pub const VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD: c_int = 2;
pub const VK_SHADER_INFO_TYPE_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkShaderInfoTypeAMD = c_uint;
pub const VkShaderInfoTypeAMD = enum_VkShaderInfoTypeAMD;
pub const struct_VkShaderResourceUsageAMD = extern struct {
    numUsedVgprs: u32 = @import("std").mem.zeroes(u32),
    numUsedSgprs: u32 = @import("std").mem.zeroes(u32),
    ldsSizePerLocalWorkGroup: u32 = @import("std").mem.zeroes(u32),
    ldsUsageSizeInBytes: usize = @import("std").mem.zeroes(usize),
    scratchMemUsageInBytes: usize = @import("std").mem.zeroes(usize),
};
pub const VkShaderResourceUsageAMD = struct_VkShaderResourceUsageAMD;
pub const struct_VkShaderStatisticsInfoAMD = extern struct {
    shaderStageMask: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    resourceUsage: VkShaderResourceUsageAMD = @import("std").mem.zeroes(VkShaderResourceUsageAMD),
    numPhysicalVgprs: u32 = @import("std").mem.zeroes(u32),
    numPhysicalSgprs: u32 = @import("std").mem.zeroes(u32),
    numAvailableVgprs: u32 = @import("std").mem.zeroes(u32),
    numAvailableSgprs: u32 = @import("std").mem.zeroes(u32),
    computeWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
};
pub const VkShaderStatisticsInfoAMD = struct_VkShaderStatisticsInfoAMD;
pub const PFN_vkGetShaderInfoAMD = ?*const fn (VkDevice, VkPipeline, VkShaderStageFlagBits, VkShaderInfoTypeAMD, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const struct_VkPhysicalDeviceCornerSampledImageFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cornerSampledImage: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCornerSampledImageFeaturesNV = struct_VkPhysicalDeviceCornerSampledImageFeaturesNV;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV: c_int = 1;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV: c_int = 2;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV: c_int = 4;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV: c_int = 8;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkExternalMemoryHandleTypeFlagBitsNV = c_uint;
pub const VkExternalMemoryHandleTypeFlagBitsNV = enum_VkExternalMemoryHandleTypeFlagBitsNV;
pub const VkExternalMemoryHandleTypeFlagsNV = VkFlags;
pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV: c_int = 1;
pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV: c_int = 2;
pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV: c_int = 4;
pub const VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkExternalMemoryFeatureFlagBitsNV = c_uint;
pub const VkExternalMemoryFeatureFlagBitsNV = enum_VkExternalMemoryFeatureFlagBitsNV;
pub const VkExternalMemoryFeatureFlagsNV = VkFlags;
pub const struct_VkExternalImageFormatPropertiesNV = extern struct {
    imageFormatProperties: VkImageFormatProperties = @import("std").mem.zeroes(VkImageFormatProperties),
    externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV = @import("std").mem.zeroes(VkExternalMemoryFeatureFlagsNV),
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
};
pub const VkExternalImageFormatPropertiesNV = struct_VkExternalImageFormatPropertiesNV;
pub const PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = ?*const fn (VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, [*c]VkExternalImageFormatPropertiesNV) callconv(.C) VkResult;
pub const struct_VkExternalMemoryImageCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
};
pub const VkExternalMemoryImageCreateInfoNV = struct_VkExternalMemoryImageCreateInfoNV;
pub const struct_VkExportMemoryAllocateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
};
pub const VkExportMemoryAllocateInfoNV = struct_VkExportMemoryAllocateInfoNV;
pub const VK_VALIDATION_CHECK_ALL_EXT: c_int = 0;
pub const VK_VALIDATION_CHECK_SHADERS_EXT: c_int = 1;
pub const VK_VALIDATION_CHECK_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationCheckEXT = c_uint;
pub const VkValidationCheckEXT = enum_VkValidationCheckEXT;
pub const struct_VkValidationFlagsEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    disabledValidationCheckCount: u32 = @import("std").mem.zeroes(u32),
    pDisabledValidationChecks: [*c]const VkValidationCheckEXT = @import("std").mem.zeroes([*c]const VkValidationCheckEXT),
};
pub const VkValidationFlagsEXT = struct_VkValidationFlagsEXT;
pub const VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = VkPhysicalDeviceTextureCompressionASTCHDRFeatures;
pub const struct_VkImageViewASTCDecodeModeEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    decodeMode: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkImageViewASTCDecodeModeEXT = struct_VkImageViewASTCDecodeModeEXT;
pub const struct_VkPhysicalDeviceASTCDecodeFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    decodeModeSharedExponent: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceASTCDecodeFeaturesEXT = struct_VkPhysicalDeviceASTCDecodeFeaturesEXT;
pub const VkPipelineRobustnessBufferBehaviorEXT = VkPipelineRobustnessBufferBehavior;
pub const VkPipelineRobustnessImageBehaviorEXT = VkPipelineRobustnessImageBehavior;
pub const VkPhysicalDevicePipelineRobustnessFeaturesEXT = VkPhysicalDevicePipelineRobustnessFeatures;
pub const VkPhysicalDevicePipelineRobustnessPropertiesEXT = VkPhysicalDevicePipelineRobustnessProperties;
pub const VkPipelineRobustnessCreateInfoEXT = VkPipelineRobustnessCreateInfo;
pub const VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT: c_int = 1;
pub const VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkConditionalRenderingFlagBitsEXT = c_uint;
pub const VkConditionalRenderingFlagBitsEXT = enum_VkConditionalRenderingFlagBitsEXT;
pub const VkConditionalRenderingFlagsEXT = VkFlags;
pub const struct_VkConditionalRenderingBeginInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkConditionalRenderingFlagsEXT = @import("std").mem.zeroes(VkConditionalRenderingFlagsEXT),
};
pub const VkConditionalRenderingBeginInfoEXT = struct_VkConditionalRenderingBeginInfoEXT;
pub const struct_VkPhysicalDeviceConditionalRenderingFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    conditionalRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    inheritedConditionalRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceConditionalRenderingFeaturesEXT = struct_VkPhysicalDeviceConditionalRenderingFeaturesEXT;
pub const struct_VkCommandBufferInheritanceConditionalRenderingInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    conditionalRenderingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkCommandBufferInheritanceConditionalRenderingInfoEXT = struct_VkCommandBufferInheritanceConditionalRenderingInfoEXT;
pub const PFN_vkCmdBeginConditionalRenderingEXT = ?*const fn (VkCommandBuffer, [*c]const VkConditionalRenderingBeginInfoEXT) callconv(.C) void;
pub const PFN_vkCmdEndConditionalRenderingEXT = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const struct_VkViewportWScalingNV = extern struct {
    xcoeff: f32 = @import("std").mem.zeroes(f32),
    ycoeff: f32 = @import("std").mem.zeroes(f32),
};
pub const VkViewportWScalingNV = struct_VkViewportWScalingNV;
pub const struct_VkPipelineViewportWScalingStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewportWScalingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pViewportWScalings: [*c]const VkViewportWScalingNV = @import("std").mem.zeroes([*c]const VkViewportWScalingNV),
};
pub const VkPipelineViewportWScalingStateCreateInfoNV = struct_VkPipelineViewportWScalingStateCreateInfoNV;
pub const PFN_vkCmdSetViewportWScalingNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkViewportWScalingNV) callconv(.C) void;
pub const PFN_vkReleaseDisplayEXT = ?*const fn (VkPhysicalDevice, VkDisplayKHR) callconv(.C) VkResult;
pub const VK_SURFACE_COUNTER_VBLANK_BIT_EXT: c_int = 1;
pub const VK_SURFACE_COUNTER_VBLANK_EXT: c_int = 1;
pub const VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkSurfaceCounterFlagBitsEXT = c_uint;
pub const VkSurfaceCounterFlagBitsEXT = enum_VkSurfaceCounterFlagBitsEXT;
pub const VkSurfaceCounterFlagsEXT = VkFlags;
pub const struct_VkSurfaceCapabilities2EXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minImageCount: u32 = @import("std").mem.zeroes(u32),
    maxImageCount: u32 = @import("std").mem.zeroes(u32),
    currentExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    supportedTransforms: VkSurfaceTransformFlagsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagsKHR),
    currentTransform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR = @import("std").mem.zeroes(VkCompositeAlphaFlagsKHR),
    supportedUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    supportedSurfaceCounters: VkSurfaceCounterFlagsEXT = @import("std").mem.zeroes(VkSurfaceCounterFlagsEXT),
};
pub const VkSurfaceCapabilities2EXT = struct_VkSurfaceCapabilities2EXT;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]VkSurfaceCapabilities2EXT) callconv(.C) VkResult;
pub const VK_DISPLAY_POWER_STATE_OFF_EXT: c_int = 0;
pub const VK_DISPLAY_POWER_STATE_SUSPEND_EXT: c_int = 1;
pub const VK_DISPLAY_POWER_STATE_ON_EXT: c_int = 2;
pub const VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDisplayPowerStateEXT = c_uint;
pub const VkDisplayPowerStateEXT = enum_VkDisplayPowerStateEXT;
pub const VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT: c_int = 0;
pub const VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceEventTypeEXT = c_uint;
pub const VkDeviceEventTypeEXT = enum_VkDeviceEventTypeEXT;
pub const VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT: c_int = 0;
pub const VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDisplayEventTypeEXT = c_uint;
pub const VkDisplayEventTypeEXT = enum_VkDisplayEventTypeEXT;
pub const struct_VkDisplayPowerInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    powerState: VkDisplayPowerStateEXT = @import("std").mem.zeroes(VkDisplayPowerStateEXT),
};
pub const VkDisplayPowerInfoEXT = struct_VkDisplayPowerInfoEXT;
pub const struct_VkDeviceEventInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceEvent: VkDeviceEventTypeEXT = @import("std").mem.zeroes(VkDeviceEventTypeEXT),
};
pub const VkDeviceEventInfoEXT = struct_VkDeviceEventInfoEXT;
pub const struct_VkDisplayEventInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    displayEvent: VkDisplayEventTypeEXT = @import("std").mem.zeroes(VkDisplayEventTypeEXT),
};
pub const VkDisplayEventInfoEXT = struct_VkDisplayEventInfoEXT;
pub const struct_VkSwapchainCounterCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    surfaceCounters: VkSurfaceCounterFlagsEXT = @import("std").mem.zeroes(VkSurfaceCounterFlagsEXT),
};
pub const VkSwapchainCounterCreateInfoEXT = struct_VkSwapchainCounterCreateInfoEXT;
pub const PFN_vkDisplayPowerControlEXT = ?*const fn (VkDevice, VkDisplayKHR, [*c]const VkDisplayPowerInfoEXT) callconv(.C) VkResult;
pub const PFN_vkRegisterDeviceEventEXT = ?*const fn (VkDevice, [*c]const VkDeviceEventInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkFence) callconv(.C) VkResult;
pub const PFN_vkRegisterDisplayEventEXT = ?*const fn (VkDevice, VkDisplayKHR, [*c]const VkDisplayEventInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkFence) callconv(.C) VkResult;
pub const PFN_vkGetSwapchainCounterEXT = ?*const fn (VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagBitsEXT, [*c]u64) callconv(.C) VkResult;
pub const struct_VkRefreshCycleDurationGOOGLE = extern struct {
    refreshDuration: u64 = @import("std").mem.zeroes(u64),
};
pub const VkRefreshCycleDurationGOOGLE = struct_VkRefreshCycleDurationGOOGLE;
pub const struct_VkPastPresentationTimingGOOGLE = extern struct {
    presentID: u32 = @import("std").mem.zeroes(u32),
    desiredPresentTime: u64 = @import("std").mem.zeroes(u64),
    actualPresentTime: u64 = @import("std").mem.zeroes(u64),
    earliestPresentTime: u64 = @import("std").mem.zeroes(u64),
    presentMargin: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPastPresentationTimingGOOGLE = struct_VkPastPresentationTimingGOOGLE;
pub const struct_VkPresentTimeGOOGLE = extern struct {
    presentID: u32 = @import("std").mem.zeroes(u32),
    desiredPresentTime: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPresentTimeGOOGLE = struct_VkPresentTimeGOOGLE;
pub const struct_VkPresentTimesInfoGOOGLE = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pTimes: [*c]const VkPresentTimeGOOGLE = @import("std").mem.zeroes([*c]const VkPresentTimeGOOGLE),
};
pub const VkPresentTimesInfoGOOGLE = struct_VkPresentTimesInfoGOOGLE;
pub const PFN_vkGetRefreshCycleDurationGOOGLE = ?*const fn (VkDevice, VkSwapchainKHR, [*c]VkRefreshCycleDurationGOOGLE) callconv(.C) VkResult;
pub const PFN_vkGetPastPresentationTimingGOOGLE = ?*const fn (VkDevice, VkSwapchainKHR, [*c]u32, [*c]VkPastPresentationTimingGOOGLE) callconv(.C) VkResult;
pub const struct_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    perViewPositionAllComponents: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = struct_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
pub const struct_VkMultiviewPerViewAttributesInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    perViewAttributes: VkBool32 = @import("std").mem.zeroes(VkBool32),
    perViewAttributesPositionXOnly: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkMultiviewPerViewAttributesInfoNVX = struct_VkMultiviewPerViewAttributesInfoNVX;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV: c_int = 0;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV: c_int = 1;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV: c_int = 2;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV: c_int = 3;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV: c_int = 4;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV: c_int = 5;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV: c_int = 6;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV: c_int = 7;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkViewportCoordinateSwizzleNV = c_uint;
pub const VkViewportCoordinateSwizzleNV = enum_VkViewportCoordinateSwizzleNV;
pub const VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags;
pub const struct_VkViewportSwizzleNV = extern struct {
    x: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
    y: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
    z: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
    w: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
};
pub const VkViewportSwizzleNV = struct_VkViewportSwizzleNV;
pub const struct_VkPipelineViewportSwizzleStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineViewportSwizzleStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineViewportSwizzleStateCreateFlagsNV),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pViewportSwizzles: [*c]const VkViewportSwizzleNV = @import("std").mem.zeroes([*c]const VkViewportSwizzleNV),
};
pub const VkPipelineViewportSwizzleStateCreateInfoNV = struct_VkPipelineViewportSwizzleStateCreateInfoNV;
pub const VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT: c_int = 0;
pub const VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT: c_int = 1;
pub const VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDiscardRectangleModeEXT = c_uint;
pub const VkDiscardRectangleModeEXT = enum_VkDiscardRectangleModeEXT;
pub const VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceDiscardRectanglePropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxDiscardRectangles: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceDiscardRectanglePropertiesEXT = struct_VkPhysicalDeviceDiscardRectanglePropertiesEXT;
pub const struct_VkPipelineDiscardRectangleStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineDiscardRectangleStateCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineDiscardRectangleStateCreateFlagsEXT),
    discardRectangleMode: VkDiscardRectangleModeEXT = @import("std").mem.zeroes(VkDiscardRectangleModeEXT),
    discardRectangleCount: u32 = @import("std").mem.zeroes(u32),
    pDiscardRectangles: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkPipelineDiscardRectangleStateCreateInfoEXT = struct_VkPipelineDiscardRectangleStateCreateInfoEXT;
pub const PFN_vkCmdSetDiscardRectangleEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdSetDiscardRectangleEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDiscardRectangleModeEXT = ?*const fn (VkCommandBuffer, VkDiscardRectangleModeEXT) callconv(.C) void;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT: c_int = 0;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT: c_int = 1;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT: c_int = 2;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkConservativeRasterizationModeEXT = c_uint;
pub const VkConservativeRasterizationModeEXT = enum_VkConservativeRasterizationModeEXT;
pub const VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceConservativeRasterizationPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    primitiveOverestimationSize: f32 = @import("std").mem.zeroes(f32),
    maxExtraPrimitiveOverestimationSize: f32 = @import("std").mem.zeroes(f32),
    extraPrimitiveOverestimationSizeGranularity: f32 = @import("std").mem.zeroes(f32),
    primitiveUnderestimation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    conservativePointAndLineRasterization: VkBool32 = @import("std").mem.zeroes(VkBool32),
    degenerateTrianglesRasterized: VkBool32 = @import("std").mem.zeroes(VkBool32),
    degenerateLinesRasterized: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fullyCoveredFragmentShaderInputVariable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    conservativeRasterizationPostDepthCoverage: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceConservativeRasterizationPropertiesEXT = struct_VkPhysicalDeviceConservativeRasterizationPropertiesEXT;
pub const struct_VkPipelineRasterizationConservativeStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineRasterizationConservativeStateCreateFlagsEXT),
    conservativeRasterizationMode: VkConservativeRasterizationModeEXT = @import("std").mem.zeroes(VkConservativeRasterizationModeEXT),
    extraPrimitiveOverestimationSize: f32 = @import("std").mem.zeroes(f32),
};
pub const VkPipelineRasterizationConservativeStateCreateInfoEXT = struct_VkPipelineRasterizationConservativeStateCreateInfoEXT;
pub const VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceDepthClipEnableFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthClipEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthClipEnableFeaturesEXT = struct_VkPhysicalDeviceDepthClipEnableFeaturesEXT;
pub const struct_VkPipelineRasterizationDepthClipStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineRasterizationDepthClipStateCreateFlagsEXT),
    depthClipEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPipelineRasterizationDepthClipStateCreateInfoEXT = struct_VkPipelineRasterizationDepthClipStateCreateInfoEXT;
pub const struct_VkXYColorEXT = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
};
pub const VkXYColorEXT = struct_VkXYColorEXT;
pub const struct_VkHdrMetadataEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    displayPrimaryRed: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    displayPrimaryGreen: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    displayPrimaryBlue: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    whitePoint: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    maxLuminance: f32 = @import("std").mem.zeroes(f32),
    minLuminance: f32 = @import("std").mem.zeroes(f32),
    maxContentLightLevel: f32 = @import("std").mem.zeroes(f32),
    maxFrameAverageLightLevel: f32 = @import("std").mem.zeroes(f32),
};
pub const VkHdrMetadataEXT = struct_VkHdrMetadataEXT;
pub const PFN_vkSetHdrMetadataEXT = ?*const fn (VkDevice, u32, [*c]const VkSwapchainKHR, [*c]const VkHdrMetadataEXT) callconv(.C) void;
pub const struct_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    relaxedLineRasterization: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG = struct_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG;
pub const struct_VkDebugUtilsMessengerEXT_T = opaque {};
pub const VkDebugUtilsMessengerEXT = ?*struct_VkDebugUtilsMessengerEXT_T;
pub const VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT: c_int = 1;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT: c_int = 16;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT: c_int = 256;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT: c_int = 4096;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugUtilsMessageSeverityFlagBitsEXT = c_uint;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT = enum_VkDebugUtilsMessageSeverityFlagBitsEXT;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT: c_int = 1;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT: c_int = 2;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT: c_int = 4;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT: c_int = 8;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugUtilsMessageTypeFlagBitsEXT = c_uint;
pub const VkDebugUtilsMessageTypeFlagBitsEXT = enum_VkDebugUtilsMessageTypeFlagBitsEXT;
pub const VkDebugUtilsMessageTypeFlagsEXT = VkFlags;
pub const VkDebugUtilsMessageSeverityFlagsEXT = VkFlags;
pub const VkDebugUtilsMessengerCreateFlagsEXT = VkFlags;
pub const struct_VkDebugUtilsLabelEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pLabelName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    color: [4]f32 = @import("std").mem.zeroes([4]f32),
};
pub const VkDebugUtilsLabelEXT = struct_VkDebugUtilsLabelEXT;
pub const struct_VkDebugUtilsObjectNameInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkObjectType = @import("std").mem.zeroes(VkObjectType),
    objectHandle: u64 = @import("std").mem.zeroes(u64),
    pObjectName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkDebugUtilsObjectNameInfoEXT = struct_VkDebugUtilsObjectNameInfoEXT;
pub const struct_VkDebugUtilsMessengerCallbackDataEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDebugUtilsMessengerCallbackDataFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessengerCallbackDataFlagsEXT),
    pMessageIdName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    messageIdNumber: i32 = @import("std").mem.zeroes(i32),
    pMessage: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    queueLabelCount: u32 = @import("std").mem.zeroes(u32),
    pQueueLabels: [*c]const VkDebugUtilsLabelEXT = @import("std").mem.zeroes([*c]const VkDebugUtilsLabelEXT),
    cmdBufLabelCount: u32 = @import("std").mem.zeroes(u32),
    pCmdBufLabels: [*c]const VkDebugUtilsLabelEXT = @import("std").mem.zeroes([*c]const VkDebugUtilsLabelEXT),
    objectCount: u32 = @import("std").mem.zeroes(u32),
    pObjects: [*c]const VkDebugUtilsObjectNameInfoEXT = @import("std").mem.zeroes([*c]const VkDebugUtilsObjectNameInfoEXT),
};
pub const VkDebugUtilsMessengerCallbackDataEXT = struct_VkDebugUtilsMessengerCallbackDataEXT;
pub const PFN_vkDebugUtilsMessengerCallbackEXT = ?*const fn (VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, [*c]const VkDebugUtilsMessengerCallbackDataEXT, ?*anyopaque) callconv(.C) VkBool32;
pub const struct_VkDebugUtilsMessengerCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDebugUtilsMessengerCreateFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessengerCreateFlagsEXT),
    messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessageSeverityFlagsEXT),
    messageType: VkDebugUtilsMessageTypeFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessageTypeFlagsEXT),
    pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT = @import("std").mem.zeroes(PFN_vkDebugUtilsMessengerCallbackEXT),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkDebugUtilsMessengerCreateInfoEXT = struct_VkDebugUtilsMessengerCreateInfoEXT;
pub const struct_VkDebugUtilsObjectTagInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkObjectType = @import("std").mem.zeroes(VkObjectType),
    objectHandle: u64 = @import("std").mem.zeroes(u64),
    tagName: u64 = @import("std").mem.zeroes(u64),
    tagSize: usize = @import("std").mem.zeroes(usize),
    pTag: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkDebugUtilsObjectTagInfoEXT = struct_VkDebugUtilsObjectTagInfoEXT;
pub const PFN_vkSetDebugUtilsObjectNameEXT = ?*const fn (VkDevice, [*c]const VkDebugUtilsObjectNameInfoEXT) callconv(.C) VkResult;
pub const PFN_vkSetDebugUtilsObjectTagEXT = ?*const fn (VkDevice, [*c]const VkDebugUtilsObjectTagInfoEXT) callconv(.C) VkResult;
pub const PFN_vkQueueBeginDebugUtilsLabelEXT = ?*const fn (VkQueue, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkQueueEndDebugUtilsLabelEXT = ?*const fn (VkQueue) callconv(.C) void;
pub const PFN_vkQueueInsertDebugUtilsLabelEXT = ?*const fn (VkQueue, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCmdBeginDebugUtilsLabelEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCmdEndDebugUtilsLabelEXT = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdInsertDebugUtilsLabelEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCreateDebugUtilsMessengerEXT = ?*const fn (VkInstance, [*c]const VkDebugUtilsMessengerCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkDebugUtilsMessengerEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyDebugUtilsMessengerEXT = ?*const fn (VkInstance, VkDebugUtilsMessengerEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkSubmitDebugUtilsMessageEXT = ?*const fn (VkInstance, VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, [*c]const VkDebugUtilsMessengerCallbackDataEXT) callconv(.C) void;
pub const VkSamplerReductionModeEXT = VkSamplerReductionMode;
pub const VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo;
pub const VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = VkPhysicalDeviceSamplerFilterMinmaxProperties;
pub const struct_VkAttachmentSampleCountInfoAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentSamples: [*c]const VkSampleCountFlagBits = @import("std").mem.zeroes([*c]const VkSampleCountFlagBits),
    depthStencilAttachmentSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
};
pub const VkAttachmentSampleCountInfoAMD = struct_VkAttachmentSampleCountInfoAMD;
pub const VkPhysicalDeviceInlineUniformBlockFeaturesEXT = VkPhysicalDeviceInlineUniformBlockFeatures;
pub const VkPhysicalDeviceInlineUniformBlockPropertiesEXT = VkPhysicalDeviceInlineUniformBlockProperties;
pub const VkWriteDescriptorSetInlineUniformBlockEXT = VkWriteDescriptorSetInlineUniformBlock;
pub const VkDescriptorPoolInlineUniformBlockCreateInfoEXT = VkDescriptorPoolInlineUniformBlockCreateInfo;
pub const struct_VkSampleLocationEXT = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
};
pub const VkSampleLocationEXT = struct_VkSampleLocationEXT;
pub const struct_VkSampleLocationsInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampleLocationsPerPixel: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    sampleLocationGridSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sampleLocationsCount: u32 = @import("std").mem.zeroes(u32),
    pSampleLocations: [*c]const VkSampleLocationEXT = @import("std").mem.zeroes([*c]const VkSampleLocationEXT),
};
pub const VkSampleLocationsInfoEXT = struct_VkSampleLocationsInfoEXT;
pub const struct_VkAttachmentSampleLocationsEXT = extern struct {
    attachmentIndex: u32 = @import("std").mem.zeroes(u32),
    sampleLocationsInfo: VkSampleLocationsInfoEXT = @import("std").mem.zeroes(VkSampleLocationsInfoEXT),
};
pub const VkAttachmentSampleLocationsEXT = struct_VkAttachmentSampleLocationsEXT;
pub const struct_VkSubpassSampleLocationsEXT = extern struct {
    subpassIndex: u32 = @import("std").mem.zeroes(u32),
    sampleLocationsInfo: VkSampleLocationsInfoEXT = @import("std").mem.zeroes(VkSampleLocationsInfoEXT),
};
pub const VkSubpassSampleLocationsEXT = struct_VkSubpassSampleLocationsEXT;
pub const struct_VkRenderPassSampleLocationsBeginInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentInitialSampleLocationsCount: u32 = @import("std").mem.zeroes(u32),
    pAttachmentInitialSampleLocations: [*c]const VkAttachmentSampleLocationsEXT = @import("std").mem.zeroes([*c]const VkAttachmentSampleLocationsEXT),
    postSubpassSampleLocationsCount: u32 = @import("std").mem.zeroes(u32),
    pPostSubpassSampleLocations: [*c]const VkSubpassSampleLocationsEXT = @import("std").mem.zeroes([*c]const VkSubpassSampleLocationsEXT),
};
pub const VkRenderPassSampleLocationsBeginInfoEXT = struct_VkRenderPassSampleLocationsBeginInfoEXT;
pub const struct_VkPipelineSampleLocationsStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampleLocationsEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sampleLocationsInfo: VkSampleLocationsInfoEXT = @import("std").mem.zeroes(VkSampleLocationsInfoEXT),
};
pub const VkPipelineSampleLocationsStateCreateInfoEXT = struct_VkPipelineSampleLocationsStateCreateInfoEXT;
pub const struct_VkPhysicalDeviceSampleLocationsPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sampleLocationSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxSampleLocationGridSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sampleLocationCoordinateRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    sampleLocationSubPixelBits: u32 = @import("std").mem.zeroes(u32),
    variableSampleLocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSampleLocationsPropertiesEXT = struct_VkPhysicalDeviceSampleLocationsPropertiesEXT;
pub const struct_VkMultisamplePropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxSampleLocationGridSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkMultisamplePropertiesEXT = struct_VkMultisamplePropertiesEXT;
pub const PFN_vkCmdSetSampleLocationsEXT = ?*const fn (VkCommandBuffer, [*c]const VkSampleLocationsInfoEXT) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = ?*const fn (VkPhysicalDevice, VkSampleCountFlagBits, [*c]VkMultisamplePropertiesEXT) callconv(.C) void;
pub const VK_BLEND_OVERLAP_UNCORRELATED_EXT: c_int = 0;
pub const VK_BLEND_OVERLAP_DISJOINT_EXT: c_int = 1;
pub const VK_BLEND_OVERLAP_CONJOINT_EXT: c_int = 2;
pub const VK_BLEND_OVERLAP_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkBlendOverlapEXT = c_uint;
pub const VkBlendOverlapEXT = enum_VkBlendOverlapEXT;
pub const struct_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    advancedBlendCoherentOperations: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = struct_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;
pub const struct_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    advancedBlendMaxColorAttachments: u32 = @import("std").mem.zeroes(u32),
    advancedBlendIndependentBlend: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendNonPremultipliedSrcColor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendNonPremultipliedDstColor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendCorrelatedOverlap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendAllOperations: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = struct_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;
pub const struct_VkPipelineColorBlendAdvancedStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dstPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    blendOverlap: VkBlendOverlapEXT = @import("std").mem.zeroes(VkBlendOverlapEXT),
};
pub const VkPipelineColorBlendAdvancedStateCreateInfoEXT = struct_VkPipelineColorBlendAdvancedStateCreateInfoEXT;
pub const VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags;
pub const struct_VkPipelineCoverageToColorStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCoverageToColorStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineCoverageToColorStateCreateFlagsNV),
    coverageToColorEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    coverageToColorLocation: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineCoverageToColorStateCreateInfoNV = struct_VkPipelineCoverageToColorStateCreateInfoNV;
pub const VK_COVERAGE_MODULATION_MODE_NONE_NV: c_int = 0;
pub const VK_COVERAGE_MODULATION_MODE_RGB_NV: c_int = 1;
pub const VK_COVERAGE_MODULATION_MODE_ALPHA_NV: c_int = 2;
pub const VK_COVERAGE_MODULATION_MODE_RGBA_NV: c_int = 3;
pub const VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkCoverageModulationModeNV = c_uint;
pub const VkCoverageModulationModeNV = enum_VkCoverageModulationModeNV;
pub const VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags;
pub const struct_VkPipelineCoverageModulationStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCoverageModulationStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineCoverageModulationStateCreateFlagsNV),
    coverageModulationMode: VkCoverageModulationModeNV = @import("std").mem.zeroes(VkCoverageModulationModeNV),
    coverageModulationTableEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    coverageModulationTableCount: u32 = @import("std").mem.zeroes(u32),
    pCoverageModulationTable: [*c]const f32 = @import("std").mem.zeroes([*c]const f32),
};
pub const VkPipelineCoverageModulationStateCreateInfoNV = struct_VkPipelineCoverageModulationStateCreateInfoNV;
pub const VkAttachmentSampleCountInfoNV = VkAttachmentSampleCountInfoAMD;
pub const struct_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSMCount: u32 = @import("std").mem.zeroes(u32),
    shaderWarpsPerSM: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderSMBuiltinsPropertiesNV = struct_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;
pub const struct_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSMBuiltins: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderSMBuiltinsFeaturesNV = struct_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;
pub const struct_VkDrmFormatModifierPropertiesEXT = extern struct {
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    drmFormatModifierPlaneCount: u32 = @import("std").mem.zeroes(u32),
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
};
pub const VkDrmFormatModifierPropertiesEXT = struct_VkDrmFormatModifierPropertiesEXT;
pub const struct_VkDrmFormatModifierPropertiesListEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    drmFormatModifierCount: u32 = @import("std").mem.zeroes(u32),
    pDrmFormatModifierProperties: [*c]VkDrmFormatModifierPropertiesEXT = @import("std").mem.zeroes([*c]VkDrmFormatModifierPropertiesEXT),
};
pub const VkDrmFormatModifierPropertiesListEXT = struct_VkDrmFormatModifierPropertiesListEXT;
pub const struct_VkPhysicalDeviceImageDrmFormatModifierInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    sharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkPhysicalDeviceImageDrmFormatModifierInfoEXT = struct_VkPhysicalDeviceImageDrmFormatModifierInfoEXT;
pub const struct_VkImageDrmFormatModifierListCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    drmFormatModifierCount: u32 = @import("std").mem.zeroes(u32),
    pDrmFormatModifiers: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
};
pub const VkImageDrmFormatModifierListCreateInfoEXT = struct_VkImageDrmFormatModifierListCreateInfoEXT;
pub const struct_VkImageDrmFormatModifierExplicitCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    drmFormatModifierPlaneCount: u32 = @import("std").mem.zeroes(u32),
    pPlaneLayouts: [*c]const VkSubresourceLayout = @import("std").mem.zeroes([*c]const VkSubresourceLayout),
};
pub const VkImageDrmFormatModifierExplicitCreateInfoEXT = struct_VkImageDrmFormatModifierExplicitCreateInfoEXT;
pub const struct_VkImageDrmFormatModifierPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
};
pub const VkImageDrmFormatModifierPropertiesEXT = struct_VkImageDrmFormatModifierPropertiesEXT;
pub const struct_VkDrmFormatModifierProperties2EXT = extern struct {
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    drmFormatModifierPlaneCount: u32 = @import("std").mem.zeroes(u32),
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
};
pub const VkDrmFormatModifierProperties2EXT = struct_VkDrmFormatModifierProperties2EXT;
pub const struct_VkDrmFormatModifierPropertiesList2EXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    drmFormatModifierCount: u32 = @import("std").mem.zeroes(u32),
    pDrmFormatModifierProperties: [*c]VkDrmFormatModifierProperties2EXT = @import("std").mem.zeroes([*c]VkDrmFormatModifierProperties2EXT),
};
pub const VkDrmFormatModifierPropertiesList2EXT = struct_VkDrmFormatModifierPropertiesList2EXT;
pub const PFN_vkGetImageDrmFormatModifierPropertiesEXT = ?*const fn (VkDevice, VkImage, [*c]VkImageDrmFormatModifierPropertiesEXT) callconv(.C) VkResult;
pub const struct_VkValidationCacheEXT_T = opaque {};
pub const VkValidationCacheEXT = ?*struct_VkValidationCacheEXT_T;
pub const VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT: c_int = 1;
pub const VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationCacheHeaderVersionEXT = c_uint;
pub const VkValidationCacheHeaderVersionEXT = enum_VkValidationCacheHeaderVersionEXT;
pub const VkValidationCacheCreateFlagsEXT = VkFlags;
pub const struct_VkValidationCacheCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkValidationCacheCreateFlagsEXT = @import("std").mem.zeroes(VkValidationCacheCreateFlagsEXT),
    initialDataSize: usize = @import("std").mem.zeroes(usize),
    pInitialData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkValidationCacheCreateInfoEXT = struct_VkValidationCacheCreateInfoEXT;
pub const struct_VkShaderModuleValidationCacheCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    validationCache: VkValidationCacheEXT = @import("std").mem.zeroes(VkValidationCacheEXT),
};
pub const VkShaderModuleValidationCacheCreateInfoEXT = struct_VkShaderModuleValidationCacheCreateInfoEXT;
pub const PFN_vkCreateValidationCacheEXT = ?*const fn (VkDevice, [*c]const VkValidationCacheCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkValidationCacheEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyValidationCacheEXT = ?*const fn (VkDevice, VkValidationCacheEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkMergeValidationCachesEXT = ?*const fn (VkDevice, VkValidationCacheEXT, u32, [*c]const VkValidationCacheEXT) callconv(.C) VkResult;
pub const PFN_vkGetValidationCacheDataEXT = ?*const fn (VkDevice, VkValidationCacheEXT, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const VkDescriptorBindingFlagBitsEXT = VkDescriptorBindingFlagBits;
pub const VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlags;
pub const VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = VkDescriptorSetLayoutBindingFlagsCreateInfo;
pub const VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures;
pub const VkPhysicalDeviceDescriptorIndexingPropertiesEXT = VkPhysicalDeviceDescriptorIndexingProperties;
pub const VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = VkDescriptorSetVariableDescriptorCountAllocateInfo;
pub const VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = VkDescriptorSetVariableDescriptorCountLayoutSupport;
pub const VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV: c_int = 0;
pub const VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV: c_int = 1;
pub const VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV: c_int = 2;
pub const VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV: c_int = 3;
pub const VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV: c_int = 4;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV: c_int = 5;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV: c_int = 6;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV: c_int = 7;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV: c_int = 8;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV: c_int = 9;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV: c_int = 10;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV: c_int = 11;
pub const VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkShadingRatePaletteEntryNV = c_uint;
pub const VkShadingRatePaletteEntryNV = enum_VkShadingRatePaletteEntryNV;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV: c_int = 0;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV: c_int = 1;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV: c_int = 2;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV: c_int = 3;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkCoarseSampleOrderTypeNV = c_uint;
pub const VkCoarseSampleOrderTypeNV = enum_VkCoarseSampleOrderTypeNV;
pub const struct_VkShadingRatePaletteNV = extern struct {
    shadingRatePaletteEntryCount: u32 = @import("std").mem.zeroes(u32),
    pShadingRatePaletteEntries: [*c]const VkShadingRatePaletteEntryNV = @import("std").mem.zeroes([*c]const VkShadingRatePaletteEntryNV),
};
pub const VkShadingRatePaletteNV = struct_VkShadingRatePaletteNV;
pub const struct_VkPipelineViewportShadingRateImageStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    shadingRateImageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pShadingRatePalettes: [*c]const VkShadingRatePaletteNV = @import("std").mem.zeroes([*c]const VkShadingRatePaletteNV),
};
pub const VkPipelineViewportShadingRateImageStateCreateInfoNV = struct_VkPipelineViewportShadingRateImageStateCreateInfoNV;
pub const struct_VkPhysicalDeviceShadingRateImageFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shadingRateImage: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shadingRateCoarseSampleOrder: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShadingRateImageFeaturesNV = struct_VkPhysicalDeviceShadingRateImageFeaturesNV;
pub const struct_VkPhysicalDeviceShadingRateImagePropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shadingRateTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    shadingRatePaletteSize: u32 = @import("std").mem.zeroes(u32),
    shadingRateMaxCoarseSamples: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShadingRateImagePropertiesNV = struct_VkPhysicalDeviceShadingRateImagePropertiesNV;
pub const struct_VkCoarseSampleLocationNV = extern struct {
    pixelX: u32 = @import("std").mem.zeroes(u32),
    pixelY: u32 = @import("std").mem.zeroes(u32),
    sample: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCoarseSampleLocationNV = struct_VkCoarseSampleLocationNV;
pub const struct_VkCoarseSampleOrderCustomNV = extern struct {
    shadingRate: VkShadingRatePaletteEntryNV = @import("std").mem.zeroes(VkShadingRatePaletteEntryNV),
    sampleCount: u32 = @import("std").mem.zeroes(u32),
    sampleLocationCount: u32 = @import("std").mem.zeroes(u32),
    pSampleLocations: [*c]const VkCoarseSampleLocationNV = @import("std").mem.zeroes([*c]const VkCoarseSampleLocationNV),
};
pub const VkCoarseSampleOrderCustomNV = struct_VkCoarseSampleOrderCustomNV;
pub const struct_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampleOrderType: VkCoarseSampleOrderTypeNV = @import("std").mem.zeroes(VkCoarseSampleOrderTypeNV),
    customSampleOrderCount: u32 = @import("std").mem.zeroes(u32),
    pCustomSampleOrders: [*c]const VkCoarseSampleOrderCustomNV = @import("std").mem.zeroes([*c]const VkCoarseSampleOrderCustomNV),
};
pub const VkPipelineViewportCoarseSampleOrderStateCreateInfoNV = struct_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;
pub const PFN_vkCmdBindShadingRateImageNV = ?*const fn (VkCommandBuffer, VkImageView, VkImageLayout) callconv(.C) void;
pub const PFN_vkCmdSetViewportShadingRatePaletteNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkShadingRatePaletteNV) callconv(.C) void;
pub const PFN_vkCmdSetCoarseSampleOrderNV = ?*const fn (VkCommandBuffer, VkCoarseSampleOrderTypeNV, u32, [*c]const VkCoarseSampleOrderCustomNV) callconv(.C) void;
pub const struct_VkAccelerationStructureNV_T = opaque {};
pub const VkAccelerationStructureNV = ?*struct_VkAccelerationStructureNV_T;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR: c_int = 0;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR: c_int = 1;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR: c_int = 2;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV: c_int = 0;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV: c_int = 1;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV: c_int = 2;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkRayTracingShaderGroupTypeKHR = c_uint;
pub const VkRayTracingShaderGroupTypeKHR = enum_VkRayTracingShaderGroupTypeKHR;
pub const VkRayTracingShaderGroupTypeNV = VkRayTracingShaderGroupTypeKHR;
pub const VK_GEOMETRY_TYPE_TRIANGLES_KHR: c_int = 0;
pub const VK_GEOMETRY_TYPE_AABBS_KHR: c_int = 1;
pub const VK_GEOMETRY_TYPE_INSTANCES_KHR: c_int = 2;
pub const VK_GEOMETRY_TYPE_TRIANGLES_NV: c_int = 0;
pub const VK_GEOMETRY_TYPE_AABBS_NV: c_int = 1;
pub const VK_GEOMETRY_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkGeometryTypeKHR = c_uint;
pub const VkGeometryTypeKHR = enum_VkGeometryTypeKHR;
pub const VkGeometryTypeNV = VkGeometryTypeKHR;
pub const VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureTypeKHR = c_uint;
pub const VkAccelerationStructureTypeKHR = enum_VkAccelerationStructureTypeKHR;
pub const VkAccelerationStructureTypeNV = VkAccelerationStructureTypeKHR;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR: c_int = 0;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR: c_int = 1;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR: c_int = 2;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR: c_int = 3;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV: c_int = 0;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV: c_int = 1;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkCopyAccelerationStructureModeKHR = c_uint;
pub const VkCopyAccelerationStructureModeKHR = enum_VkCopyAccelerationStructureModeKHR;
pub const VkCopyAccelerationStructureModeNV = VkCopyAccelerationStructureModeKHR;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkAccelerationStructureMemoryRequirementsTypeNV = c_uint;
pub const VkAccelerationStructureMemoryRequirementsTypeNV = enum_VkAccelerationStructureMemoryRequirementsTypeNV;
pub const VK_GEOMETRY_OPAQUE_BIT_KHR: c_int = 1;
pub const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR: c_int = 2;
pub const VK_GEOMETRY_OPAQUE_BIT_NV: c_int = 1;
pub const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV: c_int = 2;
pub const VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkGeometryFlagBitsKHR = c_uint;
pub const VkGeometryFlagBitsKHR = enum_VkGeometryFlagBitsKHR;
pub const VkGeometryFlagsKHR = VkFlags;
pub const VkGeometryFlagsNV = VkGeometryFlagsKHR;
pub const VkGeometryFlagBitsNV = VkGeometryFlagBitsKHR;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR: c_int = 1;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR: c_int = 2;
pub const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR: c_int = 4;
pub const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR: c_int = 8;
pub const VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT: c_int = 16;
pub const VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT: c_int = 32;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR: c_int = 2;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV: c_int = 1;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV: c_int = 2;
pub const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV: c_int = 4;
pub const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV: c_int = 8;
pub const VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkGeometryInstanceFlagBitsKHR = c_uint;
pub const VkGeometryInstanceFlagBitsKHR = enum_VkGeometryInstanceFlagBitsKHR;
pub const VkGeometryInstanceFlagsKHR = VkFlags;
pub const VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagsKHR;
pub const VkGeometryInstanceFlagBitsNV = VkGeometryInstanceFlagBitsKHR;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR: c_int = 1;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR: c_int = 2;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR: c_int = 4;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR: c_int = 8;
pub const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR: c_int = 16;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV: c_int = 32;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT: c_int = 64;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT: c_int = 128;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT: c_int = 256;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR: c_int = 2048;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV: c_int = 1;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV: c_int = 2;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV: c_int = 4;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV: c_int = 8;
pub const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV: c_int = 16;
pub const VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkBuildAccelerationStructureFlagBitsKHR = c_uint;
pub const VkBuildAccelerationStructureFlagBitsKHR = enum_VkBuildAccelerationStructureFlagBitsKHR;
pub const VkBuildAccelerationStructureFlagsKHR = VkFlags;
pub const VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR;
pub const VkBuildAccelerationStructureFlagBitsNV = VkBuildAccelerationStructureFlagBitsKHR;
pub const struct_VkRayTracingShaderGroupCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkRayTracingShaderGroupTypeKHR = @import("std").mem.zeroes(VkRayTracingShaderGroupTypeKHR),
    generalShader: u32 = @import("std").mem.zeroes(u32),
    closestHitShader: u32 = @import("std").mem.zeroes(u32),
    anyHitShader: u32 = @import("std").mem.zeroes(u32),
    intersectionShader: u32 = @import("std").mem.zeroes(u32),
};
pub const VkRayTracingShaderGroupCreateInfoNV = struct_VkRayTracingShaderGroupCreateInfoNV;
pub const struct_VkRayTracingPipelineCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    groupCount: u32 = @import("std").mem.zeroes(u32),
    pGroups: [*c]const VkRayTracingShaderGroupCreateInfoNV = @import("std").mem.zeroes([*c]const VkRayTracingShaderGroupCreateInfoNV),
    maxRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
};
pub const VkRayTracingPipelineCreateInfoNV = struct_VkRayTracingPipelineCreateInfoNV;
pub const struct_VkGeometryTrianglesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    vertexOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    vertexCount: u32 = @import("std").mem.zeroes(u32),
    vertexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    vertexFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    indexData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    indexOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    indexCount: u32 = @import("std").mem.zeroes(u32),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    transformData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    transformOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkGeometryTrianglesNV = struct_VkGeometryTrianglesNV;
pub const struct_VkGeometryAABBNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    aabbData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    numAABBs: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkGeometryAABBNV = struct_VkGeometryAABBNV;
pub const struct_VkGeometryDataNV = extern struct {
    triangles: VkGeometryTrianglesNV = @import("std").mem.zeroes(VkGeometryTrianglesNV),
    aabbs: VkGeometryAABBNV = @import("std").mem.zeroes(VkGeometryAABBNV),
};
pub const VkGeometryDataNV = struct_VkGeometryDataNV;
pub const struct_VkGeometryNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    geometryType: VkGeometryTypeKHR = @import("std").mem.zeroes(VkGeometryTypeKHR),
    geometry: VkGeometryDataNV = @import("std").mem.zeroes(VkGeometryDataNV),
    flags: VkGeometryFlagsKHR = @import("std").mem.zeroes(VkGeometryFlagsKHR),
};
pub const VkGeometryNV = struct_VkGeometryNV;
pub const struct_VkAccelerationStructureInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkAccelerationStructureTypeNV = @import("std").mem.zeroes(VkAccelerationStructureTypeNV),
    flags: VkBuildAccelerationStructureFlagsNV = @import("std").mem.zeroes(VkBuildAccelerationStructureFlagsNV),
    instanceCount: u32 = @import("std").mem.zeroes(u32),
    geometryCount: u32 = @import("std").mem.zeroes(u32),
    pGeometries: [*c]const VkGeometryNV = @import("std").mem.zeroes([*c]const VkGeometryNV),
};
pub const VkAccelerationStructureInfoNV = struct_VkAccelerationStructureInfoNV;
pub const struct_VkAccelerationStructureCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    compactedSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    info: VkAccelerationStructureInfoNV = @import("std").mem.zeroes(VkAccelerationStructureInfoNV),
};
pub const VkAccelerationStructureCreateInfoNV = struct_VkAccelerationStructureCreateInfoNV;
pub const struct_VkBindAccelerationStructureMemoryInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructure: VkAccelerationStructureNV = @import("std").mem.zeroes(VkAccelerationStructureNV),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    deviceIndexCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkBindAccelerationStructureMemoryInfoNV = struct_VkBindAccelerationStructureMemoryInfoNV;
pub const struct_VkWriteDescriptorSetAccelerationStructureNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructureCount: u32 = @import("std").mem.zeroes(u32),
    pAccelerationStructures: [*c]const VkAccelerationStructureNV = @import("std").mem.zeroes([*c]const VkAccelerationStructureNV),
};
pub const VkWriteDescriptorSetAccelerationStructureNV = struct_VkWriteDescriptorSetAccelerationStructureNV;
pub const struct_VkAccelerationStructureMemoryRequirementsInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkAccelerationStructureMemoryRequirementsTypeNV = @import("std").mem.zeroes(VkAccelerationStructureMemoryRequirementsTypeNV),
    accelerationStructure: VkAccelerationStructureNV = @import("std").mem.zeroes(VkAccelerationStructureNV),
};
pub const VkAccelerationStructureMemoryRequirementsInfoNV = struct_VkAccelerationStructureMemoryRequirementsInfoNV;
pub const struct_VkPhysicalDeviceRayTracingPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderGroupHandleSize: u32 = @import("std").mem.zeroes(u32),
    maxRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    maxShaderGroupStride: u32 = @import("std").mem.zeroes(u32),
    shaderGroupBaseAlignment: u32 = @import("std").mem.zeroes(u32),
    maxGeometryCount: u64 = @import("std").mem.zeroes(u64),
    maxInstanceCount: u64 = @import("std").mem.zeroes(u64),
    maxTriangleCount: u64 = @import("std").mem.zeroes(u64),
    maxDescriptorSetAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceRayTracingPropertiesNV = struct_VkPhysicalDeviceRayTracingPropertiesNV;
pub const struct_VkTransformMatrixKHR = extern struct {
    matrix: [3][4]f32 = @import("std").mem.zeroes([3][4]f32),
};
pub const VkTransformMatrixKHR = struct_VkTransformMatrixKHR;
pub const VkTransformMatrixNV = VkTransformMatrixKHR;
pub const struct_VkAabbPositionsKHR = extern struct {
    minX: f32 = @import("std").mem.zeroes(f32),
    minY: f32 = @import("std").mem.zeroes(f32),
    minZ: f32 = @import("std").mem.zeroes(f32),
    maxX: f32 = @import("std").mem.zeroes(f32),
    maxY: f32 = @import("std").mem.zeroes(f32),
    maxZ: f32 = @import("std").mem.zeroes(f32),
};
pub const VkAabbPositionsKHR = struct_VkAabbPositionsKHR;
pub const VkAabbPositionsNV = VkAabbPositionsKHR;
// /usr/include/vulkan/vulkan_core.h:14878:35: warning: struct demoted to opaque type - has bitfield
pub const struct_VkAccelerationStructureInstanceKHR = opaque {};
pub const VkAccelerationStructureInstanceKHR = struct_VkAccelerationStructureInstanceKHR;
pub const VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR;
pub const PFN_vkCreateAccelerationStructureNV = ?*const fn (VkDevice, [*c]const VkAccelerationStructureCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkAccelerationStructureNV) callconv(.C) VkResult;
pub const PFN_vkDestroyAccelerationStructureNV = ?*const fn (VkDevice, VkAccelerationStructureNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetAccelerationStructureMemoryRequirementsNV = ?*const fn (VkDevice, [*c]const VkAccelerationStructureMemoryRequirementsInfoNV, [*c]VkMemoryRequirements2KHR) callconv(.C) void;
pub const PFN_vkBindAccelerationStructureMemoryNV = ?*const fn (VkDevice, u32, [*c]const VkBindAccelerationStructureMemoryInfoNV) callconv(.C) VkResult;
pub const PFN_vkCmdBuildAccelerationStructureNV = ?*const fn (VkCommandBuffer, [*c]const VkAccelerationStructureInfoNV, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdCopyAccelerationStructureNV = ?*const fn (VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeKHR) callconv(.C) void;
pub const PFN_vkCmdTraceRaysNV = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCreateRayTracingPipelinesNV = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkRayTracingPipelineCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkGetRayTracingShaderGroupHandlesKHR = ?*const fn (VkDevice, VkPipeline, u32, u32, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetRayTracingShaderGroupHandlesNV = ?*const fn (VkDevice, VkPipeline, u32, u32, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetAccelerationStructureHandleNV = ?*const fn (VkDevice, VkAccelerationStructureNV, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCmdWriteAccelerationStructuresPropertiesNV = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureNV, VkQueryType, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkCompileDeferredNV = ?*const fn (VkDevice, VkPipeline, u32) callconv(.C) VkResult;
pub const struct_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    representativeFragmentTest: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV = struct_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;
pub const struct_VkPipelineRepresentativeFragmentTestStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    representativeFragmentTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPipelineRepresentativeFragmentTestStateCreateInfoNV = struct_VkPipelineRepresentativeFragmentTestStateCreateInfoNV;
pub const struct_VkPhysicalDeviceImageViewImageFormatInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageViewType: VkImageViewType = @import("std").mem.zeroes(VkImageViewType),
};
pub const VkPhysicalDeviceImageViewImageFormatInfoEXT = struct_VkPhysicalDeviceImageViewImageFormatInfoEXT;
pub const struct_VkFilterCubicImageViewImageFormatPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    filterCubic: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterCubicMinmax: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkFilterCubicImageViewImageFormatPropertiesEXT = struct_VkFilterCubicImageViewImageFormatPropertiesEXT;
pub const VkQueueGlobalPriorityEXT = VkQueueGlobalPriority;
pub const VkDeviceQueueGlobalPriorityCreateInfoEXT = VkDeviceQueueGlobalPriorityCreateInfo;
pub const struct_VkImportMemoryHostPointerInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
    pHostPointer: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkImportMemoryHostPointerInfoEXT = struct_VkImportMemoryHostPointerInfoEXT;
pub const struct_VkMemoryHostPointerPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryTypeBits: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryHostPointerPropertiesEXT = struct_VkMemoryHostPointerPropertiesEXT;
pub const struct_VkPhysicalDeviceExternalMemoryHostPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minImportedHostPointerAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceExternalMemoryHostPropertiesEXT = struct_VkPhysicalDeviceExternalMemoryHostPropertiesEXT;
pub const PFN_vkGetMemoryHostPointerPropertiesEXT = ?*const fn (VkDevice, VkExternalMemoryHandleTypeFlagBits, ?*const anyopaque, [*c]VkMemoryHostPointerPropertiesEXT) callconv(.C) VkResult;
pub const PFN_vkCmdWriteBufferMarkerAMD = ?*const fn (VkCommandBuffer, VkPipelineStageFlagBits, VkBuffer, VkDeviceSize, u32) callconv(.C) void;
pub const PFN_vkCmdWriteBufferMarker2AMD = ?*const fn (VkCommandBuffer, VkPipelineStageFlags2, VkBuffer, VkDeviceSize, u32) callconv(.C) void;
pub const VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkPipelineCompilerControlFlagBitsAMD = c_uint;
pub const VkPipelineCompilerControlFlagBitsAMD = enum_VkPipelineCompilerControlFlagBitsAMD;
pub const VkPipelineCompilerControlFlagsAMD = VkFlags;
pub const struct_VkPipelineCompilerControlCreateInfoAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    compilerControlFlags: VkPipelineCompilerControlFlagsAMD = @import("std").mem.zeroes(VkPipelineCompilerControlFlagsAMD),
};
pub const VkPipelineCompilerControlCreateInfoAMD = struct_VkPipelineCompilerControlCreateInfoAMD;
pub const VkTimeDomainEXT = VkTimeDomainKHR;
pub const VkCalibratedTimestampInfoEXT = VkCalibratedTimestampInfoKHR;
pub const PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkTimeDomainKHR) callconv(.C) VkResult;
pub const PFN_vkGetCalibratedTimestampsEXT = ?*const fn (VkDevice, u32, [*c]const VkCalibratedTimestampInfoKHR, [*c]u64, [*c]u64) callconv(.C) VkResult;
pub const struct_VkPhysicalDeviceShaderCorePropertiesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderEngineCount: u32 = @import("std").mem.zeroes(u32),
    shaderArraysPerEngineCount: u32 = @import("std").mem.zeroes(u32),
    computeUnitsPerShaderArray: u32 = @import("std").mem.zeroes(u32),
    simdPerComputeUnit: u32 = @import("std").mem.zeroes(u32),
    wavefrontsPerSimd: u32 = @import("std").mem.zeroes(u32),
    wavefrontSize: u32 = @import("std").mem.zeroes(u32),
    sgprsPerSimd: u32 = @import("std").mem.zeroes(u32),
    minSgprAllocation: u32 = @import("std").mem.zeroes(u32),
    maxSgprAllocation: u32 = @import("std").mem.zeroes(u32),
    sgprAllocationGranularity: u32 = @import("std").mem.zeroes(u32),
    vgprsPerSimd: u32 = @import("std").mem.zeroes(u32),
    minVgprAllocation: u32 = @import("std").mem.zeroes(u32),
    maxVgprAllocation: u32 = @import("std").mem.zeroes(u32),
    vgprAllocationGranularity: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderCorePropertiesAMD = struct_VkPhysicalDeviceShaderCorePropertiesAMD;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD: c_int = 0;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD: c_int = 1;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD: c_int = 2;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkMemoryOverallocationBehaviorAMD = c_uint;
pub const VkMemoryOverallocationBehaviorAMD = enum_VkMemoryOverallocationBehaviorAMD;
pub const struct_VkDeviceMemoryOverallocationCreateInfoAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    overallocationBehavior: VkMemoryOverallocationBehaviorAMD = @import("std").mem.zeroes(VkMemoryOverallocationBehaviorAMD),
};
pub const VkDeviceMemoryOverallocationCreateInfoAMD = struct_VkDeviceMemoryOverallocationCreateInfoAMD;
pub const struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxVertexAttribDivisor: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;
pub const VkVertexInputBindingDivisorDescriptionEXT = VkVertexInputBindingDivisorDescription;
pub const VkPipelineVertexInputDivisorStateCreateInfoEXT = VkPipelineVertexInputDivisorStateCreateInfo;
pub const VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT = VkPhysicalDeviceVertexAttributeDivisorFeatures;
pub const VkPipelineCreationFeedbackFlagBitsEXT = VkPipelineCreationFeedbackFlagBits;
pub const VkPipelineCreationFeedbackFlagsEXT = VkPipelineCreationFeedbackFlags;
pub const VkPipelineCreationFeedbackCreateInfoEXT = VkPipelineCreationFeedbackCreateInfo;
pub const VkPipelineCreationFeedbackEXT = VkPipelineCreationFeedback;
pub const VkPhysicalDeviceComputeShaderDerivativesFeaturesNV = VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR;
pub const struct_VkPhysicalDeviceMeshShaderFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    taskShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    meshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMeshShaderFeaturesNV = struct_VkPhysicalDeviceMeshShaderFeaturesNV;
pub const struct_VkPhysicalDeviceMeshShaderPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxDrawMeshTasksCount: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxTaskTotalMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxTaskOutputCount: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxMeshTotalMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputVertices: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputPrimitives: u32 = @import("std").mem.zeroes(u32),
    maxMeshMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerVertexGranularity: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerPrimitiveGranularity: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceMeshShaderPropertiesNV = struct_VkPhysicalDeviceMeshShaderPropertiesNV;
pub const struct_VkDrawMeshTasksIndirectCommandNV = extern struct {
    taskCount: u32 = @import("std").mem.zeroes(u32),
    firstTask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDrawMeshTasksIndirectCommandNV = struct_VkDrawMeshTasksIndirectCommandNV;
pub const PFN_vkCmdDrawMeshTasksNV = ?*const fn (VkCommandBuffer, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectNV = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectCountNV = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV = VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
pub const struct_VkPhysicalDeviceShaderImageFootprintFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageFootprint: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderImageFootprintFeaturesNV = struct_VkPhysicalDeviceShaderImageFootprintFeaturesNV;
pub const struct_VkPipelineViewportExclusiveScissorStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    exclusiveScissorCount: u32 = @import("std").mem.zeroes(u32),
    pExclusiveScissors: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkPipelineViewportExclusiveScissorStateCreateInfoNV = struct_VkPipelineViewportExclusiveScissorStateCreateInfoNV;
pub const struct_VkPhysicalDeviceExclusiveScissorFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    exclusiveScissor: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExclusiveScissorFeaturesNV = struct_VkPhysicalDeviceExclusiveScissorFeaturesNV;
pub const PFN_vkCmdSetExclusiveScissorEnableNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetExclusiveScissorNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkRect2D) callconv(.C) void;
pub const struct_VkQueueFamilyCheckpointPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    checkpointExecutionStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
};
pub const VkQueueFamilyCheckpointPropertiesNV = struct_VkQueueFamilyCheckpointPropertiesNV;
pub const struct_VkCheckpointDataNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stage: VkPipelineStageFlagBits = @import("std").mem.zeroes(VkPipelineStageFlagBits),
    pCheckpointMarker: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkCheckpointDataNV = struct_VkCheckpointDataNV;
pub const struct_VkQueueFamilyCheckpointProperties2NV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    checkpointExecutionStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
};
pub const VkQueueFamilyCheckpointProperties2NV = struct_VkQueueFamilyCheckpointProperties2NV;
pub const struct_VkCheckpointData2NV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stage: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    pCheckpointMarker: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkCheckpointData2NV = struct_VkCheckpointData2NV;
pub const PFN_vkCmdSetCheckpointNV = ?*const fn (VkCommandBuffer, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkGetQueueCheckpointDataNV = ?*const fn (VkQueue, [*c]u32, [*c]VkCheckpointDataNV) callconv(.C) void;
pub const PFN_vkGetQueueCheckpointData2NV = ?*const fn (VkQueue, [*c]u32, [*c]VkCheckpointData2NV) callconv(.C) void;
pub const struct_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderIntegerFunctions2: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = struct_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
pub const struct_VkPerformanceConfigurationINTEL_T = opaque {};
pub const VkPerformanceConfigurationINTEL = ?*struct_VkPerformanceConfigurationINTEL_T;
pub const VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL: c_int = 0;
pub const VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceConfigurationTypeINTEL = c_uint;
pub const VkPerformanceConfigurationTypeINTEL = enum_VkPerformanceConfigurationTypeINTEL;
pub const VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL: c_int = 0;
pub const VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkQueryPoolSamplingModeINTEL = c_uint;
pub const VkQueryPoolSamplingModeINTEL = enum_VkQueryPoolSamplingModeINTEL;
pub const VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL: c_int = 0;
pub const VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL: c_int = 1;
pub const VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceOverrideTypeINTEL = c_uint;
pub const VkPerformanceOverrideTypeINTEL = enum_VkPerformanceOverrideTypeINTEL;
pub const VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL: c_int = 0;
pub const VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL: c_int = 1;
pub const VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceParameterTypeINTEL = c_uint;
pub const VkPerformanceParameterTypeINTEL = enum_VkPerformanceParameterTypeINTEL;
pub const VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL: c_int = 0;
pub const VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL: c_int = 1;
pub const VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL: c_int = 2;
pub const VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL: c_int = 3;
pub const VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL: c_int = 4;
pub const VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceValueTypeINTEL = c_uint;
pub const VkPerformanceValueTypeINTEL = enum_VkPerformanceValueTypeINTEL;
pub const union_VkPerformanceValueDataINTEL = extern union {
    value32: u32,
    value64: u64,
    valueFloat: f32,
    valueBool: VkBool32,
    valueString: [*c]const u8,
};
pub const VkPerformanceValueDataINTEL = union_VkPerformanceValueDataINTEL;
pub const struct_VkPerformanceValueINTEL = extern struct {
    type: VkPerformanceValueTypeINTEL = @import("std").mem.zeroes(VkPerformanceValueTypeINTEL),
    data: VkPerformanceValueDataINTEL = @import("std").mem.zeroes(VkPerformanceValueDataINTEL),
};
pub const VkPerformanceValueINTEL = struct_VkPerformanceValueINTEL;
pub const struct_VkInitializePerformanceApiInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkInitializePerformanceApiInfoINTEL = struct_VkInitializePerformanceApiInfoINTEL;
pub const struct_VkQueryPoolPerformanceQueryCreateInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    performanceCountersSampling: VkQueryPoolSamplingModeINTEL = @import("std").mem.zeroes(VkQueryPoolSamplingModeINTEL),
};
pub const VkQueryPoolPerformanceQueryCreateInfoINTEL = struct_VkQueryPoolPerformanceQueryCreateInfoINTEL;
pub const VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL;
pub const struct_VkPerformanceMarkerInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    marker: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPerformanceMarkerInfoINTEL = struct_VkPerformanceMarkerInfoINTEL;
pub const struct_VkPerformanceStreamMarkerInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    marker: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPerformanceStreamMarkerInfoINTEL = struct_VkPerformanceStreamMarkerInfoINTEL;
pub const struct_VkPerformanceOverrideInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkPerformanceOverrideTypeINTEL = @import("std").mem.zeroes(VkPerformanceOverrideTypeINTEL),
    enable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    parameter: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPerformanceOverrideInfoINTEL = struct_VkPerformanceOverrideInfoINTEL;
pub const struct_VkPerformanceConfigurationAcquireInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkPerformanceConfigurationTypeINTEL = @import("std").mem.zeroes(VkPerformanceConfigurationTypeINTEL),
};
pub const VkPerformanceConfigurationAcquireInfoINTEL = struct_VkPerformanceConfigurationAcquireInfoINTEL;
pub const PFN_vkInitializePerformanceApiINTEL = ?*const fn (VkDevice, [*c]const VkInitializePerformanceApiInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkUninitializePerformanceApiINTEL = ?*const fn (VkDevice) callconv(.C) void;
pub const PFN_vkCmdSetPerformanceMarkerINTEL = ?*const fn (VkCommandBuffer, [*c]const VkPerformanceMarkerInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkCmdSetPerformanceStreamMarkerINTEL = ?*const fn (VkCommandBuffer, [*c]const VkPerformanceStreamMarkerInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkCmdSetPerformanceOverrideINTEL = ?*const fn (VkCommandBuffer, [*c]const VkPerformanceOverrideInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkAcquirePerformanceConfigurationINTEL = ?*const fn (VkDevice, [*c]const VkPerformanceConfigurationAcquireInfoINTEL, [*c]VkPerformanceConfigurationINTEL) callconv(.C) VkResult;
pub const PFN_vkReleasePerformanceConfigurationINTEL = ?*const fn (VkDevice, VkPerformanceConfigurationINTEL) callconv(.C) VkResult;
pub const PFN_vkQueueSetPerformanceConfigurationINTEL = ?*const fn (VkQueue, VkPerformanceConfigurationINTEL) callconv(.C) VkResult;
pub const PFN_vkGetPerformanceParameterINTEL = ?*const fn (VkDevice, VkPerformanceParameterTypeINTEL, [*c]VkPerformanceValueINTEL) callconv(.C) VkResult;
pub const struct_VkPhysicalDevicePCIBusInfoPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pciDomain: u32 = @import("std").mem.zeroes(u32),
    pciBus: u32 = @import("std").mem.zeroes(u32),
    pciDevice: u32 = @import("std").mem.zeroes(u32),
    pciFunction: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDevicePCIBusInfoPropertiesEXT = struct_VkPhysicalDevicePCIBusInfoPropertiesEXT;
pub const struct_VkDisplayNativeHdrSurfaceCapabilitiesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    localDimmingSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDisplayNativeHdrSurfaceCapabilitiesAMD = struct_VkDisplayNativeHdrSurfaceCapabilitiesAMD;
pub const struct_VkSwapchainDisplayNativeHdrCreateInfoAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    localDimmingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSwapchainDisplayNativeHdrCreateInfoAMD = struct_VkSwapchainDisplayNativeHdrCreateInfoAMD;
pub const PFN_vkSetLocalDimmingAMD = ?*const fn (VkDevice, VkSwapchainKHR, VkBool32) callconv(.C) void;
pub const struct_VkPhysicalDeviceFragmentDensityMapFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityMap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentDensityMapDynamic: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentDensityMapNonSubsampledImages: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentDensityMapFeaturesEXT = struct_VkPhysicalDeviceFragmentDensityMapFeaturesEXT;
pub const struct_VkPhysicalDeviceFragmentDensityMapPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minFragmentDensityTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentDensityTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    fragmentDensityInvocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentDensityMapPropertiesEXT = struct_VkPhysicalDeviceFragmentDensityMapPropertiesEXT;
pub const struct_VkRenderPassFragmentDensityMapCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fragmentDensityMapAttachment: VkAttachmentReference = @import("std").mem.zeroes(VkAttachmentReference),
};
pub const VkRenderPassFragmentDensityMapCreateInfoEXT = struct_VkRenderPassFragmentDensityMapCreateInfoEXT;
pub const struct_VkRenderingFragmentDensityMapAttachmentInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkRenderingFragmentDensityMapAttachmentInfoEXT = struct_VkRenderingFragmentDensityMapAttachmentInfoEXT;
pub const VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures;
pub const VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = VkPhysicalDeviceSubgroupSizeControlFeatures;
pub const VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = VkPhysicalDeviceSubgroupSizeControlProperties;
pub const VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
pub const VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkShaderCorePropertiesFlagBitsAMD = c_uint;
pub const VkShaderCorePropertiesFlagBitsAMD = enum_VkShaderCorePropertiesFlagBitsAMD;
pub const VkShaderCorePropertiesFlagsAMD = VkFlags;
pub const struct_VkPhysicalDeviceShaderCoreProperties2AMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD = @import("std").mem.zeroes(VkShaderCorePropertiesFlagsAMD),
    activeComputeUnitCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderCoreProperties2AMD = struct_VkPhysicalDeviceShaderCoreProperties2AMD;
pub const struct_VkPhysicalDeviceCoherentMemoryFeaturesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceCoherentMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCoherentMemoryFeaturesAMD = struct_VkPhysicalDeviceCoherentMemoryFeaturesAMD;
pub const struct_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderImageInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT = struct_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT;
pub const struct_VkPhysicalDeviceMemoryBudgetPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    heapBudget: [16]VkDeviceSize = @import("std").mem.zeroes([16]VkDeviceSize),
    heapUsage: [16]VkDeviceSize = @import("std").mem.zeroes([16]VkDeviceSize),
};
pub const VkPhysicalDeviceMemoryBudgetPropertiesEXT = struct_VkPhysicalDeviceMemoryBudgetPropertiesEXT;
pub const struct_VkPhysicalDeviceMemoryPriorityFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryPriority: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMemoryPriorityFeaturesEXT = struct_VkPhysicalDeviceMemoryPriorityFeaturesEXT;
pub const struct_VkMemoryPriorityAllocateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    priority: f32 = @import("std").mem.zeroes(f32),
};
pub const VkMemoryPriorityAllocateInfoEXT = struct_VkMemoryPriorityAllocateInfoEXT;
pub const struct_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dedicatedAllocationImageAliasing: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = struct_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
pub const struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    bufferDeviceAddress: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressMultiDevice: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceBufferDeviceAddressFeaturesEXT = struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub const VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub const VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo;
pub const struct_VkBufferDeviceAddressCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
};
pub const VkBufferDeviceAddressCreateInfoEXT = struct_VkBufferDeviceAddressCreateInfoEXT;
pub const PFN_vkGetBufferDeviceAddressEXT = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) VkDeviceAddress;
pub const VkToolPurposeFlagBitsEXT = VkToolPurposeFlagBits;
pub const VkToolPurposeFlagsEXT = VkToolPurposeFlags;
pub const VkPhysicalDeviceToolPropertiesEXT = VkPhysicalDeviceToolProperties;
pub const PFN_vkGetPhysicalDeviceToolPropertiesEXT = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkPhysicalDeviceToolProperties) callconv(.C) VkResult;
pub const VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo;
pub const VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT: c_int = 0;
pub const VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT: c_int = 1;
pub const VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT: c_int = 2;
pub const VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT: c_int = 3;
pub const VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT: c_int = 4;
pub const VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationFeatureEnableEXT = c_uint;
pub const VkValidationFeatureEnableEXT = enum_VkValidationFeatureEnableEXT;
pub const VK_VALIDATION_FEATURE_DISABLE_ALL_EXT: c_int = 0;
pub const VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT: c_int = 1;
pub const VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT: c_int = 2;
pub const VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT: c_int = 3;
pub const VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT: c_int = 4;
pub const VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT: c_int = 5;
pub const VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT: c_int = 6;
pub const VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT: c_int = 7;
pub const VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationFeatureDisableEXT = c_uint;
pub const VkValidationFeatureDisableEXT = enum_VkValidationFeatureDisableEXT;
pub const struct_VkValidationFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    enabledValidationFeatureCount: u32 = @import("std").mem.zeroes(u32),
    pEnabledValidationFeatures: [*c]const VkValidationFeatureEnableEXT = @import("std").mem.zeroes([*c]const VkValidationFeatureEnableEXT),
    disabledValidationFeatureCount: u32 = @import("std").mem.zeroes(u32),
    pDisabledValidationFeatures: [*c]const VkValidationFeatureDisableEXT = @import("std").mem.zeroes([*c]const VkValidationFeatureDisableEXT),
};
pub const VkValidationFeaturesEXT = struct_VkValidationFeaturesEXT;
pub const VkComponentTypeNV = VkComponentTypeKHR;
pub const VkScopeNV = VkScopeKHR;
pub const struct_VkCooperativeMatrixPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    MSize: u32 = @import("std").mem.zeroes(u32),
    NSize: u32 = @import("std").mem.zeroes(u32),
    KSize: u32 = @import("std").mem.zeroes(u32),
    AType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    BType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    CType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    DType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    scope: VkScopeNV = @import("std").mem.zeroes(VkScopeNV),
};
pub const VkCooperativeMatrixPropertiesNV = struct_VkCooperativeMatrixPropertiesNV;
pub const struct_VkPhysicalDeviceCooperativeMatrixFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrix: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixRobustBufferAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCooperativeMatrixFeaturesNV = struct_VkPhysicalDeviceCooperativeMatrixFeaturesNV;
pub const struct_VkPhysicalDeviceCooperativeMatrixPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrixSupportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
};
pub const VkPhysicalDeviceCooperativeMatrixPropertiesNV = struct_VkPhysicalDeviceCooperativeMatrixPropertiesNV;
pub const PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkCooperativeMatrixPropertiesNV) callconv(.C) VkResult;
pub const VK_COVERAGE_REDUCTION_MODE_MERGE_NV: c_int = 0;
pub const VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV: c_int = 1;
pub const VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkCoverageReductionModeNV = c_uint;
pub const VkCoverageReductionModeNV = enum_VkCoverageReductionModeNV;
pub const VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceCoverageReductionModeFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    coverageReductionMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCoverageReductionModeFeaturesNV = struct_VkPhysicalDeviceCoverageReductionModeFeaturesNV;
pub const struct_VkPipelineCoverageReductionStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCoverageReductionStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineCoverageReductionStateCreateFlagsNV),
    coverageReductionMode: VkCoverageReductionModeNV = @import("std").mem.zeroes(VkCoverageReductionModeNV),
};
pub const VkPipelineCoverageReductionStateCreateInfoNV = struct_VkPipelineCoverageReductionStateCreateInfoNV;
pub const struct_VkFramebufferMixedSamplesCombinationNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    coverageReductionMode: VkCoverageReductionModeNV = @import("std").mem.zeroes(VkCoverageReductionModeNV),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    depthStencilSamples: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    colorSamples: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
};
pub const VkFramebufferMixedSamplesCombinationNV = struct_VkFramebufferMixedSamplesCombinationNV;
pub const PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkFramebufferMixedSamplesCombinationNV) callconv(.C) VkResult;
pub const struct_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentShaderSampleInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShaderPixelInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShaderShadingRateInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT = struct_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;
pub const struct_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ycbcrImageArrays: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT = struct_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;
pub const VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT: c_int = 0;
pub const VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT: c_int = 1;
pub const VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkProvokingVertexModeEXT = c_uint;
pub const VkProvokingVertexModeEXT = enum_VkProvokingVertexModeEXT;
pub const struct_VkPhysicalDeviceProvokingVertexFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    provokingVertexLast: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackPreservesProvokingVertex: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceProvokingVertexFeaturesEXT = struct_VkPhysicalDeviceProvokingVertexFeaturesEXT;
pub const struct_VkPhysicalDeviceProvokingVertexPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    provokingVertexModePerPipeline: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackPreservesTriangleFanProvokingVertex: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceProvokingVertexPropertiesEXT = struct_VkPhysicalDeviceProvokingVertexPropertiesEXT;
pub const struct_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    provokingVertexMode: VkProvokingVertexModeEXT = @import("std").mem.zeroes(VkProvokingVertexModeEXT),
};
pub const VkPipelineRasterizationProvokingVertexStateCreateInfoEXT = struct_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT;
pub const VkHeadlessSurfaceCreateFlagsEXT = VkFlags;
pub const struct_VkHeadlessSurfaceCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHeadlessSurfaceCreateFlagsEXT = @import("std").mem.zeroes(VkHeadlessSurfaceCreateFlagsEXT),
};
pub const VkHeadlessSurfaceCreateInfoEXT = struct_VkHeadlessSurfaceCreateInfoEXT;
pub const PFN_vkCreateHeadlessSurfaceEXT = ?*const fn (VkInstance, [*c]const VkHeadlessSurfaceCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkSurfaceKHR) callconv(.C) VkResult;
pub const VkLineRasterizationModeEXT = VkLineRasterizationMode;
pub const VkPhysicalDeviceLineRasterizationFeaturesEXT = VkPhysicalDeviceLineRasterizationFeatures;
pub const VkPhysicalDeviceLineRasterizationPropertiesEXT = VkPhysicalDeviceLineRasterizationProperties;
pub const VkPipelineRasterizationLineStateCreateInfoEXT = VkPipelineRasterizationLineStateCreateInfo;
pub const PFN_vkCmdSetLineStippleEXT = ?*const fn (VkCommandBuffer, u32, u16) callconv(.C) void;
pub const struct_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBufferFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat64AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat64AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderAtomicFloatFeaturesEXT = struct_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT;
pub const VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures;
pub const PFN_vkResetQueryPoolEXT = ?*const fn (VkDevice, VkQueryPool, u32, u32) callconv(.C) void;
pub const VkPhysicalDeviceIndexTypeUint8FeaturesEXT = VkPhysicalDeviceIndexTypeUint8Features;
pub const struct_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedDynamicState: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExtendedDynamicStateFeaturesEXT = struct_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT;
pub const PFN_vkCmdSetCullModeEXT = ?*const fn (VkCommandBuffer, VkCullModeFlags) callconv(.C) void;
pub const PFN_vkCmdSetFrontFaceEXT = ?*const fn (VkCommandBuffer, VkFrontFace) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveTopologyEXT = ?*const fn (VkCommandBuffer, VkPrimitiveTopology) callconv(.C) void;
pub const PFN_vkCmdSetViewportWithCountEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkViewport) callconv(.C) void;
pub const PFN_vkCmdSetScissorWithCountEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdBindVertexBuffers2EXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize, [*c]const VkDeviceSize, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdSetDepthTestEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthWriteEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthCompareOpEXT = ?*const fn (VkCommandBuffer, VkCompareOp) callconv(.C) void;
pub const PFN_vkCmdSetDepthBoundsTestEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilTestEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilOpEXT = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp) callconv(.C) void;
pub const VkHostImageCopyFlagBitsEXT = VkHostImageCopyFlagBits;
pub const VkHostImageCopyFlagsEXT = VkHostImageCopyFlags;
pub const VkPhysicalDeviceHostImageCopyFeaturesEXT = VkPhysicalDeviceHostImageCopyFeatures;
pub const VkPhysicalDeviceHostImageCopyPropertiesEXT = VkPhysicalDeviceHostImageCopyProperties;
pub const VkMemoryToImageCopyEXT = VkMemoryToImageCopy;
pub const VkImageToMemoryCopyEXT = VkImageToMemoryCopy;
pub const VkCopyMemoryToImageInfoEXT = VkCopyMemoryToImageInfo;
pub const VkCopyImageToMemoryInfoEXT = VkCopyImageToMemoryInfo;
pub const VkCopyImageToImageInfoEXT = VkCopyImageToImageInfo;
pub const VkHostImageLayoutTransitionInfoEXT = VkHostImageLayoutTransitionInfo;
pub const VkSubresourceHostMemcpySizeEXT = VkSubresourceHostMemcpySize;
pub const VkHostImageCopyDevicePerformanceQueryEXT = VkHostImageCopyDevicePerformanceQuery;
pub const VkSubresourceLayout2EXT = VkSubresourceLayout2;
pub const VkImageSubresource2EXT = VkImageSubresource2;
pub const PFN_vkCopyMemoryToImageEXT = ?*const fn (VkDevice, [*c]const VkCopyMemoryToImageInfo) callconv(.C) VkResult;
pub const PFN_vkCopyImageToMemoryEXT = ?*const fn (VkDevice, [*c]const VkCopyImageToMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkCopyImageToImageEXT = ?*const fn (VkDevice, [*c]const VkCopyImageToImageInfo) callconv(.C) VkResult;
pub const PFN_vkTransitionImageLayoutEXT = ?*const fn (VkDevice, u32, [*c]const VkHostImageLayoutTransitionInfo) callconv(.C) VkResult;
pub const PFN_vkGetImageSubresourceLayout2EXT = ?*const fn (VkDevice, VkImage, [*c]const VkImageSubresource2, [*c]VkSubresourceLayout2) callconv(.C) void;
pub const struct_VkPhysicalDeviceMapMemoryPlacedFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryMapPlaced: VkBool32 = @import("std").mem.zeroes(VkBool32),
    memoryMapRangePlaced: VkBool32 = @import("std").mem.zeroes(VkBool32),
    memoryUnmapReserve: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMapMemoryPlacedFeaturesEXT = struct_VkPhysicalDeviceMapMemoryPlacedFeaturesEXT;
pub const struct_VkPhysicalDeviceMapMemoryPlacedPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minPlacedMemoryMapAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceMapMemoryPlacedPropertiesEXT = struct_VkPhysicalDeviceMapMemoryPlacedPropertiesEXT;
pub const struct_VkMemoryMapPlacedInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pPlacedAddress: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkMemoryMapPlacedInfoEXT = struct_VkMemoryMapPlacedInfoEXT;
pub const struct_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBufferFloat16Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat16AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat16AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat64AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat16Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat16AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat16AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat64AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT = struct_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT;
pub const VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT: c_int = 1;
pub const VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT: c_int = 2;
pub const VK_PRESENT_SCALING_STRETCH_BIT_EXT: c_int = 4;
pub const VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkPresentScalingFlagBitsEXT = c_uint;
pub const VkPresentScalingFlagBitsEXT = enum_VkPresentScalingFlagBitsEXT;
pub const VkPresentScalingFlagsEXT = VkFlags;
pub const VK_PRESENT_GRAVITY_MIN_BIT_EXT: c_int = 1;
pub const VK_PRESENT_GRAVITY_MAX_BIT_EXT: c_int = 2;
pub const VK_PRESENT_GRAVITY_CENTERED_BIT_EXT: c_int = 4;
pub const VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkPresentGravityFlagBitsEXT = c_uint;
pub const VkPresentGravityFlagBitsEXT = enum_VkPresentGravityFlagBitsEXT;
pub const VkPresentGravityFlagsEXT = VkFlags;
pub const struct_VkSurfacePresentModeEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentMode: VkPresentModeKHR = @import("std").mem.zeroes(VkPresentModeKHR),
};
pub const VkSurfacePresentModeEXT = struct_VkSurfacePresentModeEXT;
pub const struct_VkSurfacePresentScalingCapabilitiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedPresentScaling: VkPresentScalingFlagsEXT = @import("std").mem.zeroes(VkPresentScalingFlagsEXT),
    supportedPresentGravityX: VkPresentGravityFlagsEXT = @import("std").mem.zeroes(VkPresentGravityFlagsEXT),
    supportedPresentGravityY: VkPresentGravityFlagsEXT = @import("std").mem.zeroes(VkPresentGravityFlagsEXT),
    minScaledImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxScaledImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkSurfacePresentScalingCapabilitiesEXT = struct_VkSurfacePresentScalingCapabilitiesEXT;
pub const struct_VkSurfacePresentModeCompatibilityEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentModeCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]VkPresentModeKHR = @import("std").mem.zeroes([*c]VkPresentModeKHR),
};
pub const VkSurfacePresentModeCompatibilityEXT = struct_VkSurfacePresentModeCompatibilityEXT;
pub const struct_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    swapchainMaintenance1: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT = struct_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT;
pub const struct_VkSwapchainPresentFenceInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pFences: [*c]const VkFence = @import("std").mem.zeroes([*c]const VkFence),
};
pub const VkSwapchainPresentFenceInfoEXT = struct_VkSwapchainPresentFenceInfoEXT;
pub const struct_VkSwapchainPresentModesCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentModeCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]const VkPresentModeKHR = @import("std").mem.zeroes([*c]const VkPresentModeKHR),
};
pub const VkSwapchainPresentModesCreateInfoEXT = struct_VkSwapchainPresentModesCreateInfoEXT;
pub const struct_VkSwapchainPresentModeInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]const VkPresentModeKHR = @import("std").mem.zeroes([*c]const VkPresentModeKHR),
};
pub const VkSwapchainPresentModeInfoEXT = struct_VkSwapchainPresentModeInfoEXT;
pub const struct_VkSwapchainPresentScalingCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    scalingBehavior: VkPresentScalingFlagsEXT = @import("std").mem.zeroes(VkPresentScalingFlagsEXT),
    presentGravityX: VkPresentGravityFlagsEXT = @import("std").mem.zeroes(VkPresentGravityFlagsEXT),
    presentGravityY: VkPresentGravityFlagsEXT = @import("std").mem.zeroes(VkPresentGravityFlagsEXT),
};
pub const VkSwapchainPresentScalingCreateInfoEXT = struct_VkSwapchainPresentScalingCreateInfoEXT;
pub const struct_VkReleaseSwapchainImagesInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
    imageIndexCount: u32 = @import("std").mem.zeroes(u32),
    pImageIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkReleaseSwapchainImagesInfoEXT = struct_VkReleaseSwapchainImagesInfoEXT;
pub const PFN_vkReleaseSwapchainImagesEXT = ?*const fn (VkDevice, [*c]const VkReleaseSwapchainImagesInfoEXT) callconv(.C) VkResult;
pub const VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;
pub const struct_VkIndirectCommandsLayoutNV_T = opaque {};
pub const VkIndirectCommandsLayoutNV = ?*struct_VkIndirectCommandsLayoutNV_T;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV: c_int = 0;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV: c_int = 1;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV: c_int = 2;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV: c_int = 3;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV: c_int = 4;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV: c_int = 5;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV: c_int = 6;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV: c_int = 7;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV: c_int = 1000328000;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV: c_int = 1000428003;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV: c_int = 1000428004;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkIndirectCommandsTokenTypeNV = c_uint;
pub const VkIndirectCommandsTokenTypeNV = enum_VkIndirectCommandsTokenTypeNV;
pub const VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV: c_int = 1;
pub const VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkIndirectStateFlagBitsNV = c_uint;
pub const VkIndirectStateFlagBitsNV = enum_VkIndirectStateFlagBitsNV;
pub const VkIndirectStateFlagsNV = VkFlags;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV: c_int = 1;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV: c_int = 2;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV: c_int = 4;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkIndirectCommandsLayoutUsageFlagBitsNV = c_uint;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV = enum_VkIndirectCommandsLayoutUsageFlagBitsNV;
pub const VkIndirectCommandsLayoutUsageFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxGraphicsShaderGroupCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectSequenceCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsTokenCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsStreamCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsTokenOffset: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsStreamStride: u32 = @import("std").mem.zeroes(u32),
    minSequencesCountBufferOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
    minSequencesIndexBufferOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
    minIndirectCommandsBufferOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV = struct_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV;
pub const struct_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceGeneratedCommands: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV = struct_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV;
pub const struct_VkGraphicsShaderGroupCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    pVertexInputState: [*c]const VkPipelineVertexInputStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineVertexInputStateCreateInfo),
    pTessellationState: [*c]const VkPipelineTessellationStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineTessellationStateCreateInfo),
};
pub const VkGraphicsShaderGroupCreateInfoNV = struct_VkGraphicsShaderGroupCreateInfoNV;
pub const struct_VkGraphicsPipelineShaderGroupsCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    groupCount: u32 = @import("std").mem.zeroes(u32),
    pGroups: [*c]const VkGraphicsShaderGroupCreateInfoNV = @import("std").mem.zeroes([*c]const VkGraphicsShaderGroupCreateInfoNV),
    pipelineCount: u32 = @import("std").mem.zeroes(u32),
    pPipelines: [*c]const VkPipeline = @import("std").mem.zeroes([*c]const VkPipeline),
};
pub const VkGraphicsPipelineShaderGroupsCreateInfoNV = struct_VkGraphicsPipelineShaderGroupsCreateInfoNV;
pub const struct_VkBindShaderGroupIndirectCommandNV = extern struct {
    groupIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkBindShaderGroupIndirectCommandNV = struct_VkBindShaderGroupIndirectCommandNV;
pub const struct_VkBindIndexBufferIndirectCommandNV = extern struct {
    bufferAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: u32 = @import("std").mem.zeroes(u32),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
};
pub const VkBindIndexBufferIndirectCommandNV = struct_VkBindIndexBufferIndirectCommandNV;
pub const struct_VkBindVertexBufferIndirectCommandNV = extern struct {
    bufferAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
};
pub const VkBindVertexBufferIndirectCommandNV = struct_VkBindVertexBufferIndirectCommandNV;
pub const struct_VkSetStateFlagsIndirectCommandNV = extern struct {
    data: u32 = @import("std").mem.zeroes(u32),
};
pub const VkSetStateFlagsIndirectCommandNV = struct_VkSetStateFlagsIndirectCommandNV;
pub const struct_VkIndirectCommandsStreamNV = extern struct {
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkIndirectCommandsStreamNV = struct_VkIndirectCommandsStreamNV;
pub const struct_VkIndirectCommandsLayoutTokenNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    tokenType: VkIndirectCommandsTokenTypeNV = @import("std").mem.zeroes(VkIndirectCommandsTokenTypeNV),
    stream: u32 = @import("std").mem.zeroes(u32),
    offset: u32 = @import("std").mem.zeroes(u32),
    vertexBindingUnit: u32 = @import("std").mem.zeroes(u32),
    vertexDynamicStride: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pushconstantPipelineLayout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    pushconstantShaderStageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    pushconstantOffset: u32 = @import("std").mem.zeroes(u32),
    pushconstantSize: u32 = @import("std").mem.zeroes(u32),
    indirectStateFlags: VkIndirectStateFlagsNV = @import("std").mem.zeroes(VkIndirectStateFlagsNV),
    indexTypeCount: u32 = @import("std").mem.zeroes(u32),
    pIndexTypes: [*c]const VkIndexType = @import("std").mem.zeroes([*c]const VkIndexType),
    pIndexTypeValues: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkIndirectCommandsLayoutTokenNV = struct_VkIndirectCommandsLayoutTokenNV;
pub const struct_VkIndirectCommandsLayoutCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkIndirectCommandsLayoutUsageFlagsNV = @import("std").mem.zeroes(VkIndirectCommandsLayoutUsageFlagsNV),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    tokenCount: u32 = @import("std").mem.zeroes(u32),
    pTokens: [*c]const VkIndirectCommandsLayoutTokenNV = @import("std").mem.zeroes([*c]const VkIndirectCommandsLayoutTokenNV),
    streamCount: u32 = @import("std").mem.zeroes(u32),
    pStreamStrides: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkIndirectCommandsLayoutCreateInfoNV = struct_VkIndirectCommandsLayoutCreateInfoNV;
pub const struct_VkGeneratedCommandsInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    indirectCommandsLayout: VkIndirectCommandsLayoutNV = @import("std").mem.zeroes(VkIndirectCommandsLayoutNV),
    streamCount: u32 = @import("std").mem.zeroes(u32),
    pStreams: [*c]const VkIndirectCommandsStreamNV = @import("std").mem.zeroes([*c]const VkIndirectCommandsStreamNV),
    sequencesCount: u32 = @import("std").mem.zeroes(u32),
    preprocessBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    preprocessOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    preprocessSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sequencesCountBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    sequencesCountOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sequencesIndexBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    sequencesIndexOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkGeneratedCommandsInfoNV = struct_VkGeneratedCommandsInfoNV;
pub const struct_VkGeneratedCommandsMemoryRequirementsInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    indirectCommandsLayout: VkIndirectCommandsLayoutNV = @import("std").mem.zeroes(VkIndirectCommandsLayoutNV),
    maxSequencesCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkGeneratedCommandsMemoryRequirementsInfoNV = struct_VkGeneratedCommandsMemoryRequirementsInfoNV;
pub const PFN_vkGetGeneratedCommandsMemoryRequirementsNV = ?*const fn (VkDevice, [*c]const VkGeneratedCommandsMemoryRequirementsInfoNV, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkCmdPreprocessGeneratedCommandsNV = ?*const fn (VkCommandBuffer, [*c]const VkGeneratedCommandsInfoNV) callconv(.C) void;
pub const PFN_vkCmdExecuteGeneratedCommandsNV = ?*const fn (VkCommandBuffer, VkBool32, [*c]const VkGeneratedCommandsInfoNV) callconv(.C) void;
pub const PFN_vkCmdBindPipelineShaderGroupNV = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipeline, u32) callconv(.C) void;
pub const PFN_vkCreateIndirectCommandsLayoutNV = ?*const fn (VkDevice, [*c]const VkIndirectCommandsLayoutCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkIndirectCommandsLayoutNV) callconv(.C) VkResult;
pub const PFN_vkDestroyIndirectCommandsLayoutNV = ?*const fn (VkDevice, VkIndirectCommandsLayoutNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const struct_VkPhysicalDeviceInheritedViewportScissorFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    inheritedViewportScissor2D: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceInheritedViewportScissorFeaturesNV = struct_VkPhysicalDeviceInheritedViewportScissorFeaturesNV;
pub const struct_VkCommandBufferInheritanceViewportScissorInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewportScissor2D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    viewportDepthCount: u32 = @import("std").mem.zeroes(u32),
    pViewportDepths: [*c]const VkViewport = @import("std").mem.zeroes([*c]const VkViewport),
};
pub const VkCommandBufferInheritanceViewportScissorInfoNV = struct_VkCommandBufferInheritanceViewportScissorInfoNV;
pub const struct_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    texelBufferAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT = struct_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;
pub const VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = VkPhysicalDeviceTexelBufferAlignmentProperties;
pub const struct_VkRenderPassTransformBeginInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
};
pub const VkRenderPassTransformBeginInfoQCOM = struct_VkRenderPassTransformBeginInfoQCOM;
pub const struct_VkCommandBufferInheritanceRenderPassTransformInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    renderArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
};
pub const VkCommandBufferInheritanceRenderPassTransformInfoQCOM = struct_VkCommandBufferInheritanceRenderPassTransformInfoQCOM;
pub const VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT: c_int = 0;
pub const VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT: c_int = 1;
pub const VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT: c_int = 2;
pub const VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDepthBiasRepresentationEXT = c_uint;
pub const VkDepthBiasRepresentationEXT = enum_VkDepthBiasRepresentationEXT;
pub const struct_VkPhysicalDeviceDepthBiasControlFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthBiasControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    leastRepresentableValueForceUnormRepresentation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    floatRepresentation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBiasExact: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthBiasControlFeaturesEXT = struct_VkPhysicalDeviceDepthBiasControlFeaturesEXT;
pub const struct_VkDepthBiasInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthBiasConstantFactor: f32 = @import("std").mem.zeroes(f32),
    depthBiasClamp: f32 = @import("std").mem.zeroes(f32),
    depthBiasSlopeFactor: f32 = @import("std").mem.zeroes(f32),
};
pub const VkDepthBiasInfoEXT = struct_VkDepthBiasInfoEXT;
pub const struct_VkDepthBiasRepresentationInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthBiasRepresentation: VkDepthBiasRepresentationEXT = @import("std").mem.zeroes(VkDepthBiasRepresentationEXT),
    depthBiasExact: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDepthBiasRepresentationInfoEXT = struct_VkDepthBiasRepresentationInfoEXT;
pub const PFN_vkCmdSetDepthBias2EXT = ?*const fn (VkCommandBuffer, [*c]const VkDepthBiasInfoEXT) callconv(.C) void;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT: c_int = 0;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT: c_int = 1;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT: c_int = 2;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT: c_int = 3;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT: c_int = 4;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceMemoryReportEventTypeEXT = c_uint;
pub const VkDeviceMemoryReportEventTypeEXT = enum_VkDeviceMemoryReportEventTypeEXT;
pub const VkDeviceMemoryReportFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceMemoryReport: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDeviceMemoryReportFeaturesEXT = struct_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT;
pub const struct_VkDeviceMemoryReportCallbackDataEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkDeviceMemoryReportFlagsEXT = @import("std").mem.zeroes(VkDeviceMemoryReportFlagsEXT),
    type: VkDeviceMemoryReportEventTypeEXT = @import("std").mem.zeroes(VkDeviceMemoryReportEventTypeEXT),
    memoryObjectId: u64 = @import("std").mem.zeroes(u64),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    objectType: VkObjectType = @import("std").mem.zeroes(VkObjectType),
    objectHandle: u64 = @import("std").mem.zeroes(u64),
    heapIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceMemoryReportCallbackDataEXT = struct_VkDeviceMemoryReportCallbackDataEXT;
pub const PFN_vkDeviceMemoryReportCallbackEXT = ?*const fn ([*c]const VkDeviceMemoryReportCallbackDataEXT, ?*anyopaque) callconv(.C) void;
pub const struct_VkDeviceDeviceMemoryReportCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceMemoryReportFlagsEXT = @import("std").mem.zeroes(VkDeviceMemoryReportFlagsEXT),
    pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT = @import("std").mem.zeroes(PFN_vkDeviceMemoryReportCallbackEXT),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkDeviceDeviceMemoryReportCreateInfoEXT = struct_VkDeviceDeviceMemoryReportCreateInfoEXT;
pub const PFN_vkAcquireDrmDisplayEXT = ?*const fn (VkPhysicalDevice, i32, VkDisplayKHR) callconv(.C) VkResult;
pub const PFN_vkGetDrmDisplayEXT = ?*const fn (VkPhysicalDevice, i32, u32, [*c]VkDisplayKHR) callconv(.C) VkResult;
pub const struct_VkPhysicalDeviceRobustness2FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustBufferAccess2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    robustImageAccess2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nullDescriptor: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRobustness2FeaturesEXT = struct_VkPhysicalDeviceRobustness2FeaturesEXT;
pub const struct_VkPhysicalDeviceRobustness2PropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustStorageBufferAccessSizeAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    robustUniformBufferAccessSizeAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceRobustness2PropertiesEXT = struct_VkPhysicalDeviceRobustness2PropertiesEXT;
pub const struct_VkSamplerCustomBorderColorCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    customBorderColor: VkClearColorValue = @import("std").mem.zeroes(VkClearColorValue),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkSamplerCustomBorderColorCreateInfoEXT = struct_VkSamplerCustomBorderColorCreateInfoEXT;
pub const struct_VkPhysicalDeviceCustomBorderColorPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxCustomBorderColorSamplers: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceCustomBorderColorPropertiesEXT = struct_VkPhysicalDeviceCustomBorderColorPropertiesEXT;
pub const struct_VkPhysicalDeviceCustomBorderColorFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    customBorderColors: VkBool32 = @import("std").mem.zeroes(VkBool32),
    customBorderColorWithoutFormat: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCustomBorderColorFeaturesEXT = struct_VkPhysicalDeviceCustomBorderColorFeaturesEXT;
pub const struct_VkPhysicalDevicePresentBarrierFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentBarrier: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePresentBarrierFeaturesNV = struct_VkPhysicalDevicePresentBarrierFeaturesNV;
pub const struct_VkSurfaceCapabilitiesPresentBarrierNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentBarrierSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSurfaceCapabilitiesPresentBarrierNV = struct_VkSurfaceCapabilitiesPresentBarrierNV;
pub const struct_VkSwapchainPresentBarrierCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentBarrierEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSwapchainPresentBarrierCreateInfoNV = struct_VkSwapchainPresentBarrierCreateInfoNV;
pub const VkPrivateDataSlotEXT = VkPrivateDataSlot;
pub const VkPrivateDataSlotCreateFlagsEXT = VkPrivateDataSlotCreateFlags;
pub const VkPhysicalDevicePrivateDataFeaturesEXT = VkPhysicalDevicePrivateDataFeatures;
pub const VkDevicePrivateDataCreateInfoEXT = VkDevicePrivateDataCreateInfo;
pub const VkPrivateDataSlotCreateInfoEXT = VkPrivateDataSlotCreateInfo;
pub const PFN_vkCreatePrivateDataSlotEXT = ?*const fn (VkDevice, [*c]const VkPrivateDataSlotCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPrivateDataSlot) callconv(.C) VkResult;
pub const PFN_vkDestroyPrivateDataSlotEXT = ?*const fn (VkDevice, VkPrivateDataSlot, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkSetPrivateDataEXT = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, u64) callconv(.C) VkResult;
pub const PFN_vkGetPrivateDataEXT = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, [*c]u64) callconv(.C) void;
pub const VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT = VkPhysicalDevicePipelineCreationCacheControlFeatures;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV: c_int = 1;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV: c_int = 2;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV: c_int = 4;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV: c_int = 8;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkDeviceDiagnosticsConfigFlagBitsNV = c_uint;
pub const VkDeviceDiagnosticsConfigFlagBitsNV = enum_VkDeviceDiagnosticsConfigFlagBitsNV;
pub const VkDeviceDiagnosticsConfigFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceDiagnosticsConfigFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    diagnosticsConfig: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDiagnosticsConfigFeaturesNV = struct_VkPhysicalDeviceDiagnosticsConfigFeaturesNV;
pub const struct_VkDeviceDiagnosticsConfigCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceDiagnosticsConfigFlagsNV = @import("std").mem.zeroes(VkDeviceDiagnosticsConfigFlagsNV),
};
pub const VkDeviceDiagnosticsConfigCreateInfoNV = struct_VkDeviceDiagnosticsConfigCreateInfoNV;
pub const struct_VkCudaModuleNV_T = opaque {};
pub const VkCudaModuleNV = ?*struct_VkCudaModuleNV_T;
pub const struct_VkCudaFunctionNV_T = opaque {};
pub const VkCudaFunctionNV = ?*struct_VkCudaFunctionNV_T;
pub const struct_VkCudaModuleCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkCudaModuleCreateInfoNV = struct_VkCudaModuleCreateInfoNV;
pub const struct_VkCudaFunctionCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    module: VkCudaModuleNV = @import("std").mem.zeroes(VkCudaModuleNV),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkCudaFunctionCreateInfoNV = struct_VkCudaFunctionCreateInfoNV;
pub const struct_VkCudaLaunchInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    function: VkCudaFunctionNV = @import("std").mem.zeroes(VkCudaFunctionNV),
    gridDimX: u32 = @import("std").mem.zeroes(u32),
    gridDimY: u32 = @import("std").mem.zeroes(u32),
    gridDimZ: u32 = @import("std").mem.zeroes(u32),
    blockDimX: u32 = @import("std").mem.zeroes(u32),
    blockDimY: u32 = @import("std").mem.zeroes(u32),
    blockDimZ: u32 = @import("std").mem.zeroes(u32),
    sharedMemBytes: u32 = @import("std").mem.zeroes(u32),
    paramCount: usize = @import("std").mem.zeroes(usize),
    pParams: [*c]const ?*const anyopaque = @import("std").mem.zeroes([*c]const ?*const anyopaque),
    extraCount: usize = @import("std").mem.zeroes(usize),
    pExtras: [*c]const ?*const anyopaque = @import("std").mem.zeroes([*c]const ?*const anyopaque),
};
pub const VkCudaLaunchInfoNV = struct_VkCudaLaunchInfoNV;
pub const struct_VkPhysicalDeviceCudaKernelLaunchFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cudaKernelLaunchFeatures: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCudaKernelLaunchFeaturesNV = struct_VkPhysicalDeviceCudaKernelLaunchFeaturesNV;
pub const struct_VkPhysicalDeviceCudaKernelLaunchPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    computeCapabilityMinor: u32 = @import("std").mem.zeroes(u32),
    computeCapabilityMajor: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceCudaKernelLaunchPropertiesNV = struct_VkPhysicalDeviceCudaKernelLaunchPropertiesNV;
pub const PFN_vkCreateCudaModuleNV = ?*const fn (VkDevice, [*c]const VkCudaModuleCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkCudaModuleNV) callconv(.C) VkResult;
pub const PFN_vkGetCudaModuleCacheNV = ?*const fn (VkDevice, VkCudaModuleNV, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCreateCudaFunctionNV = ?*const fn (VkDevice, [*c]const VkCudaFunctionCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkCudaFunctionNV) callconv(.C) VkResult;
pub const PFN_vkDestroyCudaModuleNV = ?*const fn (VkDevice, VkCudaModuleNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkDestroyCudaFunctionNV = ?*const fn (VkDevice, VkCudaFunctionNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdCudaLaunchKernelNV = ?*const fn (VkCommandBuffer, [*c]const VkCudaLaunchInfoNV) callconv(.C) void;
pub const struct_VkQueryLowLatencySupportNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pQueriedLowLatencyData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkQueryLowLatencySupportNV = struct_VkQueryLowLatencySupportNV;
pub const struct_VkAccelerationStructureKHR_T = opaque {};
pub const VkAccelerationStructureKHR = ?*struct_VkAccelerationStructureKHR_T;
pub const struct_VkPhysicalDeviceDescriptorBufferPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    combinedImageSamplerDescriptorSingleArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferlessPushDescriptors: VkBool32 = @import("std").mem.zeroes(VkBool32),
    allowSamplerImageViewPostSubmitCreation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxDescriptorBufferBindings: u32 = @import("std").mem.zeroes(u32),
    maxResourceDescriptorBufferBindings: u32 = @import("std").mem.zeroes(u32),
    maxSamplerDescriptorBufferBindings: u32 = @import("std").mem.zeroes(u32),
    maxEmbeddedImmutableSamplerBindings: u32 = @import("std").mem.zeroes(u32),
    maxEmbeddedImmutableSamplers: u32 = @import("std").mem.zeroes(u32),
    bufferCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    imageCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    imageViewCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    samplerCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    accelerationStructureCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    samplerDescriptorSize: usize = @import("std").mem.zeroes(usize),
    combinedImageSamplerDescriptorSize: usize = @import("std").mem.zeroes(usize),
    sampledImageDescriptorSize: usize = @import("std").mem.zeroes(usize),
    storageImageDescriptorSize: usize = @import("std").mem.zeroes(usize),
    uniformTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustUniformTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    storageTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustStorageTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    uniformBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustUniformBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    storageBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustStorageBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    inputAttachmentDescriptorSize: usize = @import("std").mem.zeroes(usize),
    accelerationStructureDescriptorSize: usize = @import("std").mem.zeroes(usize),
    maxSamplerDescriptorBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxResourceDescriptorBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    samplerDescriptorBufferAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    resourceDescriptorBufferAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    descriptorBufferAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceDescriptorBufferPropertiesEXT = struct_VkPhysicalDeviceDescriptorBufferPropertiesEXT;
pub const struct_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    combinedImageSamplerDensityMapDescriptorSize: usize = @import("std").mem.zeroes(usize),
};
pub const VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT = struct_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT;
pub const struct_VkPhysicalDeviceDescriptorBufferFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferImageLayoutIgnored: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferPushDescriptors: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDescriptorBufferFeaturesEXT = struct_VkPhysicalDeviceDescriptorBufferFeaturesEXT;
pub const struct_VkDescriptorAddressInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    address: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    range: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkDescriptorAddressInfoEXT = struct_VkDescriptorAddressInfoEXT;
pub const struct_VkDescriptorBufferBindingInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    address: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    usage: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
};
pub const VkDescriptorBufferBindingInfoEXT = struct_VkDescriptorBufferBindingInfoEXT;
pub const struct_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkDescriptorBufferBindingPushDescriptorBufferHandleEXT = struct_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT;
pub const union_VkDescriptorDataEXT = extern union {
    pSampler: [*c]const VkSampler,
    pCombinedImageSampler: [*c]const VkDescriptorImageInfo,
    pInputAttachmentImage: [*c]const VkDescriptorImageInfo,
    pSampledImage: [*c]const VkDescriptorImageInfo,
    pStorageImage: [*c]const VkDescriptorImageInfo,
    pUniformTexelBuffer: [*c]const VkDescriptorAddressInfoEXT,
    pStorageTexelBuffer: [*c]const VkDescriptorAddressInfoEXT,
    pUniformBuffer: [*c]const VkDescriptorAddressInfoEXT,
    pStorageBuffer: [*c]const VkDescriptorAddressInfoEXT,
    accelerationStructure: VkDeviceAddress,
};
pub const VkDescriptorDataEXT = union_VkDescriptorDataEXT;
pub const struct_VkDescriptorGetInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    data: VkDescriptorDataEXT = @import("std").mem.zeroes(VkDescriptorDataEXT),
};
pub const VkDescriptorGetInfoEXT = struct_VkDescriptorGetInfoEXT;
pub const struct_VkBufferCaptureDescriptorDataInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkBufferCaptureDescriptorDataInfoEXT = struct_VkBufferCaptureDescriptorDataInfoEXT;
pub const struct_VkImageCaptureDescriptorDataInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
};
pub const VkImageCaptureDescriptorDataInfoEXT = struct_VkImageCaptureDescriptorDataInfoEXT;
pub const struct_VkImageViewCaptureDescriptorDataInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
};
pub const VkImageViewCaptureDescriptorDataInfoEXT = struct_VkImageViewCaptureDescriptorDataInfoEXT;
pub const struct_VkSamplerCaptureDescriptorDataInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampler: VkSampler = @import("std").mem.zeroes(VkSampler),
};
pub const VkSamplerCaptureDescriptorDataInfoEXT = struct_VkSamplerCaptureDescriptorDataInfoEXT;
pub const struct_VkOpaqueCaptureDescriptorDataCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    opaqueCaptureDescriptorData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkOpaqueCaptureDescriptorDataCreateInfoEXT = struct_VkOpaqueCaptureDescriptorDataCreateInfoEXT;
pub const struct_VkAccelerationStructureCaptureDescriptorDataInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    accelerationStructureNV: VkAccelerationStructureNV = @import("std").mem.zeroes(VkAccelerationStructureNV),
};
pub const VkAccelerationStructureCaptureDescriptorDataInfoEXT = struct_VkAccelerationStructureCaptureDescriptorDataInfoEXT;
pub const PFN_vkGetDescriptorSetLayoutSizeEXT = ?*const fn (VkDevice, VkDescriptorSetLayout, [*c]VkDeviceSize) callconv(.C) void;
pub const PFN_vkGetDescriptorSetLayoutBindingOffsetEXT = ?*const fn (VkDevice, VkDescriptorSetLayout, u32, [*c]VkDeviceSize) callconv(.C) void;
pub const PFN_vkGetDescriptorEXT = ?*const fn (VkDevice, [*c]const VkDescriptorGetInfoEXT, usize, ?*anyopaque) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorBuffersEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkDescriptorBufferBindingInfoEXT) callconv(.C) void;
pub const PFN_vkCmdSetDescriptorBufferOffsetsEXT = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, [*c]const u32, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32) callconv(.C) void;
pub const PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT = ?*const fn (VkDevice, [*c]const VkBufferCaptureDescriptorDataInfoEXT, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetImageOpaqueCaptureDescriptorDataEXT = ?*const fn (VkDevice, [*c]const VkImageCaptureDescriptorDataInfoEXT, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT = ?*const fn (VkDevice, [*c]const VkImageViewCaptureDescriptorDataInfoEXT, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT = ?*const fn (VkDevice, [*c]const VkSamplerCaptureDescriptorDataInfoEXT, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = ?*const fn (VkDevice, [*c]const VkAccelerationStructureCaptureDescriptorDataInfoEXT, ?*anyopaque) callconv(.C) VkResult;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT: c_int = 1;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT: c_int = 2;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT: c_int = 4;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT: c_int = 8;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkGraphicsPipelineLibraryFlagBitsEXT = c_uint;
pub const VkGraphicsPipelineLibraryFlagBitsEXT = enum_VkGraphicsPipelineLibraryFlagBitsEXT;
pub const VkGraphicsPipelineLibraryFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    graphicsPipelineLibrary: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT = struct_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;
pub const struct_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    graphicsPipelineLibraryFastLinking: VkBool32 = @import("std").mem.zeroes(VkBool32),
    graphicsPipelineLibraryIndependentInterpolationDecoration: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT = struct_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;
pub const struct_VkGraphicsPipelineLibraryCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkGraphicsPipelineLibraryFlagsEXT = @import("std").mem.zeroes(VkGraphicsPipelineLibraryFlagsEXT),
};
pub const VkGraphicsPipelineLibraryCreateInfoEXT = struct_VkGraphicsPipelineLibraryCreateInfoEXT;
pub const struct_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderEarlyAndLateFragmentTests: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD = struct_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;
pub const VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV: c_int = 0;
pub const VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV: c_int = 1;
pub const VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkFragmentShadingRateTypeNV = c_uint;
pub const VkFragmentShadingRateTypeNV = enum_VkFragmentShadingRateTypeNV;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV: c_int = 0;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV: c_int = 1;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV: c_int = 4;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV: c_int = 5;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV: c_int = 6;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV: c_int = 9;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV: c_int = 10;
pub const VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV: c_int = 11;
pub const VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV: c_int = 12;
pub const VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV: c_int = 13;
pub const VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV: c_int = 14;
pub const VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV: c_int = 15;
pub const VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkFragmentShadingRateNV = c_uint;
pub const VkFragmentShadingRateNV = enum_VkFragmentShadingRateNV;
pub const struct_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentShadingRateEnums: VkBool32 = @import("std").mem.zeroes(VkBool32),
    supersampleFragmentShadingRates: VkBool32 = @import("std").mem.zeroes(VkBool32),
    noInvocationFragmentShadingRates: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV = struct_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV;
pub const struct_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxFragmentShadingRateInvocationCount: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
};
pub const VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV = struct_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV;
pub const struct_VkPipelineFragmentShadingRateEnumStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    shadingRateType: VkFragmentShadingRateTypeNV = @import("std").mem.zeroes(VkFragmentShadingRateTypeNV),
    shadingRate: VkFragmentShadingRateNV = @import("std").mem.zeroes(VkFragmentShadingRateNV),
    combinerOps: [2]VkFragmentShadingRateCombinerOpKHR = @import("std").mem.zeroes([2]VkFragmentShadingRateCombinerOpKHR),
};
pub const VkPipelineFragmentShadingRateEnumStateCreateInfoNV = struct_VkPipelineFragmentShadingRateEnumStateCreateInfoNV;
pub const PFN_vkCmdSetFragmentShadingRateEnumNV = ?*const fn (VkCommandBuffer, VkFragmentShadingRateNV, [*c]const VkFragmentShadingRateCombinerOpKHR) callconv(.C) void;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkAccelerationStructureMotionInstanceTypeNV = c_uint;
pub const VkAccelerationStructureMotionInstanceTypeNV = enum_VkAccelerationStructureMotionInstanceTypeNV;
pub const VkAccelerationStructureMotionInfoFlagsNV = VkFlags;
pub const VkAccelerationStructureMotionInstanceFlagsNV = VkFlags;
pub const union_VkDeviceOrHostAddressConstKHR = extern union {
    deviceAddress: VkDeviceAddress,
    hostAddress: ?*const anyopaque,
};
pub const VkDeviceOrHostAddressConstKHR = union_VkDeviceOrHostAddressConstKHR;
pub const struct_VkAccelerationStructureGeometryMotionTrianglesDataNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
};
pub const VkAccelerationStructureGeometryMotionTrianglesDataNV = struct_VkAccelerationStructureGeometryMotionTrianglesDataNV;
pub const struct_VkAccelerationStructureMotionInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxInstances: u32 = @import("std").mem.zeroes(u32),
    flags: VkAccelerationStructureMotionInfoFlagsNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInfoFlagsNV),
};
pub const VkAccelerationStructureMotionInfoNV = struct_VkAccelerationStructureMotionInfoNV;
// /usr/include/vulkan/vulkan_core.h:17380:35: warning: struct demoted to opaque type - has bitfield
pub const struct_VkAccelerationStructureMatrixMotionInstanceNV = opaque {};
pub const VkAccelerationStructureMatrixMotionInstanceNV = struct_VkAccelerationStructureMatrixMotionInstanceNV;
pub const struct_VkSRTDataNV = extern struct {
    sx: f32 = @import("std").mem.zeroes(f32),
    a: f32 = @import("std").mem.zeroes(f32),
    b: f32 = @import("std").mem.zeroes(f32),
    pvx: f32 = @import("std").mem.zeroes(f32),
    sy: f32 = @import("std").mem.zeroes(f32),
    c: f32 = @import("std").mem.zeroes(f32),
    pvy: f32 = @import("std").mem.zeroes(f32),
    sz: f32 = @import("std").mem.zeroes(f32),
    pvz: f32 = @import("std").mem.zeroes(f32),
    qx: f32 = @import("std").mem.zeroes(f32),
    qy: f32 = @import("std").mem.zeroes(f32),
    qz: f32 = @import("std").mem.zeroes(f32),
    qw: f32 = @import("std").mem.zeroes(f32),
    tx: f32 = @import("std").mem.zeroes(f32),
    ty: f32 = @import("std").mem.zeroes(f32),
    tz: f32 = @import("std").mem.zeroes(f32),
};
pub const VkSRTDataNV = struct_VkSRTDataNV;
// /usr/include/vulkan/vulkan_core.h:17409:35: warning: struct demoted to opaque type - has bitfield
pub const struct_VkAccelerationStructureSRTMotionInstanceNV = opaque {};
pub const VkAccelerationStructureSRTMotionInstanceNV = struct_VkAccelerationStructureSRTMotionInstanceNV;
pub const union_VkAccelerationStructureMotionInstanceDataNV = extern union {
    staticInstance: VkAccelerationStructureInstanceKHR,
    matrixMotionInstance: VkAccelerationStructureMatrixMotionInstanceNV,
    srtMotionInstance: VkAccelerationStructureSRTMotionInstanceNV,
};
pub const VkAccelerationStructureMotionInstanceDataNV = union_VkAccelerationStructureMotionInstanceDataNV;
pub const struct_VkAccelerationStructureMotionInstanceNV = extern struct {
    type: VkAccelerationStructureMotionInstanceTypeNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInstanceTypeNV),
    flags: VkAccelerationStructureMotionInstanceFlagsNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInstanceFlagsNV),
    data: VkAccelerationStructureMotionInstanceDataNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInstanceDataNV),
};
pub const VkAccelerationStructureMotionInstanceNV = struct_VkAccelerationStructureMotionInstanceNV;
pub const struct_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingMotionBlur: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingMotionBlurPipelineTraceRaysIndirect: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingMotionBlurFeaturesNV = struct_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV;
pub const struct_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ycbcr2plane444Formats: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT = struct_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;
pub const struct_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityMapDeferred: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentDensityMap2FeaturesEXT = struct_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT;
pub const struct_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subsampledLoads: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subsampledCoarseReconstructionEarlyAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxSubsampledArrayLayers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetSubsampledSamplers: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceFragmentDensityMap2PropertiesEXT = struct_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT;
pub const struct_VkCopyCommandTransformInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
};
pub const VkCopyCommandTransformInfoQCOM = struct_VkCopyCommandTransformInfoQCOM;
pub const VkPhysicalDeviceImageRobustnessFeaturesEXT = VkPhysicalDeviceImageRobustnessFeatures;
pub const VK_IMAGE_COMPRESSION_DEFAULT_EXT: c_int = 0;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT: c_int = 1;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT: c_int = 2;
pub const VK_IMAGE_COMPRESSION_DISABLED_EXT: c_int = 4;
pub const VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkImageCompressionFlagBitsEXT = c_uint;
pub const VkImageCompressionFlagBitsEXT = enum_VkImageCompressionFlagBitsEXT;
pub const VkImageCompressionFlagsEXT = VkFlags;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT: c_int = 0;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT: c_int = 1;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT: c_int = 2;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT: c_int = 4;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT: c_int = 8;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT: c_int = 16;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT: c_int = 32;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT: c_int = 64;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT: c_int = 128;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT: c_int = 256;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT: c_int = 512;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT: c_int = 1024;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT: c_int = 2048;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT: c_int = 4096;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT: c_int = 8192;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT: c_int = 16384;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT: c_int = 32768;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT: c_int = 65536;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT: c_int = 131072;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT: c_int = 262144;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT: c_int = 524288;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT: c_int = 1048576;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT: c_int = 2097152;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT: c_int = 4194304;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT: c_int = 8388608;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkImageCompressionFixedRateFlagBitsEXT = c_uint;
pub const VkImageCompressionFixedRateFlagBitsEXT = enum_VkImageCompressionFixedRateFlagBitsEXT;
pub const VkImageCompressionFixedRateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceImageCompressionControlFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageCompressionControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageCompressionControlFeaturesEXT = struct_VkPhysicalDeviceImageCompressionControlFeaturesEXT;
pub const struct_VkImageCompressionControlEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageCompressionFlagsEXT = @import("std").mem.zeroes(VkImageCompressionFlagsEXT),
    compressionControlPlaneCount: u32 = @import("std").mem.zeroes(u32),
    pFixedRateFlags: [*c]VkImageCompressionFixedRateFlagsEXT = @import("std").mem.zeroes([*c]VkImageCompressionFixedRateFlagsEXT),
};
pub const VkImageCompressionControlEXT = struct_VkImageCompressionControlEXT;
pub const struct_VkImageCompressionPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageCompressionFlags: VkImageCompressionFlagsEXT = @import("std").mem.zeroes(VkImageCompressionFlagsEXT),
    imageCompressionFixedRateFlags: VkImageCompressionFixedRateFlagsEXT = @import("std").mem.zeroes(VkImageCompressionFixedRateFlagsEXT),
};
pub const VkImageCompressionPropertiesEXT = struct_VkImageCompressionPropertiesEXT;
pub const struct_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    attachmentFeedbackLoopLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT = struct_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;
pub const struct_VkPhysicalDevice4444FormatsFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    formatA4R4G4B4: VkBool32 = @import("std").mem.zeroes(VkBool32),
    formatA4B4G4R4: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevice4444FormatsFeaturesEXT = struct_VkPhysicalDevice4444FormatsFeaturesEXT;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT: c_int = 0;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT: c_int = 1;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT: c_int = 2;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT: c_int = 3;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT: c_int = 4;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT: c_int = 5;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT: c_int = 6;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceFaultAddressTypeEXT = c_uint;
pub const VkDeviceFaultAddressTypeEXT = enum_VkDeviceFaultAddressTypeEXT;
pub const VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT: c_int = 1;
pub const VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceFaultVendorBinaryHeaderVersionEXT = c_uint;
pub const VkDeviceFaultVendorBinaryHeaderVersionEXT = enum_VkDeviceFaultVendorBinaryHeaderVersionEXT;
pub const struct_VkPhysicalDeviceFaultFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceFault: VkBool32 = @import("std").mem.zeroes(VkBool32),
    deviceFaultVendorBinary: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFaultFeaturesEXT = struct_VkPhysicalDeviceFaultFeaturesEXT;
pub const struct_VkDeviceFaultCountsEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    addressInfoCount: u32 = @import("std").mem.zeroes(u32),
    vendorInfoCount: u32 = @import("std").mem.zeroes(u32),
    vendorBinarySize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkDeviceFaultCountsEXT = struct_VkDeviceFaultCountsEXT;
pub const struct_VkDeviceFaultAddressInfoEXT = extern struct {
    addressType: VkDeviceFaultAddressTypeEXT = @import("std").mem.zeroes(VkDeviceFaultAddressTypeEXT),
    reportedAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    addressPrecision: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkDeviceFaultAddressInfoEXT = struct_VkDeviceFaultAddressInfoEXT;
pub const struct_VkDeviceFaultVendorInfoEXT = extern struct {
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    vendorFaultCode: u64 = @import("std").mem.zeroes(u64),
    vendorFaultData: u64 = @import("std").mem.zeroes(u64),
};
pub const VkDeviceFaultVendorInfoEXT = struct_VkDeviceFaultVendorInfoEXT;
pub const struct_VkDeviceFaultInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    pAddressInfos: [*c]VkDeviceFaultAddressInfoEXT = @import("std").mem.zeroes([*c]VkDeviceFaultAddressInfoEXT),
    pVendorInfos: [*c]VkDeviceFaultVendorInfoEXT = @import("std").mem.zeroes([*c]VkDeviceFaultVendorInfoEXT),
    pVendorBinaryData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkDeviceFaultInfoEXT = struct_VkDeviceFaultInfoEXT;
pub const struct_VkDeviceFaultVendorBinaryHeaderVersionOneEXT = extern struct {
    headerSize: u32 = @import("std").mem.zeroes(u32),
    headerVersion: VkDeviceFaultVendorBinaryHeaderVersionEXT = @import("std").mem.zeroes(VkDeviceFaultVendorBinaryHeaderVersionEXT),
    vendorID: u32 = @import("std").mem.zeroes(u32),
    deviceID: u32 = @import("std").mem.zeroes(u32),
    driverVersion: u32 = @import("std").mem.zeroes(u32),
    pipelineCacheUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    applicationNameOffset: u32 = @import("std").mem.zeroes(u32),
    applicationVersion: u32 = @import("std").mem.zeroes(u32),
    engineNameOffset: u32 = @import("std").mem.zeroes(u32),
    engineVersion: u32 = @import("std").mem.zeroes(u32),
    apiVersion: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceFaultVendorBinaryHeaderVersionOneEXT = struct_VkDeviceFaultVendorBinaryHeaderVersionOneEXT;
pub const PFN_vkGetDeviceFaultInfoEXT = ?*const fn (VkDevice, [*c]VkDeviceFaultCountsEXT, [*c]VkDeviceFaultInfoEXT) callconv(.C) VkResult;
pub const struct_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rasterizationOrderColorAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizationOrderDepthAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizationOrderStencilAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT = struct_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;
pub const VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM = VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;
pub const struct_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    formatRgba10x6WithoutYCbCrSampler: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT = struct_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT;
pub const struct_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    mutableDescriptorType: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT = struct_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;
pub const VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE = VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;
pub const struct_VkMutableDescriptorTypeListEXT = extern struct {
    descriptorTypeCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorTypes: [*c]const VkDescriptorType = @import("std").mem.zeroes([*c]const VkDescriptorType),
};
pub const VkMutableDescriptorTypeListEXT = struct_VkMutableDescriptorTypeListEXT;
pub const VkMutableDescriptorTypeListVALVE = VkMutableDescriptorTypeListEXT;
pub const struct_VkMutableDescriptorTypeCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mutableDescriptorTypeListCount: u32 = @import("std").mem.zeroes(u32),
    pMutableDescriptorTypeLists: [*c]const VkMutableDescriptorTypeListEXT = @import("std").mem.zeroes([*c]const VkMutableDescriptorTypeListEXT),
};
pub const VkMutableDescriptorTypeCreateInfoEXT = struct_VkMutableDescriptorTypeCreateInfoEXT;
pub const VkMutableDescriptorTypeCreateInfoVALVE = VkMutableDescriptorTypeCreateInfoEXT;
pub const struct_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vertexInputDynamicState: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT = struct_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT;
pub const struct_VkVertexInputBindingDescription2EXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    binding: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
    inputRate: VkVertexInputRate = @import("std").mem.zeroes(VkVertexInputRate),
    divisor: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVertexInputBindingDescription2EXT = struct_VkVertexInputBindingDescription2EXT;
pub const struct_VkVertexInputAttributeDescription2EXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    location: u32 = @import("std").mem.zeroes(u32),
    binding: u32 = @import("std").mem.zeroes(u32),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    offset: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVertexInputAttributeDescription2EXT = struct_VkVertexInputAttributeDescription2EXT;
pub const PFN_vkCmdSetVertexInputEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkVertexInputBindingDescription2EXT, u32, [*c]const VkVertexInputAttributeDescription2EXT) callconv(.C) void;
pub const struct_VkPhysicalDeviceDrmPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasPrimary: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasRender: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primaryMajor: i64 = @import("std").mem.zeroes(i64),
    primaryMinor: i64 = @import("std").mem.zeroes(i64),
    renderMajor: i64 = @import("std").mem.zeroes(i64),
    renderMinor: i64 = @import("std").mem.zeroes(i64),
};
pub const VkPhysicalDeviceDrmPropertiesEXT = struct_VkPhysicalDeviceDrmPropertiesEXT;
pub const VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT: c_int = 0;
pub const VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT: c_int = 1;
pub const VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceAddressBindingTypeEXT = c_uint;
pub const VkDeviceAddressBindingTypeEXT = enum_VkDeviceAddressBindingTypeEXT;
pub const VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT: c_int = 1;
pub const VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceAddressBindingFlagBitsEXT = c_uint;
pub const VkDeviceAddressBindingFlagBitsEXT = enum_VkDeviceAddressBindingFlagBitsEXT;
pub const VkDeviceAddressBindingFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceAddressBindingReportFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    reportAddressBinding: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAddressBindingReportFeaturesEXT = struct_VkPhysicalDeviceAddressBindingReportFeaturesEXT;
pub const struct_VkDeviceAddressBindingCallbackDataEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkDeviceAddressBindingFlagsEXT = @import("std").mem.zeroes(VkDeviceAddressBindingFlagsEXT),
    baseAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    bindingType: VkDeviceAddressBindingTypeEXT = @import("std").mem.zeroes(VkDeviceAddressBindingTypeEXT),
};
pub const VkDeviceAddressBindingCallbackDataEXT = struct_VkDeviceAddressBindingCallbackDataEXT;
pub const struct_VkPhysicalDeviceDepthClipControlFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthClipControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthClipControlFeaturesEXT = struct_VkPhysicalDeviceDepthClipControlFeaturesEXT;
pub const struct_VkPipelineViewportDepthClipControlCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    negativeOneToOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPipelineViewportDepthClipControlCreateInfoEXT = struct_VkPipelineViewportDepthClipControlCreateInfoEXT;
pub const struct_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    primitiveTopologyListRestart: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitiveTopologyPatchListRestart: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT = struct_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;
pub const struct_VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentModeFifoLatestReady: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT = struct_VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT;
pub const struct_VkSubpassShadingPipelineCreateInfoHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    subpass: u32 = @import("std").mem.zeroes(u32),
};
pub const VkSubpassShadingPipelineCreateInfoHUAWEI = struct_VkSubpassShadingPipelineCreateInfoHUAWEI;
pub const struct_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subpassShading: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSubpassShadingFeaturesHUAWEI = struct_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI;
pub const struct_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxSubpassShadingWorkgroupSizeAspectRatio: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceSubpassShadingPropertiesHUAWEI = struct_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI;
pub const PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = ?*const fn (VkDevice, VkRenderPass, [*c]VkExtent2D) callconv(.C) VkResult;
pub const PFN_vkCmdSubpassShadingHUAWEI = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const struct_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    invocationMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceInvocationMaskFeaturesHUAWEI = struct_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI;
pub const PFN_vkCmdBindInvocationMaskHUAWEI = ?*const fn (VkCommandBuffer, VkImageView, VkImageLayout) callconv(.C) void;
pub const VkRemoteAddressNV = ?*anyopaque;
pub const struct_VkMemoryGetRemoteAddressInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
};
pub const VkMemoryGetRemoteAddressInfoNV = struct_VkMemoryGetRemoteAddressInfoNV;
pub const struct_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    externalMemoryRDMA: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExternalMemoryRDMAFeaturesNV = struct_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV;
pub const PFN_vkGetMemoryRemoteAddressNV = ?*const fn (VkDevice, [*c]const VkMemoryGetRemoteAddressInfoNV, [*c]VkRemoteAddressNV) callconv(.C) VkResult;
pub const VkPipelineInfoEXT = VkPipelineInfoKHR;
pub const struct_VkPipelinePropertiesIdentifierEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineIdentifier: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const VkPipelinePropertiesIdentifierEXT = struct_VkPipelinePropertiesIdentifierEXT;
pub const struct_VkPhysicalDevicePipelinePropertiesFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelinePropertiesIdentifier: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelinePropertiesFeaturesEXT = struct_VkPhysicalDevicePipelinePropertiesFeaturesEXT;
pub const PFN_vkGetPipelinePropertiesEXT = ?*const fn (VkDevice, [*c]const VkPipelineInfoEXT, [*c]VkBaseOutStructure) callconv(.C) VkResult;
pub const VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT: c_int = 1;
pub const VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkFrameBoundaryFlagBitsEXT = c_uint;
pub const VkFrameBoundaryFlagBitsEXT = enum_VkFrameBoundaryFlagBitsEXT;
pub const VkFrameBoundaryFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceFrameBoundaryFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    frameBoundary: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFrameBoundaryFeaturesEXT = struct_VkPhysicalDeviceFrameBoundaryFeaturesEXT;
pub const struct_VkFrameBoundaryEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkFrameBoundaryFlagsEXT = @import("std").mem.zeroes(VkFrameBoundaryFlagsEXT),
    frameID: u64 = @import("std").mem.zeroes(u64),
    imageCount: u32 = @import("std").mem.zeroes(u32),
    pImages: [*c]const VkImage = @import("std").mem.zeroes([*c]const VkImage),
    bufferCount: u32 = @import("std").mem.zeroes(u32),
    pBuffers: [*c]const VkBuffer = @import("std").mem.zeroes([*c]const VkBuffer),
    tagName: u64 = @import("std").mem.zeroes(u64),
    tagSize: usize = @import("std").mem.zeroes(usize),
    pTag: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkFrameBoundaryEXT = struct_VkFrameBoundaryEXT;
pub const struct_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multisampledRenderToSingleSampled: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT = struct_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;
pub const struct_VkSubpassResolvePerformanceQueryEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    optimal: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSubpassResolvePerformanceQueryEXT = struct_VkSubpassResolvePerformanceQueryEXT;
pub const struct_VkMultisampledRenderToSingleSampledInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    multisampledRenderToSingleSampledEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
};
pub const VkMultisampledRenderToSingleSampledInfoEXT = struct_VkMultisampledRenderToSingleSampledInfoEXT;
pub const struct_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedDynamicState2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState2LogicOp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState2PatchControlPoints: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExtendedDynamicState2FeaturesEXT = struct_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT;
pub const PFN_vkCmdSetPatchControlPointsEXT = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdSetRasterizerDiscardEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBiasEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetLogicOpEXT = ?*const fn (VkCommandBuffer, VkLogicOp) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveRestartEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const struct_VkPhysicalDeviceColorWriteEnableFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    colorWriteEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceColorWriteEnableFeaturesEXT = struct_VkPhysicalDeviceColorWriteEnableFeaturesEXT;
pub const struct_VkPipelineColorWriteCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorWriteEnables: [*c]const VkBool32 = @import("std").mem.zeroes([*c]const VkBool32),
};
pub const VkPipelineColorWriteCreateInfoEXT = struct_VkPipelineColorWriteCreateInfoEXT;
pub const PFN_vkCmdSetColorWriteEnableEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkBool32) callconv(.C) void;
pub const struct_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    primitivesGeneratedQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitivesGeneratedQueryWithRasterizerDiscard: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitivesGeneratedQueryWithNonZeroStreams: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT = struct_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;
pub const VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT = VkPhysicalDeviceGlobalPriorityQueryFeatures;
pub const VkQueueFamilyGlobalPriorityPropertiesEXT = VkQueueFamilyGlobalPriorityProperties;
pub const struct_VkPhysicalDeviceImageViewMinLodFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageViewMinLodFeaturesEXT = struct_VkPhysicalDeviceImageViewMinLodFeaturesEXT;
pub const struct_VkImageViewMinLodCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    minLod: f32 = @import("std").mem.zeroes(f32),
};
pub const VkImageViewMinLodCreateInfoEXT = struct_VkImageViewMinLodCreateInfoEXT;
pub const struct_VkPhysicalDeviceMultiDrawFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiDraw: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultiDrawFeaturesEXT = struct_VkPhysicalDeviceMultiDrawFeaturesEXT;
pub const struct_VkPhysicalDeviceMultiDrawPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxMultiDrawCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceMultiDrawPropertiesEXT = struct_VkPhysicalDeviceMultiDrawPropertiesEXT;
pub const struct_VkMultiDrawInfoEXT = extern struct {
    firstVertex: u32 = @import("std").mem.zeroes(u32),
    vertexCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMultiDrawInfoEXT = struct_VkMultiDrawInfoEXT;
pub const struct_VkMultiDrawIndexedInfoEXT = extern struct {
    firstIndex: u32 = @import("std").mem.zeroes(u32),
    indexCount: u32 = @import("std").mem.zeroes(u32),
    vertexOffset: i32 = @import("std").mem.zeroes(i32),
};
pub const VkMultiDrawIndexedInfoEXT = struct_VkMultiDrawIndexedInfoEXT;
pub const PFN_vkCmdDrawMultiEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkMultiDrawInfoEXT, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMultiIndexedEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkMultiDrawIndexedInfoEXT, u32, u32, u32, [*c]const i32) callconv(.C) void;
pub const struct_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    image2DViewOf3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sampler2DViewOf3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImage2DViewOf3DFeaturesEXT = struct_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT;
pub const struct_VkPhysicalDeviceShaderTileImageFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderTileImageColorReadAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageDepthReadAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageStencilReadAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderTileImageFeaturesEXT = struct_VkPhysicalDeviceShaderTileImageFeaturesEXT;
pub const struct_VkPhysicalDeviceShaderTileImagePropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderTileImageCoherentReadAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageReadSampleFromPixelRateInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageReadFromHelperInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderTileImagePropertiesEXT = struct_VkPhysicalDeviceShaderTileImagePropertiesEXT;
pub const struct_VkMicromapEXT_T = opaque {};
pub const VkMicromapEXT = ?*struct_VkMicromapEXT_T;
pub const VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT: c_int = 0;
pub const VK_MICROMAP_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkMicromapTypeEXT = c_uint;
pub const VkMicromapTypeEXT = enum_VkMicromapTypeEXT;
pub const VK_BUILD_MICROMAP_MODE_BUILD_EXT: c_int = 0;
pub const VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkBuildMicromapModeEXT = c_uint;
pub const VkBuildMicromapModeEXT = enum_VkBuildMicromapModeEXT;
pub const VK_COPY_MICROMAP_MODE_CLONE_EXT: c_int = 0;
pub const VK_COPY_MICROMAP_MODE_SERIALIZE_EXT: c_int = 1;
pub const VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT: c_int = 2;
pub const VK_COPY_MICROMAP_MODE_COMPACT_EXT: c_int = 3;
pub const VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkCopyMicromapModeEXT = c_uint;
pub const VkCopyMicromapModeEXT = enum_VkCopyMicromapModeEXT;
pub const VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT: c_int = 1;
pub const VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT: c_int = 2;
pub const VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkOpacityMicromapFormatEXT = c_uint;
pub const VkOpacityMicromapFormatEXT = enum_VkOpacityMicromapFormatEXT;
pub const VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT: c_int = -1;
pub const VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT: c_int = -2;
pub const VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT: c_int = -3;
pub const VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT: c_int = -4;
pub const VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkOpacityMicromapSpecialIndexEXT = c_int;
pub const VkOpacityMicromapSpecialIndexEXT = enum_VkOpacityMicromapSpecialIndexEXT;
pub const VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureCompatibilityKHR = c_uint;
pub const VkAccelerationStructureCompatibilityKHR = enum_VkAccelerationStructureCompatibilityKHR;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureBuildTypeKHR = c_uint;
pub const VkAccelerationStructureBuildTypeKHR = enum_VkAccelerationStructureBuildTypeKHR;
pub const VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT: c_int = 1;
pub const VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT: c_int = 2;
pub const VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT: c_int = 4;
pub const VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkBuildMicromapFlagBitsEXT = c_uint;
pub const VkBuildMicromapFlagBitsEXT = enum_VkBuildMicromapFlagBitsEXT;
pub const VkBuildMicromapFlagsEXT = VkFlags;
pub const VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT: c_int = 1;
pub const VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkMicromapCreateFlagBitsEXT = c_uint;
pub const VkMicromapCreateFlagBitsEXT = enum_VkMicromapCreateFlagBitsEXT;
pub const VkMicromapCreateFlagsEXT = VkFlags;
pub const struct_VkMicromapUsageEXT = extern struct {
    count: u32 = @import("std").mem.zeroes(u32),
    subdivisionLevel: u32 = @import("std").mem.zeroes(u32),
    format: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMicromapUsageEXT = struct_VkMicromapUsageEXT;
pub const union_VkDeviceOrHostAddressKHR = extern union {
    deviceAddress: VkDeviceAddress,
    hostAddress: ?*anyopaque,
};
pub const VkDeviceOrHostAddressKHR = union_VkDeviceOrHostAddressKHR;
pub const struct_VkMicromapBuildInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkMicromapTypeEXT = @import("std").mem.zeroes(VkMicromapTypeEXT),
    flags: VkBuildMicromapFlagsEXT = @import("std").mem.zeroes(VkBuildMicromapFlagsEXT),
    mode: VkBuildMicromapModeEXT = @import("std").mem.zeroes(VkBuildMicromapModeEXT),
    dstMicromap: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    usageCountsCount: u32 = @import("std").mem.zeroes(u32),
    pUsageCounts: [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const VkMicromapUsageEXT),
    ppUsageCounts: [*c]const [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const [*c]const VkMicromapUsageEXT),
    data: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    scratchData: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
    triangleArray: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    triangleArrayStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkMicromapBuildInfoEXT = struct_VkMicromapBuildInfoEXT;
pub const struct_VkMicromapCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    createFlags: VkMicromapCreateFlagsEXT = @import("std").mem.zeroes(VkMicromapCreateFlagsEXT),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    type: VkMicromapTypeEXT = @import("std").mem.zeroes(VkMicromapTypeEXT),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
};
pub const VkMicromapCreateInfoEXT = struct_VkMicromapCreateInfoEXT;
pub const struct_VkPhysicalDeviceOpacityMicromapFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    micromap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    micromapCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    micromapHostCommands: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceOpacityMicromapFeaturesEXT = struct_VkPhysicalDeviceOpacityMicromapFeaturesEXT;
pub const struct_VkPhysicalDeviceOpacityMicromapPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxOpacity2StateSubdivisionLevel: u32 = @import("std").mem.zeroes(u32),
    maxOpacity4StateSubdivisionLevel: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceOpacityMicromapPropertiesEXT = struct_VkPhysicalDeviceOpacityMicromapPropertiesEXT;
pub const struct_VkMicromapVersionInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pVersionData: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkMicromapVersionInfoEXT = struct_VkMicromapVersionInfoEXT;
pub const struct_VkCopyMicromapToMemoryInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    dst: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
    mode: VkCopyMicromapModeEXT = @import("std").mem.zeroes(VkCopyMicromapModeEXT),
};
pub const VkCopyMicromapToMemoryInfoEXT = struct_VkCopyMicromapToMemoryInfoEXT;
pub const struct_VkCopyMemoryToMicromapInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    dst: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    mode: VkCopyMicromapModeEXT = @import("std").mem.zeroes(VkCopyMicromapModeEXT),
};
pub const VkCopyMemoryToMicromapInfoEXT = struct_VkCopyMemoryToMicromapInfoEXT;
pub const struct_VkCopyMicromapInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    dst: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    mode: VkCopyMicromapModeEXT = @import("std").mem.zeroes(VkCopyMicromapModeEXT),
};
pub const VkCopyMicromapInfoEXT = struct_VkCopyMicromapInfoEXT;
pub const struct_VkMicromapBuildSizesInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    micromapSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    buildScratchSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    discardable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkMicromapBuildSizesInfoEXT = struct_VkMicromapBuildSizesInfoEXT;
pub const struct_VkAccelerationStructureTrianglesOpacityMicromapEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    indexBuffer: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    indexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    baseTriangle: u32 = @import("std").mem.zeroes(u32),
    usageCountsCount: u32 = @import("std").mem.zeroes(u32),
    pUsageCounts: [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const VkMicromapUsageEXT),
    ppUsageCounts: [*c]const [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const [*c]const VkMicromapUsageEXT),
    micromap: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
};
pub const VkAccelerationStructureTrianglesOpacityMicromapEXT = struct_VkAccelerationStructureTrianglesOpacityMicromapEXT;
pub const struct_VkMicromapTriangleEXT = extern struct {
    dataOffset: u32 = @import("std").mem.zeroes(u32),
    subdivisionLevel: u16 = @import("std").mem.zeroes(u16),
    format: u16 = @import("std").mem.zeroes(u16),
};
pub const VkMicromapTriangleEXT = struct_VkMicromapTriangleEXT;
pub const PFN_vkCreateMicromapEXT = ?*const fn (VkDevice, [*c]const VkMicromapCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkMicromapEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyMicromapEXT = ?*const fn (VkDevice, VkMicromapEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdBuildMicromapsEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkMicromapBuildInfoEXT) callconv(.C) void;
pub const PFN_vkBuildMicromapsEXT = ?*const fn (VkDevice, VkDeferredOperationKHR, u32, [*c]const VkMicromapBuildInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCopyMicromapEXT = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyMicromapInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCopyMicromapToMemoryEXT = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyMicromapToMemoryInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCopyMemoryToMicromapEXT = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyMemoryToMicromapInfoEXT) callconv(.C) VkResult;
pub const PFN_vkWriteMicromapsPropertiesEXT = ?*const fn (VkDevice, u32, [*c]const VkMicromapEXT, VkQueryType, usize, ?*anyopaque, usize) callconv(.C) VkResult;
pub const PFN_vkCmdCopyMicromapEXT = ?*const fn (VkCommandBuffer, [*c]const VkCopyMicromapInfoEXT) callconv(.C) void;
pub const PFN_vkCmdCopyMicromapToMemoryEXT = ?*const fn (VkCommandBuffer, [*c]const VkCopyMicromapToMemoryInfoEXT) callconv(.C) void;
pub const PFN_vkCmdCopyMemoryToMicromapEXT = ?*const fn (VkCommandBuffer, [*c]const VkCopyMemoryToMicromapInfoEXT) callconv(.C) void;
pub const PFN_vkCmdWriteMicromapsPropertiesEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkMicromapEXT, VkQueryType, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkGetDeviceMicromapCompatibilityEXT = ?*const fn (VkDevice, [*c]const VkMicromapVersionInfoEXT, [*c]VkAccelerationStructureCompatibilityKHR) callconv(.C) void;
pub const PFN_vkGetMicromapBuildSizesEXT = ?*const fn (VkDevice, VkAccelerationStructureBuildTypeKHR, [*c]const VkMicromapBuildInfoEXT, [*c]VkMicromapBuildSizesInfoEXT) callconv(.C) void;
pub const struct_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    clustercullingShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewClusterCullingShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI = struct_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI;
pub const struct_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxOutputClusterCount: u32 = @import("std").mem.zeroes(u32),
    indirectBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI = struct_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI;
pub const struct_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    clusterShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI = struct_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI;
pub const PFN_vkCmdDrawClusterHUAWEI = ?*const fn (VkCommandBuffer, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawClusterIndirectHUAWEI = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize) callconv(.C) void;
pub const struct_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    borderColorSwizzle: VkBool32 = @import("std").mem.zeroes(VkBool32),
    borderColorSwizzleFromImage: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceBorderColorSwizzleFeaturesEXT = struct_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT;
pub const struct_VkSamplerBorderColorComponentMappingCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    components: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    srgb: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSamplerBorderColorComponentMappingCreateInfoEXT = struct_VkSamplerBorderColorComponentMappingCreateInfoEXT;
pub const struct_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pageableDeviceLocalMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT = struct_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;
pub const PFN_vkSetDeviceMemoryPriorityEXT = ?*const fn (VkDevice, VkDeviceMemory, f32) callconv(.C) void;
pub const struct_VkPhysicalDeviceShaderCorePropertiesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pixelRate: u32 = @import("std").mem.zeroes(u32),
    texelRate: u32 = @import("std").mem.zeroes(u32),
    fmaRate: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderCorePropertiesARM = struct_VkPhysicalDeviceShaderCorePropertiesARM;
pub const VkPhysicalDeviceSchedulingControlsFlagsARM = VkFlags64;
pub const VkPhysicalDeviceSchedulingControlsFlagBitsARM = VkFlags64;
pub const VK_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM: VkPhysicalDeviceSchedulingControlsFlagBitsARM = 1;
pub const struct_VkDeviceQueueShaderCoreControlCreateInfoARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceQueueShaderCoreControlCreateInfoARM = struct_VkDeviceQueueShaderCoreControlCreateInfoARM;
pub const struct_VkPhysicalDeviceSchedulingControlsFeaturesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    schedulingControls: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSchedulingControlsFeaturesARM = struct_VkPhysicalDeviceSchedulingControlsFeaturesARM;
pub const struct_VkPhysicalDeviceSchedulingControlsPropertiesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    schedulingControlsFlags: VkPhysicalDeviceSchedulingControlsFlagsARM = @import("std").mem.zeroes(VkPhysicalDeviceSchedulingControlsFlagsARM),
};
pub const VkPhysicalDeviceSchedulingControlsPropertiesARM = struct_VkPhysicalDeviceSchedulingControlsPropertiesARM;
pub const struct_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageSlicedViewOf3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT = struct_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT;
pub const struct_VkImageViewSlicedCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sliceOffset: u32 = @import("std").mem.zeroes(u32),
    sliceCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageViewSlicedCreateInfoEXT = struct_VkImageViewSlicedCreateInfoEXT;
pub const struct_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorSetHostMapping: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE = struct_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;
pub const struct_VkDescriptorSetBindingReferenceVALVE = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorSetLayout: VkDescriptorSetLayout = @import("std").mem.zeroes(VkDescriptorSetLayout),
    binding: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorSetBindingReferenceVALVE = struct_VkDescriptorSetBindingReferenceVALVE;
pub const struct_VkDescriptorSetLayoutHostMappingInfoVALVE = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorOffset: usize = @import("std").mem.zeroes(usize),
    descriptorSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorSetLayoutHostMappingInfoVALVE = struct_VkDescriptorSetLayoutHostMappingInfoVALVE;
pub const PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE = ?*const fn (VkDevice, [*c]const VkDescriptorSetBindingReferenceVALVE, [*c]VkDescriptorSetLayoutHostMappingInfoVALVE) callconv(.C) void;
pub const PFN_vkGetDescriptorSetHostMappingVALVE = ?*const fn (VkDevice, VkDescriptorSet, [*c]?*anyopaque) callconv(.C) void;
pub const struct_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthClampZeroOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthClampZeroOneFeaturesEXT = struct_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT;
pub const struct_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nonSeamlessCubeMap: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT = struct_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT;
pub const struct_VkPhysicalDeviceRenderPassStripedFeaturesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    renderPassStriped: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRenderPassStripedFeaturesARM = struct_VkPhysicalDeviceRenderPassStripedFeaturesARM;
pub const struct_VkPhysicalDeviceRenderPassStripedPropertiesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    renderPassStripeGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxRenderPassStripes: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceRenderPassStripedPropertiesARM = struct_VkPhysicalDeviceRenderPassStripedPropertiesARM;
pub const struct_VkRenderPassStripeInfoARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stripeArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
};
pub const VkRenderPassStripeInfoARM = struct_VkRenderPassStripeInfoARM;
pub const struct_VkRenderPassStripeBeginInfoARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stripeInfoCount: u32 = @import("std").mem.zeroes(u32),
    pStripeInfos: [*c]const VkRenderPassStripeInfoARM = @import("std").mem.zeroes([*c]const VkRenderPassStripeInfoARM),
};
pub const VkRenderPassStripeBeginInfoARM = struct_VkRenderPassStripeBeginInfoARM;
pub const struct_VkRenderPassStripeSubmitInfoARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stripeSemaphoreInfoCount: u32 = @import("std").mem.zeroes(u32),
    pStripeSemaphoreInfos: [*c]const VkSemaphoreSubmitInfo = @import("std").mem.zeroes([*c]const VkSemaphoreSubmitInfo),
};
pub const VkRenderPassStripeSubmitInfoARM = struct_VkRenderPassStripeSubmitInfoARM;
pub const struct_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityMapOffset: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM = struct_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;
pub const struct_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityOffsetGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM = struct_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;
pub const struct_VkSubpassFragmentDensityMapOffsetEndInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fragmentDensityOffsetCount: u32 = @import("std").mem.zeroes(u32),
    pFragmentDensityOffsets: [*c]const VkOffset2D = @import("std").mem.zeroes([*c]const VkOffset2D),
};
pub const VkSubpassFragmentDensityMapOffsetEndInfoQCOM = struct_VkSubpassFragmentDensityMapOffsetEndInfoQCOM;
pub const struct_VkCopyMemoryIndirectCommandNV = extern struct {
    srcAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    dstAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkCopyMemoryIndirectCommandNV = struct_VkCopyMemoryIndirectCommandNV;
pub const struct_VkCopyMemoryToImageIndirectCommandNV = extern struct {
    srcAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    bufferRowLength: u32 = @import("std").mem.zeroes(u32),
    bufferImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkCopyMemoryToImageIndirectCommandNV = struct_VkCopyMemoryToImageIndirectCommandNV;
pub const struct_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    indirectCopy: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCopyMemoryIndirectFeaturesNV = struct_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV;
pub const struct_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedQueues: VkQueueFlags = @import("std").mem.zeroes(VkQueueFlags),
};
pub const VkPhysicalDeviceCopyMemoryIndirectPropertiesNV = struct_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV;
pub const PFN_vkCmdCopyMemoryIndirectNV = ?*const fn (VkCommandBuffer, VkDeviceAddress, u32, u32) callconv(.C) void;
pub const PFN_vkCmdCopyMemoryToImageIndirectNV = ?*const fn (VkCommandBuffer, VkDeviceAddress, u32, u32, VkImage, VkImageLayout, [*c]const VkImageSubresourceLayers) callconv(.C) void;
pub const VkMemoryDecompressionMethodFlagBitsNV = VkFlags64;
pub const VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV: VkMemoryDecompressionMethodFlagBitsNV = 1;
pub const VkMemoryDecompressionMethodFlagsNV = VkFlags64;
pub const struct_VkDecompressMemoryRegionNV = extern struct {
    srcAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    dstAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    compressedSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    decompressedSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    decompressionMethod: VkMemoryDecompressionMethodFlagsNV = @import("std").mem.zeroes(VkMemoryDecompressionMethodFlagsNV),
};
pub const VkDecompressMemoryRegionNV = struct_VkDecompressMemoryRegionNV;
pub const struct_VkPhysicalDeviceMemoryDecompressionFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryDecompression: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMemoryDecompressionFeaturesNV = struct_VkPhysicalDeviceMemoryDecompressionFeaturesNV;
pub const struct_VkPhysicalDeviceMemoryDecompressionPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    decompressionMethods: VkMemoryDecompressionMethodFlagsNV = @import("std").mem.zeroes(VkMemoryDecompressionMethodFlagsNV),
    maxDecompressionIndirectCount: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPhysicalDeviceMemoryDecompressionPropertiesNV = struct_VkPhysicalDeviceMemoryDecompressionPropertiesNV;
pub const PFN_vkCmdDecompressMemoryNV = ?*const fn (VkCommandBuffer, u32, [*c]const VkDecompressMemoryRegionNV) callconv(.C) void;
pub const PFN_vkCmdDecompressMemoryIndirectCountNV = ?*const fn (VkCommandBuffer, VkDeviceAddress, VkDeviceAddress, u32) callconv(.C) void;
pub const struct_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceGeneratedCompute: VkBool32 = @import("std").mem.zeroes(VkBool32),
    deviceGeneratedComputePipelines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    deviceGeneratedComputeCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV = struct_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV;
pub const struct_VkComputePipelineIndirectBufferInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    pipelineDeviceAddressCaptureReplay: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
};
pub const VkComputePipelineIndirectBufferInfoNV = struct_VkComputePipelineIndirectBufferInfoNV;
pub const struct_VkPipelineIndirectDeviceAddressInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
};
pub const VkPipelineIndirectDeviceAddressInfoNV = struct_VkPipelineIndirectDeviceAddressInfoNV;
pub const struct_VkBindPipelineIndirectCommandNV = extern struct {
    pipelineAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
};
pub const VkBindPipelineIndirectCommandNV = struct_VkBindPipelineIndirectCommandNV;
pub const PFN_vkGetPipelineIndirectMemoryRequirementsNV = ?*const fn (VkDevice, [*c]const VkComputePipelineCreateInfo, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkCmdUpdatePipelineIndirectBufferNV = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipeline) callconv(.C) void;
pub const PFN_vkGetPipelineIndirectDeviceAddressNV = ?*const fn (VkDevice, [*c]const VkPipelineIndirectDeviceAddressInfoNV) callconv(.C) VkDeviceAddress;
pub const struct_VkPhysicalDeviceLinearColorAttachmentFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    linearColorAttachment: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceLinearColorAttachmentFeaturesNV = struct_VkPhysicalDeviceLinearColorAttachmentFeaturesNV;
pub const struct_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageCompressionControlSwapchain: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT = struct_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT;
pub const struct_VkImageViewSampleWeightCreateInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    filterCenter: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    filterSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    numPhases: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageViewSampleWeightCreateInfoQCOM = struct_VkImageViewSampleWeightCreateInfoQCOM;
pub const struct_VkPhysicalDeviceImageProcessingFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    textureSampleWeighted: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureBoxFilter: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureBlockMatch: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageProcessingFeaturesQCOM = struct_VkPhysicalDeviceImageProcessingFeaturesQCOM;
pub const struct_VkPhysicalDeviceImageProcessingPropertiesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxWeightFilterPhases: u32 = @import("std").mem.zeroes(u32),
    maxWeightFilterDimension: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxBlockMatchRegion: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxBoxFilterBlockSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkPhysicalDeviceImageProcessingPropertiesQCOM = struct_VkPhysicalDeviceImageProcessingPropertiesQCOM;
pub const struct_VkPhysicalDeviceNestedCommandBufferFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nestedCommandBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nestedCommandBufferRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nestedCommandBufferSimultaneousUse: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceNestedCommandBufferFeaturesEXT = struct_VkPhysicalDeviceNestedCommandBufferFeaturesEXT;
pub const struct_VkPhysicalDeviceNestedCommandBufferPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxCommandBufferNestingLevel: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceNestedCommandBufferPropertiesEXT = struct_VkPhysicalDeviceNestedCommandBufferPropertiesEXT;
pub const struct_VkExternalMemoryAcquireUnmodifiedEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    acquireUnmodifiedMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkExternalMemoryAcquireUnmodifiedEXT = struct_VkExternalMemoryAcquireUnmodifiedEXT;
pub const struct_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedDynamicState3TessellationDomainOrigin: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3DepthClampEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3PolygonMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3RasterizationSamples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3SampleMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3AlphaToCoverageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3AlphaToOneEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3LogicOpEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorBlendEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorBlendEquation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorWriteMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3RasterizationStream: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ConservativeRasterizationMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ExtraPrimitiveOverestimationSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3DepthClipEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3SampleLocationsEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorBlendAdvanced: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ProvokingVertexMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3LineRasterizationMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3LineStippleEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3DepthClipNegativeOneToOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ViewportWScalingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ViewportSwizzle: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageToColorEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageToColorLocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageModulationMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageModulationTableEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageModulationTable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageReductionMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3RepresentativeFragmentTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ShadingRateImageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExtendedDynamicState3FeaturesEXT = struct_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT;
pub const struct_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicPrimitiveTopologyUnrestricted: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExtendedDynamicState3PropertiesEXT = struct_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT;
pub const struct_VkColorBlendEquationEXT = extern struct {
    srcColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    colorBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    srcAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    alphaBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
};
pub const VkColorBlendEquationEXT = struct_VkColorBlendEquationEXT;
pub const struct_VkColorBlendAdvancedEXT = extern struct {
    advancedBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    srcPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dstPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    blendOverlap: VkBlendOverlapEXT = @import("std").mem.zeroes(VkBlendOverlapEXT),
    clampResults: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkColorBlendAdvancedEXT = struct_VkColorBlendAdvancedEXT;
pub const PFN_vkCmdSetDepthClampEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetPolygonModeEXT = ?*const fn (VkCommandBuffer, VkPolygonMode) callconv(.C) void;
pub const PFN_vkCmdSetRasterizationSamplesEXT = ?*const fn (VkCommandBuffer, VkSampleCountFlagBits) callconv(.C) void;
pub const PFN_vkCmdSetSampleMaskEXT = ?*const fn (VkCommandBuffer, VkSampleCountFlagBits, [*c]const VkSampleMask) callconv(.C) void;
pub const PFN_vkCmdSetAlphaToCoverageEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetAlphaToOneEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetLogicOpEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetColorBlendEnableEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetColorBlendEquationEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkColorBlendEquationEXT) callconv(.C) void;
pub const PFN_vkCmdSetColorWriteMaskEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkColorComponentFlags) callconv(.C) void;
pub const PFN_vkCmdSetTessellationDomainOriginEXT = ?*const fn (VkCommandBuffer, VkTessellationDomainOrigin) callconv(.C) void;
pub const PFN_vkCmdSetRasterizationStreamEXT = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdSetConservativeRasterizationModeEXT = ?*const fn (VkCommandBuffer, VkConservativeRasterizationModeEXT) callconv(.C) void;
pub const PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT = ?*const fn (VkCommandBuffer, f32) callconv(.C) void;
pub const PFN_vkCmdSetDepthClipEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetSampleLocationsEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetColorBlendAdvancedEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkColorBlendAdvancedEXT) callconv(.C) void;
pub const PFN_vkCmdSetProvokingVertexModeEXT = ?*const fn (VkCommandBuffer, VkProvokingVertexModeEXT) callconv(.C) void;
pub const PFN_vkCmdSetLineRasterizationModeEXT = ?*const fn (VkCommandBuffer, VkLineRasterizationModeEXT) callconv(.C) void;
pub const PFN_vkCmdSetLineStippleEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthClipNegativeOneToOneEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetViewportWScalingEnableNV = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetViewportSwizzleNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkViewportSwizzleNV) callconv(.C) void;
pub const PFN_vkCmdSetCoverageToColorEnableNV = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetCoverageToColorLocationNV = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdSetCoverageModulationModeNV = ?*const fn (VkCommandBuffer, VkCoverageModulationModeNV) callconv(.C) void;
pub const PFN_vkCmdSetCoverageModulationTableEnableNV = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetCoverageModulationTableNV = ?*const fn (VkCommandBuffer, u32, [*c]const f32) callconv(.C) void;
pub const PFN_vkCmdSetShadingRateImageEnableNV = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetRepresentativeFragmentTestEnableNV = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetCoverageReductionModeNV = ?*const fn (VkCommandBuffer, VkCoverageReductionModeNV) callconv(.C) void;
pub const VK_SUBPASS_MERGE_STATUS_MERGED_EXT: c_int = 0;
pub const VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT: c_int = 1;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT: c_int = 2;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT: c_int = 3;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT: c_int = 4;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT: c_int = 5;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT: c_int = 6;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT: c_int = 7;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT: c_int = 8;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT: c_int = 9;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT: c_int = 10;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT: c_int = 11;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT: c_int = 12;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT: c_int = 13;
pub const VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkSubpassMergeStatusEXT = c_uint;
pub const VkSubpassMergeStatusEXT = enum_VkSubpassMergeStatusEXT;
pub const struct_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subpassMergeFeedback: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT = struct_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT;
pub const struct_VkRenderPassCreationControlEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    disallowMerging: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkRenderPassCreationControlEXT = struct_VkRenderPassCreationControlEXT;
pub const struct_VkRenderPassCreationFeedbackInfoEXT = extern struct {
    postMergeSubpassCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkRenderPassCreationFeedbackInfoEXT = struct_VkRenderPassCreationFeedbackInfoEXT;
pub const struct_VkRenderPassCreationFeedbackCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pRenderPassFeedback: [*c]VkRenderPassCreationFeedbackInfoEXT = @import("std").mem.zeroes([*c]VkRenderPassCreationFeedbackInfoEXT),
};
pub const VkRenderPassCreationFeedbackCreateInfoEXT = struct_VkRenderPassCreationFeedbackCreateInfoEXT;
pub const struct_VkRenderPassSubpassFeedbackInfoEXT = extern struct {
    subpassMergeStatus: VkSubpassMergeStatusEXT = @import("std").mem.zeroes(VkSubpassMergeStatusEXT),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    postMergeIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkRenderPassSubpassFeedbackInfoEXT = struct_VkRenderPassSubpassFeedbackInfoEXT;
pub const struct_VkRenderPassSubpassFeedbackCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pSubpassFeedback: [*c]VkRenderPassSubpassFeedbackInfoEXT = @import("std").mem.zeroes([*c]VkRenderPassSubpassFeedbackInfoEXT),
};
pub const VkRenderPassSubpassFeedbackCreateInfoEXT = struct_VkRenderPassSubpassFeedbackCreateInfoEXT;
pub const VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG: c_int = 0;
pub const VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG: c_int = 1;
pub const VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG: c_int = 2147483647;
pub const enum_VkDirectDriverLoadingModeLUNARG = c_uint;
pub const VkDirectDriverLoadingModeLUNARG = enum_VkDirectDriverLoadingModeLUNARG;
pub const VkDirectDriverLoadingFlagsLUNARG = VkFlags;
pub const PFN_vkGetInstanceProcAddrLUNARG = ?*const fn (VkInstance, [*c]const u8) callconv(.C) PFN_vkVoidFunction;
pub const struct_VkDirectDriverLoadingInfoLUNARG = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkDirectDriverLoadingFlagsLUNARG = @import("std").mem.zeroes(VkDirectDriverLoadingFlagsLUNARG),
    pfnGetInstanceProcAddr: PFN_vkGetInstanceProcAddrLUNARG = @import("std").mem.zeroes(PFN_vkGetInstanceProcAddrLUNARG),
};
pub const VkDirectDriverLoadingInfoLUNARG = struct_VkDirectDriverLoadingInfoLUNARG;
pub const struct_VkDirectDriverLoadingListLUNARG = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mode: VkDirectDriverLoadingModeLUNARG = @import("std").mem.zeroes(VkDirectDriverLoadingModeLUNARG),
    driverCount: u32 = @import("std").mem.zeroes(u32),
    pDrivers: [*c]const VkDirectDriverLoadingInfoLUNARG = @import("std").mem.zeroes([*c]const VkDirectDriverLoadingInfoLUNARG),
};
pub const VkDirectDriverLoadingListLUNARG = struct_VkDirectDriverLoadingListLUNARG;
pub const struct_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderModuleIdentifier: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT = struct_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT;
pub const struct_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderModuleIdentifierAlgorithmUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT = struct_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT;
pub const struct_VkPipelineShaderStageModuleIdentifierCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    identifierSize: u32 = @import("std").mem.zeroes(u32),
    pIdentifier: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkPipelineShaderStageModuleIdentifierCreateInfoEXT = struct_VkPipelineShaderStageModuleIdentifierCreateInfoEXT;
pub const struct_VkShaderModuleIdentifierEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    identifierSize: u32 = @import("std").mem.zeroes(u32),
    identifier: [32]u8 = @import("std").mem.zeroes([32]u8),
};
pub const VkShaderModuleIdentifierEXT = struct_VkShaderModuleIdentifierEXT;
pub const PFN_vkGetShaderModuleIdentifierEXT = ?*const fn (VkDevice, VkShaderModule, [*c]VkShaderModuleIdentifierEXT) callconv(.C) void;
pub const PFN_vkGetShaderModuleCreateInfoIdentifierEXT = ?*const fn (VkDevice, [*c]const VkShaderModuleCreateInfo, [*c]VkShaderModuleIdentifierEXT) callconv(.C) void;
pub const struct_VkOpticalFlowSessionNV_T = opaque {};
pub const VkOpticalFlowSessionNV = ?*struct_VkOpticalFlowSessionNV_T;
pub const VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV: c_int = 0;
pub const VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV: c_int = 2;
pub const VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV: c_int = 3;
pub const VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowPerformanceLevelNV = c_uint;
pub const VkOpticalFlowPerformanceLevelNV = enum_VkOpticalFlowPerformanceLevelNV;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV: c_int = 0;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV: c_int = 2;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV: c_int = 3;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV: c_int = 4;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV: c_int = 5;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV: c_int = 6;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV: c_int = 7;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV: c_int = 8;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowSessionBindingPointNV = c_uint;
pub const VkOpticalFlowSessionBindingPointNV = enum_VkOpticalFlowSessionBindingPointNV;
pub const VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV: c_int = 0;
pub const VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV: c_int = 2;
pub const VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV: c_int = 4;
pub const VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV: c_int = 8;
pub const VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowGridSizeFlagBitsNV = c_uint;
pub const VkOpticalFlowGridSizeFlagBitsNV = enum_VkOpticalFlowGridSizeFlagBitsNV;
pub const VkOpticalFlowGridSizeFlagsNV = VkFlags;
pub const VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV: c_int = 0;
pub const VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV: c_int = 2;
pub const VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV: c_int = 4;
pub const VK_OPTICAL_FLOW_USAGE_COST_BIT_NV: c_int = 8;
pub const VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV: c_int = 16;
pub const VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowUsageFlagBitsNV = c_uint;
pub const VkOpticalFlowUsageFlagBitsNV = enum_VkOpticalFlowUsageFlagBitsNV;
pub const VkOpticalFlowUsageFlagsNV = VkFlags;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV: c_int = 2;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV: c_int = 4;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV: c_int = 8;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV: c_int = 16;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowSessionCreateFlagBitsNV = c_uint;
pub const VkOpticalFlowSessionCreateFlagBitsNV = enum_VkOpticalFlowSessionCreateFlagBitsNV;
pub const VkOpticalFlowSessionCreateFlagsNV = VkFlags;
pub const VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowExecuteFlagBitsNV = c_uint;
pub const VkOpticalFlowExecuteFlagBitsNV = enum_VkOpticalFlowExecuteFlagBitsNV;
pub const VkOpticalFlowExecuteFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceOpticalFlowFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    opticalFlow: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceOpticalFlowFeaturesNV = struct_VkPhysicalDeviceOpticalFlowFeaturesNV;
pub const struct_VkPhysicalDeviceOpticalFlowPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedOutputGridSizes: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    supportedHintGridSizes: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    hintSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    costSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bidirectionalFlowSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    globalFlowSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minWidth: u32 = @import("std").mem.zeroes(u32),
    minHeight: u32 = @import("std").mem.zeroes(u32),
    maxWidth: u32 = @import("std").mem.zeroes(u32),
    maxHeight: u32 = @import("std").mem.zeroes(u32),
    maxNumRegionsOfInterest: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceOpticalFlowPropertiesNV = struct_VkPhysicalDeviceOpticalFlowPropertiesNV;
pub const struct_VkOpticalFlowImageFormatInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    usage: VkOpticalFlowUsageFlagsNV = @import("std").mem.zeroes(VkOpticalFlowUsageFlagsNV),
};
pub const VkOpticalFlowImageFormatInfoNV = struct_VkOpticalFlowImageFormatInfoNV;
pub const struct_VkOpticalFlowImageFormatPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkOpticalFlowImageFormatPropertiesNV = struct_VkOpticalFlowImageFormatPropertiesNV;
pub const struct_VkOpticalFlowSessionCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    imageFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    flowVectorFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    costFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    outputGridSize: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    hintGridSize: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    performanceLevel: VkOpticalFlowPerformanceLevelNV = @import("std").mem.zeroes(VkOpticalFlowPerformanceLevelNV),
    flags: VkOpticalFlowSessionCreateFlagsNV = @import("std").mem.zeroes(VkOpticalFlowSessionCreateFlagsNV),
};
pub const VkOpticalFlowSessionCreateInfoNV = struct_VkOpticalFlowSessionCreateInfoNV;
pub const struct_VkOpticalFlowSessionCreatePrivateDataInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    id: u32 = @import("std").mem.zeroes(u32),
    size: u32 = @import("std").mem.zeroes(u32),
    pPrivateData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkOpticalFlowSessionCreatePrivateDataInfoNV = struct_VkOpticalFlowSessionCreatePrivateDataInfoNV;
pub const struct_VkOpticalFlowExecuteInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkOpticalFlowExecuteFlagsNV = @import("std").mem.zeroes(VkOpticalFlowExecuteFlagsNV),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkOpticalFlowExecuteInfoNV = struct_VkOpticalFlowExecuteInfoNV;
pub const PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = ?*const fn (VkPhysicalDevice, [*c]const VkOpticalFlowImageFormatInfoNV, [*c]u32, [*c]VkOpticalFlowImageFormatPropertiesNV) callconv(.C) VkResult;
pub const PFN_vkCreateOpticalFlowSessionNV = ?*const fn (VkDevice, [*c]const VkOpticalFlowSessionCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkOpticalFlowSessionNV) callconv(.C) VkResult;
pub const PFN_vkDestroyOpticalFlowSessionNV = ?*const fn (VkDevice, VkOpticalFlowSessionNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkBindOpticalFlowSessionImageNV = ?*const fn (VkDevice, VkOpticalFlowSessionNV, VkOpticalFlowSessionBindingPointNV, VkImageView, VkImageLayout) callconv(.C) VkResult;
pub const PFN_vkCmdOpticalFlowExecuteNV = ?*const fn (VkCommandBuffer, VkOpticalFlowSessionNV, [*c]const VkOpticalFlowExecuteInfoNV) callconv(.C) void;
pub const struct_VkPhysicalDeviceLegacyDitheringFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    legacyDithering: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceLegacyDitheringFeaturesEXT = struct_VkPhysicalDeviceLegacyDitheringFeaturesEXT;
pub const VkPhysicalDevicePipelineProtectedAccessFeaturesEXT = VkPhysicalDevicePipelineProtectedAccessFeatures;
pub const VK_ANTI_LAG_MODE_DRIVER_CONTROL_AMD: c_int = 0;
pub const VK_ANTI_LAG_MODE_ON_AMD: c_int = 1;
pub const VK_ANTI_LAG_MODE_OFF_AMD: c_int = 2;
pub const VK_ANTI_LAG_MODE_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkAntiLagModeAMD = c_uint;
pub const VkAntiLagModeAMD = enum_VkAntiLagModeAMD;
pub const VK_ANTI_LAG_STAGE_INPUT_AMD: c_int = 0;
pub const VK_ANTI_LAG_STAGE_PRESENT_AMD: c_int = 1;
pub const VK_ANTI_LAG_STAGE_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkAntiLagStageAMD = c_uint;
pub const VkAntiLagStageAMD = enum_VkAntiLagStageAMD;
pub const struct_VkPhysicalDeviceAntiLagFeaturesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    antiLag: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAntiLagFeaturesAMD = struct_VkPhysicalDeviceAntiLagFeaturesAMD;
pub const struct_VkAntiLagPresentationInfoAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stage: VkAntiLagStageAMD = @import("std").mem.zeroes(VkAntiLagStageAMD),
    frameIndex: u64 = @import("std").mem.zeroes(u64),
};
pub const VkAntiLagPresentationInfoAMD = struct_VkAntiLagPresentationInfoAMD;
pub const struct_VkAntiLagDataAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mode: VkAntiLagModeAMD = @import("std").mem.zeroes(VkAntiLagModeAMD),
    maxFPS: u32 = @import("std").mem.zeroes(u32),
    pPresentationInfo: [*c]const VkAntiLagPresentationInfoAMD = @import("std").mem.zeroes([*c]const VkAntiLagPresentationInfoAMD),
};
pub const VkAntiLagDataAMD = struct_VkAntiLagDataAMD;
pub const PFN_vkAntiLagUpdateAMD = ?*const fn (VkDevice, [*c]const VkAntiLagDataAMD) callconv(.C) void;
pub const struct_VkShaderEXT_T = opaque {};
pub const VkShaderEXT = ?*struct_VkShaderEXT_T;
pub const VK_SHADER_CODE_TYPE_BINARY_EXT: c_int = 0;
pub const VK_SHADER_CODE_TYPE_SPIRV_EXT: c_int = 1;
pub const VK_SHADER_CODE_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkShaderCodeTypeEXT = c_uint;
pub const VkShaderCodeTypeEXT = enum_VkShaderCodeTypeEXT;
pub const VK_DEPTH_CLAMP_MODE_VIEWPORT_RANGE_EXT: c_int = 0;
pub const VK_DEPTH_CLAMP_MODE_USER_DEFINED_RANGE_EXT: c_int = 1;
pub const VK_DEPTH_CLAMP_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDepthClampModeEXT = c_uint;
pub const VkDepthClampModeEXT = enum_VkDepthClampModeEXT;
pub const VK_SHADER_CREATE_LINK_STAGE_BIT_EXT: c_int = 1;
pub const VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT: c_int = 2;
pub const VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT: c_int = 4;
pub const VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT: c_int = 8;
pub const VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT: c_int = 16;
pub const VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT: c_int = 32;
pub const VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: c_int = 64;
pub const VK_SHADER_CREATE_INDIRECT_BINDABLE_BIT_EXT: c_int = 128;
pub const VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkShaderCreateFlagBitsEXT = c_uint;
pub const VkShaderCreateFlagBitsEXT = enum_VkShaderCreateFlagBitsEXT;
pub const VkShaderCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceShaderObjectFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderObject: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderObjectFeaturesEXT = struct_VkPhysicalDeviceShaderObjectFeaturesEXT;
pub const struct_VkPhysicalDeviceShaderObjectPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBinaryUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    shaderBinaryVersion: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderObjectPropertiesEXT = struct_VkPhysicalDeviceShaderObjectPropertiesEXT;
pub const struct_VkShaderCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkShaderCreateFlagsEXT = @import("std").mem.zeroes(VkShaderCreateFlagsEXT),
    stage: VkShaderStageFlagBits = @import("std").mem.zeroes(VkShaderStageFlagBits),
    nextStage: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    codeType: VkShaderCodeTypeEXT = @import("std").mem.zeroes(VkShaderCodeTypeEXT),
    codeSize: usize = @import("std").mem.zeroes(usize),
    pCode: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    setLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pSetLayouts: [*c]const VkDescriptorSetLayout = @import("std").mem.zeroes([*c]const VkDescriptorSetLayout),
    pushConstantRangeCount: u32 = @import("std").mem.zeroes(u32),
    pPushConstantRanges: [*c]const VkPushConstantRange = @import("std").mem.zeroes([*c]const VkPushConstantRange),
    pSpecializationInfo: [*c]const VkSpecializationInfo = @import("std").mem.zeroes([*c]const VkSpecializationInfo),
};
pub const VkShaderCreateInfoEXT = struct_VkShaderCreateInfoEXT;
pub const VkShaderRequiredSubgroupSizeCreateInfoEXT = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
pub const struct_VkDepthClampRangeEXT = extern struct {
    minDepthClamp: f32 = @import("std").mem.zeroes(f32),
    maxDepthClamp: f32 = @import("std").mem.zeroes(f32),
};
pub const VkDepthClampRangeEXT = struct_VkDepthClampRangeEXT;
pub const PFN_vkCreateShadersEXT = ?*const fn (VkDevice, u32, [*c]const VkShaderCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkShaderEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyShaderEXT = ?*const fn (VkDevice, VkShaderEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetShaderBinaryDataEXT = ?*const fn (VkDevice, VkShaderEXT, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCmdBindShadersEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkShaderStageFlagBits, [*c]const VkShaderEXT) callconv(.C) void;
pub const PFN_vkCmdSetDepthClampRangeEXT = ?*const fn (VkCommandBuffer, VkDepthClampModeEXT, [*c]const VkDepthClampRangeEXT) callconv(.C) void;
pub const struct_VkPhysicalDeviceTilePropertiesFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    tileProperties: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTilePropertiesFeaturesQCOM = struct_VkPhysicalDeviceTilePropertiesFeaturesQCOM;
pub const struct_VkTilePropertiesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    tileSize: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    apronSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    origin: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
};
pub const VkTilePropertiesQCOM = struct_VkTilePropertiesQCOM;
pub const PFN_vkGetFramebufferTilePropertiesQCOM = ?*const fn (VkDevice, VkFramebuffer, [*c]u32, [*c]VkTilePropertiesQCOM) callconv(.C) VkResult;
pub const PFN_vkGetDynamicRenderingTilePropertiesQCOM = ?*const fn (VkDevice, [*c]const VkRenderingInfo, [*c]VkTilePropertiesQCOM) callconv(.C) VkResult;
pub const struct_VkPhysicalDeviceAmigoProfilingFeaturesSEC = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    amigoProfiling: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAmigoProfilingFeaturesSEC = struct_VkPhysicalDeviceAmigoProfilingFeaturesSEC;
pub const struct_VkAmigoProfilingSubmitInfoSEC = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    firstDrawTimestamp: u64 = @import("std").mem.zeroes(u64),
    swapBufferTimestamp: u64 = @import("std").mem.zeroes(u64),
};
pub const VkAmigoProfilingSubmitInfoSEC = struct_VkAmigoProfilingSubmitInfoSEC;
pub const struct_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiviewPerViewViewports: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM = struct_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM;
pub const VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV: c_int = 0;
pub const VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV: c_int = 1;
pub const VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkRayTracingInvocationReorderModeNV = c_uint;
pub const VkRayTracingInvocationReorderModeNV = enum_VkRayTracingInvocationReorderModeNV;
pub const struct_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingInvocationReorderReorderingHint: VkRayTracingInvocationReorderModeNV = @import("std").mem.zeroes(VkRayTracingInvocationReorderModeNV),
};
pub const VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV = struct_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV;
pub const struct_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingInvocationReorder: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV = struct_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV;
pub const struct_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedSparseAddressSpace: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV = struct_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV;
pub const struct_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedSparseAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    extendedSparseImageUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    extendedSparseBufferUsageFlags: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
};
pub const VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV = struct_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV;
pub const struct_VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    legacyVertexAttributes: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT = struct_VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT;
pub const struct_VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nativeUnalignedPerformance: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT = struct_VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT;
pub const VK_LAYER_SETTING_TYPE_BOOL32_EXT: c_int = 0;
pub const VK_LAYER_SETTING_TYPE_INT32_EXT: c_int = 1;
pub const VK_LAYER_SETTING_TYPE_INT64_EXT: c_int = 2;
pub const VK_LAYER_SETTING_TYPE_UINT32_EXT: c_int = 3;
pub const VK_LAYER_SETTING_TYPE_UINT64_EXT: c_int = 4;
pub const VK_LAYER_SETTING_TYPE_FLOAT32_EXT: c_int = 5;
pub const VK_LAYER_SETTING_TYPE_FLOAT64_EXT: c_int = 6;
pub const VK_LAYER_SETTING_TYPE_STRING_EXT: c_int = 7;
pub const VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkLayerSettingTypeEXT = c_uint;
pub const VkLayerSettingTypeEXT = enum_VkLayerSettingTypeEXT;
pub const struct_VkLayerSettingEXT = extern struct {
    pLayerName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    pSettingName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    type: VkLayerSettingTypeEXT = @import("std").mem.zeroes(VkLayerSettingTypeEXT),
    valueCount: u32 = @import("std").mem.zeroes(u32),
    pValues: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkLayerSettingEXT = struct_VkLayerSettingEXT;
pub const struct_VkLayerSettingsCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    settingCount: u32 = @import("std").mem.zeroes(u32),
    pSettings: [*c]const VkLayerSettingEXT = @import("std").mem.zeroes([*c]const VkLayerSettingEXT),
};
pub const VkLayerSettingsCreateInfoEXT = struct_VkLayerSettingsCreateInfoEXT;
pub const struct_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreBuiltins: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM = struct_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM;
pub const struct_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreMask: u64 = @import("std").mem.zeroes(u64),
    shaderCoreCount: u32 = @import("std").mem.zeroes(u32),
    shaderWarpsPerCore: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM = struct_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM;
pub const struct_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineLibraryGroupHandles: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT = struct_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT;
pub const struct_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicRenderingUnusedAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT = struct_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT;
pub const VK_LATENCY_MARKER_SIMULATION_START_NV: c_int = 0;
pub const VK_LATENCY_MARKER_SIMULATION_END_NV: c_int = 1;
pub const VK_LATENCY_MARKER_RENDERSUBMIT_START_NV: c_int = 2;
pub const VK_LATENCY_MARKER_RENDERSUBMIT_END_NV: c_int = 3;
pub const VK_LATENCY_MARKER_PRESENT_START_NV: c_int = 4;
pub const VK_LATENCY_MARKER_PRESENT_END_NV: c_int = 5;
pub const VK_LATENCY_MARKER_INPUT_SAMPLE_NV: c_int = 6;
pub const VK_LATENCY_MARKER_TRIGGER_FLASH_NV: c_int = 7;
pub const VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV: c_int = 8;
pub const VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV: c_int = 9;
pub const VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV: c_int = 10;
pub const VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV: c_int = 11;
pub const VK_LATENCY_MARKER_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkLatencyMarkerNV = c_uint;
pub const VkLatencyMarkerNV = enum_VkLatencyMarkerNV;
pub const VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV: c_int = 0;
pub const VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV: c_int = 1;
pub const VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOutOfBandQueueTypeNV = c_uint;
pub const VkOutOfBandQueueTypeNV = enum_VkOutOfBandQueueTypeNV;
pub const struct_VkLatencySleepModeInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    lowLatencyMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    lowLatencyBoost: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minimumIntervalUs: u32 = @import("std").mem.zeroes(u32),
};
pub const VkLatencySleepModeInfoNV = struct_VkLatencySleepModeInfoNV;
pub const struct_VkLatencySleepInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    signalSemaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    value: u64 = @import("std").mem.zeroes(u64),
};
pub const VkLatencySleepInfoNV = struct_VkLatencySleepInfoNV;
pub const struct_VkSetLatencyMarkerInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentID: u64 = @import("std").mem.zeroes(u64),
    marker: VkLatencyMarkerNV = @import("std").mem.zeroes(VkLatencyMarkerNV),
};
pub const VkSetLatencyMarkerInfoNV = struct_VkSetLatencyMarkerInfoNV;
pub const struct_VkLatencyTimingsFrameReportNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentID: u64 = @import("std").mem.zeroes(u64),
    inputSampleTimeUs: u64 = @import("std").mem.zeroes(u64),
    simStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    simEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    renderSubmitStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    renderSubmitEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    presentStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    presentEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    driverStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    driverEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    osRenderQueueStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    osRenderQueueEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    gpuRenderStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    gpuRenderEndTimeUs: u64 = @import("std").mem.zeroes(u64),
};
pub const VkLatencyTimingsFrameReportNV = struct_VkLatencyTimingsFrameReportNV;
pub const struct_VkGetLatencyMarkerInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    timingCount: u32 = @import("std").mem.zeroes(u32),
    pTimings: [*c]VkLatencyTimingsFrameReportNV = @import("std").mem.zeroes([*c]VkLatencyTimingsFrameReportNV),
};
pub const VkGetLatencyMarkerInfoNV = struct_VkGetLatencyMarkerInfoNV;
pub const struct_VkLatencySubmissionPresentIdNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentID: u64 = @import("std").mem.zeroes(u64),
};
pub const VkLatencySubmissionPresentIdNV = struct_VkLatencySubmissionPresentIdNV;
pub const struct_VkSwapchainLatencyCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    latencyModeEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSwapchainLatencyCreateInfoNV = struct_VkSwapchainLatencyCreateInfoNV;
pub const struct_VkOutOfBandQueueTypeInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queueType: VkOutOfBandQueueTypeNV = @import("std").mem.zeroes(VkOutOfBandQueueTypeNV),
};
pub const VkOutOfBandQueueTypeInfoNV = struct_VkOutOfBandQueueTypeInfoNV;
pub const struct_VkLatencySurfaceCapabilitiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentModeCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]VkPresentModeKHR = @import("std").mem.zeroes([*c]VkPresentModeKHR),
};
pub const VkLatencySurfaceCapabilitiesNV = struct_VkLatencySurfaceCapabilitiesNV;
pub const PFN_vkSetLatencySleepModeNV = ?*const fn (VkDevice, VkSwapchainKHR, [*c]const VkLatencySleepModeInfoNV) callconv(.C) VkResult;
pub const PFN_vkLatencySleepNV = ?*const fn (VkDevice, VkSwapchainKHR, [*c]const VkLatencySleepInfoNV) callconv(.C) VkResult;
pub const PFN_vkSetLatencyMarkerNV = ?*const fn (VkDevice, VkSwapchainKHR, [*c]const VkSetLatencyMarkerInfoNV) callconv(.C) void;
pub const PFN_vkGetLatencyTimingsNV = ?*const fn (VkDevice, VkSwapchainKHR, [*c]VkGetLatencyMarkerInfoNV) callconv(.C) void;
pub const PFN_vkQueueNotifyOutOfBandNV = ?*const fn (VkQueue, [*c]const VkOutOfBandQueueTypeInfoNV) callconv(.C) void;
pub const struct_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiviewPerViewRenderAreas: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM = struct_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM;
pub const struct_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    perViewRenderAreaCount: u32 = @import("std").mem.zeroes(u32),
    pPerViewRenderAreas: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM = struct_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM;
pub const struct_VkPhysicalDevicePerStageDescriptorSetFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    perStageDescriptorSet: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dynamicPipelineLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePerStageDescriptorSetFeaturesNV = struct_VkPhysicalDevicePerStageDescriptorSetFeaturesNV;
pub const VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM: c_int = 0;
pub const VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM: c_int = 1;
pub const VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM: c_int = 2147483647;
pub const enum_VkBlockMatchWindowCompareModeQCOM = c_uint;
pub const VkBlockMatchWindowCompareModeQCOM = enum_VkBlockMatchWindowCompareModeQCOM;
pub const struct_VkPhysicalDeviceImageProcessing2FeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    textureBlockMatch2: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageProcessing2FeaturesQCOM = struct_VkPhysicalDeviceImageProcessing2FeaturesQCOM;
pub const struct_VkPhysicalDeviceImageProcessing2PropertiesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxBlockMatchWindow: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkPhysicalDeviceImageProcessing2PropertiesQCOM = struct_VkPhysicalDeviceImageProcessing2PropertiesQCOM;
pub const struct_VkSamplerBlockMatchWindowCreateInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    windowExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    windowCompareMode: VkBlockMatchWindowCompareModeQCOM = @import("std").mem.zeroes(VkBlockMatchWindowCompareModeQCOM),
};
pub const VkSamplerBlockMatchWindowCreateInfoQCOM = struct_VkSamplerBlockMatchWindowCreateInfoQCOM;
pub const VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM: c_int = 0;
pub const VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM: c_int = 1;
pub const VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM: c_int = 2;
pub const VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM: c_int = 3;
pub const VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM: c_int = 2147483647;
pub const enum_VkCubicFilterWeightsQCOM = c_uint;
pub const VkCubicFilterWeightsQCOM = enum_VkCubicFilterWeightsQCOM;
pub const struct_VkPhysicalDeviceCubicWeightsFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    selectableCubicWeights: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCubicWeightsFeaturesQCOM = struct_VkPhysicalDeviceCubicWeightsFeaturesQCOM;
pub const struct_VkSamplerCubicWeightsCreateInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    cubicWeights: VkCubicFilterWeightsQCOM = @import("std").mem.zeroes(VkCubicFilterWeightsQCOM),
};
pub const VkSamplerCubicWeightsCreateInfoQCOM = struct_VkSamplerCubicWeightsCreateInfoQCOM;
pub const struct_VkBlitImageCubicWeightsInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    cubicWeights: VkCubicFilterWeightsQCOM = @import("std").mem.zeroes(VkCubicFilterWeightsQCOM),
};
pub const VkBlitImageCubicWeightsInfoQCOM = struct_VkBlitImageCubicWeightsInfoQCOM;
pub const struct_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ycbcrDegamma: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceYcbcrDegammaFeaturesQCOM = struct_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM;
pub const struct_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    enableYDegamma: VkBool32 = @import("std").mem.zeroes(VkBool32),
    enableCbCrDegamma: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM = struct_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM;
pub const struct_VkPhysicalDeviceCubicClampFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cubicRangeClamp: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCubicClampFeaturesQCOM = struct_VkPhysicalDeviceCubicClampFeaturesQCOM;
pub const struct_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    attachmentFeedbackLoopDynamicState: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT = struct_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT;
pub const PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT = ?*const fn (VkCommandBuffer, VkImageAspectFlags) callconv(.C) void;
pub const VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT: c_int = 0;
pub const VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT: c_int = 1;
pub const VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT: c_int = 2147483647;
pub const enum_VkLayeredDriverUnderlyingApiMSFT = c_uint;
pub const VkLayeredDriverUnderlyingApiMSFT = enum_VkLayeredDriverUnderlyingApiMSFT;
pub const struct_VkPhysicalDeviceLayeredDriverPropertiesMSFT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    underlyingAPI: VkLayeredDriverUnderlyingApiMSFT = @import("std").mem.zeroes(VkLayeredDriverUnderlyingApiMSFT),
};
pub const VkPhysicalDeviceLayeredDriverPropertiesMSFT = struct_VkPhysicalDeviceLayeredDriverPropertiesMSFT;
pub const struct_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorPoolOverallocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV = struct_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV;
pub const VK_DISPLAY_SURFACE_STEREO_TYPE_NONE_NV: c_int = 0;
pub const VK_DISPLAY_SURFACE_STEREO_TYPE_ONBOARD_DIN_NV: c_int = 1;
pub const VK_DISPLAY_SURFACE_STEREO_TYPE_HDMI_3D_NV: c_int = 2;
pub const VK_DISPLAY_SURFACE_STEREO_TYPE_INBAND_DISPLAYPORT_NV: c_int = 3;
pub const VK_DISPLAY_SURFACE_STEREO_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkDisplaySurfaceStereoTypeNV = c_uint;
pub const VkDisplaySurfaceStereoTypeNV = enum_VkDisplaySurfaceStereoTypeNV;
pub const struct_VkDisplaySurfaceStereoCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stereoType: VkDisplaySurfaceStereoTypeNV = @import("std").mem.zeroes(VkDisplaySurfaceStereoTypeNV),
};
pub const VkDisplaySurfaceStereoCreateInfoNV = struct_VkDisplaySurfaceStereoCreateInfoNV;
pub const struct_VkDisplayModeStereoPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    hdmi3DSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDisplayModeStereoPropertiesNV = struct_VkDisplayModeStereoPropertiesNV;
pub const struct_VkPhysicalDeviceRawAccessChainsFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderRawAccessChains: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRawAccessChainsFeaturesNV = struct_VkPhysicalDeviceRawAccessChainsFeaturesNV;
pub const struct_VkPhysicalDeviceCommandBufferInheritanceFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    commandBufferInheritance: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCommandBufferInheritanceFeaturesNV = struct_VkPhysicalDeviceCommandBufferInheritanceFeaturesNV;
pub const struct_VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderFloat16VectorAtomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV = struct_VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV;
pub const struct_VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderReplicatedComposites: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT = struct_VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT;
pub const struct_VkPhysicalDeviceRayTracingValidationFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingValidation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingValidationFeaturesNV = struct_VkPhysicalDeviceRayTracingValidationFeaturesNV;
pub const struct_VkIndirectExecutionSetEXT_T = opaque {};
pub const VkIndirectExecutionSetEXT = ?*struct_VkIndirectExecutionSetEXT_T;
pub const struct_VkIndirectCommandsLayoutEXT_T = opaque {};
pub const VkIndirectCommandsLayoutEXT = ?*struct_VkIndirectCommandsLayoutEXT_T;
pub const VK_INDIRECT_EXECUTION_SET_INFO_TYPE_PIPELINES_EXT: c_int = 0;
pub const VK_INDIRECT_EXECUTION_SET_INFO_TYPE_SHADER_OBJECTS_EXT: c_int = 1;
pub const VK_INDIRECT_EXECUTION_SET_INFO_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkIndirectExecutionSetInfoTypeEXT = c_uint;
pub const VkIndirectExecutionSetInfoTypeEXT = enum_VkIndirectExecutionSetInfoTypeEXT;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_EXECUTION_SET_EXT: c_int = 0;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_EXT: c_int = 1;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_SEQUENCE_INDEX_EXT: c_int = 2;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_EXT: c_int = 3;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_EXT: c_int = 4;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_EXT: c_int = 5;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_EXT: c_int = 6;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_COUNT_EXT: c_int = 7;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_COUNT_EXT: c_int = 8;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_EXT: c_int = 9;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV_EXT: c_int = 1000202002;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_NV_EXT: c_int = 1000202003;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_EXT: c_int = 1000328000;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_EXT: c_int = 1000328001;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_TRACE_RAYS2_EXT: c_int = 1000386004;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkIndirectCommandsTokenTypeEXT = c_uint;
pub const VkIndirectCommandsTokenTypeEXT = enum_VkIndirectCommandsTokenTypeEXT;
pub const VK_INDIRECT_COMMANDS_INPUT_MODE_VULKAN_INDEX_BUFFER_EXT: c_int = 1;
pub const VK_INDIRECT_COMMANDS_INPUT_MODE_DXGI_INDEX_BUFFER_EXT: c_int = 2;
pub const VK_INDIRECT_COMMANDS_INPUT_MODE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkIndirectCommandsInputModeFlagBitsEXT = c_uint;
pub const VkIndirectCommandsInputModeFlagBitsEXT = enum_VkIndirectCommandsInputModeFlagBitsEXT;
pub const VkIndirectCommandsInputModeFlagsEXT = VkFlags;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_EXT: c_int = 1;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_EXT: c_int = 2;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkIndirectCommandsLayoutUsageFlagBitsEXT = c_uint;
pub const VkIndirectCommandsLayoutUsageFlagBitsEXT = enum_VkIndirectCommandsLayoutUsageFlagBitsEXT;
pub const VkIndirectCommandsLayoutUsageFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceGeneratedCommands: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dynamicGeneratedPipelineLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT = struct_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT;
pub const struct_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxIndirectPipelineCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectShaderObjectCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectSequenceCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsTokenCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsTokenOffset: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsIndirectStride: u32 = @import("std").mem.zeroes(u32),
    supportedIndirectCommandsInputModes: VkIndirectCommandsInputModeFlagsEXT = @import("std").mem.zeroes(VkIndirectCommandsInputModeFlagsEXT),
    supportedIndirectCommandsShaderStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    supportedIndirectCommandsShaderStagesPipelineBinding: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    supportedIndirectCommandsShaderStagesShaderBinding: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    deviceGeneratedCommandsTransformFeedback: VkBool32 = @import("std").mem.zeroes(VkBool32),
    deviceGeneratedCommandsMultiDrawIndirectCount: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT = struct_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT;
pub const struct_VkGeneratedCommandsMemoryRequirementsInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    indirectExecutionSet: VkIndirectExecutionSetEXT = @import("std").mem.zeroes(VkIndirectExecutionSetEXT),
    indirectCommandsLayout: VkIndirectCommandsLayoutEXT = @import("std").mem.zeroes(VkIndirectCommandsLayoutEXT),
    maxSequenceCount: u32 = @import("std").mem.zeroes(u32),
    maxDrawCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkGeneratedCommandsMemoryRequirementsInfoEXT = struct_VkGeneratedCommandsMemoryRequirementsInfoEXT;
pub const struct_VkIndirectExecutionSetPipelineInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    initialPipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    maxPipelineCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkIndirectExecutionSetPipelineInfoEXT = struct_VkIndirectExecutionSetPipelineInfoEXT;
pub const struct_VkIndirectExecutionSetShaderLayoutInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    setLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pSetLayouts: [*c]const VkDescriptorSetLayout = @import("std").mem.zeroes([*c]const VkDescriptorSetLayout),
};
pub const VkIndirectExecutionSetShaderLayoutInfoEXT = struct_VkIndirectExecutionSetShaderLayoutInfoEXT;
pub const struct_VkIndirectExecutionSetShaderInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    shaderCount: u32 = @import("std").mem.zeroes(u32),
    pInitialShaders: [*c]const VkShaderEXT = @import("std").mem.zeroes([*c]const VkShaderEXT),
    pSetLayoutInfos: [*c]const VkIndirectExecutionSetShaderLayoutInfoEXT = @import("std").mem.zeroes([*c]const VkIndirectExecutionSetShaderLayoutInfoEXT),
    maxShaderCount: u32 = @import("std").mem.zeroes(u32),
    pushConstantRangeCount: u32 = @import("std").mem.zeroes(u32),
    pPushConstantRanges: [*c]const VkPushConstantRange = @import("std").mem.zeroes([*c]const VkPushConstantRange),
};
pub const VkIndirectExecutionSetShaderInfoEXT = struct_VkIndirectExecutionSetShaderInfoEXT;
pub const union_VkIndirectExecutionSetInfoEXT = extern union {
    pPipelineInfo: [*c]const VkIndirectExecutionSetPipelineInfoEXT,
    pShaderInfo: [*c]const VkIndirectExecutionSetShaderInfoEXT,
};
pub const VkIndirectExecutionSetInfoEXT = union_VkIndirectExecutionSetInfoEXT;
pub const struct_VkIndirectExecutionSetCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkIndirectExecutionSetInfoTypeEXT = @import("std").mem.zeroes(VkIndirectExecutionSetInfoTypeEXT),
    info: VkIndirectExecutionSetInfoEXT = @import("std").mem.zeroes(VkIndirectExecutionSetInfoEXT),
};
pub const VkIndirectExecutionSetCreateInfoEXT = struct_VkIndirectExecutionSetCreateInfoEXT;
pub const struct_VkGeneratedCommandsInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    shaderStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    indirectExecutionSet: VkIndirectExecutionSetEXT = @import("std").mem.zeroes(VkIndirectExecutionSetEXT),
    indirectCommandsLayout: VkIndirectCommandsLayoutEXT = @import("std").mem.zeroes(VkIndirectCommandsLayoutEXT),
    indirectAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    indirectAddressSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    preprocessAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    preprocessSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxSequenceCount: u32 = @import("std").mem.zeroes(u32),
    sequenceCountAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    maxDrawCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkGeneratedCommandsInfoEXT = struct_VkGeneratedCommandsInfoEXT;
pub const struct_VkWriteIndirectExecutionSetPipelineEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    index: u32 = @import("std").mem.zeroes(u32),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
};
pub const VkWriteIndirectExecutionSetPipelineEXT = struct_VkWriteIndirectExecutionSetPipelineEXT;
pub const struct_VkIndirectCommandsPushConstantTokenEXT = extern struct {
    updateRange: VkPushConstantRange = @import("std").mem.zeroes(VkPushConstantRange),
};
pub const VkIndirectCommandsPushConstantTokenEXT = struct_VkIndirectCommandsPushConstantTokenEXT;
pub const struct_VkIndirectCommandsVertexBufferTokenEXT = extern struct {
    vertexBindingUnit: u32 = @import("std").mem.zeroes(u32),
};
pub const VkIndirectCommandsVertexBufferTokenEXT = struct_VkIndirectCommandsVertexBufferTokenEXT;
pub const struct_VkIndirectCommandsIndexBufferTokenEXT = extern struct {
    mode: VkIndirectCommandsInputModeFlagBitsEXT = @import("std").mem.zeroes(VkIndirectCommandsInputModeFlagBitsEXT),
};
pub const VkIndirectCommandsIndexBufferTokenEXT = struct_VkIndirectCommandsIndexBufferTokenEXT;
pub const struct_VkIndirectCommandsExecutionSetTokenEXT = extern struct {
    type: VkIndirectExecutionSetInfoTypeEXT = @import("std").mem.zeroes(VkIndirectExecutionSetInfoTypeEXT),
    shaderStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
};
pub const VkIndirectCommandsExecutionSetTokenEXT = struct_VkIndirectCommandsExecutionSetTokenEXT;
pub const union_VkIndirectCommandsTokenDataEXT = extern union {
    pPushConstant: [*c]const VkIndirectCommandsPushConstantTokenEXT,
    pVertexBuffer: [*c]const VkIndirectCommandsVertexBufferTokenEXT,
    pIndexBuffer: [*c]const VkIndirectCommandsIndexBufferTokenEXT,
    pExecutionSet: [*c]const VkIndirectCommandsExecutionSetTokenEXT,
};
pub const VkIndirectCommandsTokenDataEXT = union_VkIndirectCommandsTokenDataEXT;
pub const struct_VkIndirectCommandsLayoutTokenEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkIndirectCommandsTokenTypeEXT = @import("std").mem.zeroes(VkIndirectCommandsTokenTypeEXT),
    data: VkIndirectCommandsTokenDataEXT = @import("std").mem.zeroes(VkIndirectCommandsTokenDataEXT),
    offset: u32 = @import("std").mem.zeroes(u32),
};
pub const VkIndirectCommandsLayoutTokenEXT = struct_VkIndirectCommandsLayoutTokenEXT;
pub const struct_VkIndirectCommandsLayoutCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkIndirectCommandsLayoutUsageFlagsEXT = @import("std").mem.zeroes(VkIndirectCommandsLayoutUsageFlagsEXT),
    shaderStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    indirectStride: u32 = @import("std").mem.zeroes(u32),
    pipelineLayout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    tokenCount: u32 = @import("std").mem.zeroes(u32),
    pTokens: [*c]const VkIndirectCommandsLayoutTokenEXT = @import("std").mem.zeroes([*c]const VkIndirectCommandsLayoutTokenEXT),
};
pub const VkIndirectCommandsLayoutCreateInfoEXT = struct_VkIndirectCommandsLayoutCreateInfoEXT;
pub const struct_VkDrawIndirectCountIndirectCommandEXT = extern struct {
    bufferAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    stride: u32 = @import("std").mem.zeroes(u32),
    commandCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDrawIndirectCountIndirectCommandEXT = struct_VkDrawIndirectCountIndirectCommandEXT;
pub const struct_VkBindVertexBufferIndirectCommandEXT = extern struct {
    bufferAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
};
pub const VkBindVertexBufferIndirectCommandEXT = struct_VkBindVertexBufferIndirectCommandEXT;
pub const struct_VkBindIndexBufferIndirectCommandEXT = extern struct {
    bufferAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: u32 = @import("std").mem.zeroes(u32),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
};
pub const VkBindIndexBufferIndirectCommandEXT = struct_VkBindIndexBufferIndirectCommandEXT;
pub const struct_VkGeneratedCommandsPipelineInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
};
pub const VkGeneratedCommandsPipelineInfoEXT = struct_VkGeneratedCommandsPipelineInfoEXT;
pub const struct_VkGeneratedCommandsShaderInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCount: u32 = @import("std").mem.zeroes(u32),
    pShaders: [*c]const VkShaderEXT = @import("std").mem.zeroes([*c]const VkShaderEXT),
};
pub const VkGeneratedCommandsShaderInfoEXT = struct_VkGeneratedCommandsShaderInfoEXT;
pub const struct_VkWriteIndirectExecutionSetShaderEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    index: u32 = @import("std").mem.zeroes(u32),
    shader: VkShaderEXT = @import("std").mem.zeroes(VkShaderEXT),
};
pub const VkWriteIndirectExecutionSetShaderEXT = struct_VkWriteIndirectExecutionSetShaderEXT;
pub const PFN_vkGetGeneratedCommandsMemoryRequirementsEXT = ?*const fn (VkDevice, [*c]const VkGeneratedCommandsMemoryRequirementsInfoEXT, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkCmdPreprocessGeneratedCommandsEXT = ?*const fn (VkCommandBuffer, [*c]const VkGeneratedCommandsInfoEXT, VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdExecuteGeneratedCommandsEXT = ?*const fn (VkCommandBuffer, VkBool32, [*c]const VkGeneratedCommandsInfoEXT) callconv(.C) void;
pub const PFN_vkCreateIndirectCommandsLayoutEXT = ?*const fn (VkDevice, [*c]const VkIndirectCommandsLayoutCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkIndirectCommandsLayoutEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyIndirectCommandsLayoutEXT = ?*const fn (VkDevice, VkIndirectCommandsLayoutEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateIndirectExecutionSetEXT = ?*const fn (VkDevice, [*c]const VkIndirectExecutionSetCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkIndirectExecutionSetEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyIndirectExecutionSetEXT = ?*const fn (VkDevice, VkIndirectExecutionSetEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkUpdateIndirectExecutionSetPipelineEXT = ?*const fn (VkDevice, VkIndirectExecutionSetEXT, u32, [*c]const VkWriteIndirectExecutionSetPipelineEXT) callconv(.C) void;
pub const PFN_vkUpdateIndirectExecutionSetShaderEXT = ?*const fn (VkDevice, VkIndirectExecutionSetEXT, u32, [*c]const VkWriteIndirectExecutionSetShaderEXT) callconv(.C) void;
pub const struct_VkPhysicalDeviceImageAlignmentControlFeaturesMESA = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageAlignmentControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageAlignmentControlFeaturesMESA = struct_VkPhysicalDeviceImageAlignmentControlFeaturesMESA;
pub const struct_VkPhysicalDeviceImageAlignmentControlPropertiesMESA = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedImageAlignmentMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceImageAlignmentControlPropertiesMESA = struct_VkPhysicalDeviceImageAlignmentControlPropertiesMESA;
pub const struct_VkImageAlignmentControlCreateInfoMESA = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maximumRequestedAlignment: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageAlignmentControlCreateInfoMESA = struct_VkImageAlignmentControlCreateInfoMESA;
pub const struct_VkPhysicalDeviceDepthClampControlFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthClampControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthClampControlFeaturesEXT = struct_VkPhysicalDeviceDepthClampControlFeaturesEXT;
pub const struct_VkPipelineViewportDepthClampControlCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthClampMode: VkDepthClampModeEXT = @import("std").mem.zeroes(VkDepthClampModeEXT),
    pDepthClampRange: [*c]const VkDepthClampRangeEXT = @import("std").mem.zeroes([*c]const VkDepthClampRangeEXT),
};
pub const VkPipelineViewportDepthClampControlCreateInfoEXT = struct_VkPipelineViewportDepthClampControlCreateInfoEXT;
pub const struct_VkPhysicalDeviceHdrVividFeaturesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hdrVivid: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceHdrVividFeaturesHUAWEI = struct_VkPhysicalDeviceHdrVividFeaturesHUAWEI;
pub const struct_VkHdrVividDynamicMetadataHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dynamicMetadataSize: usize = @import("std").mem.zeroes(usize),
    pDynamicMetadata: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkHdrVividDynamicMetadataHUAWEI = struct_VkHdrVividDynamicMetadataHUAWEI;
pub const struct_VkCooperativeMatrixFlexibleDimensionsPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    MGranularity: u32 = @import("std").mem.zeroes(u32),
    NGranularity: u32 = @import("std").mem.zeroes(u32),
    KGranularity: u32 = @import("std").mem.zeroes(u32),
    AType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    BType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    CType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    ResultType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    saturatingAccumulation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    scope: VkScopeKHR = @import("std").mem.zeroes(VkScopeKHR),
    workgroupInvocations: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCooperativeMatrixFlexibleDimensionsPropertiesNV = struct_VkCooperativeMatrixFlexibleDimensionsPropertiesNV;
pub const struct_VkPhysicalDeviceCooperativeMatrix2FeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrixWorkgroupScope: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixFlexibleDimensions: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixReductions: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixConversions: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixPerElementOperations: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixTensorAddressing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixBlockLoads: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCooperativeMatrix2FeaturesNV = struct_VkPhysicalDeviceCooperativeMatrix2FeaturesNV;
pub const struct_VkPhysicalDeviceCooperativeMatrix2PropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrixWorkgroupScopeMaxWorkgroupSize: u32 = @import("std").mem.zeroes(u32),
    cooperativeMatrixFlexibleDimensionsMaxDimension: u32 = @import("std").mem.zeroes(u32),
    cooperativeMatrixWorkgroupScopeReservedSharedMemory: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceCooperativeMatrix2PropertiesNV = struct_VkPhysicalDeviceCooperativeMatrix2PropertiesNV;
pub const PFN_vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkCooperativeMatrixFlexibleDimensionsPropertiesNV) callconv(.C) VkResult;
pub const struct_VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vertexAttributeRobustness: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT = struct_VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR: c_int = 0;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR: c_int = 1;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkBuildAccelerationStructureModeKHR = c_uint;
pub const VkBuildAccelerationStructureModeKHR = enum_VkBuildAccelerationStructureModeKHR;
pub const VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT: c_int = 8;
pub const VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV: c_int = 4;
pub const VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureCreateFlagBitsKHR = c_uint;
pub const VkAccelerationStructureCreateFlagBitsKHR = enum_VkAccelerationStructureCreateFlagBitsKHR;
pub const VkAccelerationStructureCreateFlagsKHR = VkFlags;
pub const struct_VkAccelerationStructureBuildRangeInfoKHR = extern struct {
    primitiveCount: u32 = @import("std").mem.zeroes(u32),
    primitiveOffset: u32 = @import("std").mem.zeroes(u32),
    firstVertex: u32 = @import("std").mem.zeroes(u32),
    transformOffset: u32 = @import("std").mem.zeroes(u32),
};
pub const VkAccelerationStructureBuildRangeInfoKHR = struct_VkAccelerationStructureBuildRangeInfoKHR;
pub const struct_VkAccelerationStructureGeometryTrianglesDataKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    vertexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    vertexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxVertex: u32 = @import("std").mem.zeroes(u32),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    indexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    transformData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
};
pub const VkAccelerationStructureGeometryTrianglesDataKHR = struct_VkAccelerationStructureGeometryTrianglesDataKHR;
pub const struct_VkAccelerationStructureGeometryAabbsDataKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    data: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    stride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkAccelerationStructureGeometryAabbsDataKHR = struct_VkAccelerationStructureGeometryAabbsDataKHR;
pub const struct_VkAccelerationStructureGeometryInstancesDataKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    arrayOfPointers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    data: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
};
pub const VkAccelerationStructureGeometryInstancesDataKHR = struct_VkAccelerationStructureGeometryInstancesDataKHR;
pub const union_VkAccelerationStructureGeometryDataKHR = extern union {
    triangles: VkAccelerationStructureGeometryTrianglesDataKHR,
    aabbs: VkAccelerationStructureGeometryAabbsDataKHR,
    instances: VkAccelerationStructureGeometryInstancesDataKHR,
};
pub const VkAccelerationStructureGeometryDataKHR = union_VkAccelerationStructureGeometryDataKHR;
pub const struct_VkAccelerationStructureGeometryKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    geometryType: VkGeometryTypeKHR = @import("std").mem.zeroes(VkGeometryTypeKHR),
    geometry: VkAccelerationStructureGeometryDataKHR = @import("std").mem.zeroes(VkAccelerationStructureGeometryDataKHR),
    flags: VkGeometryFlagsKHR = @import("std").mem.zeroes(VkGeometryFlagsKHR),
};
pub const VkAccelerationStructureGeometryKHR = struct_VkAccelerationStructureGeometryKHR;
pub const struct_VkAccelerationStructureBuildGeometryInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkAccelerationStructureTypeKHR = @import("std").mem.zeroes(VkAccelerationStructureTypeKHR),
    flags: VkBuildAccelerationStructureFlagsKHR = @import("std").mem.zeroes(VkBuildAccelerationStructureFlagsKHR),
    mode: VkBuildAccelerationStructureModeKHR = @import("std").mem.zeroes(VkBuildAccelerationStructureModeKHR),
    srcAccelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    dstAccelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    geometryCount: u32 = @import("std").mem.zeroes(u32),
    pGeometries: [*c]const VkAccelerationStructureGeometryKHR = @import("std").mem.zeroes([*c]const VkAccelerationStructureGeometryKHR),
    ppGeometries: [*c]const [*c]const VkAccelerationStructureGeometryKHR = @import("std").mem.zeroes([*c]const [*c]const VkAccelerationStructureGeometryKHR),
    scratchData: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
};
pub const VkAccelerationStructureBuildGeometryInfoKHR = struct_VkAccelerationStructureBuildGeometryInfoKHR;
pub const struct_VkAccelerationStructureCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    createFlags: VkAccelerationStructureCreateFlagsKHR = @import("std").mem.zeroes(VkAccelerationStructureCreateFlagsKHR),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    type: VkAccelerationStructureTypeKHR = @import("std").mem.zeroes(VkAccelerationStructureTypeKHR),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
};
pub const VkAccelerationStructureCreateInfoKHR = struct_VkAccelerationStructureCreateInfoKHR;
pub const struct_VkWriteDescriptorSetAccelerationStructureKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructureCount: u32 = @import("std").mem.zeroes(u32),
    pAccelerationStructures: [*c]const VkAccelerationStructureKHR = @import("std").mem.zeroes([*c]const VkAccelerationStructureKHR),
};
pub const VkWriteDescriptorSetAccelerationStructureKHR = struct_VkWriteDescriptorSetAccelerationStructureKHR;
pub const struct_VkPhysicalDeviceAccelerationStructureFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    accelerationStructure: VkBool32 = @import("std").mem.zeroes(VkBool32),
    accelerationStructureCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    accelerationStructureIndirectBuild: VkBool32 = @import("std").mem.zeroes(VkBool32),
    accelerationStructureHostCommands: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAccelerationStructureFeaturesKHR = struct_VkPhysicalDeviceAccelerationStructureFeaturesKHR;
pub const struct_VkPhysicalDeviceAccelerationStructurePropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxGeometryCount: u64 = @import("std").mem.zeroes(u64),
    maxInstanceCount: u64 = @import("std").mem.zeroes(u64),
    maxPrimitiveCount: u64 = @import("std").mem.zeroes(u64),
    maxPerStageDescriptorAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    minAccelerationStructureScratchOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceAccelerationStructurePropertiesKHR = struct_VkPhysicalDeviceAccelerationStructurePropertiesKHR;
pub const struct_VkAccelerationStructureDeviceAddressInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
};
pub const VkAccelerationStructureDeviceAddressInfoKHR = struct_VkAccelerationStructureDeviceAddressInfoKHR;
pub const struct_VkAccelerationStructureVersionInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pVersionData: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkAccelerationStructureVersionInfoKHR = struct_VkAccelerationStructureVersionInfoKHR;
pub const struct_VkCopyAccelerationStructureToMemoryInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    dst: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
    mode: VkCopyAccelerationStructureModeKHR = @import("std").mem.zeroes(VkCopyAccelerationStructureModeKHR),
};
pub const VkCopyAccelerationStructureToMemoryInfoKHR = struct_VkCopyAccelerationStructureToMemoryInfoKHR;
pub const struct_VkCopyMemoryToAccelerationStructureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    dst: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    mode: VkCopyAccelerationStructureModeKHR = @import("std").mem.zeroes(VkCopyAccelerationStructureModeKHR),
};
pub const VkCopyMemoryToAccelerationStructureInfoKHR = struct_VkCopyMemoryToAccelerationStructureInfoKHR;
pub const struct_VkCopyAccelerationStructureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    dst: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    mode: VkCopyAccelerationStructureModeKHR = @import("std").mem.zeroes(VkCopyAccelerationStructureModeKHR),
};
pub const VkCopyAccelerationStructureInfoKHR = struct_VkCopyAccelerationStructureInfoKHR;
pub const struct_VkAccelerationStructureBuildSizesInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructureSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    updateScratchSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    buildScratchSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkAccelerationStructureBuildSizesInfoKHR = struct_VkAccelerationStructureBuildSizesInfoKHR;
pub const PFN_vkCreateAccelerationStructureKHR = ?*const fn (VkDevice, [*c]const VkAccelerationStructureCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkAccelerationStructureKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyAccelerationStructureKHR = ?*const fn (VkDevice, VkAccelerationStructureKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdBuildAccelerationStructuresKHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const [*c]const VkAccelerationStructureBuildRangeInfoKHR) callconv(.C) void;
pub const PFN_vkCmdBuildAccelerationStructuresIndirectKHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const VkDeviceAddress, [*c]const u32, [*c]const [*c]const u32) callconv(.C) void;
pub const PFN_vkBuildAccelerationStructuresKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, u32, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const [*c]const VkAccelerationStructureBuildRangeInfoKHR) callconv(.C) VkResult;
pub const PFN_vkCopyAccelerationStructureKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyAccelerationStructureInfoKHR) callconv(.C) VkResult;
pub const PFN_vkCopyAccelerationStructureToMemoryKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyAccelerationStructureToMemoryInfoKHR) callconv(.C) VkResult;
pub const PFN_vkCopyMemoryToAccelerationStructureKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyMemoryToAccelerationStructureInfoKHR) callconv(.C) VkResult;
pub const PFN_vkWriteAccelerationStructuresPropertiesKHR = ?*const fn (VkDevice, u32, [*c]const VkAccelerationStructureKHR, VkQueryType, usize, ?*anyopaque, usize) callconv(.C) VkResult;
pub const PFN_vkCmdCopyAccelerationStructureKHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyAccelerationStructureInfoKHR) callconv(.C) void;
pub const PFN_vkCmdCopyAccelerationStructureToMemoryKHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyAccelerationStructureToMemoryInfoKHR) callconv(.C) void;
pub const PFN_vkCmdCopyMemoryToAccelerationStructureKHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyMemoryToAccelerationStructureInfoKHR) callconv(.C) void;
pub const PFN_vkGetAccelerationStructureDeviceAddressKHR = ?*const fn (VkDevice, [*c]const VkAccelerationStructureDeviceAddressInfoKHR) callconv(.C) VkDeviceAddress;
pub const PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureKHR, VkQueryType, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkGetDeviceAccelerationStructureCompatibilityKHR = ?*const fn (VkDevice, [*c]const VkAccelerationStructureVersionInfoKHR, [*c]VkAccelerationStructureCompatibilityKHR) callconv(.C) void;
pub const PFN_vkGetAccelerationStructureBuildSizesKHR = ?*const fn (VkDevice, VkAccelerationStructureBuildTypeKHR, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const u32, [*c]VkAccelerationStructureBuildSizesInfoKHR) callconv(.C) void;
pub const VK_SHADER_GROUP_SHADER_GENERAL_KHR: c_int = 0;
pub const VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR: c_int = 1;
pub const VK_SHADER_GROUP_SHADER_ANY_HIT_KHR: c_int = 2;
pub const VK_SHADER_GROUP_SHADER_INTERSECTION_KHR: c_int = 3;
pub const VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkShaderGroupShaderKHR = c_uint;
pub const VkShaderGroupShaderKHR = enum_VkShaderGroupShaderKHR;
pub const struct_VkRayTracingShaderGroupCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkRayTracingShaderGroupTypeKHR = @import("std").mem.zeroes(VkRayTracingShaderGroupTypeKHR),
    generalShader: u32 = @import("std").mem.zeroes(u32),
    closestHitShader: u32 = @import("std").mem.zeroes(u32),
    anyHitShader: u32 = @import("std").mem.zeroes(u32),
    intersectionShader: u32 = @import("std").mem.zeroes(u32),
    pShaderGroupCaptureReplayHandle: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkRayTracingShaderGroupCreateInfoKHR = struct_VkRayTracingShaderGroupCreateInfoKHR;
pub const struct_VkRayTracingPipelineInterfaceCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxPipelineRayPayloadSize: u32 = @import("std").mem.zeroes(u32),
    maxPipelineRayHitAttributeSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkRayTracingPipelineInterfaceCreateInfoKHR = struct_VkRayTracingPipelineInterfaceCreateInfoKHR;
pub const struct_VkRayTracingPipelineCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    groupCount: u32 = @import("std").mem.zeroes(u32),
    pGroups: [*c]const VkRayTracingShaderGroupCreateInfoKHR = @import("std").mem.zeroes([*c]const VkRayTracingShaderGroupCreateInfoKHR),
    maxPipelineRayRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    pLibraryInfo: [*c]const VkPipelineLibraryCreateInfoKHR = @import("std").mem.zeroes([*c]const VkPipelineLibraryCreateInfoKHR),
    pLibraryInterface: [*c]const VkRayTracingPipelineInterfaceCreateInfoKHR = @import("std").mem.zeroes([*c]const VkRayTracingPipelineInterfaceCreateInfoKHR),
    pDynamicState: [*c]const VkPipelineDynamicStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineDynamicStateCreateInfo),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
};
pub const VkRayTracingPipelineCreateInfoKHR = struct_VkRayTracingPipelineCreateInfoKHR;
pub const struct_VkPhysicalDeviceRayTracingPipelineFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingPipeline: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineShaderGroupHandleCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineShaderGroupHandleCaptureReplayMixed: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineTraceRaysIndirect: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTraversalPrimitiveCulling: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingPipelineFeaturesKHR = struct_VkPhysicalDeviceRayTracingPipelineFeaturesKHR;
pub const struct_VkPhysicalDeviceRayTracingPipelinePropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderGroupHandleSize: u32 = @import("std").mem.zeroes(u32),
    maxRayRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    maxShaderGroupStride: u32 = @import("std").mem.zeroes(u32),
    shaderGroupBaseAlignment: u32 = @import("std").mem.zeroes(u32),
    shaderGroupHandleCaptureReplaySize: u32 = @import("std").mem.zeroes(u32),
    maxRayDispatchInvocationCount: u32 = @import("std").mem.zeroes(u32),
    shaderGroupHandleAlignment: u32 = @import("std").mem.zeroes(u32),
    maxRayHitAttributeSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceRayTracingPipelinePropertiesKHR = struct_VkPhysicalDeviceRayTracingPipelinePropertiesKHR;
pub const struct_VkStridedDeviceAddressRegionKHR = extern struct {
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    stride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkStridedDeviceAddressRegionKHR = struct_VkStridedDeviceAddressRegionKHR;
pub const struct_VkTraceRaysIndirectCommandKHR = extern struct {
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    depth: u32 = @import("std").mem.zeroes(u32),
};
pub const VkTraceRaysIndirectCommandKHR = struct_VkTraceRaysIndirectCommandKHR;
pub const PFN_vkCmdTraceRaysKHR = ?*const fn (VkCommandBuffer, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCreateRayTracingPipelinesKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, VkPipelineCache, u32, [*c]const VkRayTracingPipelineCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = ?*const fn (VkDevice, VkPipeline, u32, u32, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCmdTraceRaysIndirectKHR = ?*const fn (VkCommandBuffer, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, VkDeviceAddress) callconv(.C) void;
pub const PFN_vkGetRayTracingShaderGroupStackSizeKHR = ?*const fn (VkDevice, VkPipeline, u32, VkShaderGroupShaderKHR) callconv(.C) VkDeviceSize;
pub const PFN_vkCmdSetRayTracingPipelineStackSizeKHR = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const struct_VkPhysicalDeviceRayQueryFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayQueryFeaturesKHR = struct_VkPhysicalDeviceRayQueryFeaturesKHR;
pub const struct_VkPhysicalDeviceMeshShaderFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    taskShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    meshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewMeshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitiveFragmentShadingRateMeshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    meshShaderQueries: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMeshShaderFeaturesEXT = struct_VkPhysicalDeviceMeshShaderFeaturesEXT;
pub const struct_VkPhysicalDeviceMeshShaderPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxTaskWorkGroupTotalCount: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxTaskWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxTaskPayloadSize: u32 = @import("std").mem.zeroes(u32),
    maxTaskSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxTaskPayloadAndSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupTotalCount: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxMeshWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxMeshSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshPayloadAndSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshPayloadAndOutputMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputVertices: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputPrimitives: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputLayers: u32 = @import("std").mem.zeroes(u32),
    maxMeshMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerVertexGranularity: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerPrimitiveGranularity: u32 = @import("std").mem.zeroes(u32),
    maxPreferredTaskWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxPreferredMeshWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    prefersLocalInvocationVertexOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
    prefersLocalInvocationPrimitiveOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
    prefersCompactVertexOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
    prefersCompactPrimitiveOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMeshShaderPropertiesEXT = struct_VkPhysicalDeviceMeshShaderPropertiesEXT;
pub const struct_VkDrawMeshTasksIndirectCommandEXT = extern struct {
    groupCountX: u32 = @import("std").mem.zeroes(u32),
    groupCountY: u32 = @import("std").mem.zeroes(u32),
    groupCountZ: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDrawMeshTasksIndirectCommandEXT = struct_VkDrawMeshTasksIndirectCommandEXT;
pub const PFN_vkCmdDrawMeshTasksEXT = ?*const fn (VkCommandBuffer, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectEXT = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectCountEXT = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn SDL_GetPlatform() [*c]const u8;
pub const u_char = __u_char;
pub const u_short = __u_short;
pub const u_int = __u_int;
pub const u_long = __u_long;
pub const quad_t = __quad_t;
pub const u_quad_t = __u_quad_t;
pub const fsid_t = __fsid_t;
pub const loff_t = __loff_t;
pub const ino_t = __ino_t;
pub const dev_t = __dev_t;
pub const gid_t = __gid_t;
pub const mode_t = __mode_t;
pub const nlink_t = __nlink_t;
pub const uid_t = __uid_t;
pub const off_t = __off_t;
pub const pid_t = __pid_t;
pub const id_t = __id_t;
pub const daddr_t = __daddr_t;
pub const caddr_t = __caddr_t;
pub const key_t = __key_t;
pub const clock_t = __clock_t;
pub const clockid_t = __clockid_t;
pub const time_t = __time_t;
pub const timer_t = __timer_t;
pub const ulong = c_ulong;
pub const ushort = c_ushort;
pub const uint = c_uint;
pub const u_int8_t = __uint8_t;
pub const u_int16_t = __uint16_t;
pub const u_int32_t = __uint32_t;
pub const u_int64_t = __uint64_t;
pub const register_t = c_long;
pub fn __bswap_16(arg___bsx: __uint16_t) callconv(.C) __uint16_t {
    var __bsx = arg___bsx;
    _ = &__bsx;
    return @as(__uint16_t, @bitCast(@as(c_short, @truncate(((@as(c_int, @bitCast(@as(c_uint, __bsx))) >> @intCast(8)) & @as(c_int, 255)) | ((@as(c_int, @bitCast(@as(c_uint, __bsx))) & @as(c_int, 255)) << @intCast(8))))));
}
pub fn __bswap_32(arg___bsx: __uint32_t) callconv(.C) __uint32_t {
    var __bsx = arg___bsx;
    _ = &__bsx;
    return ((((__bsx & @as(c_uint, 4278190080)) >> @intCast(24)) | ((__bsx & @as(c_uint, 16711680)) >> @intCast(8))) | ((__bsx & @as(c_uint, 65280)) << @intCast(8))) | ((__bsx & @as(c_uint, 255)) << @intCast(24));
}
pub fn __bswap_64(arg___bsx: __uint64_t) callconv(.C) __uint64_t {
    var __bsx = arg___bsx;
    _ = &__bsx;
    return @as(__uint64_t, @bitCast(@as(c_ulong, @truncate(((((((((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 18374686479671623680)) >> @intCast(56)) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 71776119061217280)) >> @intCast(40))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 280375465082880)) >> @intCast(24))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 1095216660480)) >> @intCast(8))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 4278190080)) << @intCast(8))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 16711680)) << @intCast(24))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 65280)) << @intCast(40))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 255)) << @intCast(56))))));
}
pub fn __uint16_identity(arg___x: __uint16_t) callconv(.C) __uint16_t {
    var __x = arg___x;
    _ = &__x;
    return __x;
}
pub fn __uint32_identity(arg___x: __uint32_t) callconv(.C) __uint32_t {
    var __x = arg___x;
    _ = &__x;
    return __x;
}
pub fn __uint64_identity(arg___x: __uint64_t) callconv(.C) __uint64_t {
    var __x = arg___x;
    _ = &__x;
    return __x;
}
pub const __sigset_t = extern struct {
    __val: [16]c_ulong = @import("std").mem.zeroes([16]c_ulong),
};
pub const sigset_t = __sigset_t;
pub const struct_timeval = extern struct {
    tv_sec: __time_t = @import("std").mem.zeroes(__time_t),
    tv_usec: __suseconds_t = @import("std").mem.zeroes(__suseconds_t),
};
pub const struct_timespec = extern struct {
    tv_sec: __time_t = @import("std").mem.zeroes(__time_t),
    tv_nsec: __syscall_slong_t = @import("std").mem.zeroes(__syscall_slong_t),
};
pub const suseconds_t = __suseconds_t;
pub const __fd_mask = c_long;
pub const fd_set = extern struct {
    __fds_bits: [16]__fd_mask = @import("std").mem.zeroes([16]__fd_mask),
};
pub const fd_mask = __fd_mask;
pub extern fn select(__nfds: c_int, noalias __readfds: [*c]fd_set, noalias __writefds: [*c]fd_set, noalias __exceptfds: [*c]fd_set, noalias __timeout: [*c]struct_timeval) c_int;
pub extern fn pselect(__nfds: c_int, noalias __readfds: [*c]fd_set, noalias __writefds: [*c]fd_set, noalias __exceptfds: [*c]fd_set, noalias __timeout: [*c]const struct_timespec, noalias __sigmask: [*c]const __sigset_t) c_int;
pub const blksize_t = __blksize_t;
pub const blkcnt_t = __blkcnt_t;
pub const fsblkcnt_t = __fsblkcnt_t;
pub const fsfilcnt_t = __fsfilcnt_t;
const struct_unnamed_1 = extern struct {
    __low: c_uint = @import("std").mem.zeroes(c_uint),
    __high: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const __atomic_wide_counter = extern union {
    __value64: c_ulonglong,
    __value32: struct_unnamed_1,
};
pub const struct___pthread_internal_list = extern struct {
    __prev: [*c]struct___pthread_internal_list = @import("std").mem.zeroes([*c]struct___pthread_internal_list),
    __next: [*c]struct___pthread_internal_list = @import("std").mem.zeroes([*c]struct___pthread_internal_list),
};
pub const __pthread_list_t = struct___pthread_internal_list;
pub const struct___pthread_internal_slist = extern struct {
    __next: [*c]struct___pthread_internal_slist = @import("std").mem.zeroes([*c]struct___pthread_internal_slist),
};
pub const __pthread_slist_t = struct___pthread_internal_slist;
pub const struct___pthread_mutex_s = extern struct {
    __lock: c_int = @import("std").mem.zeroes(c_int),
    __count: c_uint = @import("std").mem.zeroes(c_uint),
    __owner: c_int = @import("std").mem.zeroes(c_int),
    __nusers: c_uint = @import("std").mem.zeroes(c_uint),
    __kind: c_int = @import("std").mem.zeroes(c_int),
    __spins: c_short = @import("std").mem.zeroes(c_short),
    __elision: c_short = @import("std").mem.zeroes(c_short),
    __list: __pthread_list_t = @import("std").mem.zeroes(__pthread_list_t),
};
pub const struct___pthread_rwlock_arch_t = extern struct {
    __readers: c_uint = @import("std").mem.zeroes(c_uint),
    __writers: c_uint = @import("std").mem.zeroes(c_uint),
    __wrphase_futex: c_uint = @import("std").mem.zeroes(c_uint),
    __writers_futex: c_uint = @import("std").mem.zeroes(c_uint),
    __pad3: c_uint = @import("std").mem.zeroes(c_uint),
    __pad4: c_uint = @import("std").mem.zeroes(c_uint),
    __cur_writer: c_int = @import("std").mem.zeroes(c_int),
    __shared: c_int = @import("std").mem.zeroes(c_int),
    __rwelision: i8 = @import("std").mem.zeroes(i8),
    __pad1: [7]u8 = @import("std").mem.zeroes([7]u8),
    __pad2: c_ulong = @import("std").mem.zeroes(c_ulong),
    __flags: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct___pthread_cond_s = extern struct {
    __wseq: __atomic_wide_counter = @import("std").mem.zeroes(__atomic_wide_counter),
    __g1_start: __atomic_wide_counter = @import("std").mem.zeroes(__atomic_wide_counter),
    __g_refs: [2]c_uint = @import("std").mem.zeroes([2]c_uint),
    __g_size: [2]c_uint = @import("std").mem.zeroes([2]c_uint),
    __g1_orig_size: c_uint = @import("std").mem.zeroes(c_uint),
    __wrefs: c_uint = @import("std").mem.zeroes(c_uint),
    __g_signals: [2]c_uint = @import("std").mem.zeroes([2]c_uint),
};
pub const __tss_t = c_uint;
pub const __thrd_t = c_ulong;
pub const __once_flag = extern struct {
    __data: c_int = @import("std").mem.zeroes(c_int),
};
pub const pthread_t = c_ulong;
pub const pthread_mutexattr_t = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub const pthread_condattr_t = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub const pthread_key_t = c_uint;
pub const pthread_once_t = c_int;
pub const union_pthread_attr_t = extern union {
    __size: [56]u8,
    __align: c_long,
};
pub const pthread_attr_t = union_pthread_attr_t;
pub const pthread_mutex_t = extern union {
    __data: struct___pthread_mutex_s,
    __size: [40]u8,
    __align: c_long,
};
pub const pthread_cond_t = extern union {
    __data: struct___pthread_cond_s,
    __size: [48]u8,
    __align: c_longlong,
};
pub const pthread_rwlock_t = extern union {
    __data: struct___pthread_rwlock_arch_t,
    __size: [56]u8,
    __align: c_long,
};
pub const pthread_rwlockattr_t = extern union {
    __size: [8]u8,
    __align: c_long,
};
pub const pthread_spinlock_t = c_int;
pub const pthread_barrier_t = extern union {
    __size: [32]u8,
    __align: c_long,
};
pub const pthread_barrierattr_t = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub const struct___va_list_tag_2 = extern struct {
    gp_offset: c_uint = @import("std").mem.zeroes(c_uint),
    fp_offset: c_uint = @import("std").mem.zeroes(c_uint),
    overflow_arg_area: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    reg_save_area: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const __builtin_va_list = [1]struct___va_list_tag_2;
pub const __gnuc_va_list = __builtin_va_list;
const union_unnamed_3 = extern union {
    __wch: c_uint,
    __wchb: [4]u8,
};
pub const __mbstate_t = extern struct {
    __count: c_int = @import("std").mem.zeroes(c_int),
    __value: union_unnamed_3 = @import("std").mem.zeroes(union_unnamed_3),
};
pub const struct__G_fpos_t = extern struct {
    __pos: __off_t = @import("std").mem.zeroes(__off_t),
    __state: __mbstate_t = @import("std").mem.zeroes(__mbstate_t),
};
pub const __fpos_t = struct__G_fpos_t;
pub const struct__G_fpos64_t = extern struct {
    __pos: __off64_t = @import("std").mem.zeroes(__off64_t),
    __state: __mbstate_t = @import("std").mem.zeroes(__mbstate_t),
};
pub const __fpos64_t = struct__G_fpos64_t;
pub const struct__IO_marker = opaque {};
pub const _IO_lock_t = anyopaque;
pub const struct__IO_codecvt = opaque {};
pub const struct__IO_wide_data = opaque {};
pub const struct__IO_FILE = extern struct {
    _flags: c_int = @import("std").mem.zeroes(c_int),
    _IO_read_ptr: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_read_end: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_read_base: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_write_base: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_write_ptr: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_write_end: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_buf_base: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_buf_end: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_save_base: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_backup_base: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _IO_save_end: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _markers: ?*struct__IO_marker = @import("std").mem.zeroes(?*struct__IO_marker),
    _chain: [*c]struct__IO_FILE = @import("std").mem.zeroes([*c]struct__IO_FILE),
    _fileno: c_int = @import("std").mem.zeroes(c_int),
    _flags2: c_int = @import("std").mem.zeroes(c_int),
    _old_offset: __off_t = @import("std").mem.zeroes(__off_t),
    _cur_column: c_ushort = @import("std").mem.zeroes(c_ushort),
    _vtable_offset: i8 = @import("std").mem.zeroes(i8),
    _shortbuf: [1]u8 = @import("std").mem.zeroes([1]u8),
    _lock: ?*_IO_lock_t = @import("std").mem.zeroes(?*_IO_lock_t),
    _offset: __off64_t = @import("std").mem.zeroes(__off64_t),
    _codecvt: ?*struct__IO_codecvt = @import("std").mem.zeroes(?*struct__IO_codecvt),
    _wide_data: ?*struct__IO_wide_data = @import("std").mem.zeroes(?*struct__IO_wide_data),
    _freeres_list: [*c]struct__IO_FILE = @import("std").mem.zeroes([*c]struct__IO_FILE),
    _freeres_buf: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    _prevchain: [*c][*c]struct__IO_FILE = @import("std").mem.zeroes([*c][*c]struct__IO_FILE),
    _mode: c_int = @import("std").mem.zeroes(c_int),
    _unused2: [20]u8 = @import("std").mem.zeroes([20]u8),
};
pub const __FILE = struct__IO_FILE;
pub const FILE = struct__IO_FILE;
pub const cookie_read_function_t = fn (?*anyopaque, [*c]u8, usize) callconv(.C) __ssize_t;
pub const cookie_write_function_t = fn (?*anyopaque, [*c]const u8, usize) callconv(.C) __ssize_t;
pub const cookie_seek_function_t = fn (?*anyopaque, [*c]__off64_t, c_int) callconv(.C) c_int;
pub const cookie_close_function_t = fn (?*anyopaque) callconv(.C) c_int;
pub const struct__IO_cookie_io_functions_t = extern struct {
    read: ?*const cookie_read_function_t = @import("std").mem.zeroes(?*const cookie_read_function_t),
    write: ?*const cookie_write_function_t = @import("std").mem.zeroes(?*const cookie_write_function_t),
    seek: ?*const cookie_seek_function_t = @import("std").mem.zeroes(?*const cookie_seek_function_t),
    close: ?*const cookie_close_function_t = @import("std").mem.zeroes(?*const cookie_close_function_t),
};
pub const cookie_io_functions_t = struct__IO_cookie_io_functions_t;
pub const va_list = __gnuc_va_list;
pub const fpos_t = __fpos_t;
pub extern var stdin: [*c]FILE;
pub extern var stdout: [*c]FILE;
pub extern var stderr: [*c]FILE;
pub extern fn remove(__filename: [*c]const u8) c_int;
pub extern fn rename(__old: [*c]const u8, __new: [*c]const u8) c_int;
pub extern fn renameat(__oldfd: c_int, __old: [*c]const u8, __newfd: c_int, __new: [*c]const u8) c_int;
pub extern fn fclose(__stream: [*c]FILE) c_int;
pub extern fn tmpfile() [*c]FILE;
pub extern fn tmpnam([*c]u8) [*c]u8;
pub extern fn tmpnam_r(__s: [*c]u8) [*c]u8;
pub extern fn tempnam(__dir: [*c]const u8, __pfx: [*c]const u8) [*c]u8;
pub extern fn fflush(__stream: [*c]FILE) c_int;
pub extern fn fflush_unlocked(__stream: [*c]FILE) c_int;
pub extern fn fopen(__filename: [*c]const u8, __modes: [*c]const u8) [*c]FILE;
pub extern fn freopen(noalias __filename: [*c]const u8, noalias __modes: [*c]const u8, noalias __stream: [*c]FILE) [*c]FILE;
pub extern fn fdopen(__fd: c_int, __modes: [*c]const u8) [*c]FILE;
pub extern fn fopencookie(noalias __magic_cookie: ?*anyopaque, noalias __modes: [*c]const u8, __io_funcs: cookie_io_functions_t) [*c]FILE;
pub extern fn fmemopen(__s: ?*anyopaque, __len: usize, __modes: [*c]const u8) [*c]FILE;
pub extern fn open_memstream(__bufloc: [*c][*c]u8, __sizeloc: [*c]usize) [*c]FILE;
pub extern fn setbuf(noalias __stream: [*c]FILE, noalias __buf: [*c]u8) void;
pub extern fn setvbuf(noalias __stream: [*c]FILE, noalias __buf: [*c]u8, __modes: c_int, __n: usize) c_int;
pub extern fn setbuffer(noalias __stream: [*c]FILE, noalias __buf: [*c]u8, __size: usize) void;
pub extern fn setlinebuf(__stream: [*c]FILE) void;
pub extern fn fprintf(__stream: [*c]FILE, __format: [*c]const u8, ...) c_int;
pub extern fn printf(__format: [*c]const u8, ...) c_int;
pub extern fn sprintf(__s: [*c]u8, __format: [*c]const u8, ...) c_int;
pub extern fn vfprintf(__s: [*c]FILE, __format: [*c]const u8, __arg: [*c]struct___va_list_tag_2) c_int;
pub extern fn vprintf(__format: [*c]const u8, __arg: [*c]struct___va_list_tag_2) c_int;
pub extern fn vsprintf(__s: [*c]u8, __format: [*c]const u8, __arg: [*c]struct___va_list_tag_2) c_int;
pub extern fn snprintf(__s: [*c]u8, __maxlen: c_ulong, __format: [*c]const u8, ...) c_int;
pub extern fn vsnprintf(__s: [*c]u8, __maxlen: c_ulong, __format: [*c]const u8, __arg: [*c]struct___va_list_tag_2) c_int;
pub extern fn vasprintf(noalias __ptr: [*c][*c]u8, noalias __f: [*c]const u8, __arg: [*c]struct___va_list_tag_2) c_int;
pub extern fn __asprintf(noalias __ptr: [*c][*c]u8, noalias __fmt: [*c]const u8, ...) c_int;
pub extern fn asprintf(noalias __ptr: [*c][*c]u8, noalias __fmt: [*c]const u8, ...) c_int;
pub extern fn vdprintf(__fd: c_int, noalias __fmt: [*c]const u8, __arg: [*c]struct___va_list_tag_2) c_int;
pub extern fn dprintf(__fd: c_int, noalias __fmt: [*c]const u8, ...) c_int;
pub extern fn fscanf(noalias __stream: [*c]FILE, noalias __format: [*c]const u8, ...) c_int;
pub extern fn scanf(noalias __format: [*c]const u8, ...) c_int;
pub extern fn sscanf(noalias __s: [*c]const u8, noalias __format: [*c]const u8, ...) c_int;
pub const _Float32 = f32;
pub const _Float64 = f64;
pub const _Float32x = f64;
pub const _Float64x = c_longdouble;
pub extern fn vfscanf(noalias __s: [*c]FILE, noalias __format: [*c]const u8, __arg: [*c]struct___va_list_tag_2) c_int;
pub extern fn vscanf(noalias __format: [*c]const u8, __arg: [*c]struct___va_list_tag_2) c_int;
pub extern fn vsscanf(noalias __s: [*c]const u8, noalias __format: [*c]const u8, __arg: [*c]struct___va_list_tag_2) c_int;
pub extern fn fgetc(__stream: [*c]FILE) c_int;
pub extern fn getc(__stream: [*c]FILE) c_int;
pub extern fn getchar() c_int;
pub extern fn getc_unlocked(__stream: [*c]FILE) c_int;
pub extern fn getchar_unlocked() c_int;
pub extern fn fgetc_unlocked(__stream: [*c]FILE) c_int;
pub extern fn fputc(__c: c_int, __stream: [*c]FILE) c_int;
pub extern fn putc(__c: c_int, __stream: [*c]FILE) c_int;
pub extern fn putchar(__c: c_int) c_int;
pub extern fn fputc_unlocked(__c: c_int, __stream: [*c]FILE) c_int;
pub extern fn putc_unlocked(__c: c_int, __stream: [*c]FILE) c_int;
pub extern fn putchar_unlocked(__c: c_int) c_int;
pub extern fn getw(__stream: [*c]FILE) c_int;
pub extern fn putw(__w: c_int, __stream: [*c]FILE) c_int;
pub extern fn fgets(noalias __s: [*c]u8, __n: c_int, noalias __stream: [*c]FILE) [*c]u8;
pub extern fn __getdelim(noalias __lineptr: [*c][*c]u8, noalias __n: [*c]usize, __delimiter: c_int, noalias __stream: [*c]FILE) __ssize_t;
pub extern fn getdelim(noalias __lineptr: [*c][*c]u8, noalias __n: [*c]usize, __delimiter: c_int, noalias __stream: [*c]FILE) __ssize_t;
pub extern fn getline(noalias __lineptr: [*c][*c]u8, noalias __n: [*c]usize, noalias __stream: [*c]FILE) __ssize_t;
pub extern fn fputs(noalias __s: [*c]const u8, noalias __stream: [*c]FILE) c_int;
pub extern fn puts(__s: [*c]const u8) c_int;
pub extern fn ungetc(__c: c_int, __stream: [*c]FILE) c_int;
pub extern fn fread(__ptr: ?*anyopaque, __size: c_ulong, __n: c_ulong, __stream: [*c]FILE) c_ulong;
pub extern fn fwrite(__ptr: ?*const anyopaque, __size: c_ulong, __n: c_ulong, __s: [*c]FILE) c_ulong;
pub extern fn fread_unlocked(noalias __ptr: ?*anyopaque, __size: usize, __n: usize, noalias __stream: [*c]FILE) usize;
pub extern fn fwrite_unlocked(noalias __ptr: ?*const anyopaque, __size: usize, __n: usize, noalias __stream: [*c]FILE) usize;
pub extern fn fseek(__stream: [*c]FILE, __off: c_long, __whence: c_int) c_int;
pub extern fn ftell(__stream: [*c]FILE) c_long;
pub extern fn rewind(__stream: [*c]FILE) void;
pub extern fn fseeko(__stream: [*c]FILE, __off: __off_t, __whence: c_int) c_int;
pub extern fn ftello(__stream: [*c]FILE) __off_t;
pub extern fn fgetpos(noalias __stream: [*c]FILE, noalias __pos: [*c]fpos_t) c_int;
pub extern fn fsetpos(__stream: [*c]FILE, __pos: [*c]const fpos_t) c_int;
pub extern fn clearerr(__stream: [*c]FILE) void;
pub extern fn feof(__stream: [*c]FILE) c_int;
pub extern fn ferror(__stream: [*c]FILE) c_int;
pub extern fn clearerr_unlocked(__stream: [*c]FILE) void;
pub extern fn feof_unlocked(__stream: [*c]FILE) c_int;
pub extern fn ferror_unlocked(__stream: [*c]FILE) c_int;
pub extern fn perror(__s: [*c]const u8) void;
pub extern fn fileno(__stream: [*c]FILE) c_int;
pub extern fn fileno_unlocked(__stream: [*c]FILE) c_int;
pub extern fn pclose(__stream: [*c]FILE) c_int;
pub extern fn popen(__command: [*c]const u8, __modes: [*c]const u8) [*c]FILE;
pub extern fn ctermid(__s: [*c]u8) [*c]u8;
pub extern fn flockfile(__stream: [*c]FILE) void;
pub extern fn ftrylockfile(__stream: [*c]FILE) c_int;
pub extern fn funlockfile(__stream: [*c]FILE) void;
pub extern fn __uflow([*c]FILE) c_int;
pub extern fn __overflow([*c]FILE, c_int) c_int;
pub const div_t = extern struct {
    quot: c_int = @import("std").mem.zeroes(c_int),
    rem: c_int = @import("std").mem.zeroes(c_int),
};
pub const ldiv_t = extern struct {
    quot: c_long = @import("std").mem.zeroes(c_long),
    rem: c_long = @import("std").mem.zeroes(c_long),
};
pub const lldiv_t = extern struct {
    quot: c_longlong = @import("std").mem.zeroes(c_longlong),
    rem: c_longlong = @import("std").mem.zeroes(c_longlong),
};
pub extern fn __ctype_get_mb_cur_max() usize;
pub extern fn atof(__nptr: [*c]const u8) f64;
pub extern fn atoi(__nptr: [*c]const u8) c_int;
pub extern fn atol(__nptr: [*c]const u8) c_long;
pub extern fn atoll(__nptr: [*c]const u8) c_longlong;
pub extern fn strtod(__nptr: [*c]const u8, __endptr: [*c][*c]u8) f64;
pub extern fn strtof(__nptr: [*c]const u8, __endptr: [*c][*c]u8) f32;
pub extern fn strtold(__nptr: [*c]const u8, __endptr: [*c][*c]u8) c_longdouble;
pub extern fn strtol(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_long;
pub extern fn strtoul(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulong;
pub extern fn strtoq(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtouq(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn strtoll(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtoull(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn l64a(__n: c_long) [*c]u8;
pub extern fn a64l(__s: [*c]const u8) c_long;
pub extern fn random() c_long;
pub extern fn srandom(__seed: c_uint) void;
pub extern fn initstate(__seed: c_uint, __statebuf: [*c]u8, __statelen: usize) [*c]u8;
pub extern fn setstate(__statebuf: [*c]u8) [*c]u8;
pub const struct_random_data = extern struct {
    fptr: [*c]i32 = @import("std").mem.zeroes([*c]i32),
    rptr: [*c]i32 = @import("std").mem.zeroes([*c]i32),
    state: [*c]i32 = @import("std").mem.zeroes([*c]i32),
    rand_type: c_int = @import("std").mem.zeroes(c_int),
    rand_deg: c_int = @import("std").mem.zeroes(c_int),
    rand_sep: c_int = @import("std").mem.zeroes(c_int),
    end_ptr: [*c]i32 = @import("std").mem.zeroes([*c]i32),
};
pub extern fn random_r(noalias __buf: [*c]struct_random_data, noalias __result: [*c]i32) c_int;
pub extern fn srandom_r(__seed: c_uint, __buf: [*c]struct_random_data) c_int;
pub extern fn initstate_r(__seed: c_uint, noalias __statebuf: [*c]u8, __statelen: usize, noalias __buf: [*c]struct_random_data) c_int;
pub extern fn setstate_r(noalias __statebuf: [*c]u8, noalias __buf: [*c]struct_random_data) c_int;
pub extern fn rand() c_int;
pub extern fn srand(__seed: c_uint) void;
pub extern fn rand_r(__seed: [*c]c_uint) c_int;
pub extern fn drand48() f64;
pub extern fn erand48(__xsubi: [*c]c_ushort) f64;
pub extern fn lrand48() c_long;
pub extern fn nrand48(__xsubi: [*c]c_ushort) c_long;
pub extern fn mrand48() c_long;
pub extern fn jrand48(__xsubi: [*c]c_ushort) c_long;
pub extern fn srand48(__seedval: c_long) void;
pub extern fn seed48(__seed16v: [*c]c_ushort) [*c]c_ushort;
pub extern fn lcong48(__param: [*c]c_ushort) void;
pub const struct_drand48_data = extern struct {
    __x: [3]c_ushort = @import("std").mem.zeroes([3]c_ushort),
    __old_x: [3]c_ushort = @import("std").mem.zeroes([3]c_ushort),
    __c: c_ushort = @import("std").mem.zeroes(c_ushort),
    __init: c_ushort = @import("std").mem.zeroes(c_ushort),
    __a: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
pub extern fn drand48_r(noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]f64) c_int;
pub extern fn erand48_r(__xsubi: [*c]c_ushort, noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]f64) c_int;
pub extern fn lrand48_r(noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn nrand48_r(__xsubi: [*c]c_ushort, noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn mrand48_r(noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn jrand48_r(__xsubi: [*c]c_ushort, noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn srand48_r(__seedval: c_long, __buffer: [*c]struct_drand48_data) c_int;
pub extern fn seed48_r(__seed16v: [*c]c_ushort, __buffer: [*c]struct_drand48_data) c_int;
pub extern fn lcong48_r(__param: [*c]c_ushort, __buffer: [*c]struct_drand48_data) c_int;
pub extern fn arc4random() __uint32_t;
pub extern fn arc4random_buf(__buf: ?*anyopaque, __size: usize) void;
pub extern fn arc4random_uniform(__upper_bound: __uint32_t) __uint32_t;
pub extern fn malloc(__size: c_ulong) ?*anyopaque;
pub extern fn calloc(__nmemb: c_ulong, __size: c_ulong) ?*anyopaque;
pub extern fn realloc(__ptr: ?*anyopaque, __size: c_ulong) ?*anyopaque;
pub extern fn free(__ptr: ?*anyopaque) void;
pub extern fn reallocarray(__ptr: ?*anyopaque, __nmemb: usize, __size: usize) ?*anyopaque;
pub extern fn alloca(__size: c_ulong) ?*anyopaque;
pub extern fn valloc(__size: usize) ?*anyopaque;
pub extern fn posix_memalign(__memptr: [*c]?*anyopaque, __alignment: usize, __size: usize) c_int;
pub extern fn aligned_alloc(__alignment: c_ulong, __size: c_ulong) ?*anyopaque;
pub extern fn abort() noreturn;
pub extern fn atexit(__func: ?*const fn () callconv(.C) void) c_int;
pub extern fn at_quick_exit(__func: ?*const fn () callconv(.C) void) c_int;
pub extern fn on_exit(__func: ?*const fn (c_int, ?*anyopaque) callconv(.C) void, __arg: ?*anyopaque) c_int;
pub extern fn exit(__status: c_int) noreturn;
pub extern fn quick_exit(__status: c_int) noreturn;
pub extern fn _Exit(__status: c_int) noreturn;
pub extern fn getenv(__name: [*c]const u8) [*c]u8;
pub extern fn putenv(__string: [*c]u8) c_int;
pub extern fn setenv(__name: [*c]const u8, __value: [*c]const u8, __replace: c_int) c_int;
pub extern fn unsetenv(__name: [*c]const u8) c_int;
pub extern fn clearenv() c_int;
pub extern fn mktemp(__template: [*c]u8) [*c]u8;
pub extern fn mkstemp(__template: [*c]u8) c_int;
pub extern fn mkstemps(__template: [*c]u8, __suffixlen: c_int) c_int;
pub extern fn mkdtemp(__template: [*c]u8) [*c]u8;
pub extern fn system(__command: [*c]const u8) c_int;
pub extern fn realpath(noalias __name: [*c]const u8, noalias __resolved: [*c]u8) [*c]u8;
pub const __compar_fn_t = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int;
pub extern fn bsearch(__key: ?*const anyopaque, __base: ?*const anyopaque, __nmemb: usize, __size: usize, __compar: __compar_fn_t) ?*anyopaque;
pub extern fn qsort(__base: ?*anyopaque, __nmemb: usize, __size: usize, __compar: __compar_fn_t) void;
pub extern fn abs(__x: c_int) c_int;
pub extern fn labs(__x: c_long) c_long;
pub extern fn llabs(__x: c_longlong) c_longlong;
pub extern fn div(__numer: c_int, __denom: c_int) div_t;
pub extern fn ldiv(__numer: c_long, __denom: c_long) ldiv_t;
pub extern fn lldiv(__numer: c_longlong, __denom: c_longlong) lldiv_t;
pub extern fn ecvt(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn fcvt(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn gcvt(__value: f64, __ndigit: c_int, __buf: [*c]u8) [*c]u8;
pub extern fn qecvt(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn qfcvt(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn qgcvt(__value: c_longdouble, __ndigit: c_int, __buf: [*c]u8) [*c]u8;
pub extern fn ecvt_r(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn fcvt_r(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn qecvt_r(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn qfcvt_r(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn mblen(__s: [*c]const u8, __n: usize) c_int;
pub extern fn mbtowc(noalias __pwc: [*c]wchar_t, noalias __s: [*c]const u8, __n: usize) c_int;
pub extern fn wctomb(__s: [*c]u8, __wchar: wchar_t) c_int;
pub extern fn mbstowcs(noalias __pwcs: [*c]wchar_t, noalias __s: [*c]const u8, __n: usize) usize;
pub extern fn wcstombs(noalias __s: [*c]u8, noalias __pwcs: [*c]const wchar_t, __n: usize) usize;
pub extern fn rpmatch(__response: [*c]const u8) c_int;
pub extern fn getsubopt(noalias __optionp: [*c][*c]u8, noalias __tokens: [*c]const [*c]u8, noalias __valuep: [*c][*c]u8) c_int;
pub extern fn getloadavg(__loadavg: [*c]f64, __nelem: c_int) c_int;
pub extern fn memcpy(__dest: ?*anyopaque, __src: ?*const anyopaque, __n: c_ulong) ?*anyopaque;
pub extern fn memmove(__dest: ?*anyopaque, __src: ?*const anyopaque, __n: c_ulong) ?*anyopaque;
pub extern fn memccpy(__dest: ?*anyopaque, __src: ?*const anyopaque, __c: c_int, __n: c_ulong) ?*anyopaque;
pub extern fn memset(__s: ?*anyopaque, __c: c_int, __n: c_ulong) ?*anyopaque;
pub extern fn memcmp(__s1: ?*const anyopaque, __s2: ?*const anyopaque, __n: c_ulong) c_int;
pub extern fn __memcmpeq(__s1: ?*const anyopaque, __s2: ?*const anyopaque, __n: usize) c_int;
pub extern fn memchr(__s: ?*const anyopaque, __c: c_int, __n: c_ulong) ?*anyopaque;
pub extern fn strcpy(__dest: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn strncpy(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strcat(__dest: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn strncat(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strcmp(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strncmp(__s1: [*c]const u8, __s2: [*c]const u8, __n: c_ulong) c_int;
pub extern fn strcoll(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strxfrm(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) c_ulong;
pub const struct___locale_data_4 = opaque {};
pub const struct___locale_struct = extern struct {
    __locales: [13]?*struct___locale_data_4 = @import("std").mem.zeroes([13]?*struct___locale_data_4),
    __ctype_b: [*c]const c_ushort = @import("std").mem.zeroes([*c]const c_ushort),
    __ctype_tolower: [*c]const c_int = @import("std").mem.zeroes([*c]const c_int),
    __ctype_toupper: [*c]const c_int = @import("std").mem.zeroes([*c]const c_int),
    __names: [13][*c]const u8 = @import("std").mem.zeroes([13][*c]const u8),
};
pub const __locale_t = [*c]struct___locale_struct;
pub const locale_t = __locale_t;
pub extern fn strcoll_l(__s1: [*c]const u8, __s2: [*c]const u8, __l: locale_t) c_int;
pub extern fn strxfrm_l(__dest: [*c]u8, __src: [*c]const u8, __n: usize, __l: locale_t) usize;
pub extern fn strdup(__s: [*c]const u8) [*c]u8;
pub extern fn strndup(__string: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strchr(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strrchr(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strchrnul(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strcspn(__s: [*c]const u8, __reject: [*c]const u8) c_ulong;
pub extern fn strspn(__s: [*c]const u8, __accept: [*c]const u8) c_ulong;
pub extern fn strpbrk(__s: [*c]const u8, __accept: [*c]const u8) [*c]u8;
pub extern fn strstr(__haystack: [*c]const u8, __needle: [*c]const u8) [*c]u8;
pub extern fn strtok(__s: [*c]u8, __delim: [*c]const u8) [*c]u8;
pub extern fn __strtok_r(noalias __s: [*c]u8, noalias __delim: [*c]const u8, noalias __save_ptr: [*c][*c]u8) [*c]u8;
pub extern fn strtok_r(noalias __s: [*c]u8, noalias __delim: [*c]const u8, noalias __save_ptr: [*c][*c]u8) [*c]u8;
pub extern fn strcasestr(__haystack: [*c]const u8, __needle: [*c]const u8) [*c]u8;
pub extern fn memmem(__haystack: ?*const anyopaque, __haystacklen: usize, __needle: ?*const anyopaque, __needlelen: usize) ?*anyopaque;
pub extern fn __mempcpy(noalias __dest: ?*anyopaque, noalias __src: ?*const anyopaque, __n: usize) ?*anyopaque;
pub extern fn mempcpy(__dest: ?*anyopaque, __src: ?*const anyopaque, __n: c_ulong) ?*anyopaque;
pub extern fn strlen(__s: [*c]const u8) c_ulong;
pub extern fn strnlen(__string: [*c]const u8, __maxlen: usize) usize;
pub extern fn strerror(__errnum: c_int) [*c]u8;
pub extern fn strerror_r(__errnum: c_int, __buf: [*c]u8, __buflen: usize) c_int;
pub extern fn strerror_l(__errnum: c_int, __l: locale_t) [*c]u8;
pub extern fn bcmp(__s1: ?*const anyopaque, __s2: ?*const anyopaque, __n: c_ulong) c_int;
pub extern fn bcopy(__src: ?*const anyopaque, __dest: ?*anyopaque, __n: c_ulong) void;
pub extern fn bzero(__s: ?*anyopaque, __n: c_ulong) void;
pub extern fn index(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn rindex(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn ffs(__i: c_int) c_int;
pub extern fn ffsl(__l: c_long) c_int;
pub extern fn ffsll(__ll: c_longlong) c_int;
pub extern fn strcasecmp(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strncasecmp(__s1: [*c]const u8, __s2: [*c]const u8, __n: c_ulong) c_int;
pub extern fn strcasecmp_l(__s1: [*c]const u8, __s2: [*c]const u8, __loc: locale_t) c_int;
pub extern fn strncasecmp_l(__s1: [*c]const u8, __s2: [*c]const u8, __n: usize, __loc: locale_t) c_int;
pub extern fn explicit_bzero(__s: ?*anyopaque, __n: usize) void;
pub extern fn strsep(noalias __stringp: [*c][*c]u8, noalias __delim: [*c]const u8) [*c]u8;
pub extern fn strsignal(__sig: c_int) [*c]u8;
pub extern fn __stpcpy(noalias __dest: [*c]u8, noalias __src: [*c]const u8) [*c]u8;
pub extern fn stpcpy(__dest: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn __stpncpy(noalias __dest: [*c]u8, noalias __src: [*c]const u8, __n: usize) [*c]u8;
pub extern fn stpncpy(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strlcpy(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) c_ulong;
pub extern fn strlcat(__dest: [*c]u8, __src: [*c]const u8, __n: c_ulong) c_ulong;
pub const wint_t = c_uint;
pub const mbstate_t = __mbstate_t;
pub const struct_tm = opaque {};
pub extern fn wcscpy(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t) [*c]wchar_t;
pub extern fn wcsncpy(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t, __n: usize) [*c]wchar_t;
pub extern fn wcslcpy(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t, __n: usize) usize;
pub extern fn wcslcat(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t, __n: usize) usize;
pub extern fn wcscat(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t) [*c]wchar_t;
pub extern fn wcsncat(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t, __n: usize) [*c]wchar_t;
pub extern fn wcscmp(__s1: [*c]const c_int, __s2: [*c]const c_int) c_int;
pub extern fn wcsncmp(__s1: [*c]const c_int, __s2: [*c]const c_int, __n: c_ulong) c_int;
pub extern fn wcscasecmp(__s1: [*c]const wchar_t, __s2: [*c]const wchar_t) c_int;
pub extern fn wcsncasecmp(__s1: [*c]const wchar_t, __s2: [*c]const wchar_t, __n: usize) c_int;
pub extern fn wcscasecmp_l(__s1: [*c]const wchar_t, __s2: [*c]const wchar_t, __loc: locale_t) c_int;
pub extern fn wcsncasecmp_l(__s1: [*c]const wchar_t, __s2: [*c]const wchar_t, __n: usize, __loc: locale_t) c_int;
pub extern fn wcscoll(__s1: [*c]const wchar_t, __s2: [*c]const wchar_t) c_int;
pub extern fn wcsxfrm(noalias __s1: [*c]wchar_t, noalias __s2: [*c]const wchar_t, __n: usize) usize;
pub extern fn wcscoll_l(__s1: [*c]const wchar_t, __s2: [*c]const wchar_t, __loc: locale_t) c_int;
pub extern fn wcsxfrm_l(__s1: [*c]wchar_t, __s2: [*c]const wchar_t, __n: usize, __loc: locale_t) usize;
pub extern fn wcsdup(__s: [*c]const wchar_t) [*c]wchar_t;
pub extern fn wcschr(__wcs: [*c]const c_int, __wc: c_int) [*c]c_int;
pub extern fn wcsrchr(__wcs: [*c]const wchar_t, __wc: wchar_t) [*c]wchar_t;
pub extern fn wcscspn(__wcs: [*c]const wchar_t, __reject: [*c]const wchar_t) usize;
pub extern fn wcsspn(__wcs: [*c]const wchar_t, __accept: [*c]const wchar_t) usize;
pub extern fn wcspbrk(__wcs: [*c]const wchar_t, __accept: [*c]const wchar_t) [*c]wchar_t;
pub extern fn wcsstr(__haystack: [*c]const wchar_t, __needle: [*c]const wchar_t) [*c]wchar_t;
pub extern fn wcstok(noalias __s: [*c]wchar_t, noalias __delim: [*c]const wchar_t, noalias __ptr: [*c][*c]wchar_t) [*c]wchar_t;
pub extern fn wcslen(__s: [*c]const c_int) c_ulong;
pub extern fn wcsnlen(__s: [*c]const wchar_t, __maxlen: usize) usize;
pub extern fn wmemchr(__s: [*c]const c_int, __c: c_int, __n: c_ulong) [*c]c_int;
pub extern fn wmemcmp(__s1: [*c]const c_int, __s2: [*c]const c_int, __n: c_ulong) c_int;
pub extern fn wmemcpy(__s1: [*c]c_int, __s2: [*c]const c_int, __n: c_ulong) [*c]c_int;
pub extern fn wmemmove(__s1: [*c]c_int, __s2: [*c]const c_int, __n: c_ulong) [*c]c_int;
pub extern fn wmemset(__s: [*c]wchar_t, __c: wchar_t, __n: usize) [*c]wchar_t;
pub extern fn btowc(__c: c_int) wint_t;
pub extern fn wctob(__c: wint_t) c_int;
pub extern fn mbsinit(__ps: [*c]const mbstate_t) c_int;
pub extern fn mbrtowc(noalias __pwc: [*c]wchar_t, noalias __s: [*c]const u8, __n: usize, noalias __p: [*c]mbstate_t) usize;
pub extern fn wcrtomb(noalias __s: [*c]u8, __wc: wchar_t, noalias __ps: [*c]mbstate_t) usize;
pub extern fn __mbrlen(noalias __s: [*c]const u8, __n: usize, noalias __ps: [*c]mbstate_t) usize;
pub extern fn mbrlen(noalias __s: [*c]const u8, __n: usize, noalias __ps: [*c]mbstate_t) usize;
pub extern fn mbsrtowcs(noalias __dst: [*c]wchar_t, noalias __src: [*c][*c]const u8, __len: usize, noalias __ps: [*c]mbstate_t) usize;
pub extern fn wcsrtombs(noalias __dst: [*c]u8, noalias __src: [*c][*c]const wchar_t, __len: usize, noalias __ps: [*c]mbstate_t) usize;
pub extern fn mbsnrtowcs(noalias __dst: [*c]wchar_t, noalias __src: [*c][*c]const u8, __nmc: usize, __len: usize, noalias __ps: [*c]mbstate_t) usize;
pub extern fn wcsnrtombs(noalias __dst: [*c]u8, noalias __src: [*c][*c]const wchar_t, __nwc: usize, __len: usize, noalias __ps: [*c]mbstate_t) usize;
pub extern fn wcstod(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t) f64;
pub extern fn wcstof(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t) f32;
pub extern fn wcstold(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t) c_longdouble;
pub extern fn wcstol(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) c_long;
pub extern fn wcstoul(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) c_ulong;
pub extern fn wcstoll(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) c_longlong;
pub extern fn wcstoull(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) c_ulonglong;
pub extern fn wcpcpy(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t) [*c]wchar_t;
pub extern fn wcpncpy(noalias __dest: [*c]wchar_t, noalias __src: [*c]const wchar_t, __n: usize) [*c]wchar_t;
pub extern fn open_wmemstream(__bufloc: [*c][*c]wchar_t, __sizeloc: [*c]usize) [*c]__FILE;
pub extern fn fwide(__fp: [*c]__FILE, __mode: c_int) c_int;
pub extern fn fwprintf(noalias __stream: [*c]__FILE, noalias __format: [*c]const wchar_t, ...) c_int;
pub extern fn wprintf(noalias __format: [*c]const wchar_t, ...) c_int;
pub extern fn swprintf(noalias __s: [*c]wchar_t, __n: usize, noalias __format: [*c]const wchar_t, ...) c_int;
pub extern fn vfwprintf(noalias __s: [*c]__FILE, noalias __format: [*c]const wchar_t, __arg: [*c]struct___va_list_tag_2) c_int;
pub extern fn vwprintf(noalias __format: [*c]const wchar_t, __arg: [*c]struct___va_list_tag_2) c_int;
pub extern fn vswprintf(noalias __s: [*c]wchar_t, __n: usize, noalias __format: [*c]const wchar_t, __arg: [*c]struct___va_list_tag_2) c_int;
pub extern fn fwscanf(noalias __stream: [*c]__FILE, noalias __format: [*c]const wchar_t, ...) c_int;
pub extern fn wscanf(noalias __format: [*c]const wchar_t, ...) c_int;
pub extern fn swscanf(noalias __s: [*c]const wchar_t, noalias __format: [*c]const wchar_t, ...) c_int;
pub extern fn vfwscanf(noalias __s: [*c]__FILE, noalias __format: [*c]const wchar_t, __arg: [*c]struct___va_list_tag_2) c_int;
pub extern fn vwscanf(noalias __format: [*c]const wchar_t, __arg: [*c]struct___va_list_tag_2) c_int;
pub extern fn vswscanf(noalias __s: [*c]const wchar_t, noalias __format: [*c]const wchar_t, __arg: [*c]struct___va_list_tag_2) c_int;
pub extern fn fgetwc(__stream: [*c]__FILE) wint_t;
pub extern fn getwc(__stream: [*c]__FILE) wint_t;
pub extern fn getwchar() wint_t;
pub extern fn fputwc(__wc: wchar_t, __stream: [*c]__FILE) wint_t;
pub extern fn putwc(__wc: wchar_t, __stream: [*c]__FILE) wint_t;
pub extern fn putwchar(__wc: wchar_t) wint_t;
pub extern fn fgetws(noalias __ws: [*c]wchar_t, __n: c_int, noalias __stream: [*c]__FILE) [*c]wchar_t;
pub extern fn fputws(noalias __ws: [*c]const wchar_t, noalias __stream: [*c]__FILE) c_int;
pub extern fn ungetwc(__wc: wint_t, __stream: [*c]__FILE) wint_t;
pub extern fn wcsftime(noalias __s: [*c]wchar_t, __maxsize: usize, noalias __format: [*c]const wchar_t, noalias __tp: ?*const struct_tm) usize;
pub const __gwchar_t = c_int;
pub const imaxdiv_t = extern struct {
    quot: c_long = @import("std").mem.zeroes(c_long),
    rem: c_long = @import("std").mem.zeroes(c_long),
};
pub extern fn imaxabs(__n: intmax_t) intmax_t;
pub extern fn imaxdiv(__numer: intmax_t, __denom: intmax_t) imaxdiv_t;
pub extern fn strtoimax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) intmax_t;
pub extern fn strtoumax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) uintmax_t;
pub extern fn wcstoimax(noalias __nptr: [*c]const __gwchar_t, noalias __endptr: [*c][*c]__gwchar_t, __base: c_int) intmax_t;
pub extern fn wcstoumax(noalias __nptr: [*c]const __gwchar_t, noalias __endptr: [*c][*c]__gwchar_t, __base: c_int) uintmax_t;
pub const _ISupper: c_int = 256;
pub const _ISlower: c_int = 512;
pub const _ISalpha: c_int = 1024;
pub const _ISdigit: c_int = 2048;
pub const _ISxdigit: c_int = 4096;
pub const _ISspace: c_int = 8192;
pub const _ISprint: c_int = 16384;
pub const _ISgraph: c_int = 32768;
pub const _ISblank: c_int = 1;
pub const _IScntrl: c_int = 2;
pub const _ISpunct: c_int = 4;
pub const _ISalnum: c_int = 8;
const enum_unnamed_5 = c_uint;
pub extern fn __ctype_b_loc() [*c][*c]const c_ushort;
pub extern fn __ctype_tolower_loc() [*c][*c]const __int32_t;
pub extern fn __ctype_toupper_loc() [*c][*c]const __int32_t;
pub extern fn isalnum(c_int) c_int;
pub extern fn isalpha(c_int) c_int;
pub extern fn iscntrl(c_int) c_int;
pub extern fn isdigit(c_int) c_int;
pub extern fn islower(c_int) c_int;
pub extern fn isgraph(c_int) c_int;
pub extern fn isprint(c_int) c_int;
pub extern fn ispunct(c_int) c_int;
pub extern fn isspace(c_int) c_int;
pub extern fn isupper(c_int) c_int;
pub extern fn isxdigit(c_int) c_int;
pub extern fn tolower(__c: c_int) c_int;
pub extern fn toupper(__c: c_int) c_int;
pub extern fn isblank(c_int) c_int;
pub extern fn isascii(__c: c_int) c_int;
pub extern fn toascii(__c: c_int) c_int;
pub extern fn _toupper(c_int) c_int;
pub extern fn _tolower(c_int) c_int;
pub extern fn isalnum_l(c_int, locale_t) c_int;
pub extern fn isalpha_l(c_int, locale_t) c_int;
pub extern fn iscntrl_l(c_int, locale_t) c_int;
pub extern fn isdigit_l(c_int, locale_t) c_int;
pub extern fn islower_l(c_int, locale_t) c_int;
pub extern fn isgraph_l(c_int, locale_t) c_int;
pub extern fn isprint_l(c_int, locale_t) c_int;
pub extern fn ispunct_l(c_int, locale_t) c_int;
pub extern fn isspace_l(c_int, locale_t) c_int;
pub extern fn isupper_l(c_int, locale_t) c_int;
pub extern fn isxdigit_l(c_int, locale_t) c_int;
pub extern fn isblank_l(c_int, locale_t) c_int;
pub extern fn __tolower_l(__c: c_int, __l: locale_t) c_int;
pub extern fn tolower_l(__c: c_int, __l: locale_t) c_int;
pub extern fn __toupper_l(__c: c_int, __l: locale_t) c_int;
pub extern fn toupper_l(__c: c_int, __l: locale_t) c_int;
pub const float_t = f32;
pub const double_t = f64;
pub extern fn __fpclassify(__value: f64) c_int;
pub extern fn __signbit(__value: f64) c_int;
pub extern fn __isinf(__value: f64) c_int;
pub extern fn __finite(__value: f64) c_int;
pub extern fn __isnan(__value: f64) c_int;
pub extern fn __iseqsig(__x: f64, __y: f64) c_int;
pub extern fn __issignaling(__value: f64) c_int;
pub extern fn acos(__x: f64) f64;
pub extern fn __acos(__x: f64) f64;
pub extern fn asin(__x: f64) f64;
pub extern fn __asin(__x: f64) f64;
pub extern fn atan(__x: f64) f64;
pub extern fn __atan(__x: f64) f64;
pub extern fn atan2(__y: f64, __x: f64) f64;
pub extern fn __atan2(__y: f64, __x: f64) f64;
pub extern fn cos(__x: f64) f64;
pub extern fn __cos(__x: f64) f64;
pub extern fn sin(__x: f64) f64;
pub extern fn __sin(__x: f64) f64;
pub extern fn tan(__x: f64) f64;
pub extern fn __tan(__x: f64) f64;
pub extern fn cosh(__x: f64) f64;
pub extern fn __cosh(__x: f64) f64;
pub extern fn sinh(__x: f64) f64;
pub extern fn __sinh(__x: f64) f64;
pub extern fn tanh(__x: f64) f64;
pub extern fn __tanh(__x: f64) f64;
pub extern fn acosh(__x: f64) f64;
pub extern fn __acosh(__x: f64) f64;
pub extern fn asinh(__x: f64) f64;
pub extern fn __asinh(__x: f64) f64;
pub extern fn atanh(__x: f64) f64;
pub extern fn __atanh(__x: f64) f64;
pub extern fn exp(__x: f64) f64;
pub extern fn __exp(__x: f64) f64;
pub extern fn frexp(__x: f64, __exponent: [*c]c_int) f64;
pub extern fn __frexp(__x: f64, __exponent: [*c]c_int) f64;
pub extern fn ldexp(__x: f64, __exponent: c_int) f64;
pub extern fn __ldexp(__x: f64, __exponent: c_int) f64;
pub extern fn log(__x: f64) f64;
pub extern fn __log(__x: f64) f64;
pub extern fn log10(__x: f64) f64;
pub extern fn __log10(__x: f64) f64;
pub extern fn modf(__x: f64, __iptr: [*c]f64) f64;
pub extern fn __modf(__x: f64, __iptr: [*c]f64) f64;
pub extern fn expm1(__x: f64) f64;
pub extern fn __expm1(__x: f64) f64;
pub extern fn log1p(__x: f64) f64;
pub extern fn __log1p(__x: f64) f64;
pub extern fn logb(__x: f64) f64;
pub extern fn __logb(__x: f64) f64;
pub extern fn exp2(__x: f64) f64;
pub extern fn __exp2(__x: f64) f64;
pub extern fn log2(__x: f64) f64;
pub extern fn __log2(__x: f64) f64;
pub extern fn pow(__x: f64, __y: f64) f64;
pub extern fn __pow(__x: f64, __y: f64) f64;
pub extern fn sqrt(__x: f64) f64;
pub extern fn __sqrt(__x: f64) f64;
pub extern fn hypot(__x: f64, __y: f64) f64;
pub extern fn __hypot(__x: f64, __y: f64) f64;
pub extern fn cbrt(__x: f64) f64;
pub extern fn __cbrt(__x: f64) f64;
pub extern fn ceil(__x: f64) f64;
pub extern fn __ceil(__x: f64) f64;
pub extern fn fabs(__x: f64) f64;
pub extern fn __fabs(__x: f64) f64;
pub extern fn floor(__x: f64) f64;
pub extern fn __floor(__x: f64) f64;
pub extern fn fmod(__x: f64, __y: f64) f64;
pub extern fn __fmod(__x: f64, __y: f64) f64;
pub extern fn isinf(__value: f64) c_int;
pub extern fn finite(__value: f64) c_int;
pub extern fn drem(__x: f64, __y: f64) f64;
pub extern fn __drem(__x: f64, __y: f64) f64;
pub extern fn significand(__x: f64) f64;
pub extern fn __significand(__x: f64) f64;
pub extern fn copysign(__x: f64, __y: f64) f64;
pub extern fn __copysign(__x: f64, __y: f64) f64;
pub extern fn nan(__tagb: [*c]const u8) f64;
pub extern fn __nan(__tagb: [*c]const u8) f64;
pub extern fn isnan(__value: f64) c_int;
pub extern fn j0(f64) f64;
pub extern fn __j0(f64) f64;
pub extern fn j1(f64) f64;
pub extern fn __j1(f64) f64;
pub extern fn jn(c_int, f64) f64;
pub extern fn __jn(c_int, f64) f64;
pub extern fn y0(f64) f64;
pub extern fn __y0(f64) f64;
pub extern fn y1(f64) f64;
pub extern fn __y1(f64) f64;
pub extern fn yn(c_int, f64) f64;
pub extern fn __yn(c_int, f64) f64;
pub extern fn erf(f64) f64;
pub extern fn __erf(f64) f64;
pub extern fn erfc(f64) f64;
pub extern fn __erfc(f64) f64;
pub extern fn lgamma(f64) f64;
pub extern fn __lgamma(f64) f64;
pub extern fn tgamma(f64) f64;
pub extern fn __tgamma(f64) f64;
pub extern fn gamma(f64) f64;
pub extern fn __gamma(f64) f64;
pub extern fn lgamma_r(f64, __signgamp: [*c]c_int) f64;
pub extern fn __lgamma_r(f64, __signgamp: [*c]c_int) f64;
pub extern fn rint(__x: f64) f64;
pub extern fn __rint(__x: f64) f64;
pub extern fn nextafter(__x: f64, __y: f64) f64;
pub extern fn __nextafter(__x: f64, __y: f64) f64;
pub extern fn nexttoward(__x: f64, __y: c_longdouble) f64;
pub extern fn __nexttoward(__x: f64, __y: c_longdouble) f64;
pub extern fn remainder(__x: f64, __y: f64) f64;
pub extern fn __remainder(__x: f64, __y: f64) f64;
pub extern fn scalbn(__x: f64, __n: c_int) f64;
pub extern fn __scalbn(__x: f64, __n: c_int) f64;
pub extern fn ilogb(__x: f64) c_int;
pub extern fn __ilogb(__x: f64) c_int;
pub extern fn scalbln(__x: f64, __n: c_long) f64;
pub extern fn __scalbln(__x: f64, __n: c_long) f64;
pub extern fn nearbyint(__x: f64) f64;
pub extern fn __nearbyint(__x: f64) f64;
pub extern fn round(__x: f64) f64;
pub extern fn __round(__x: f64) f64;
pub extern fn trunc(__x: f64) f64;
pub extern fn __trunc(__x: f64) f64;
pub extern fn remquo(__x: f64, __y: f64, __quo: [*c]c_int) f64;
pub extern fn __remquo(__x: f64, __y: f64, __quo: [*c]c_int) f64;
pub extern fn lrint(__x: f64) c_long;
pub extern fn __lrint(__x: f64) c_long;
pub extern fn llrint(__x: f64) c_longlong;
pub extern fn __llrint(__x: f64) c_longlong;
pub extern fn lround(__x: f64) c_long;
pub extern fn __lround(__x: f64) c_long;
pub extern fn llround(__x: f64) c_longlong;
pub extern fn __llround(__x: f64) c_longlong;
pub extern fn fdim(__x: f64, __y: f64) f64;
pub extern fn __fdim(__x: f64, __y: f64) f64;
pub extern fn fmax(__x: f64, __y: f64) f64;
pub extern fn __fmax(__x: f64, __y: f64) f64;
pub extern fn fmin(__x: f64, __y: f64) f64;
pub extern fn __fmin(__x: f64, __y: f64) f64;
pub extern fn fma(__x: f64, __y: f64, __z: f64) f64;
pub extern fn __fma(__x: f64, __y: f64, __z: f64) f64;
pub extern fn scalb(__x: f64, __n: f64) f64;
pub extern fn __scalb(__x: f64, __n: f64) f64;
pub extern fn __fpclassifyf(__value: f32) c_int;
pub extern fn __signbitf(__value: f32) c_int;
pub extern fn __isinff(__value: f32) c_int;
pub extern fn __finitef(__value: f32) c_int;
pub extern fn __isnanf(__value: f32) c_int;
pub extern fn __iseqsigf(__x: f32, __y: f32) c_int;
pub extern fn __issignalingf(__value: f32) c_int;
pub extern fn acosf(__x: f32) f32;
pub extern fn __acosf(__x: f32) f32;
pub extern fn asinf(__x: f32) f32;
pub extern fn __asinf(__x: f32) f32;
pub extern fn atanf(__x: f32) f32;
pub extern fn __atanf(__x: f32) f32;
pub extern fn atan2f(__y: f32, __x: f32) f32;
pub extern fn __atan2f(__y: f32, __x: f32) f32;
pub extern fn cosf(__x: f32) f32;
pub extern fn __cosf(__x: f32) f32;
pub extern fn sinf(__x: f32) f32;
pub extern fn __sinf(__x: f32) f32;
pub extern fn tanf(__x: f32) f32;
pub extern fn __tanf(__x: f32) f32;
pub extern fn coshf(__x: f32) f32;
pub extern fn __coshf(__x: f32) f32;
pub extern fn sinhf(__x: f32) f32;
pub extern fn __sinhf(__x: f32) f32;
pub extern fn tanhf(__x: f32) f32;
pub extern fn __tanhf(__x: f32) f32;
pub extern fn acoshf(__x: f32) f32;
pub extern fn __acoshf(__x: f32) f32;
pub extern fn asinhf(__x: f32) f32;
pub extern fn __asinhf(__x: f32) f32;
pub extern fn atanhf(__x: f32) f32;
pub extern fn __atanhf(__x: f32) f32;
pub extern fn expf(__x: f32) f32;
pub extern fn __expf(__x: f32) f32;
pub extern fn frexpf(__x: f32, __exponent: [*c]c_int) f32;
pub extern fn __frexpf(__x: f32, __exponent: [*c]c_int) f32;
pub extern fn ldexpf(__x: f32, __exponent: c_int) f32;
pub extern fn __ldexpf(__x: f32, __exponent: c_int) f32;
pub extern fn logf(__x: f32) f32;
pub extern fn __logf(__x: f32) f32;
pub extern fn log10f(__x: f32) f32;
pub extern fn __log10f(__x: f32) f32;
pub extern fn modff(__x: f32, __iptr: [*c]f32) f32;
pub extern fn __modff(__x: f32, __iptr: [*c]f32) f32;
pub extern fn expm1f(__x: f32) f32;
pub extern fn __expm1f(__x: f32) f32;
pub extern fn log1pf(__x: f32) f32;
pub extern fn __log1pf(__x: f32) f32;
pub extern fn logbf(__x: f32) f32;
pub extern fn __logbf(__x: f32) f32;
pub extern fn exp2f(__x: f32) f32;
pub extern fn __exp2f(__x: f32) f32;
pub extern fn log2f(__x: f32) f32;
pub extern fn __log2f(__x: f32) f32;
pub extern fn powf(__x: f32, __y: f32) f32;
pub extern fn __powf(__x: f32, __y: f32) f32;
pub extern fn sqrtf(__x: f32) f32;
pub extern fn __sqrtf(__x: f32) f32;
pub extern fn hypotf(__x: f32, __y: f32) f32;
pub extern fn __hypotf(__x: f32, __y: f32) f32;
pub extern fn cbrtf(__x: f32) f32;
pub extern fn __cbrtf(__x: f32) f32;
pub extern fn ceilf(__x: f32) f32;
pub extern fn __ceilf(__x: f32) f32;
pub extern fn fabsf(__x: f32) f32;
pub extern fn __fabsf(__x: f32) f32;
pub extern fn floorf(__x: f32) f32;
pub extern fn __floorf(__x: f32) f32;
pub extern fn fmodf(__x: f32, __y: f32) f32;
pub extern fn __fmodf(__x: f32, __y: f32) f32;
pub extern fn isinff(__value: f32) c_int;
pub extern fn finitef(__value: f32) c_int;
pub extern fn dremf(__x: f32, __y: f32) f32;
pub extern fn __dremf(__x: f32, __y: f32) f32;
pub extern fn significandf(__x: f32) f32;
pub extern fn __significandf(__x: f32) f32;
pub extern fn copysignf(__x: f32, __y: f32) f32;
pub extern fn __copysignf(__x: f32, __y: f32) f32;
pub extern fn nanf(__tagb: [*c]const u8) f32;
pub extern fn __nanf(__tagb: [*c]const u8) f32;
pub extern fn isnanf(__value: f32) c_int;
pub extern fn j0f(f32) f32;
pub extern fn __j0f(f32) f32;
pub extern fn j1f(f32) f32;
pub extern fn __j1f(f32) f32;
pub extern fn jnf(c_int, f32) f32;
pub extern fn __jnf(c_int, f32) f32;
pub extern fn y0f(f32) f32;
pub extern fn __y0f(f32) f32;
pub extern fn y1f(f32) f32;
pub extern fn __y1f(f32) f32;
pub extern fn ynf(c_int, f32) f32;
pub extern fn __ynf(c_int, f32) f32;
pub extern fn erff(f32) f32;
pub extern fn __erff(f32) f32;
pub extern fn erfcf(f32) f32;
pub extern fn __erfcf(f32) f32;
pub extern fn lgammaf(f32) f32;
pub extern fn __lgammaf(f32) f32;
pub extern fn tgammaf(f32) f32;
pub extern fn __tgammaf(f32) f32;
pub extern fn gammaf(f32) f32;
pub extern fn __gammaf(f32) f32;
pub extern fn lgammaf_r(f32, __signgamp: [*c]c_int) f32;
pub extern fn __lgammaf_r(f32, __signgamp: [*c]c_int) f32;
pub extern fn rintf(__x: f32) f32;
pub extern fn __rintf(__x: f32) f32;
pub extern fn nextafterf(__x: f32, __y: f32) f32;
pub extern fn __nextafterf(__x: f32, __y: f32) f32;
pub extern fn nexttowardf(__x: f32, __y: c_longdouble) f32;
pub extern fn __nexttowardf(__x: f32, __y: c_longdouble) f32;
pub extern fn remainderf(__x: f32, __y: f32) f32;
pub extern fn __remainderf(__x: f32, __y: f32) f32;
pub extern fn scalbnf(__x: f32, __n: c_int) f32;
pub extern fn __scalbnf(__x: f32, __n: c_int) f32;
pub extern fn ilogbf(__x: f32) c_int;
pub extern fn __ilogbf(__x: f32) c_int;
pub extern fn scalblnf(__x: f32, __n: c_long) f32;
pub extern fn __scalblnf(__x: f32, __n: c_long) f32;
pub extern fn nearbyintf(__x: f32) f32;
pub extern fn __nearbyintf(__x: f32) f32;
pub extern fn roundf(__x: f32) f32;
pub extern fn __roundf(__x: f32) f32;
pub extern fn truncf(__x: f32) f32;
pub extern fn __truncf(__x: f32) f32;
pub extern fn remquof(__x: f32, __y: f32, __quo: [*c]c_int) f32;
pub extern fn __remquof(__x: f32, __y: f32, __quo: [*c]c_int) f32;
pub extern fn lrintf(__x: f32) c_long;
pub extern fn __lrintf(__x: f32) c_long;
pub extern fn llrintf(__x: f32) c_longlong;
pub extern fn __llrintf(__x: f32) c_longlong;
pub extern fn lroundf(__x: f32) c_long;
pub extern fn __lroundf(__x: f32) c_long;
pub extern fn llroundf(__x: f32) c_longlong;
pub extern fn __llroundf(__x: f32) c_longlong;
pub extern fn fdimf(__x: f32, __y: f32) f32;
pub extern fn __fdimf(__x: f32, __y: f32) f32;
pub extern fn fmaxf(__x: f32, __y: f32) f32;
pub extern fn __fmaxf(__x: f32, __y: f32) f32;
pub extern fn fminf(__x: f32, __y: f32) f32;
pub extern fn __fminf(__x: f32, __y: f32) f32;
pub extern fn fmaf(__x: f32, __y: f32, __z: f32) f32;
pub extern fn __fmaf(__x: f32, __y: f32, __z: f32) f32;
pub extern fn scalbf(__x: f32, __n: f32) f32;
pub extern fn __scalbf(__x: f32, __n: f32) f32;
pub extern fn __fpclassifyl(__value: c_longdouble) c_int;
pub extern fn __signbitl(__value: c_longdouble) c_int;
pub extern fn __isinfl(__value: c_longdouble) c_int;
pub extern fn __finitel(__value: c_longdouble) c_int;
pub extern fn __isnanl(__value: c_longdouble) c_int;
pub extern fn __iseqsigl(__x: c_longdouble, __y: c_longdouble) c_int;
pub extern fn __issignalingl(__value: c_longdouble) c_int;
pub extern fn acosl(__x: c_longdouble) c_longdouble;
pub extern fn __acosl(__x: c_longdouble) c_longdouble;
pub extern fn asinl(__x: c_longdouble) c_longdouble;
pub extern fn __asinl(__x: c_longdouble) c_longdouble;
pub extern fn atanl(__x: c_longdouble) c_longdouble;
pub extern fn __atanl(__x: c_longdouble) c_longdouble;
pub extern fn atan2l(__y: c_longdouble, __x: c_longdouble) c_longdouble;
pub extern fn __atan2l(__y: c_longdouble, __x: c_longdouble) c_longdouble;
pub extern fn cosl(__x: c_longdouble) c_longdouble;
pub extern fn __cosl(__x: c_longdouble) c_longdouble;
pub extern fn sinl(__x: c_longdouble) c_longdouble;
pub extern fn __sinl(__x: c_longdouble) c_longdouble;
pub extern fn tanl(__x: c_longdouble) c_longdouble;
pub extern fn __tanl(__x: c_longdouble) c_longdouble;
pub extern fn coshl(__x: c_longdouble) c_longdouble;
pub extern fn __coshl(__x: c_longdouble) c_longdouble;
pub extern fn sinhl(__x: c_longdouble) c_longdouble;
pub extern fn __sinhl(__x: c_longdouble) c_longdouble;
pub extern fn tanhl(__x: c_longdouble) c_longdouble;
pub extern fn __tanhl(__x: c_longdouble) c_longdouble;
pub extern fn acoshl(__x: c_longdouble) c_longdouble;
pub extern fn __acoshl(__x: c_longdouble) c_longdouble;
pub extern fn asinhl(__x: c_longdouble) c_longdouble;
pub extern fn __asinhl(__x: c_longdouble) c_longdouble;
pub extern fn atanhl(__x: c_longdouble) c_longdouble;
pub extern fn __atanhl(__x: c_longdouble) c_longdouble;
pub extern fn expl(__x: c_longdouble) c_longdouble;
pub extern fn __expl(__x: c_longdouble) c_longdouble;
pub extern fn frexpl(__x: c_longdouble, __exponent: [*c]c_int) c_longdouble;
pub extern fn __frexpl(__x: c_longdouble, __exponent: [*c]c_int) c_longdouble;
pub extern fn ldexpl(__x: c_longdouble, __exponent: c_int) c_longdouble;
pub extern fn __ldexpl(__x: c_longdouble, __exponent: c_int) c_longdouble;
pub extern fn logl(__x: c_longdouble) c_longdouble;
pub extern fn __logl(__x: c_longdouble) c_longdouble;
pub extern fn log10l(__x: c_longdouble) c_longdouble;
pub extern fn __log10l(__x: c_longdouble) c_longdouble;
pub extern fn modfl(__x: c_longdouble, __iptr: [*c]c_longdouble) c_longdouble;
pub extern fn __modfl(__x: c_longdouble, __iptr: [*c]c_longdouble) c_longdouble;
pub extern fn expm1l(__x: c_longdouble) c_longdouble;
pub extern fn __expm1l(__x: c_longdouble) c_longdouble;
pub extern fn log1pl(__x: c_longdouble) c_longdouble;
pub extern fn __log1pl(__x: c_longdouble) c_longdouble;
pub extern fn logbl(__x: c_longdouble) c_longdouble;
pub extern fn __logbl(__x: c_longdouble) c_longdouble;
pub extern fn exp2l(__x: c_longdouble) c_longdouble;
pub extern fn __exp2l(__x: c_longdouble) c_longdouble;
pub extern fn log2l(__x: c_longdouble) c_longdouble;
pub extern fn __log2l(__x: c_longdouble) c_longdouble;
pub extern fn powl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn __powl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn sqrtl(__x: c_longdouble) c_longdouble;
pub extern fn __sqrtl(__x: c_longdouble) c_longdouble;
pub extern fn hypotl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn __hypotl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn cbrtl(__x: c_longdouble) c_longdouble;
pub extern fn __cbrtl(__x: c_longdouble) c_longdouble;
pub extern fn ceill(__x: c_longdouble) c_longdouble;
pub extern fn __ceill(__x: c_longdouble) c_longdouble;
pub extern fn fabsl(__x: c_longdouble) c_longdouble;
pub extern fn __fabsl(__x: c_longdouble) c_longdouble;
pub extern fn floorl(__x: c_longdouble) c_longdouble;
pub extern fn __floorl(__x: c_longdouble) c_longdouble;
pub extern fn fmodl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn __fmodl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn isinfl(__value: c_longdouble) c_int;
pub extern fn finitel(__value: c_longdouble) c_int;
pub extern fn dreml(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn __dreml(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn significandl(__x: c_longdouble) c_longdouble;
pub extern fn __significandl(__x: c_longdouble) c_longdouble;
pub extern fn copysignl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn __copysignl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn nanl(__tagb: [*c]const u8) c_longdouble;
pub extern fn __nanl(__tagb: [*c]const u8) c_longdouble;
pub extern fn isnanl(__value: c_longdouble) c_int;
pub extern fn j0l(c_longdouble) c_longdouble;
pub extern fn __j0l(c_longdouble) c_longdouble;
pub extern fn j1l(c_longdouble) c_longdouble;
pub extern fn __j1l(c_longdouble) c_longdouble;
pub extern fn jnl(c_int, c_longdouble) c_longdouble;
pub extern fn __jnl(c_int, c_longdouble) c_longdouble;
pub extern fn y0l(c_longdouble) c_longdouble;
pub extern fn __y0l(c_longdouble) c_longdouble;
pub extern fn y1l(c_longdouble) c_longdouble;
pub extern fn __y1l(c_longdouble) c_longdouble;
pub extern fn ynl(c_int, c_longdouble) c_longdouble;
pub extern fn __ynl(c_int, c_longdouble) c_longdouble;
pub extern fn erfl(c_longdouble) c_longdouble;
pub extern fn __erfl(c_longdouble) c_longdouble;
pub extern fn erfcl(c_longdouble) c_longdouble;
pub extern fn __erfcl(c_longdouble) c_longdouble;
pub extern fn lgammal(c_longdouble) c_longdouble;
pub extern fn __lgammal(c_longdouble) c_longdouble;
pub extern fn tgammal(c_longdouble) c_longdouble;
pub extern fn __tgammal(c_longdouble) c_longdouble;
pub extern fn gammal(c_longdouble) c_longdouble;
pub extern fn __gammal(c_longdouble) c_longdouble;
pub extern fn lgammal_r(c_longdouble, __signgamp: [*c]c_int) c_longdouble;
pub extern fn __lgammal_r(c_longdouble, __signgamp: [*c]c_int) c_longdouble;
pub extern fn rintl(__x: c_longdouble) c_longdouble;
pub extern fn __rintl(__x: c_longdouble) c_longdouble;
pub extern fn nextafterl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn __nextafterl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn nexttowardl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn __nexttowardl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn remainderl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn __remainderl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn scalbnl(__x: c_longdouble, __n: c_int) c_longdouble;
pub extern fn __scalbnl(__x: c_longdouble, __n: c_int) c_longdouble;
pub extern fn ilogbl(__x: c_longdouble) c_int;
pub extern fn __ilogbl(__x: c_longdouble) c_int;
pub extern fn scalblnl(__x: c_longdouble, __n: c_long) c_longdouble;
pub extern fn __scalblnl(__x: c_longdouble, __n: c_long) c_longdouble;
pub extern fn nearbyintl(__x: c_longdouble) c_longdouble;
pub extern fn __nearbyintl(__x: c_longdouble) c_longdouble;
pub extern fn roundl(__x: c_longdouble) c_longdouble;
pub extern fn __roundl(__x: c_longdouble) c_longdouble;
pub extern fn truncl(__x: c_longdouble) c_longdouble;
pub extern fn __truncl(__x: c_longdouble) c_longdouble;
pub extern fn remquol(__x: c_longdouble, __y: c_longdouble, __quo: [*c]c_int) c_longdouble;
pub extern fn __remquol(__x: c_longdouble, __y: c_longdouble, __quo: [*c]c_int) c_longdouble;
pub extern fn lrintl(__x: c_longdouble) c_long;
pub extern fn __lrintl(__x: c_longdouble) c_long;
pub extern fn llrintl(__x: c_longdouble) c_longlong;
pub extern fn __llrintl(__x: c_longdouble) c_longlong;
pub extern fn lroundl(__x: c_longdouble) c_long;
pub extern fn __lroundl(__x: c_longdouble) c_long;
pub extern fn llroundl(__x: c_longdouble) c_longlong;
pub extern fn __llroundl(__x: c_longdouble) c_longlong;
pub extern fn fdiml(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn __fdiml(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn fmaxl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn __fmaxl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn fminl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn __fminl(__x: c_longdouble, __y: c_longdouble) c_longdouble;
pub extern fn fmal(__x: c_longdouble, __y: c_longdouble, __z: c_longdouble) c_longdouble;
pub extern fn __fmal(__x: c_longdouble, __y: c_longdouble, __z: c_longdouble) c_longdouble;
pub extern fn scalbl(__x: c_longdouble, __n: c_longdouble) c_longdouble;
pub extern fn __scalbl(__x: c_longdouble, __n: c_longdouble) c_longdouble;
pub extern var signgam: c_int;
pub const FP_NAN: c_int = 0;
pub const FP_INFINITE: c_int = 1;
pub const FP_ZERO: c_int = 2;
pub const FP_SUBNORMAL: c_int = 3;
pub const FP_NORMAL: c_int = 4;
const enum_unnamed_6 = c_uint;
pub const SDL_FALSE: c_int = 0;
pub const SDL_TRUE: c_int = 1;
pub const SDL_bool = c_uint;
pub const Sint8 = i8;
pub const Uint8 = u8;
pub const Sint16 = i16;
pub const Uint16 = u16;
pub const Sint32 = i32;
pub const Uint32 = u32;
pub const Sint64 = i64;
pub const Uint64 = u64;
// /usr/include/SDL2/SDL_stdinc.h:387:42: warning: ignoring StaticAssert declaration

// /usr/include/SDL2/SDL_stdinc.h:387:42: warning: ignoring StaticAssert declaration

// /usr/include/SDL2/SDL_stdinc.h:387:42: warning: ignoring StaticAssert declaration

// /usr/include/SDL2/SDL_stdinc.h:387:42: warning: ignoring StaticAssert declaration

// /usr/include/SDL2/SDL_stdinc.h:387:42: warning: ignoring StaticAssert declaration

// /usr/include/SDL2/SDL_stdinc.h:387:42: warning: ignoring StaticAssert declaration

// /usr/include/SDL2/SDL_stdinc.h:387:42: warning: ignoring StaticAssert declaration

// /usr/include/SDL2/SDL_stdinc.h:387:42: warning: ignoring StaticAssert declaration
pub const DUMMY_ENUM_VALUE: c_int = 0;
pub const SDL_DUMMY_ENUM = c_uint;
// /usr/include/SDL2/SDL_stdinc.h:387:42: warning: ignoring StaticAssert declaration
pub extern fn SDL_malloc(size: usize) ?*anyopaque;
pub extern fn SDL_calloc(nmemb: usize, size: usize) ?*anyopaque;
pub extern fn SDL_realloc(mem: ?*anyopaque, size: usize) ?*anyopaque;
pub extern fn SDL_free(mem: ?*anyopaque) void;
pub const SDL_malloc_func = ?*const fn (usize) callconv(.C) ?*anyopaque;
pub const SDL_calloc_func = ?*const fn (usize, usize) callconv(.C) ?*anyopaque;
pub const SDL_realloc_func = ?*const fn (?*anyopaque, usize) callconv(.C) ?*anyopaque;
pub const SDL_free_func = ?*const fn (?*anyopaque) callconv(.C) void;
pub extern fn SDL_GetOriginalMemoryFunctions(malloc_func: [*c]SDL_malloc_func, calloc_func: [*c]SDL_calloc_func, realloc_func: [*c]SDL_realloc_func, free_func: [*c]SDL_free_func) void;
pub extern fn SDL_GetMemoryFunctions(malloc_func: [*c]SDL_malloc_func, calloc_func: [*c]SDL_calloc_func, realloc_func: [*c]SDL_realloc_func, free_func: [*c]SDL_free_func) void;
pub extern fn SDL_SetMemoryFunctions(malloc_func: SDL_malloc_func, calloc_func: SDL_calloc_func, realloc_func: SDL_realloc_func, free_func: SDL_free_func) c_int;
pub extern fn SDL_GetNumAllocations() c_int;
pub extern fn SDL_getenv(name: [*c]const u8) [*c]u8;
pub extern fn SDL_setenv(name: [*c]const u8, value: [*c]const u8, overwrite: c_int) c_int;
pub extern fn SDL_qsort(base: ?*anyopaque, nmemb: usize, size: usize, compare: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) void;
pub extern fn SDL_bsearch(key: ?*const anyopaque, base: ?*const anyopaque, nmemb: usize, size: usize, compare: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) ?*anyopaque;
pub extern fn SDL_abs(x: c_int) c_int;
pub extern fn SDL_isalpha(x: c_int) c_int;
pub extern fn SDL_isalnum(x: c_int) c_int;
pub extern fn SDL_isblank(x: c_int) c_int;
pub extern fn SDL_iscntrl(x: c_int) c_int;
pub extern fn SDL_isdigit(x: c_int) c_int;
pub extern fn SDL_isxdigit(x: c_int) c_int;
pub extern fn SDL_ispunct(x: c_int) c_int;
pub extern fn SDL_isspace(x: c_int) c_int;
pub extern fn SDL_isupper(x: c_int) c_int;
pub extern fn SDL_islower(x: c_int) c_int;
pub extern fn SDL_isprint(x: c_int) c_int;
pub extern fn SDL_isgraph(x: c_int) c_int;
pub extern fn SDL_toupper(x: c_int) c_int;
pub extern fn SDL_tolower(x: c_int) c_int;
pub extern fn SDL_crc16(crc: Uint16, data: ?*const anyopaque, len: usize) Uint16;
pub extern fn SDL_crc32(crc: Uint32, data: ?*const anyopaque, len: usize) Uint32;
pub extern fn SDL_memset(dst: ?*anyopaque, c: c_int, len: usize) ?*anyopaque;
// /usr/include/SDL2/begin_code.h:183:25: warning: TODO implement translation of stmt class AttributedStmtClass

// /usr/include/SDL2/SDL_stdinc.h:534:23: warning: unable to translate function, demoted to extern
pub extern fn SDL_memset4(arg_dst: ?*anyopaque, arg_val: Uint32, arg_dwords: usize) void;
pub extern fn SDL_memcpy(dst: ?*anyopaque, src: ?*const anyopaque, len: usize) ?*anyopaque;
pub extern fn SDL_memmove(dst: ?*anyopaque, src: ?*const anyopaque, len: usize) ?*anyopaque;
pub extern fn SDL_memcmp(s1: ?*const anyopaque, s2: ?*const anyopaque, len: usize) c_int;
pub extern fn SDL_wcslen(wstr: [*c]const wchar_t) usize;
pub extern fn SDL_wcslcpy(dst: [*c]wchar_t, src: [*c]const wchar_t, maxlen: usize) usize;
pub extern fn SDL_wcslcat(dst: [*c]wchar_t, src: [*c]const wchar_t, maxlen: usize) usize;
pub extern fn SDL_wcsdup(wstr: [*c]const wchar_t) [*c]wchar_t;
pub extern fn SDL_wcsstr(haystack: [*c]const wchar_t, needle: [*c]const wchar_t) [*c]wchar_t;
pub extern fn SDL_wcscmp(str1: [*c]const wchar_t, str2: [*c]const wchar_t) c_int;
pub extern fn SDL_wcsncmp(str1: [*c]const wchar_t, str2: [*c]const wchar_t, maxlen: usize) c_int;
pub extern fn SDL_wcscasecmp(str1: [*c]const wchar_t, str2: [*c]const wchar_t) c_int;
pub extern fn SDL_wcsncasecmp(str1: [*c]const wchar_t, str2: [*c]const wchar_t, len: usize) c_int;
pub extern fn SDL_strlen(str: [*c]const u8) usize;
pub extern fn SDL_strlcpy(dst: [*c]u8, src: [*c]const u8, maxlen: usize) usize;
pub extern fn SDL_utf8strlcpy(dst: [*c]u8, src: [*c]const u8, dst_bytes: usize) usize;
pub extern fn SDL_strlcat(dst: [*c]u8, src: [*c]const u8, maxlen: usize) usize;
pub extern fn SDL_strdup(str: [*c]const u8) [*c]u8;
pub extern fn SDL_strrev(str: [*c]u8) [*c]u8;
pub extern fn SDL_strupr(str: [*c]u8) [*c]u8;
pub extern fn SDL_strlwr(str: [*c]u8) [*c]u8;
pub extern fn SDL_strchr(str: [*c]const u8, c: c_int) [*c]u8;
pub extern fn SDL_strrchr(str: [*c]const u8, c: c_int) [*c]u8;
pub extern fn SDL_strstr(haystack: [*c]const u8, needle: [*c]const u8) [*c]u8;
pub extern fn SDL_strcasestr(haystack: [*c]const u8, needle: [*c]const u8) [*c]u8;
pub extern fn SDL_strtokr(s1: [*c]u8, s2: [*c]const u8, saveptr: [*c][*c]u8) [*c]u8;
pub extern fn SDL_utf8strlen(str: [*c]const u8) usize;
pub extern fn SDL_utf8strnlen(str: [*c]const u8, bytes: usize) usize;
pub extern fn SDL_itoa(value: c_int, str: [*c]u8, radix: c_int) [*c]u8;
pub extern fn SDL_uitoa(value: c_uint, str: [*c]u8, radix: c_int) [*c]u8;
pub extern fn SDL_ltoa(value: c_long, str: [*c]u8, radix: c_int) [*c]u8;
pub extern fn SDL_ultoa(value: c_ulong, str: [*c]u8, radix: c_int) [*c]u8;
pub extern fn SDL_lltoa(value: Sint64, str: [*c]u8, radix: c_int) [*c]u8;
pub extern fn SDL_ulltoa(value: Uint64, str: [*c]u8, radix: c_int) [*c]u8;
pub extern fn SDL_atoi(str: [*c]const u8) c_int;
pub extern fn SDL_atof(str: [*c]const u8) f64;
pub extern fn SDL_strtol(str: [*c]const u8, endp: [*c][*c]u8, base: c_int) c_long;
pub extern fn SDL_strtoul(str: [*c]const u8, endp: [*c][*c]u8, base: c_int) c_ulong;
pub extern fn SDL_strtoll(str: [*c]const u8, endp: [*c][*c]u8, base: c_int) Sint64;
pub extern fn SDL_strtoull(str: [*c]const u8, endp: [*c][*c]u8, base: c_int) Uint64;
pub extern fn SDL_strtod(str: [*c]const u8, endp: [*c][*c]u8) f64;
pub extern fn SDL_strcmp(str1: [*c]const u8, str2: [*c]const u8) c_int;
pub extern fn SDL_strncmp(str1: [*c]const u8, str2: [*c]const u8, maxlen: usize) c_int;
pub extern fn SDL_strcasecmp(str1: [*c]const u8, str2: [*c]const u8) c_int;
pub extern fn SDL_strncasecmp(str1: [*c]const u8, str2: [*c]const u8, len: usize) c_int;
pub extern fn SDL_sscanf(text: [*c]const u8, fmt: [*c]const u8, ...) c_int;
pub extern fn SDL_vsscanf(text: [*c]const u8, fmt: [*c]const u8, ap: [*c]struct___va_list_tag_2) c_int;
pub extern fn SDL_snprintf(text: [*c]u8, maxlen: usize, fmt: [*c]const u8, ...) c_int;
pub extern fn SDL_vsnprintf(text: [*c]u8, maxlen: usize, fmt: [*c]const u8, ap: [*c]struct___va_list_tag_2) c_int;
pub extern fn SDL_asprintf(strp: [*c][*c]u8, fmt: [*c]const u8, ...) c_int;
pub extern fn SDL_vasprintf(strp: [*c][*c]u8, fmt: [*c]const u8, ap: [*c]struct___va_list_tag_2) c_int;
pub extern fn SDL_acos(x: f64) f64;
pub extern fn SDL_acosf(x: f32) f32;
pub extern fn SDL_asin(x: f64) f64;
pub extern fn SDL_asinf(x: f32) f32;
pub extern fn SDL_atan(x: f64) f64;
pub extern fn SDL_atanf(x: f32) f32;
pub extern fn SDL_atan2(y: f64, x: f64) f64;
pub extern fn SDL_atan2f(y: f32, x: f32) f32;
pub extern fn SDL_ceil(x: f64) f64;
pub extern fn SDL_ceilf(x: f32) f32;
pub extern fn SDL_copysign(x: f64, y: f64) f64;
pub extern fn SDL_copysignf(x: f32, y: f32) f32;
pub extern fn SDL_cos(x: f64) f64;
pub extern fn SDL_cosf(x: f32) f32;
pub extern fn SDL_exp(x: f64) f64;
pub extern fn SDL_expf(x: f32) f32;
pub extern fn SDL_fabs(x: f64) f64;
pub extern fn SDL_fabsf(x: f32) f32;
pub extern fn SDL_floor(x: f64) f64;
pub extern fn SDL_floorf(x: f32) f32;
pub extern fn SDL_trunc(x: f64) f64;
pub extern fn SDL_truncf(x: f32) f32;
pub extern fn SDL_fmod(x: f64, y: f64) f64;
pub extern fn SDL_fmodf(x: f32, y: f32) f32;
pub extern fn SDL_log(x: f64) f64;
pub extern fn SDL_logf(x: f32) f32;
pub extern fn SDL_log10(x: f64) f64;
pub extern fn SDL_log10f(x: f32) f32;
pub extern fn SDL_pow(x: f64, y: f64) f64;
pub extern fn SDL_powf(x: f32, y: f32) f32;
pub extern fn SDL_round(x: f64) f64;
pub extern fn SDL_roundf(x: f32) f32;
pub extern fn SDL_lround(x: f64) c_long;
pub extern fn SDL_lroundf(x: f32) c_long;
pub extern fn SDL_scalbn(x: f64, n: c_int) f64;
pub extern fn SDL_scalbnf(x: f32, n: c_int) f32;
pub extern fn SDL_sin(x: f64) f64;
pub extern fn SDL_sinf(x: f32) f32;
pub extern fn SDL_sqrt(x: f64) f64;
pub extern fn SDL_sqrtf(x: f32) f32;
pub extern fn SDL_tan(x: f64) f64;
pub extern fn SDL_tanf(x: f32) f32;
pub const struct__SDL_iconv_t = opaque {};
pub const SDL_iconv_t = ?*struct__SDL_iconv_t;
pub extern fn SDL_iconv_open(tocode: [*c]const u8, fromcode: [*c]const u8) SDL_iconv_t;
pub extern fn SDL_iconv_close(cd: SDL_iconv_t) c_int;
pub extern fn SDL_iconv(cd: SDL_iconv_t, inbuf: [*c][*c]const u8, inbytesleft: [*c]usize, outbuf: [*c][*c]u8, outbytesleft: [*c]usize) usize;
pub extern fn SDL_iconv_string(tocode: [*c]const u8, fromcode: [*c]const u8, inbuf: [*c]const u8, inbytesleft: usize) [*c]u8;
pub inline fn SDL_memcpy4(arg_dst: ?*anyopaque, arg_src: ?*const anyopaque, arg_dwords: usize) ?*anyopaque {
    var dst = arg_dst;
    _ = &dst;
    var src = arg_src;
    _ = &src;
    var dwords = arg_dwords;
    _ = &dwords;
    return SDL_memcpy(dst, src, dwords *% @as(usize, @bitCast(@as(c_long, @as(c_int, 4)))));
}
pub inline fn SDL_size_mul_overflow(arg_a: usize, arg_b: usize, arg_ret: [*c]usize) c_int {
    var a = arg_a;
    _ = &a;
    var b = arg_b;
    _ = &b;
    var ret = arg_ret;
    _ = &ret;
    if ((a != @as(usize, @bitCast(@as(c_long, @as(c_int, 0))))) and (b > (@as(c_ulong, 18446744073709551615) / a))) {
        return -@as(c_int, 1);
    }
    ret.* = a *% b;
    return 0;
}
pub inline fn _SDL_size_mul_overflow_builtin(arg_a: usize, arg_b: usize, arg_ret: [*c]usize) c_int {
    var a = arg_a;
    _ = &a;
    var b = arg_b;
    _ = &b;
    var ret = arg_ret;
    _ = &ret;
    return if (@as(c_int, @intFromBool(__builtin_mul_overflow(a, b, ret))) == @as(c_int, 0)) @as(c_int, 0) else -@as(c_int, 1);
}
pub inline fn SDL_size_add_overflow(arg_a: usize, arg_b: usize, arg_ret: [*c]usize) c_int {
    var a = arg_a;
    _ = &a;
    var b = arg_b;
    _ = &b;
    var ret = arg_ret;
    _ = &ret;
    if (b > (@as(c_ulong, 18446744073709551615) -% a)) {
        return -@as(c_int, 1);
    }
    ret.* = a +% b;
    return 0;
}
// /usr/include/SDL2/SDL_stdinc.h:834:12: warning: TODO implement function '__builtin_add_overflow' in std.zig.c_builtins

// /usr/include/SDL2/SDL_stdinc.h:830:22: warning: unable to translate function, demoted to extern
pub extern fn _SDL_size_add_overflow_builtin(arg_a: usize, arg_b: usize, arg_ret: [*c]usize) c_int;
pub const SDL_main_func = ?*const fn (c_int, [*c][*c]u8) callconv(.C) c_int;
pub extern fn SDL_main(argc: c_int, argv: [*c][*c]u8) c_int;
pub extern fn SDL_SetMainReady() void;
pub const SDL_ASSERTION_RETRY: c_int = 0;
pub const SDL_ASSERTION_BREAK: c_int = 1;
pub const SDL_ASSERTION_ABORT: c_int = 2;
pub const SDL_ASSERTION_IGNORE: c_int = 3;
pub const SDL_ASSERTION_ALWAYS_IGNORE: c_int = 4;
pub const SDL_AssertState = c_uint;
pub const struct_SDL_AssertData = extern struct {
    always_ignore: c_int = @import("std").mem.zeroes(c_int),
    trigger_count: c_uint = @import("std").mem.zeroes(c_uint),
    condition: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    filename: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    linenum: c_int = @import("std").mem.zeroes(c_int),
    function: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    next: [*c]const struct_SDL_AssertData = @import("std").mem.zeroes([*c]const struct_SDL_AssertData),
};
pub const SDL_AssertData = struct_SDL_AssertData;
pub extern fn SDL_ReportAssertion([*c]SDL_AssertData, [*c]const u8, [*c]const u8, c_int) SDL_AssertState;
pub const SDL_AssertionHandler = ?*const fn ([*c]const SDL_AssertData, ?*anyopaque) callconv(.C) SDL_AssertState;
pub extern fn SDL_SetAssertionHandler(handler: SDL_AssertionHandler, userdata: ?*anyopaque) void;
pub extern fn SDL_GetDefaultAssertionHandler() SDL_AssertionHandler;
pub extern fn SDL_GetAssertionHandler(puserdata: [*c]?*anyopaque) SDL_AssertionHandler;
pub extern fn SDL_GetAssertionReport() [*c]const SDL_AssertData;
pub extern fn SDL_ResetAssertionReport() void;
pub const SDL_SpinLock = c_int;
pub extern fn SDL_AtomicTryLock(lock: [*c]SDL_SpinLock) SDL_bool;
pub extern fn SDL_AtomicLock(lock: [*c]SDL_SpinLock) void;
pub extern fn SDL_AtomicUnlock(lock: [*c]SDL_SpinLock) void;
pub extern fn SDL_MemoryBarrierReleaseFunction() void;
pub extern fn SDL_MemoryBarrierAcquireFunction() void;
pub const SDL_atomic_t = extern struct {
    value: c_int = @import("std").mem.zeroes(c_int),
};
pub extern fn SDL_AtomicCAS(a: [*c]SDL_atomic_t, oldval: c_int, newval: c_int) SDL_bool;
pub extern fn SDL_AtomicSet(a: [*c]SDL_atomic_t, v: c_int) c_int;
pub extern fn SDL_AtomicGet(a: [*c]SDL_atomic_t) c_int;
pub extern fn SDL_AtomicAdd(a: [*c]SDL_atomic_t, v: c_int) c_int;
pub extern fn SDL_AtomicCASPtr(a: [*c]?*anyopaque, oldval: ?*anyopaque, newval: ?*anyopaque) SDL_bool;
pub extern fn SDL_AtomicSetPtr(a: [*c]?*anyopaque, v: ?*anyopaque) ?*anyopaque;
pub extern fn SDL_AtomicGetPtr(a: [*c]?*anyopaque) ?*anyopaque;
pub extern fn SDL_SetError(fmt: [*c]const u8, ...) c_int;
pub extern fn SDL_GetError() [*c]const u8;
pub extern fn SDL_GetErrorMsg(errstr: [*c]u8, maxlen: c_int) [*c]u8;
pub extern fn SDL_ClearError() void;
pub const SDL_ENOMEM: c_int = 0;
pub const SDL_EFREAD: c_int = 1;
pub const SDL_EFWRITE: c_int = 2;
pub const SDL_EFSEEK: c_int = 3;
pub const SDL_UNSUPPORTED: c_int = 4;
pub const SDL_LASTERROR: c_int = 5;
pub const SDL_errorcode = c_uint;
pub extern fn SDL_Error(code: SDL_errorcode) c_int;
pub inline fn SDL_SwapFloat(arg_x: f32) f32 {
    var x = arg_x;
    _ = &x;
    const union_unnamed_7 = extern union {
        f: f32,
        ui32: Uint32,
    };
    _ = &union_unnamed_7;
    var swapper: union_unnamed_7 = undefined;
    _ = &swapper;
    swapper.f = x;
    swapper.ui32 = __builtin_bswap32(swapper.ui32);
    return swapper.f;
}
pub const struct_SDL_mutex = opaque {};
pub const SDL_mutex = struct_SDL_mutex;
pub extern fn SDL_CreateMutex() ?*SDL_mutex;
pub extern fn SDL_LockMutex(mutex: ?*SDL_mutex) c_int;
pub extern fn SDL_TryLockMutex(mutex: ?*SDL_mutex) c_int;
pub extern fn SDL_UnlockMutex(mutex: ?*SDL_mutex) c_int;
pub extern fn SDL_DestroyMutex(mutex: ?*SDL_mutex) void;
pub const struct_SDL_semaphore = opaque {};
pub const SDL_sem = struct_SDL_semaphore;
pub extern fn SDL_CreateSemaphore(initial_value: Uint32) ?*SDL_sem;
pub extern fn SDL_DestroySemaphore(sem: ?*SDL_sem) void;
pub extern fn SDL_SemWait(sem: ?*SDL_sem) c_int;
pub extern fn SDL_SemTryWait(sem: ?*SDL_sem) c_int;
pub extern fn SDL_SemWaitTimeout(sem: ?*SDL_sem, timeout: Uint32) c_int;
pub extern fn SDL_SemPost(sem: ?*SDL_sem) c_int;
pub extern fn SDL_SemValue(sem: ?*SDL_sem) Uint32;
pub const struct_SDL_cond = opaque {};
pub const SDL_cond = struct_SDL_cond;
pub extern fn SDL_CreateCond() ?*SDL_cond;
pub extern fn SDL_DestroyCond(cond: ?*SDL_cond) void;
pub extern fn SDL_CondSignal(cond: ?*SDL_cond) c_int;
pub extern fn SDL_CondBroadcast(cond: ?*SDL_cond) c_int;
pub extern fn SDL_CondWait(cond: ?*SDL_cond, mutex: ?*SDL_mutex) c_int;
pub extern fn SDL_CondWaitTimeout(cond: ?*SDL_cond, mutex: ?*SDL_mutex, ms: Uint32) c_int;
pub const struct_SDL_Thread = opaque {};
pub const SDL_Thread = struct_SDL_Thread;
pub const SDL_threadID = c_ulong;
pub const SDL_TLSID = c_uint;
pub const SDL_THREAD_PRIORITY_LOW: c_int = 0;
pub const SDL_THREAD_PRIORITY_NORMAL: c_int = 1;
pub const SDL_THREAD_PRIORITY_HIGH: c_int = 2;
pub const SDL_THREAD_PRIORITY_TIME_CRITICAL: c_int = 3;
pub const SDL_ThreadPriority = c_uint;
pub const SDL_ThreadFunction = ?*const fn (?*anyopaque) callconv(.C) c_int;
pub extern fn SDL_CreateThread(@"fn": SDL_ThreadFunction, name: [*c]const u8, data: ?*anyopaque) ?*SDL_Thread;
pub extern fn SDL_CreateThreadWithStackSize(@"fn": SDL_ThreadFunction, name: [*c]const u8, stacksize: usize, data: ?*anyopaque) ?*SDL_Thread;
pub extern fn SDL_GetThreadName(thread: ?*SDL_Thread) [*c]const u8;
pub extern fn SDL_ThreadID() SDL_threadID;
pub extern fn SDL_GetThreadID(thread: ?*SDL_Thread) SDL_threadID;
pub extern fn SDL_SetThreadPriority(priority: SDL_ThreadPriority) c_int;
pub extern fn SDL_WaitThread(thread: ?*SDL_Thread, status: [*c]c_int) void;
pub extern fn SDL_DetachThread(thread: ?*SDL_Thread) void;
pub extern fn SDL_TLSCreate() SDL_TLSID;
pub extern fn SDL_TLSGet(id: SDL_TLSID) ?*anyopaque;
pub extern fn SDL_TLSSet(id: SDL_TLSID, value: ?*const anyopaque, destructor: ?*const fn (?*anyopaque) callconv(.C) void) c_int;
pub extern fn SDL_TLSCleanup() void;
const struct_unnamed_9 = extern struct {
    autoclose: SDL_bool = @import("std").mem.zeroes(SDL_bool),
    fp: [*c]FILE = @import("std").mem.zeroes([*c]FILE),
};
const struct_unnamed_10 = extern struct {
    base: [*c]Uint8 = @import("std").mem.zeroes([*c]Uint8),
    here: [*c]Uint8 = @import("std").mem.zeroes([*c]Uint8),
    stop: [*c]Uint8 = @import("std").mem.zeroes([*c]Uint8),
};
const struct_unnamed_11 = extern struct {
    data1: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    data2: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
const union_unnamed_8 = extern union {
    stdio: struct_unnamed_9,
    mem: struct_unnamed_10,
    unknown: struct_unnamed_11,
};
pub const struct_SDL_RWops = extern struct {
    size: ?*const fn ([*c]struct_SDL_RWops) callconv(.C) Sint64 = @import("std").mem.zeroes(?*const fn ([*c]struct_SDL_RWops) callconv(.C) Sint64),
    seek: ?*const fn ([*c]struct_SDL_RWops, Sint64, c_int) callconv(.C) Sint64 = @import("std").mem.zeroes(?*const fn ([*c]struct_SDL_RWops, Sint64, c_int) callconv(.C) Sint64),
    read: ?*const fn ([*c]struct_SDL_RWops, ?*anyopaque, usize, usize) callconv(.C) usize = @import("std").mem.zeroes(?*const fn ([*c]struct_SDL_RWops, ?*anyopaque, usize, usize) callconv(.C) usize),
    write: ?*const fn ([*c]struct_SDL_RWops, ?*const anyopaque, usize, usize) callconv(.C) usize = @import("std").mem.zeroes(?*const fn ([*c]struct_SDL_RWops, ?*const anyopaque, usize, usize) callconv(.C) usize),
    close: ?*const fn ([*c]struct_SDL_RWops) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn ([*c]struct_SDL_RWops) callconv(.C) c_int),
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    hidden: union_unnamed_8 = @import("std").mem.zeroes(union_unnamed_8),
};
pub const SDL_RWops = struct_SDL_RWops;
pub extern fn SDL_RWFromFile(file: [*c]const u8, mode: [*c]const u8) [*c]SDL_RWops;
pub extern fn SDL_RWFromFP(fp: [*c]FILE, autoclose: SDL_bool) [*c]SDL_RWops;
pub extern fn SDL_RWFromMem(mem: ?*anyopaque, size: c_int) [*c]SDL_RWops;
pub extern fn SDL_RWFromConstMem(mem: ?*const anyopaque, size: c_int) [*c]SDL_RWops;
pub extern fn SDL_AllocRW() [*c]SDL_RWops;
pub extern fn SDL_FreeRW(area: [*c]SDL_RWops) void;
pub extern fn SDL_RWsize(context: [*c]SDL_RWops) Sint64;
pub extern fn SDL_RWseek(context: [*c]SDL_RWops, offset: Sint64, whence: c_int) Sint64;
pub extern fn SDL_RWtell(context: [*c]SDL_RWops) Sint64;
pub extern fn SDL_RWread(context: [*c]SDL_RWops, ptr: ?*anyopaque, size: usize, maxnum: usize) usize;
pub extern fn SDL_RWwrite(context: [*c]SDL_RWops, ptr: ?*const anyopaque, size: usize, num: usize) usize;
pub extern fn SDL_RWclose(context: [*c]SDL_RWops) c_int;
pub extern fn SDL_LoadFile_RW(src: [*c]SDL_RWops, datasize: [*c]usize, freesrc: c_int) ?*anyopaque;
pub extern fn SDL_LoadFile(file: [*c]const u8, datasize: [*c]usize) ?*anyopaque;
pub extern fn SDL_ReadU8(src: [*c]SDL_RWops) Uint8;
pub extern fn SDL_ReadLE16(src: [*c]SDL_RWops) Uint16;
pub extern fn SDL_ReadBE16(src: [*c]SDL_RWops) Uint16;
pub extern fn SDL_ReadLE32(src: [*c]SDL_RWops) Uint32;
pub extern fn SDL_ReadBE32(src: [*c]SDL_RWops) Uint32;
pub extern fn SDL_ReadLE64(src: [*c]SDL_RWops) Uint64;
pub extern fn SDL_ReadBE64(src: [*c]SDL_RWops) Uint64;
pub extern fn SDL_WriteU8(dst: [*c]SDL_RWops, value: Uint8) usize;
pub extern fn SDL_WriteLE16(dst: [*c]SDL_RWops, value: Uint16) usize;
pub extern fn SDL_WriteBE16(dst: [*c]SDL_RWops, value: Uint16) usize;
pub extern fn SDL_WriteLE32(dst: [*c]SDL_RWops, value: Uint32) usize;
pub extern fn SDL_WriteBE32(dst: [*c]SDL_RWops, value: Uint32) usize;
pub extern fn SDL_WriteLE64(dst: [*c]SDL_RWops, value: Uint64) usize;
pub extern fn SDL_WriteBE64(dst: [*c]SDL_RWops, value: Uint64) usize;
pub const SDL_AudioFormat = Uint16;
pub const SDL_AudioCallback = ?*const fn (?*anyopaque, [*c]Uint8, c_int) callconv(.C) void;
pub const struct_SDL_AudioSpec = extern struct {
    freq: c_int = @import("std").mem.zeroes(c_int),
    format: SDL_AudioFormat = @import("std").mem.zeroes(SDL_AudioFormat),
    channels: Uint8 = @import("std").mem.zeroes(Uint8),
    silence: Uint8 = @import("std").mem.zeroes(Uint8),
    samples: Uint16 = @import("std").mem.zeroes(Uint16),
    padding: Uint16 = @import("std").mem.zeroes(Uint16),
    size: Uint32 = @import("std").mem.zeroes(Uint32),
    callback: SDL_AudioCallback = @import("std").mem.zeroes(SDL_AudioCallback),
    userdata: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const SDL_AudioSpec = struct_SDL_AudioSpec;
pub const SDL_AudioFilter = ?*const fn ([*c]struct_SDL_AudioCVT, SDL_AudioFormat) callconv(.C) void;
pub const struct_SDL_AudioCVT = extern struct {
    needed: c_int align(1) = @import("std").mem.zeroes(c_int),
    src_format: SDL_AudioFormat align(1) = @import("std").mem.zeroes(SDL_AudioFormat),
    dst_format: SDL_AudioFormat align(1) = @import("std").mem.zeroes(SDL_AudioFormat),
    rate_incr: f64 align(1) = @import("std").mem.zeroes(f64),
    buf: [*c]Uint8 align(1) = @import("std").mem.zeroes([*c]Uint8),
    len: c_int align(1) = @import("std").mem.zeroes(c_int),
    len_cvt: c_int align(1) = @import("std").mem.zeroes(c_int),
    len_mult: c_int align(1) = @import("std").mem.zeroes(c_int),
    len_ratio: f64 align(1) = @import("std").mem.zeroes(f64),
    filters: [10]SDL_AudioFilter align(1) = @import("std").mem.zeroes([10]SDL_AudioFilter),
    filter_index: c_int align(1) = @import("std").mem.zeroes(c_int),
};
pub const SDL_AudioCVT = struct_SDL_AudioCVT;
pub extern fn SDL_GetNumAudioDrivers() c_int;
pub extern fn SDL_GetAudioDriver(index: c_int) [*c]const u8;
pub extern fn SDL_AudioInit(driver_name: [*c]const u8) c_int;
pub extern fn SDL_AudioQuit() void;
pub extern fn SDL_GetCurrentAudioDriver() [*c]const u8;
pub extern fn SDL_OpenAudio(desired: [*c]SDL_AudioSpec, obtained: [*c]SDL_AudioSpec) c_int;
pub const SDL_AudioDeviceID = Uint32;
pub extern fn SDL_GetNumAudioDevices(iscapture: c_int) c_int;
pub extern fn SDL_GetAudioDeviceName(index: c_int, iscapture: c_int) [*c]const u8;
pub extern fn SDL_GetAudioDeviceSpec(index: c_int, iscapture: c_int, spec: [*c]SDL_AudioSpec) c_int;
pub extern fn SDL_GetDefaultAudioInfo(name: [*c][*c]u8, spec: [*c]SDL_AudioSpec, iscapture: c_int) c_int;
pub extern fn SDL_OpenAudioDevice(device: [*c]const u8, iscapture: c_int, desired: [*c]const SDL_AudioSpec, obtained: [*c]SDL_AudioSpec, allowed_changes: c_int) SDL_AudioDeviceID;
pub const SDL_AUDIO_STOPPED: c_int = 0;
pub const SDL_AUDIO_PLAYING: c_int = 1;
pub const SDL_AUDIO_PAUSED: c_int = 2;
pub const SDL_AudioStatus = c_uint;
pub extern fn SDL_GetAudioStatus() SDL_AudioStatus;
pub extern fn SDL_GetAudioDeviceStatus(dev: SDL_AudioDeviceID) SDL_AudioStatus;
pub extern fn SDL_PauseAudio(pause_on: c_int) void;
pub extern fn SDL_PauseAudioDevice(dev: SDL_AudioDeviceID, pause_on: c_int) void;
pub extern fn SDL_LoadWAV_RW(src: [*c]SDL_RWops, freesrc: c_int, spec: [*c]SDL_AudioSpec, audio_buf: [*c][*c]Uint8, audio_len: [*c]Uint32) [*c]SDL_AudioSpec;
pub extern fn SDL_FreeWAV(audio_buf: [*c]Uint8) void;
pub extern fn SDL_BuildAudioCVT(cvt: [*c]SDL_AudioCVT, src_format: SDL_AudioFormat, src_channels: Uint8, src_rate: c_int, dst_format: SDL_AudioFormat, dst_channels: Uint8, dst_rate: c_int) c_int;
pub extern fn SDL_ConvertAudio(cvt: [*c]SDL_AudioCVT) c_int;
pub const struct__SDL_AudioStream = opaque {};
pub const SDL_AudioStream = struct__SDL_AudioStream;
pub extern fn SDL_NewAudioStream(src_format: SDL_AudioFormat, src_channels: Uint8, src_rate: c_int, dst_format: SDL_AudioFormat, dst_channels: Uint8, dst_rate: c_int) ?*SDL_AudioStream;
pub extern fn SDL_AudioStreamPut(stream: ?*SDL_AudioStream, buf: ?*const anyopaque, len: c_int) c_int;
pub extern fn SDL_AudioStreamGet(stream: ?*SDL_AudioStream, buf: ?*anyopaque, len: c_int) c_int;
pub extern fn SDL_AudioStreamAvailable(stream: ?*SDL_AudioStream) c_int;
pub extern fn SDL_AudioStreamFlush(stream: ?*SDL_AudioStream) c_int;
pub extern fn SDL_AudioStreamClear(stream: ?*SDL_AudioStream) void;
pub extern fn SDL_FreeAudioStream(stream: ?*SDL_AudioStream) void;
pub extern fn SDL_MixAudio(dst: [*c]Uint8, src: [*c]const Uint8, len: Uint32, volume: c_int) void;
pub extern fn SDL_MixAudioFormat(dst: [*c]Uint8, src: [*c]const Uint8, format: SDL_AudioFormat, len: Uint32, volume: c_int) void;
pub extern fn SDL_QueueAudio(dev: SDL_AudioDeviceID, data: ?*const anyopaque, len: Uint32) c_int;
pub extern fn SDL_DequeueAudio(dev: SDL_AudioDeviceID, data: ?*anyopaque, len: Uint32) Uint32;
pub extern fn SDL_GetQueuedAudioSize(dev: SDL_AudioDeviceID) Uint32;
pub extern fn SDL_ClearQueuedAudio(dev: SDL_AudioDeviceID) void;
pub extern fn SDL_LockAudio() void;
pub extern fn SDL_LockAudioDevice(dev: SDL_AudioDeviceID) void;
pub extern fn SDL_UnlockAudio() void;
pub extern fn SDL_UnlockAudioDevice(dev: SDL_AudioDeviceID) void;
pub extern fn SDL_CloseAudio() void;
pub extern fn SDL_CloseAudioDevice(dev: SDL_AudioDeviceID) void;
pub extern fn SDL_SetClipboardText(text: [*c]const u8) c_int;
pub extern fn SDL_GetClipboardText() [*c]u8;
pub extern fn SDL_HasClipboardText() SDL_bool;
pub extern fn SDL_SetPrimarySelectionText(text: [*c]const u8) c_int;
pub extern fn SDL_GetPrimarySelectionText() [*c]u8;
pub extern fn SDL_HasPrimarySelectionText() SDL_bool;
// /usr/lib/zig/include/hresetintrin.h:42:3: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /usr/lib/zig/include/hresetintrin.h:40:1: warning: unable to translate function, demoted to extern
pub extern fn _hreset(arg___eax: c_int) void;
pub const struct___uintr_frame = extern struct {
    rip: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    rflags: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    rsp: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
// /usr/lib/zig/include/uintrintrin.h:48:3: warning: TODO implement function '__builtin_ia32_clui' in std.zig.c_builtins

// /usr/lib/zig/include/uintrintrin.h:46:1: warning: unable to translate function, demoted to extern
pub extern fn _clui() void;
// /usr/lib/zig/include/uintrintrin.h:69:3: warning: TODO implement function '__builtin_ia32_stui' in std.zig.c_builtins

// /usr/lib/zig/include/uintrintrin.h:67:1: warning: unable to translate function, demoted to extern
pub extern fn _stui() void;
// /usr/lib/zig/include/uintrintrin.h:96:10: warning: TODO implement function '__builtin_ia32_testui' in std.zig.c_builtins

// /usr/lib/zig/include/uintrintrin.h:94:1: warning: unable to translate function, demoted to extern
pub extern fn _testui() u8;
// /usr/lib/zig/include/uintrintrin.h:150:3: warning: TODO implement function '__builtin_ia32_senduipi' in std.zig.c_builtins

// /usr/lib/zig/include/uintrintrin.h:148:1: warning: unable to translate function, demoted to extern
pub extern fn _senduipi(arg___a: c_ulonglong) void;
// /usr/lib/zig/include/usermsrintrin.h:29:10: warning: TODO implement function '__builtin_ia32_urdmsr' in std.zig.c_builtins

// /usr/lib/zig/include/usermsrintrin.h:28:5: warning: unable to translate function, demoted to extern
pub extern fn _urdmsr(arg___A: c_ulonglong) c_ulonglong;
// /usr/lib/zig/include/usermsrintrin.h:47:10: warning: TODO implement function '__builtin_ia32_uwrmsr' in std.zig.c_builtins

// /usr/lib/zig/include/usermsrintrin.h:46:5: warning: unable to translate function, demoted to extern
pub extern fn _uwrmsr(arg___A: c_ulonglong, arg___B: c_ulonglong) void;
// /usr/lib/zig/include/crc32intrin.h:33:10: warning: TODO implement function '__builtin_ia32_crc32qi' in std.zig.c_builtins

// /usr/lib/zig/include/crc32intrin.h:31:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_crc32_u8(arg___C: c_uint, arg___D: u8) c_uint;
// /usr/lib/zig/include/crc32intrin.h:53:10: warning: TODO implement function '__builtin_ia32_crc32hi' in std.zig.c_builtins

// /usr/lib/zig/include/crc32intrin.h:51:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_crc32_u16(arg___C: c_uint, arg___D: c_ushort) c_uint;
// /usr/lib/zig/include/crc32intrin.h:73:10: warning: TODO implement function '__builtin_ia32_crc32si' in std.zig.c_builtins

// /usr/lib/zig/include/crc32intrin.h:71:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_crc32_u32(arg___C: c_uint, arg___D: c_uint) c_uint;
// /usr/lib/zig/include/crc32intrin.h:94:10: warning: TODO implement function '__builtin_ia32_crc32di' in std.zig.c_builtins

// /usr/lib/zig/include/crc32intrin.h:92:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_crc32_u64(arg___C: c_ulonglong, arg___D: c_ulonglong) c_ulonglong;
// /usr/lib/zig/include/prfchiintrin.h:35:3: warning: TODO implement function '__builtin_ia32_prefetchi' in std.zig.c_builtins

// /usr/lib/zig/include/prfchiintrin.h:32:1: warning: unable to translate function, demoted to extern
pub extern fn _m_prefetchit0(arg___P_1: ?*const volatile anyopaque) void;
// /usr/lib/zig/include/prfchiintrin.h:55:3: warning: TODO implement function '__builtin_ia32_prefetchi' in std.zig.c_builtins

// /usr/lib/zig/include/prfchiintrin.h:52:1: warning: unable to translate function, demoted to extern
pub extern fn _m_prefetchit1(arg___P_1: ?*const volatile anyopaque) void;
// /usr/lib/zig/include/raointintrin.h:39:3: warning: TODO implement function '__builtin_ia32_aadd32' in std.zig.c_builtins

// /usr/lib/zig/include/raointintrin.h:38:43: warning: unable to translate function, demoted to extern
pub extern fn _aadd_i32(arg___A: [*c]c_int, arg___B: c_int) void;
// /usr/lib/zig/include/raointintrin.h:61:3: warning: TODO implement function '__builtin_ia32_aand32' in std.zig.c_builtins

// /usr/lib/zig/include/raointintrin.h:60:43: warning: unable to translate function, demoted to extern
pub extern fn _aand_i32(arg___A: [*c]c_int, arg___B: c_int) void;
// /usr/lib/zig/include/raointintrin.h:83:3: warning: TODO implement function '__builtin_ia32_aor32' in std.zig.c_builtins

// /usr/lib/zig/include/raointintrin.h:82:43: warning: unable to translate function, demoted to extern
pub extern fn _aor_i32(arg___A: [*c]c_int, arg___B: c_int) void;
// /usr/lib/zig/include/raointintrin.h:105:3: warning: TODO implement function '__builtin_ia32_axor32' in std.zig.c_builtins

// /usr/lib/zig/include/raointintrin.h:104:43: warning: unable to translate function, demoted to extern
pub extern fn _axor_i32(arg___A: [*c]c_int, arg___B: c_int) void;
// /usr/lib/zig/include/raointintrin.h:129:3: warning: TODO implement function '__builtin_ia32_aadd64' in std.zig.c_builtins

// /usr/lib/zig/include/raointintrin.h:127:43: warning: unable to translate function, demoted to extern
pub extern fn _aadd_i64(arg___A: [*c]c_longlong, arg___B: c_longlong) void;
// /usr/lib/zig/include/raointintrin.h:152:3: warning: TODO implement function '__builtin_ia32_aand64' in std.zig.c_builtins

// /usr/lib/zig/include/raointintrin.h:150:43: warning: unable to translate function, demoted to extern
pub extern fn _aand_i64(arg___A: [*c]c_longlong, arg___B: c_longlong) void;
// /usr/lib/zig/include/raointintrin.h:175:3: warning: TODO implement function '__builtin_ia32_aor64' in std.zig.c_builtins

// /usr/lib/zig/include/raointintrin.h:173:43: warning: unable to translate function, demoted to extern
pub extern fn _aor_i64(arg___A: [*c]c_longlong, arg___B: c_longlong) void;
// /usr/lib/zig/include/raointintrin.h:198:3: warning: TODO implement function '__builtin_ia32_axor64' in std.zig.c_builtins

// /usr/lib/zig/include/raointintrin.h:196:43: warning: unable to translate function, demoted to extern
pub extern fn _axor_i64(arg___A: [*c]c_longlong, arg___B: c_longlong) void;
pub const _CMPCCX_O: c_int = 0;
pub const _CMPCCX_NO: c_int = 1;
pub const _CMPCCX_B: c_int = 2;
pub const _CMPCCX_NB: c_int = 3;
pub const _CMPCCX_Z: c_int = 4;
pub const _CMPCCX_NZ: c_int = 5;
pub const _CMPCCX_BE: c_int = 6;
pub const _CMPCCX_NBE: c_int = 7;
pub const _CMPCCX_S: c_int = 8;
pub const _CMPCCX_NS: c_int = 9;
pub const _CMPCCX_P: c_int = 10;
pub const _CMPCCX_NP: c_int = 11;
pub const _CMPCCX_L: c_int = 12;
pub const _CMPCCX_NL: c_int = 13;
pub const _CMPCCX_LE: c_int = 14;
pub const _CMPCCX_NLE: c_int = 15;
pub const _CMPCCX_ENUM = c_uint;
pub const __m64 = @Vector(1, c_longlong);
pub const __v1di = @Vector(1, c_longlong);
pub const __v2si = @Vector(2, c_int);
pub const __v4hi = @Vector(4, c_short);
pub const __v8qi = @Vector(8, u8);
// /usr/lib/zig/include/mmintrin.h:39:3: warning: TODO implement function '__builtin_ia32_emms' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:38:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_empty() void;
// /usr/lib/zig/include/mmintrin.h:56:19: warning: TODO implement function '__builtin_ia32_vec_init_v2si' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:54:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsi32_si64(arg___i: c_int) __m64;
// /usr/lib/zig/include/mmintrin.h:73:12: warning: TODO implement function '__builtin_ia32_vec_ext_v2si' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:71:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsi64_si32(arg___m: __m64) c_int;
pub inline fn _mm_cvtsi64_m64(arg___i: c_longlong) __m64 {
    var __i = arg___i;
    _ = &__i;
    return @as(__m64, @bitCast(__i));
}
pub inline fn _mm_cvtm64_si64(arg___m: __m64) c_longlong {
    var __m = arg___m;
    _ = &__m;
    return @as(c_longlong, @bitCast(__m));
}
// /usr/lib/zig/include/mmintrin.h:135:19: warning: TODO implement function '__builtin_ia32_packsswb' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:133:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_packs_pi16(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:165:19: warning: TODO implement function '__builtin_ia32_packssdw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:163:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_packs_pi32(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:195:19: warning: TODO implement function '__builtin_ia32_packuswb' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:193:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_packs_pu16(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:222:19: warning: TODO implement function '__builtin_ia32_punpckhbw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:220:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_unpackhi_pi8(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:245:19: warning: TODO implement function '__builtin_ia32_punpckhwd' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:243:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_unpackhi_pi16(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:266:19: warning: TODO implement function '__builtin_ia32_punpckhdq' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:264:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_unpackhi_pi32(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:293:19: warning: TODO implement function '__builtin_ia32_punpcklbw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:291:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_unpacklo_pi8(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:316:19: warning: TODO implement function '__builtin_ia32_punpcklwd' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:314:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_unpacklo_pi16(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:337:19: warning: TODO implement function '__builtin_ia32_punpckldq' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:335:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_unpacklo_pi32(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:358:19: warning: TODO implement function '__builtin_ia32_paddb' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:356:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_add_pi8(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:379:19: warning: TODO implement function '__builtin_ia32_paddw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:377:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_add_pi16(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:400:19: warning: TODO implement function '__builtin_ia32_paddd' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:398:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_add_pi32(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:422:19: warning: TODO implement function '__builtin_ia32_paddsb' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:420:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_adds_pi8(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:445:19: warning: TODO implement function '__builtin_ia32_paddsw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:443:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_adds_pi16(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:467:19: warning: TODO implement function '__builtin_ia32_paddusb' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:465:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_adds_pu8(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:489:19: warning: TODO implement function '__builtin_ia32_paddusw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:487:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_adds_pu16(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:510:19: warning: TODO implement function '__builtin_ia32_psubb' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:508:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sub_pi8(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:531:19: warning: TODO implement function '__builtin_ia32_psubw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:529:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sub_pi16(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:552:19: warning: TODO implement function '__builtin_ia32_psubd' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:550:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sub_pi32(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:575:19: warning: TODO implement function '__builtin_ia32_psubsb' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:573:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_subs_pi8(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:598:19: warning: TODO implement function '__builtin_ia32_psubsw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:596:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_subs_pi16(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:622:19: warning: TODO implement function '__builtin_ia32_psubusb' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:620:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_subs_pu8(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:646:19: warning: TODO implement function '__builtin_ia32_psubusw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:644:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_subs_pu16(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:673:19: warning: TODO implement function '__builtin_ia32_pmaddwd' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:671:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_madd_pi16(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:694:19: warning: TODO implement function '__builtin_ia32_pmulhw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:692:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mulhi_pi16(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:715:19: warning: TODO implement function '__builtin_ia32_pmullw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:713:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mullo_pi16(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:738:19: warning: TODO implement function '__builtin_ia32_psllw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:736:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sll_pi16(arg___m: __m64, arg___count: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:760:19: warning: TODO implement function '__builtin_ia32_psllwi' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:758:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_slli_pi16(arg___m: __m64, arg___count: c_int) __m64;
// /usr/lib/zig/include/mmintrin.h:783:19: warning: TODO implement function '__builtin_ia32_pslld' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:781:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sll_pi32(arg___m: __m64, arg___count: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:805:19: warning: TODO implement function '__builtin_ia32_pslldi' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:803:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_slli_pi32(arg___m: __m64, arg___count: c_int) __m64;
// /usr/lib/zig/include/mmintrin.h:825:19: warning: TODO implement function '__builtin_ia32_psllq' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:823:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sll_si64(arg___m: __m64, arg___count: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:845:19: warning: TODO implement function '__builtin_ia32_psllqi' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:843:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_slli_si64(arg___m: __m64, arg___count: c_int) __m64;
// /usr/lib/zig/include/mmintrin.h:869:19: warning: TODO implement function '__builtin_ia32_psraw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:867:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sra_pi16(arg___m: __m64, arg___count: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:892:19: warning: TODO implement function '__builtin_ia32_psrawi' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:890:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_srai_pi16(arg___m: __m64, arg___count: c_int) __m64;
// /usr/lib/zig/include/mmintrin.h:916:19: warning: TODO implement function '__builtin_ia32_psrad' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:914:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sra_pi32(arg___m: __m64, arg___count: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:939:19: warning: TODO implement function '__builtin_ia32_psradi' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:937:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_srai_pi32(arg___m: __m64, arg___count: c_int) __m64;
// /usr/lib/zig/include/mmintrin.h:962:19: warning: TODO implement function '__builtin_ia32_psrlw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:960:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_srl_pi16(arg___m: __m64, arg___count: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:984:19: warning: TODO implement function '__builtin_ia32_psrlwi' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:982:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_srli_pi16(arg___m: __m64, arg___count: c_int) __m64;
// /usr/lib/zig/include/mmintrin.h:1007:19: warning: TODO implement function '__builtin_ia32_psrld' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1005:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_srl_pi32(arg___m: __m64, arg___count: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:1029:19: warning: TODO implement function '__builtin_ia32_psrldi' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1027:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_srli_pi32(arg___m: __m64, arg___count: c_int) __m64;
// /usr/lib/zig/include/mmintrin.h:1049:19: warning: TODO implement function '__builtin_ia32_psrlq' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1047:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_srl_si64(arg___m: __m64, arg___count: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:1070:19: warning: TODO implement function '__builtin_ia32_psrlqi' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1068:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_srli_si64(arg___m: __m64, arg___count: c_int) __m64;
// /usr/lib/zig/include/mmintrin.h:1088:12: warning: TODO implement function '__builtin_ia32_pand' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1086:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_and_si64(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:1109:12: warning: TODO implement function '__builtin_ia32_pandn' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1107:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_andnot_si64(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:1127:12: warning: TODO implement function '__builtin_ia32_por' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1125:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_or_si64(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:1145:12: warning: TODO implement function '__builtin_ia32_pxor' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1143:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_xor_si64(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:1167:19: warning: TODO implement function '__builtin_ia32_pcmpeqb' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1165:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpeq_pi8(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:1189:19: warning: TODO implement function '__builtin_ia32_pcmpeqw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1187:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpeq_pi16(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:1211:19: warning: TODO implement function '__builtin_ia32_pcmpeqd' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1209:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpeq_pi32(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:1233:19: warning: TODO implement function '__builtin_ia32_pcmpgtb' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1231:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpgt_pi8(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:1255:19: warning: TODO implement function '__builtin_ia32_pcmpgtw' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1253:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpgt_pi16(arg___m1: __m64, arg___m2: __m64) __m64;
// /usr/lib/zig/include/mmintrin.h:1277:19: warning: TODO implement function '__builtin_ia32_pcmpgtd' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1275:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpgt_pi32(arg___m1: __m64, arg___m2: __m64) __m64;
pub inline fn _mm_setzero_si64() __m64 {
    return blk: {
        const tmp = @as(c_longlong, 0);
        break :blk __m64{
            tmp,
        };
    };
}
// /usr/lib/zig/include/mmintrin.h:1311:19: warning: TODO implement function '__builtin_ia32_vec_init_v2si' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1309:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_set_pi32(arg___i1: c_int, arg___i0: c_int) __m64;
// /usr/lib/zig/include/mmintrin.h:1334:19: warning: TODO implement function '__builtin_ia32_vec_init_v4hi' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1332:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_set_pi16(arg___s3: c_short, arg___s2: c_short, arg___s1: c_short, arg___s0: c_short) __m64;
// /usr/lib/zig/include/mmintrin.h:1366:19: warning: TODO implement function '__builtin_ia32_vec_init_v8qi' in std.zig.c_builtins

// /usr/lib/zig/include/mmintrin.h:1363:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_set_pi8(arg___b7: u8, arg___b6: u8, arg___b5: u8, arg___b4: u8, arg___b3: u8, arg___b2: u8, arg___b1: u8, arg___b0: u8) __m64;
pub inline fn _mm_set1_pi32(arg___i: c_int) __m64 {
    var __i = arg___i;
    _ = &__i;
    return _mm_set_pi32(__i, __i);
}
pub inline fn _mm_set1_pi16(arg___w: c_short) __m64 {
    var __w = arg___w;
    _ = &__w;
    return _mm_set_pi16(__w, __w, __w, __w);
}
pub inline fn _mm_set1_pi8(arg___b: u8) __m64 {
    var __b = arg___b;
    _ = &__b;
    return _mm_set_pi8(__b, __b, __b, __b, __b, __b, __b, __b);
}
pub inline fn _mm_setr_pi32(arg___i0: c_int, arg___i1: c_int) __m64 {
    var __i0 = arg___i0;
    _ = &__i0;
    var __i1 = arg___i1;
    _ = &__i1;
    return _mm_set_pi32(__i1, __i0);
}
pub inline fn _mm_setr_pi16(arg___w0: c_short, arg___w1: c_short, arg___w2: c_short, arg___w3: c_short) __m64 {
    var __w0 = arg___w0;
    _ = &__w0;
    var __w1 = arg___w1;
    _ = &__w1;
    var __w2 = arg___w2;
    _ = &__w2;
    var __w3 = arg___w3;
    _ = &__w3;
    return _mm_set_pi16(__w3, __w2, __w1, __w0);
}
pub inline fn _mm_setr_pi8(arg___b0: u8, arg___b1: u8, arg___b2: u8, arg___b3: u8, arg___b4: u8, arg___b5: u8, arg___b6: u8, arg___b7: u8) __m64 {
    var __b0 = arg___b0;
    _ = &__b0;
    var __b1 = arg___b1;
    _ = &__b1;
    var __b2 = arg___b2;
    _ = &__b2;
    var __b3 = arg___b3;
    _ = &__b3;
    var __b4 = arg___b4;
    _ = &__b4;
    var __b5 = arg___b5;
    _ = &__b5;
    var __b6 = arg___b6;
    _ = &__b6;
    var __b7 = arg___b7;
    _ = &__b7;
    return _mm_set_pi8(__b7, __b6, __b5, __b4, __b3, __b2, __b1, __b0);
}
pub const __v4si = @Vector(4, c_int);
pub const __v4sf = @Vector(4, f32);
pub const __m128 = @Vector(4, f32);
pub const __m128_u = @Vector(4, f32);
pub const __v4su = @Vector(4, c_uint);
pub inline fn _mm_malloc(arg___size: usize, arg___align: usize) ?*anyopaque {
    var __size = arg___size;
    _ = &__size;
    var __align = arg___align;
    _ = &__align;
    if (__align == @as(usize, @bitCast(@as(c_long, @as(c_int, 1))))) {
        return malloc(__size);
    }
    if (!((__align & (__align -% @as(usize, @bitCast(@as(c_long, @as(c_int, 1)))))) != 0) and (__align < @sizeOf(?*anyopaque))) {
        __align = @sizeOf(?*anyopaque);
    }
    var __mallocedMemory: ?*anyopaque = undefined;
    _ = &__mallocedMemory;
    if (posix_memalign(&__mallocedMemory, __align, __size) != 0) return null;
    return __mallocedMemory;
}
pub inline fn _mm_free(arg___p: ?*anyopaque) void {
    var __p = arg___p;
    _ = &__p;
    free(__p);
}
pub inline fn _mm_add_ss(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] += __b[@as(c_uint, @intCast(@as(c_int, 0)))];
    return __a;
}
pub inline fn _mm_add_ps(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128, @bitCast(@as(__v4sf, @bitCast(__a)) + @as(__v4sf, @bitCast(__b))));
}
pub inline fn _mm_sub_ss(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] -= __b[@as(c_uint, @intCast(@as(c_int, 0)))];
    return __a;
}
pub inline fn _mm_sub_ps(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128, @bitCast(@as(__v4sf, @bitCast(__a)) - @as(__v4sf, @bitCast(__b))));
}
pub inline fn _mm_mul_ss(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] *= __b[@as(c_uint, @intCast(@as(c_int, 0)))];
    return __a;
}
pub inline fn _mm_mul_ps(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128, @bitCast(@as(__v4sf, @bitCast(__a)) * @as(__v4sf, @bitCast(__b))));
}
pub inline fn _mm_div_ss(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] /= __b[@as(c_uint, @intCast(@as(c_int, 0)))];
    return __a;
}
pub inline fn _mm_div_ps(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128, @bitCast(@as(__v4sf, @bitCast(__a)) / @as(__v4sf, @bitCast(__b))));
}
// /usr/lib/zig/include/xmmintrin.h:224:18: warning: TODO implement function '__builtin_ia32_sqrtss' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:222:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sqrt_ss(arg___a: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:241:10: warning: TODO implement function '__builtin_ia32_sqrtps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:239:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sqrt_ps(arg___a: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:259:18: warning: TODO implement function '__builtin_ia32_rcpss' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:257:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rcp_ss(arg___a: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:276:18: warning: TODO implement function '__builtin_ia32_rcpps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:274:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rcp_ps(arg___a: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:295:10: warning: TODO implement function '__builtin_ia32_rsqrtss' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:293:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rsqrt_ss(arg___a: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:312:10: warning: TODO implement function '__builtin_ia32_rsqrtps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:310:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rsqrt_ps(arg___a: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:335:10: warning: TODO implement function '__builtin_ia32_minss' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:333:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_ss(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:354:10: warning: TODO implement function '__builtin_ia32_minps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:352:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_ps(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:377:10: warning: TODO implement function '__builtin_ia32_maxss' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:375:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_ss(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:396:10: warning: TODO implement function '__builtin_ia32_maxps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:394:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_ps(arg___a: __m128, arg___b: __m128) __m128;
pub inline fn _mm_and_ps(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128, @bitCast(@as(__v4su, @bitCast(__a)) & @as(__v4su, @bitCast(__b))));
}
pub inline fn _mm_andnot_ps(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128, @bitCast(~@as(__v4su, @bitCast(__a)) & @as(__v4su, @bitCast(__b))));
}
pub inline fn _mm_or_ps(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128, @bitCast(@as(__v4su, @bitCast(__a)) | @as(__v4su, @bitCast(__b))));
}
pub inline fn _mm_xor_ps(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128, @bitCast(@as(__v4su, @bitCast(__a)) ^ @as(__v4su, @bitCast(__b))));
}
// /usr/lib/zig/include/xmmintrin.h:495:18: warning: TODO implement function '__builtin_ia32_cmpeqss' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:493:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpeq_ss(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:513:18: warning: TODO implement function '__builtin_ia32_cmpeqps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:511:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpeq_ps(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:536:18: warning: TODO implement function '__builtin_ia32_cmpltss' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:534:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmplt_ss(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:555:18: warning: TODO implement function '__builtin_ia32_cmpltps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:553:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmplt_ps(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:579:18: warning: TODO implement function '__builtin_ia32_cmpless' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:577:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmple_ss(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:598:18: warning: TODO implement function '__builtin_ia32_cmpleps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:596:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmple_ps(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:622:50: warning: TODO implement function '__builtin_ia32_cmpltss' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:619:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpgt_ss(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:642:18: warning: TODO implement function '__builtin_ia32_cmpltps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:640:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpgt_ps(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:667:50: warning: TODO implement function '__builtin_ia32_cmpless' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:664:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpge_ss(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:687:18: warning: TODO implement function '__builtin_ia32_cmpleps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:685:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpge_ps(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:710:18: warning: TODO implement function '__builtin_ia32_cmpneqss' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:708:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpneq_ss(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:729:18: warning: TODO implement function '__builtin_ia32_cmpneqps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:727:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpneq_ps(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:753:18: warning: TODO implement function '__builtin_ia32_cmpnltss' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:751:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpnlt_ss(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:773:18: warning: TODO implement function '__builtin_ia32_cmpnltps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:771:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpnlt_ps(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:798:18: warning: TODO implement function '__builtin_ia32_cmpnless' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:796:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpnle_ss(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:818:18: warning: TODO implement function '__builtin_ia32_cmpnleps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:816:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpnle_ps(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:844:50: warning: TODO implement function '__builtin_ia32_cmpnltss' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:841:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpngt_ss(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:865:18: warning: TODO implement function '__builtin_ia32_cmpnltps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:863:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpngt_ps(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:891:50: warning: TODO implement function '__builtin_ia32_cmpnless' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:888:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpnge_ss(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:912:18: warning: TODO implement function '__builtin_ia32_cmpnleps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:910:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpnge_ps(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:937:18: warning: TODO implement function '__builtin_ia32_cmpordss' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:935:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpord_ss(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:957:18: warning: TODO implement function '__builtin_ia32_cmpordps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:955:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpord_ps(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:982:18: warning: TODO implement function '__builtin_ia32_cmpunordss' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:980:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpunord_ss(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:1002:18: warning: TODO implement function '__builtin_ia32_cmpunordps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1000:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpunord_ps(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/xmmintrin.h:1026:10: warning: TODO implement function '__builtin_ia32_comieq' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1024:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_comieq_ss(arg___a: __m128, arg___b: __m128) c_int;
// /usr/lib/zig/include/xmmintrin.h:1051:10: warning: TODO implement function '__builtin_ia32_comilt' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1049:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_comilt_ss(arg___a: __m128, arg___b: __m128) c_int;
// /usr/lib/zig/include/xmmintrin.h:1075:10: warning: TODO implement function '__builtin_ia32_comile' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1073:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_comile_ss(arg___a: __m128, arg___b: __m128) c_int;
// /usr/lib/zig/include/xmmintrin.h:1099:10: warning: TODO implement function '__builtin_ia32_comigt' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1097:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_comigt_ss(arg___a: __m128, arg___b: __m128) c_int;
// /usr/lib/zig/include/xmmintrin.h:1123:10: warning: TODO implement function '__builtin_ia32_comige' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1121:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_comige_ss(arg___a: __m128, arg___b: __m128) c_int;
// /usr/lib/zig/include/xmmintrin.h:1147:10: warning: TODO implement function '__builtin_ia32_comineq' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1145:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_comineq_ss(arg___a: __m128, arg___b: __m128) c_int;
// /usr/lib/zig/include/xmmintrin.h:1171:10: warning: TODO implement function '__builtin_ia32_ucomieq' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1169:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomieq_ss(arg___a: __m128, arg___b: __m128) c_int;
// /usr/lib/zig/include/xmmintrin.h:1195:10: warning: TODO implement function '__builtin_ia32_ucomilt' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1193:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomilt_ss(arg___a: __m128, arg___b: __m128) c_int;
// /usr/lib/zig/include/xmmintrin.h:1220:10: warning: TODO implement function '__builtin_ia32_ucomile' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1218:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomile_ss(arg___a: __m128, arg___b: __m128) c_int;
// /usr/lib/zig/include/xmmintrin.h:1245:10: warning: TODO implement function '__builtin_ia32_ucomigt' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1243:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomigt_ss(arg___a: __m128, arg___b: __m128) c_int;
// /usr/lib/zig/include/xmmintrin.h:1270:10: warning: TODO implement function '__builtin_ia32_ucomige' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1268:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomige_ss(arg___a: __m128, arg___b: __m128) c_int;
// /usr/lib/zig/include/xmmintrin.h:1294:10: warning: TODO implement function '__builtin_ia32_ucomineq' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1292:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomineq_ss(arg___a: __m128, arg___b: __m128) c_int;
// /usr/lib/zig/include/xmmintrin.h:1312:10: warning: TODO implement function '__builtin_ia32_cvtss2si' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1310:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtss_si32(arg___a: __m128) c_int;
pub inline fn _mm_cvt_ss2si(arg___a: __m128) c_int {
    var __a = arg___a;
    _ = &__a;
    return _mm_cvtss_si32(__a);
}
// /usr/lib/zig/include/xmmintrin.h:1350:10: warning: TODO implement function '__builtin_ia32_cvtss2si64' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1348:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtss_si64(arg___a: __m128) c_longlong;
// /usr/lib/zig/include/xmmintrin.h:1368:17: warning: TODO implement function '__builtin_ia32_cvtps2pi' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1366:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtps_pi32(arg___a: __m128) __m64;
pub inline fn _mm_cvt_ps2pi(arg___a: __m128) __m64 {
    var __a = arg___a;
    _ = &__a;
    return _mm_cvtps_pi32(__a);
}
// /usr/lib/zig/include/xmmintrin.h:1403:10: warning: TODO implement function '__builtin_ia32_cvttss2si' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1401:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttss_si32(arg___a: __m128) c_int;
pub inline fn _mm_cvtt_ss2si(arg___a: __m128) c_int {
    var __a = arg___a;
    _ = &__a;
    return _mm_cvttss_si32(__a);
}
// /usr/lib/zig/include/xmmintrin.h:1442:10: warning: TODO implement function '__builtin_ia32_cvttss2si64' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1440:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttss_si64(arg___a: __m128) c_longlong;
// /usr/lib/zig/include/xmmintrin.h:1461:17: warning: TODO implement function '__builtin_ia32_cvttps2pi' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1459:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttps_pi32(arg___a: __m128) __m64;
pub inline fn _mm_cvtt_ps2pi(arg___a: __m128) __m64 {
    var __a = arg___a;
    _ = &__a;
    return _mm_cvttps_pi32(__a);
}
pub inline fn _mm_cvtsi32_ss(arg___a: __m128, arg___b: c_int) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] = @as(f32, @floatFromInt(__b));
    return __a;
}
pub inline fn _mm_cvt_si2ss(arg___a: __m128, arg___b: c_int) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return _mm_cvtsi32_ss(__a, __b);
}
pub inline fn _mm_cvtsi64_ss(arg___a: __m128, arg___b: c_longlong) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] = @as(f32, @floatFromInt(__b));
    return __a;
}
// /usr/lib/zig/include/xmmintrin.h:1573:10: warning: TODO implement function '__builtin_ia32_cvtpi2ps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1571:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtpi32_ps(arg___a: __m128, arg___b: __m64) __m128;
pub inline fn _mm_cvt_pi2ps(arg___a: __m128, arg___b: __m64) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return _mm_cvtpi32_ps(__a, __b);
}
pub inline fn _mm_cvtss_f32(arg___a: __m128) f32 {
    var __a = arg___a;
    _ = &__a;
    return __a[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm_loadh_pi(arg___a: __m128, arg___p: [*c]const __m64) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __p = arg___p;
    _ = &__p;
    const __mm_loadh_pi_v2f32 = @Vector(2, f32);
    _ = &__mm_loadh_pi_v2f32;
    const struct___mm_loadh_pi_struct = extern struct {
        __u: __mm_loadh_pi_v2f32 align(1) = @import("std").mem.zeroes(__mm_loadh_pi_v2f32),
    };
    _ = &struct___mm_loadh_pi_struct;
    var __b: __mm_loadh_pi_v2f32 = @as([*c]const struct___mm_loadh_pi_struct, @ptrCast(@alignCast(__p))).*.__u;
    _ = &__b;
    var __bb: __m128 = @shuffle(@typeInfo(@TypeOf(__b)).Vector.child, __b, __b, @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__b)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__b)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__b)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__b)).Vector.len),
    });
    _ = &__bb;
    return @shuffle(@typeInfo(@TypeOf(__a)).Vector.child, __a, __bb, @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(__a)).Vector.len),
    });
}
pub inline fn _mm_loadl_pi(arg___a: __m128, arg___p: [*c]const __m64) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __p = arg___p;
    _ = &__p;
    const __mm_loadl_pi_v2f32 = @Vector(2, f32);
    _ = &__mm_loadl_pi_v2f32;
    const struct___mm_loadl_pi_struct = extern struct {
        __u: __mm_loadl_pi_v2f32 align(1) = @import("std").mem.zeroes(__mm_loadl_pi_v2f32),
    };
    _ = &struct___mm_loadl_pi_struct;
    var __b: __mm_loadl_pi_v2f32 = @as([*c]const struct___mm_loadl_pi_struct, @ptrCast(@alignCast(__p))).*.__u;
    _ = &__b;
    var __bb: __m128 = @shuffle(@typeInfo(@TypeOf(__b)).Vector.child, __b, __b, @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__b)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__b)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__b)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__b)).Vector.len),
    });
    _ = &__bb;
    return @shuffle(@typeInfo(@TypeOf(__a)).Vector.child, __a, __bb, @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(__a)).Vector.len),
    });
}
pub inline fn _mm_load_ss(arg___p: [*c]const f32) __m128 {
    var __p = arg___p;
    _ = &__p;
    const struct___mm_load_ss_struct = extern struct {
        __u: f32 align(1) = @import("std").mem.zeroes(f32),
    };
    _ = &struct___mm_load_ss_struct;
    var __u: f32 = @as([*c]const struct___mm_load_ss_struct, @ptrCast(@alignCast(__p))).*.__u;
    _ = &__u;
    return blk: {
        const tmp = __u;
        const tmp_1 = @as(f32, @floatFromInt(@as(c_int, 0)));
        const tmp_2 = @as(f32, @floatFromInt(@as(c_int, 0)));
        const tmp_3 = @as(f32, @floatFromInt(@as(c_int, 0)));
        break :blk __m128{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    };
}
pub inline fn _mm_load1_ps(arg___p: [*c]const f32) __m128 {
    var __p = arg___p;
    _ = &__p;
    const struct___mm_load1_ps_struct = extern struct {
        __u: f32 align(1) = @import("std").mem.zeroes(f32),
    };
    _ = &struct___mm_load1_ps_struct;
    var __u: f32 = @as([*c]const struct___mm_load1_ps_struct, @ptrCast(@alignCast(__p))).*.__u;
    _ = &__u;
    return blk: {
        const tmp = __u;
        const tmp_1 = __u;
        const tmp_2 = __u;
        const tmp_3 = __u;
        break :blk __m128{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    };
}
pub inline fn _mm_load_ps(arg___p: [*c]const f32) __m128 {
    var __p = arg___p;
    _ = &__p;
    return @as([*c]const __m128, @ptrCast(@alignCast(__p))).*;
}
pub inline fn _mm_loadu_ps(arg___p: [*c]const f32) __m128 {
    var __p = arg___p;
    _ = &__p;
    const struct___loadu_ps = extern struct {
        __v: __m128_u align(1) = @import("std").mem.zeroes(__m128_u),
    };
    _ = &struct___loadu_ps;
    return @as([*c]const struct___loadu_ps, @ptrCast(@alignCast(__p))).*.__v;
}
pub inline fn _mm_loadr_ps(arg___p: [*c]const f32) __m128 {
    var __p = arg___p;
    _ = &__p;
    var __a: __m128 = _mm_load_ps(__p);
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.child, @as(__v4sf, @bitCast(__a)), @as(__v4sf, @bitCast(__a)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
    });
}
// /usr/lib/zig/include/xmmintrin.h:1786:18: warning: TODO implement function '__builtin_ia32_undef128' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:1784:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_undefined_ps() __m128;
pub inline fn _mm_set_ss(arg___w: f32) __m128 {
    var __w = arg___w;
    _ = &__w;
    return blk: {
        const tmp = __w;
        const tmp_1 = @as(f32, @floatFromInt(@as(c_int, 0)));
        const tmp_2 = @as(f32, @floatFromInt(@as(c_int, 0)));
        const tmp_3 = @as(f32, @floatFromInt(@as(c_int, 0)));
        break :blk __m128{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    };
}
pub inline fn _mm_set1_ps(arg___w: f32) __m128 {
    var __w = arg___w;
    _ = &__w;
    return blk: {
        const tmp = __w;
        const tmp_1 = __w;
        const tmp_2 = __w;
        const tmp_3 = __w;
        break :blk __m128{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    };
}
pub inline fn _mm_set_ps1(arg___w: f32) __m128 {
    var __w = arg___w;
    _ = &__w;
    return _mm_set1_ps(__w);
}
pub inline fn _mm_set_ps(arg___z: f32, arg___y: f32, arg___x: f32, arg___w: f32) __m128 {
    var __z = arg___z;
    _ = &__z;
    var __y = arg___y;
    _ = &__y;
    var __x = arg___x;
    _ = &__x;
    var __w = arg___w;
    _ = &__w;
    return blk: {
        const tmp = __w;
        const tmp_1 = __x;
        const tmp_2 = __y;
        const tmp_3 = __z;
        break :blk __m128{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    };
}
pub inline fn _mm_setr_ps(arg___z: f32, arg___y: f32, arg___x: f32, arg___w: f32) __m128 {
    var __z = arg___z;
    _ = &__z;
    var __y = arg___y;
    _ = &__y;
    var __x = arg___x;
    _ = &__x;
    var __w = arg___w;
    _ = &__w;
    return blk: {
        const tmp = __z;
        const tmp_1 = __y;
        const tmp_2 = __x;
        const tmp_3 = __w;
        break :blk __m128{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    };
}
pub inline fn _mm_setzero_ps() __m128 {
    return blk: {
        const tmp = 0.0;
        const tmp_1 = 0.0;
        const tmp_2 = 0.0;
        const tmp_3 = 0.0;
        break :blk __m128{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    };
}
pub inline fn _mm_storeh_pi(arg___p: [*c]__m64, arg___a: __m128) void {
    var __p = arg___p;
    _ = &__p;
    var __a = arg___a;
    _ = &__a;
    const __mm_storeh_pi_v2f32 = @Vector(2, f32);
    _ = &__mm_storeh_pi_v2f32;
    const struct___mm_storeh_pi_struct = extern struct {
        __u: __mm_storeh_pi_v2f32 align(1) = @import("std").mem.zeroes(__mm_storeh_pi_v2f32),
    };
    _ = &struct___mm_storeh_pi_struct;
    @as([*c]struct___mm_storeh_pi_struct, @ptrCast(@alignCast(__p))).*.__u = @shuffle(@typeInfo(@TypeOf(__a)).Vector.child, __a, __a, @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(__a)).Vector.len),
    });
}
pub inline fn _mm_storel_pi(arg___p: [*c]__m64, arg___a: __m128) void {
    var __p = arg___p;
    _ = &__p;
    var __a = arg___a;
    _ = &__a;
    const __mm_storeh_pi_v2f32 = @Vector(2, f32);
    _ = &__mm_storeh_pi_v2f32;
    const struct___mm_storeh_pi_struct = extern struct {
        __u: __mm_storeh_pi_v2f32 align(1) = @import("std").mem.zeroes(__mm_storeh_pi_v2f32),
    };
    _ = &struct___mm_storeh_pi_struct;
    @as([*c]struct___mm_storeh_pi_struct, @ptrCast(@alignCast(__p))).*.__u = @shuffle(@typeInfo(@TypeOf(__a)).Vector.child, __a, __a, @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__a)).Vector.len),
    });
}
pub inline fn _mm_store_ss(arg___p: [*c]f32, arg___a: __m128) void {
    var __p = arg___p;
    _ = &__p;
    var __a = arg___a;
    _ = &__a;
    const struct___mm_store_ss_struct = extern struct {
        __u: f32 align(1) = @import("std").mem.zeroes(f32),
    };
    _ = &struct___mm_store_ss_struct;
    @as([*c]struct___mm_store_ss_struct, @ptrCast(@alignCast(__p))).*.__u = __a[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm_storeu_ps(arg___p: [*c]f32, arg___a: __m128) void {
    var __p = arg___p;
    _ = &__p;
    var __a = arg___a;
    _ = &__a;
    const struct___storeu_ps = extern struct {
        __v: __m128_u align(1) = @import("std").mem.zeroes(__m128_u),
    };
    _ = &struct___storeu_ps;
    @as([*c]struct___storeu_ps, @ptrCast(@alignCast(__p))).*.__v = __a;
}
pub inline fn _mm_store_ps(arg___p: [*c]f32, arg___a: __m128) void {
    var __p = arg___p;
    _ = &__p;
    var __a = arg___a;
    _ = &__a;
    @as([*c]__m128, @ptrCast(@alignCast(__p))).* = __a;
}
pub inline fn _mm_store1_ps(arg___p: [*c]f32, arg___a: __m128) void {
    var __p = arg___p;
    _ = &__p;
    var __a = arg___a;
    _ = &__a;
    __a = @shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.child, @as(__v4sf, @bitCast(__a)), @as(__v4sf, @bitCast(__a)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
    });
    _mm_store_ps(__p, __a);
}
pub inline fn _mm_store_ps1(arg___p: [*c]f32, arg___a: __m128) void {
    var __p = arg___p;
    _ = &__p;
    var __a = arg___a;
    _ = &__a;
    _mm_store1_ps(__p, __a);
}
pub inline fn _mm_storer_ps(arg___p: [*c]f32, arg___a: __m128) void {
    var __p = arg___p;
    _ = &__p;
    var __a = arg___a;
    _ = &__a;
    __a = @shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.child, @as(__v4sf, @bitCast(__a)), @as(__v4sf, @bitCast(__a)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
    });
    _mm_store_ps(__p, __a);
}
// /usr/lib/zig/include/xmmintrin.h:2130:3: warning: TODO implement function '__builtin_ia32_movntq' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:2128:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_stream_pi(arg___p: ?*anyopaque, arg___a: __m64) void;
// /usr/lib/zig/include/xmmintrin.h:2149:3: warning: TODO implement function '__builtin_nontemporal_store' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:2147:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_stream_ps(arg___p: ?*anyopaque, arg___a: __m128) void;
pub extern fn _mm_sfence() void;
// /usr/lib/zig/include/xmmintrin.h:2241:17: warning: TODO implement function '__builtin_ia32_pmaxsw' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:2239:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_pi16(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/xmmintrin.h:2260:17: warning: TODO implement function '__builtin_ia32_pmaxub' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:2258:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_pu8(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/xmmintrin.h:2279:17: warning: TODO implement function '__builtin_ia32_pminsw' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:2277:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_pi16(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/xmmintrin.h:2298:17: warning: TODO implement function '__builtin_ia32_pminub' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:2296:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_pu8(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/xmmintrin.h:2316:10: warning: TODO implement function '__builtin_ia32_pmovmskb' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:2314:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_movemask_pi8(arg___a: __m64) c_int;
// /usr/lib/zig/include/xmmintrin.h:2335:17: warning: TODO implement function '__builtin_ia32_pmulhuw' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:2333:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mulhi_pu16(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/xmmintrin.h:2401:3: warning: TODO implement function '__builtin_ia32_maskmovq' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:2399:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskmove_si64(arg___d: __m64, arg___n: __m64, arg___p: [*c]u8) void;
// /usr/lib/zig/include/xmmintrin.h:2420:17: warning: TODO implement function '__builtin_ia32_pavgb' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:2418:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_avg_pu8(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/xmmintrin.h:2439:17: warning: TODO implement function '__builtin_ia32_pavgw' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:2437:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_avg_pu16(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/xmmintrin.h:2461:17: warning: TODO implement function '__builtin_ia32_psadbw' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:2459:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sad_pu8(arg___a: __m64, arg___b: __m64) __m64;
pub extern fn _mm_getcsr() c_uint;
pub extern fn _mm_setcsr(__i: c_uint) void;
pub inline fn _mm_unpackhi_ps(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.child, @as(__v4sf, @bitCast(__a)), @as(__v4sf, @bitCast(__b)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm_unpacklo_ps(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.child, @as(__v4sf, @bitCast(__a)), @as(__v4sf, @bitCast(__b)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm_move_ss(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] = __b[@as(c_uint, @intCast(@as(c_int, 0)))];
    return __a;
}
pub inline fn _mm_movehl_ps(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.child, @as(__v4sf, @bitCast(__a)), @as(__v4sf, @bitCast(__b)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm_movelh_ps(arg___a: __m128, arg___b: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.child, @as(__v4sf, @bitCast(__a)), @as(__v4sf, @bitCast(__b)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm_cvtpi16_ps(arg___a: __m64) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b: __m64 = undefined;
    _ = &__b;
    var __c: __m64 = undefined;
    _ = &__c;
    var __r: __m128 = undefined;
    _ = &__r;
    __b = _mm_setzero_si64();
    __b = _mm_cmpgt_pi16(__b, __a);
    __c = _mm_unpackhi_pi16(__a, __b);
    __r = _mm_setzero_ps();
    __r = _mm_cvtpi32_ps(__r, __c);
    __r = _mm_movelh_ps(__r, __r);
    __c = _mm_unpacklo_pi16(__a, __b);
    __r = _mm_cvtpi32_ps(__r, __c);
    return __r;
}
pub inline fn _mm_cvtpu16_ps(arg___a: __m64) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b: __m64 = undefined;
    _ = &__b;
    var __c: __m64 = undefined;
    _ = &__c;
    var __r: __m128 = undefined;
    _ = &__r;
    __b = _mm_setzero_si64();
    __c = _mm_unpackhi_pi16(__a, __b);
    __r = _mm_setzero_ps();
    __r = _mm_cvtpi32_ps(__r, __c);
    __r = _mm_movelh_ps(__r, __r);
    __c = _mm_unpacklo_pi16(__a, __b);
    __r = _mm_cvtpi32_ps(__r, __c);
    return __r;
}
pub inline fn _mm_cvtpi8_ps(arg___a: __m64) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b: __m64 = undefined;
    _ = &__b;
    __b = _mm_setzero_si64();
    __b = _mm_cmpgt_pi8(__b, __a);
    __b = _mm_unpacklo_pi8(__a, __b);
    return _mm_cvtpi16_ps(__b);
}
pub inline fn _mm_cvtpu8_ps(arg___a: __m64) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b: __m64 = undefined;
    _ = &__b;
    __b = _mm_setzero_si64();
    __b = _mm_unpacklo_pi8(__a, __b);
    return _mm_cvtpi16_ps(__b);
}
pub inline fn _mm_cvtpi32x2_ps(arg___a: __m64, arg___b: __m64) __m128 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    var __c: __m128 = undefined;
    _ = &__c;
    __c = _mm_setzero_ps();
    __c = _mm_cvtpi32_ps(__c, __b);
    __c = _mm_movelh_ps(__c, __c);
    return _mm_cvtpi32_ps(__c, __a);
}
pub inline fn _mm_cvtps_pi16(arg___a: __m128) __m64 {
    var __a = arg___a;
    _ = &__a;
    var __b: __m64 = undefined;
    _ = &__b;
    var __c: __m64 = undefined;
    _ = &__c;
    __b = _mm_cvtps_pi32(__a);
    __a = _mm_movehl_ps(__a, __a);
    __c = _mm_cvtps_pi32(__a);
    return _mm_packs_pi32(__b, __c);
}
pub inline fn _mm_cvtps_pi8(arg___a: __m128) __m64 {
    var __a = arg___a;
    _ = &__a;
    var __b: __m64 = undefined;
    _ = &__b;
    var __c: __m64 = undefined;
    _ = &__c;
    __b = _mm_cvtps_pi16(__a);
    __c = _mm_setzero_si64();
    return _mm_packs_pi16(__b, __c);
}
// /usr/lib/zig/include/xmmintrin.h:2940:10: warning: TODO implement function '__builtin_ia32_movmskps' in std.zig.c_builtins

// /usr/lib/zig/include/xmmintrin.h:2938:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_movemask_ps(arg___a: __m128) c_int;
pub const __m128d = @Vector(2, f64);
pub const __m128i = @Vector(2, c_longlong);
pub const __m128d_u = @Vector(2, f64);
pub const __m128i_u = @Vector(2, c_longlong);
pub const __v2df = @Vector(2, f64);
pub const __v2di = @Vector(2, c_longlong);
pub const __v8hi = @Vector(8, c_short);
pub const __v16qi = @Vector(16, u8);
pub const __v2du = @Vector(2, c_ulonglong);
pub const __v8hu = @Vector(8, c_ushort);
pub const __v16qu = @Vector(16, u8);
pub const __v16qs = @Vector(16, i8);
pub const __v8hf = @Vector(8, f16);
pub const __m128h = @Vector(8, f16);
pub const __m128h_u = @Vector(8, f16);
// /usr/lib/zig/include/emmintrin.h:47:16: warning: unsupported builtin type
pub const __v8bf = @compileError("unable to resolve typedef child type");
// /usr/lib/zig/include/emmintrin.h:47:16

// /usr/lib/zig/include/emmintrin.h:48:16: warning: unsupported builtin type
pub const __m128bh = @compileError("unable to resolve typedef child type");
// /usr/lib/zig/include/emmintrin.h:48:16
pub inline fn _mm_add_sd(arg___a: __m128d, arg___b: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] += __b[@as(c_uint, @intCast(@as(c_int, 0)))];
    return __a;
}
pub inline fn _mm_add_pd(arg___a: __m128d, arg___b: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128d, @bitCast(@as(__v2df, @bitCast(__a)) + @as(__v2df, @bitCast(__b))));
}
pub inline fn _mm_sub_sd(arg___a: __m128d, arg___b: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] -= __b[@as(c_uint, @intCast(@as(c_int, 0)))];
    return __a;
}
pub inline fn _mm_sub_pd(arg___a: __m128d, arg___b: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128d, @bitCast(@as(__v2df, @bitCast(__a)) - @as(__v2df, @bitCast(__b))));
}
pub inline fn _mm_mul_sd(arg___a: __m128d, arg___b: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] *= __b[@as(c_uint, @intCast(@as(c_int, 0)))];
    return __a;
}
pub inline fn _mm_mul_pd(arg___a: __m128d, arg___b: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128d, @bitCast(@as(__v2df, @bitCast(__a)) * @as(__v2df, @bitCast(__b))));
}
pub inline fn _mm_div_sd(arg___a: __m128d, arg___b: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] /= __b[@as(c_uint, @intCast(@as(c_int, 0)))];
    return __a;
}
pub inline fn _mm_div_pd(arg___a: __m128d, arg___b: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128d, @bitCast(@as(__v2df, @bitCast(__a)) / @as(__v2df, @bitCast(__b))));
}
// /usr/lib/zig/include/emmintrin.h:238:17: warning: TODO implement function '__builtin_ia32_sqrtsd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:236:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_sqrt_sd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:254:10: warning: TODO implement function '__builtin_ia32_sqrtpd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:253:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_sqrt_pd(arg___a: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:277:10: warning: TODO implement function '__builtin_ia32_minsd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:275:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_sd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:296:10: warning: TODO implement function '__builtin_ia32_minpd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:294:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:319:10: warning: TODO implement function '__builtin_ia32_maxsd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:317:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_sd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:338:10: warning: TODO implement function '__builtin_ia32_maxpd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:336:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
pub inline fn _mm_and_pd(arg___a: __m128d, arg___b: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128d, @bitCast(@as(__v2du, @bitCast(__a)) & @as(__v2du, @bitCast(__b))));
}
pub inline fn _mm_andnot_pd(arg___a: __m128d, arg___b: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128d, @bitCast(~@as(__v2du, @bitCast(__a)) & @as(__v2du, @bitCast(__b))));
}
pub inline fn _mm_or_pd(arg___a: __m128d, arg___b: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128d, @bitCast(@as(__v2du, @bitCast(__a)) | @as(__v2du, @bitCast(__b))));
}
pub inline fn _mm_xor_pd(arg___a: __m128d, arg___b: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128d, @bitCast(@as(__v2du, @bitCast(__a)) ^ @as(__v2du, @bitCast(__b))));
}
// /usr/lib/zig/include/emmintrin.h:427:19: warning: TODO implement function '__builtin_ia32_cmpeqpd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:425:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpeq_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:446:19: warning: TODO implement function '__builtin_ia32_cmpltpd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:444:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmplt_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:466:19: warning: TODO implement function '__builtin_ia32_cmplepd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:464:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmple_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:486:19: warning: TODO implement function '__builtin_ia32_cmpltpd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:484:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpgt_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:506:19: warning: TODO implement function '__builtin_ia32_cmplepd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:504:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpge_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:528:19: warning: TODO implement function '__builtin_ia32_cmpordpd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:526:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpord_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:551:19: warning: TODO implement function '__builtin_ia32_cmpunordpd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:549:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpunord_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:571:19: warning: TODO implement function '__builtin_ia32_cmpneqpd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:569:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpneq_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:591:19: warning: TODO implement function '__builtin_ia32_cmpnltpd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:589:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpnlt_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:611:19: warning: TODO implement function '__builtin_ia32_cmpnlepd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:609:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpnle_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:631:19: warning: TODO implement function '__builtin_ia32_cmpnltpd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:629:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpngt_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:651:19: warning: TODO implement function '__builtin_ia32_cmpnlepd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:649:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpnge_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:673:19: warning: TODO implement function '__builtin_ia32_cmpeqsd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:671:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpeq_sd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:697:19: warning: TODO implement function '__builtin_ia32_cmpltsd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:695:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmplt_sd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:721:19: warning: TODO implement function '__builtin_ia32_cmplesd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:719:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmple_sd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:745:17: warning: TODO implement function '__builtin_ia32_cmpltsd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:743:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpgt_sd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:770:17: warning: TODO implement function '__builtin_ia32_cmplesd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:768:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpge_sd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:797:19: warning: TODO implement function '__builtin_ia32_cmpordsd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:795:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpord_sd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:824:19: warning: TODO implement function '__builtin_ia32_cmpunordsd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:822:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpunord_sd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:848:19: warning: TODO implement function '__builtin_ia32_cmpneqsd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:846:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpneq_sd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:872:19: warning: TODO implement function '__builtin_ia32_cmpnltsd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:870:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpnlt_sd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:896:19: warning: TODO implement function '__builtin_ia32_cmpnlesd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:894:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpnle_sd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:920:17: warning: TODO implement function '__builtin_ia32_cmpnltsd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:918:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpngt_sd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:945:17: warning: TODO implement function '__builtin_ia32_cmpnlesd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:943:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cmpnge_sd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/emmintrin.h:969:10: warning: TODO implement function '__builtin_ia32_comisdeq' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:967:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_comieq_sd(arg___a: __m128d, arg___b: __m128d) c_int;
// /usr/lib/zig/include/emmintrin.h:994:10: warning: TODO implement function '__builtin_ia32_comisdlt' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:992:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_comilt_sd(arg___a: __m128d, arg___b: __m128d) c_int;
// /usr/lib/zig/include/emmintrin.h:1019:10: warning: TODO implement function '__builtin_ia32_comisdle' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1017:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_comile_sd(arg___a: __m128d, arg___b: __m128d) c_int;
// /usr/lib/zig/include/emmintrin.h:1044:10: warning: TODO implement function '__builtin_ia32_comisdgt' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1042:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_comigt_sd(arg___a: __m128d, arg___b: __m128d) c_int;
// /usr/lib/zig/include/emmintrin.h:1069:10: warning: TODO implement function '__builtin_ia32_comisdge' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1067:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_comige_sd(arg___a: __m128d, arg___b: __m128d) c_int;
// /usr/lib/zig/include/emmintrin.h:1094:10: warning: TODO implement function '__builtin_ia32_comisdneq' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1092:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_comineq_sd(arg___a: __m128d, arg___b: __m128d) c_int;
// /usr/lib/zig/include/emmintrin.h:1117:10: warning: TODO implement function '__builtin_ia32_ucomisdeq' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1115:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomieq_sd(arg___a: __m128d, arg___b: __m128d) c_int;
// /usr/lib/zig/include/emmintrin.h:1142:10: warning: TODO implement function '__builtin_ia32_ucomisdlt' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1140:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomilt_sd(arg___a: __m128d, arg___b: __m128d) c_int;
// /usr/lib/zig/include/emmintrin.h:1167:10: warning: TODO implement function '__builtin_ia32_ucomisdle' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1165:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomile_sd(arg___a: __m128d, arg___b: __m128d) c_int;
// /usr/lib/zig/include/emmintrin.h:1192:10: warning: TODO implement function '__builtin_ia32_ucomisdgt' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1190:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomigt_sd(arg___a: __m128d, arg___b: __m128d) c_int;
// /usr/lib/zig/include/emmintrin.h:1217:10: warning: TODO implement function '__builtin_ia32_ucomisdge' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1215:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomige_sd(arg___a: __m128d, arg___b: __m128d) c_int;
// /usr/lib/zig/include/emmintrin.h:1242:10: warning: TODO implement function '__builtin_ia32_ucomisdneq' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1240:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomineq_sd(arg___a: __m128d, arg___b: __m128d) c_int;
// /usr/lib/zig/include/emmintrin.h:1259:10: warning: TODO implement function '__builtin_ia32_cvtpd2ps' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1258:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtpd_ps(arg___a: __m128d) __m128;
pub inline fn _mm_cvtps_pd(arg___a: __m128) __m128d {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128d, @bitCast(blk: {
        const tmp = @as(f64, @floatCast(@shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.child, @as(__v4sf, @bitCast(__a)), @as(__v4sf, @bitCast(__a)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        })[0]));
        const tmp_1 = @as(f64, @floatCast(@shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.child, @as(__v4sf, @bitCast(__a)), @as(__v4sf, @bitCast(__a)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        })[1]));
        break :blk __v2df{
            tmp,
            tmp_1,
        };
    }));
}
pub inline fn _mm_cvtepi32_pd(arg___a: __m128i) __m128d {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128d, @bitCast(blk: {
        const tmp = @as(f64, @floatFromInt(@shuffle(@typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.child, @as(__v4si, @bitCast(__a)), @as(__v4si, @bitCast(__a)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.len),
        })[0]));
        const tmp_1 = @as(f64, @floatFromInt(@shuffle(@typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.child, @as(__v4si, @bitCast(__a)), @as(__v4si, @bitCast(__a)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.len),
        })[1]));
        break :blk __v2df{
            tmp,
            tmp_1,
        };
    }));
}
// /usr/lib/zig/include/emmintrin.h:1316:10: warning: TODO implement function '__builtin_ia32_cvtpd2dq' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1315:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtpd_epi32(arg___a: __m128d) __m128i;
// /usr/lib/zig/include/emmintrin.h:1331:10: warning: TODO implement function '__builtin_ia32_cvtsd2si' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1330:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsd_si32(arg___a: __m128d) c_int;
// /usr/lib/zig/include/emmintrin.h:1355:18: warning: TODO implement function '__builtin_ia32_cvtsd2ss' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1353:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsd_ss(arg___a: __m128, arg___b: __m128d) __m128;
pub inline fn _mm_cvtsi32_sd(arg___a: __m128d, arg___b: c_int) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] = @as(f64, @floatFromInt(__b));
    return __a;
}
pub inline fn _mm_cvtss_sd(arg___a: __m128d, arg___b: __m128) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] = @as(f64, @floatCast(__b[@as(c_uint, @intCast(@as(c_int, 0)))]));
    return __a;
}
// /usr/lib/zig/include/emmintrin.h:1424:19: warning: TODO implement function '__builtin_ia32_cvttpd2dq' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1423:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttpd_epi32(arg___a: __m128d) __m128i;
// /usr/lib/zig/include/emmintrin.h:1440:10: warning: TODO implement function '__builtin_ia32_cvttsd2si' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1439:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttsd_si32(arg___a: __m128d) c_int;
// /usr/lib/zig/include/emmintrin.h:1455:17: warning: TODO implement function '__builtin_ia32_cvtpd2pi' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1454:48: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtpd_pi32(arg___a: __m128d) __m64;
// /usr/lib/zig/include/emmintrin.h:1473:17: warning: TODO implement function '__builtin_ia32_cvttpd2pi' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1472:48: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttpd_pi32(arg___a: __m128d) __m64;
// /usr/lib/zig/include/emmintrin.h:1488:10: warning: TODO implement function '__builtin_ia32_cvtpi2pd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1487:50: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtpi32_pd(arg___a: __m64) __m128d;
pub inline fn _mm_cvtsd_f64(arg___a: __m128d) f64 {
    var __a = arg___a;
    _ = &__a;
    return __a[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm_load_pd(arg___dp: [*c]const f64) __m128d {
    var __dp = arg___dp;
    _ = &__dp;
    return @as([*c]const __m128d, @ptrCast(@alignCast(__dp))).*;
}
pub inline fn _mm_load1_pd(arg___dp: [*c]const f64) __m128d {
    var __dp = arg___dp;
    _ = &__dp;
    const struct___mm_load1_pd_struct = extern struct {
        __u: f64 align(1) = @import("std").mem.zeroes(f64),
    };
    _ = &struct___mm_load1_pd_struct;
    var __u: f64 = @as([*c]const struct___mm_load1_pd_struct, @ptrCast(@alignCast(__dp))).*.__u;
    _ = &__u;
    return blk: {
        const tmp = __u;
        const tmp_1 = __u;
        break :blk __m128d{
            tmp,
            tmp_1,
        };
    };
}
pub inline fn _mm_loadr_pd(arg___dp: [*c]const f64) __m128d {
    var __dp = arg___dp;
    _ = &__dp;
    var __u: __m128d = @as([*c]const __m128d, @ptrCast(@alignCast(__dp))).*;
    _ = &__u;
    return @shuffle(@typeInfo(@TypeOf(@as(__v2df, @bitCast(__u)))).Vector.child, @as(__v2df, @bitCast(__u)), @as(__v2df, @bitCast(__u)), @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__u)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__u)))).Vector.len),
    });
}
pub inline fn _mm_loadu_pd(arg___dp: [*c]const f64) __m128d {
    var __dp = arg___dp;
    _ = &__dp;
    const struct___loadu_pd = extern struct {
        __v: __m128d_u align(1) = @import("std").mem.zeroes(__m128d_u),
    };
    _ = &struct___loadu_pd;
    return @as([*c]const struct___loadu_pd, @ptrCast(@alignCast(__dp))).*.__v;
}
pub inline fn _mm_loadu_si64(arg___a: ?*const anyopaque) __m128i {
    var __a = arg___a;
    _ = &__a;
    const struct___loadu_si64 = extern struct {
        __v: c_longlong align(1) = @import("std").mem.zeroes(c_longlong),
    };
    _ = &struct___loadu_si64;
    var __u: c_longlong = @as([*c]const struct___loadu_si64, @ptrCast(@alignCast(__a))).*.__v;
    _ = &__u;
    return @as(__m128i, @bitCast(blk: {
        const tmp = __u;
        const tmp_1 = @as(c_longlong, 0);
        break :blk __v2di{
            tmp,
            tmp_1,
        };
    }));
}
pub inline fn _mm_loadu_si32(arg___a: ?*const anyopaque) __m128i {
    var __a = arg___a;
    _ = &__a;
    const struct___loadu_si32 = extern struct {
        __v: c_int align(1) = @import("std").mem.zeroes(c_int),
    };
    _ = &struct___loadu_si32;
    var __u: c_int = @as([*c]const struct___loadu_si32, @ptrCast(@alignCast(__a))).*.__v;
    _ = &__u;
    return @as(__m128i, @bitCast(blk: {
        const tmp = __u;
        const tmp_1 = @as(c_int, 0);
        const tmp_2 = @as(c_int, 0);
        const tmp_3 = @as(c_int, 0);
        break :blk __v4si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm_loadu_si16(arg___a: ?*const anyopaque) __m128i {
    var __a = arg___a;
    _ = &__a;
    const struct___loadu_si16 = extern struct {
        __v: c_short align(1) = @import("std").mem.zeroes(c_short),
    };
    _ = &struct___loadu_si16;
    var __u: c_short = @as([*c]const struct___loadu_si16, @ptrCast(@alignCast(__a))).*.__v;
    _ = &__u;
    return @as(__m128i, @bitCast(blk: {
        const tmp = __u;
        const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_4 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_5 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_6 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_7 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        break :blk __v8hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
pub inline fn _mm_load_sd(arg___dp: [*c]const f64) __m128d {
    var __dp = arg___dp;
    _ = &__dp;
    const struct___mm_load_sd_struct = extern struct {
        __u: f64 align(1) = @import("std").mem.zeroes(f64),
    };
    _ = &struct___mm_load_sd_struct;
    var __u: f64 = @as([*c]const struct___mm_load_sd_struct, @ptrCast(@alignCast(__dp))).*.__u;
    _ = &__u;
    return blk: {
        const tmp = __u;
        const tmp_1 = @as(f64, @floatFromInt(@as(c_int, 0)));
        break :blk __m128d{
            tmp,
            tmp_1,
        };
    };
}
pub inline fn _mm_loadh_pd(arg___a: __m128d, arg___dp: [*c]const f64) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __dp = arg___dp;
    _ = &__dp;
    const struct___mm_loadh_pd_struct = extern struct {
        __u: f64 align(1) = @import("std").mem.zeroes(f64),
    };
    _ = &struct___mm_loadh_pd_struct;
    var __u: f64 = @as([*c]const struct___mm_loadh_pd_struct, @ptrCast(@alignCast(__dp))).*.__u;
    _ = &__u;
    return blk: {
        const tmp = __a[@as(c_uint, @intCast(@as(c_int, 0)))];
        const tmp_1 = __u;
        break :blk __m128d{
            tmp,
            tmp_1,
        };
    };
}
pub inline fn _mm_loadl_pd(arg___a: __m128d, arg___dp: [*c]const f64) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __dp = arg___dp;
    _ = &__dp;
    const struct___mm_loadl_pd_struct = extern struct {
        __u: f64 align(1) = @import("std").mem.zeroes(f64),
    };
    _ = &struct___mm_loadl_pd_struct;
    var __u: f64 = @as([*c]const struct___mm_loadl_pd_struct, @ptrCast(@alignCast(__dp))).*.__u;
    _ = &__u;
    return blk: {
        const tmp = __u;
        const tmp_1 = __a[@as(c_uint, @intCast(@as(c_int, 1)))];
        break :blk __m128d{
            tmp,
            tmp_1,
        };
    };
}
// /usr/lib/zig/include/emmintrin.h:1720:19: warning: TODO implement function '__builtin_ia32_undef128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:1719:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_undefined_pd() __m128d;
pub inline fn _mm_set_sd(arg___w: f64) __m128d {
    var __w = arg___w;
    _ = &__w;
    return blk: {
        const tmp = __w;
        const tmp_1 = @as(f64, @floatFromInt(@as(c_int, 0)));
        break :blk __m128d{
            tmp,
            tmp_1,
        };
    };
}
pub inline fn _mm_set1_pd(arg___w: f64) __m128d {
    var __w = arg___w;
    _ = &__w;
    return blk: {
        const tmp = __w;
        const tmp_1 = __w;
        break :blk __m128d{
            tmp,
            tmp_1,
        };
    };
}
pub inline fn _mm_set_pd1(arg___w: f64) __m128d {
    var __w = arg___w;
    _ = &__w;
    return _mm_set1_pd(__w);
}
pub inline fn _mm_set_pd(arg___w: f64, arg___x: f64) __m128d {
    var __w = arg___w;
    _ = &__w;
    var __x = arg___x;
    _ = &__x;
    return blk: {
        const tmp = __x;
        const tmp_1 = __w;
        break :blk __m128d{
            tmp,
            tmp_1,
        };
    };
}
pub inline fn _mm_setr_pd(arg___w: f64, arg___x: f64) __m128d {
    var __w = arg___w;
    _ = &__w;
    var __x = arg___x;
    _ = &__x;
    return blk: {
        const tmp = __w;
        const tmp_1 = __x;
        break :blk __m128d{
            tmp,
            tmp_1,
        };
    };
}
pub inline fn _mm_setzero_pd() __m128d {
    return blk: {
        const tmp = 0.0;
        const tmp_1 = 0.0;
        break :blk __m128d{
            tmp,
            tmp_1,
        };
    };
}
pub inline fn _mm_move_sd(arg___a: __m128d, arg___b: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] = __b[@as(c_uint, @intCast(@as(c_int, 0)))];
    return __a;
}
pub inline fn _mm_store_sd(arg___dp: [*c]f64, arg___a: __m128d) void {
    var __dp = arg___dp;
    _ = &__dp;
    var __a = arg___a;
    _ = &__a;
    const struct___mm_store_sd_struct = extern struct {
        __u: f64 align(1) = @import("std").mem.zeroes(f64),
    };
    _ = &struct___mm_store_sd_struct;
    @as([*c]struct___mm_store_sd_struct, @ptrCast(@alignCast(__dp))).*.__u = __a[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm_store_pd(arg___dp: [*c]f64, arg___a: __m128d) void {
    var __dp = arg___dp;
    _ = &__dp;
    var __a = arg___a;
    _ = &__a;
    @as([*c]__m128d, @ptrCast(@alignCast(__dp))).* = __a;
}
pub inline fn _mm_store1_pd(arg___dp: [*c]f64, arg___a: __m128d) void {
    var __dp = arg___dp;
    _ = &__dp;
    var __a = arg___a;
    _ = &__a;
    __a = @shuffle(@typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.child, @as(__v2df, @bitCast(__a)), @as(__v2df, @bitCast(__a)), @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
    });
    _mm_store_pd(__dp, __a);
}
pub inline fn _mm_store_pd1(arg___dp: [*c]f64, arg___a: __m128d) void {
    var __dp = arg___dp;
    _ = &__dp;
    var __a = arg___a;
    _ = &__a;
    _mm_store1_pd(__dp, __a);
}
pub inline fn _mm_storeu_pd(arg___dp: [*c]f64, arg___a: __m128d) void {
    var __dp = arg___dp;
    _ = &__dp;
    var __a = arg___a;
    _ = &__a;
    const struct___storeu_pd = extern struct {
        __v: __m128d_u align(1) = @import("std").mem.zeroes(__m128d_u),
    };
    _ = &struct___storeu_pd;
    @as([*c]struct___storeu_pd, @ptrCast(@alignCast(__dp))).*.__v = __a;
}
pub inline fn _mm_storer_pd(arg___dp: [*c]f64, arg___a: __m128d) void {
    var __dp = arg___dp;
    _ = &__dp;
    var __a = arg___a;
    _ = &__a;
    __a = @shuffle(@typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.child, @as(__v2df, @bitCast(__a)), @as(__v2df, @bitCast(__a)), @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
    });
    @as([*c]__m128d, @ptrCast(@alignCast(__dp))).* = __a;
}
pub inline fn _mm_storeh_pd(arg___dp: [*c]f64, arg___a: __m128d) void {
    var __dp = arg___dp;
    _ = &__dp;
    var __a = arg___a;
    _ = &__a;
    const struct___mm_storeh_pd_struct = extern struct {
        __u: f64 align(1) = @import("std").mem.zeroes(f64),
    };
    _ = &struct___mm_storeh_pd_struct;
    @as([*c]struct___mm_storeh_pd_struct, @ptrCast(@alignCast(__dp))).*.__u = __a[@as(c_uint, @intCast(@as(c_int, 1)))];
}
pub inline fn _mm_storel_pd(arg___dp: [*c]f64, arg___a: __m128d) void {
    var __dp = arg___dp;
    _ = &__dp;
    var __a = arg___a;
    _ = &__a;
    const struct___mm_storeh_pd_struct = extern struct {
        __u: f64 align(1) = @import("std").mem.zeroes(f64),
    };
    _ = &struct___mm_storeh_pd_struct;
    @as([*c]struct___mm_storeh_pd_struct, @ptrCast(@alignCast(__dp))).*.__u = __a[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm_add_epi8(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v16qu, @bitCast(__a)) + @as(__v16qu, @bitCast(__b))));
}
pub inline fn _mm_add_epi16(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v8hu, @bitCast(__a)) + @as(__v8hu, @bitCast(__b))));
}
pub inline fn _mm_add_epi32(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v4su, @bitCast(__a)) + @as(__v4su, @bitCast(__b))));
}
// /usr/lib/zig/include/emmintrin.h:2077:17: warning: TODO implement function '__builtin_ia32_paddq' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2075:48: warning: unable to translate function, demoted to extern
pub extern fn _mm_add_si64(arg___a: __m64, arg___b: __m64) __m64;
pub inline fn _mm_add_epi64(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v2du, @bitCast(__a)) + @as(__v2du, @bitCast(__b))));
}
// /usr/lib/zig/include/emmintrin.h:2118:19: warning: TODO implement function '__builtin_elementwise_add_sat' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2116:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_adds_epi8(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2139:19: warning: TODO implement function '__builtin_elementwise_add_sat' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2137:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_adds_epi16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2159:19: warning: TODO implement function '__builtin_elementwise_add_sat' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2157:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_adds_epu8(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2179:19: warning: TODO implement function '__builtin_elementwise_add_sat' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2177:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_adds_epu16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2198:19: warning: TODO implement function '__builtin_ia32_pavgb128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2196:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_avg_epu8(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2217:19: warning: TODO implement function '__builtin_ia32_pavgw128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2215:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_avg_epu16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2242:19: warning: TODO implement function '__builtin_ia32_pmaddwd128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2240:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_madd_epi16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2261:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2259:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_epi16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2280:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2278:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_epu8(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2299:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2297:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_epi16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2318:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2316:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_epu8(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2337:19: warning: TODO implement function '__builtin_ia32_pmulhw128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2335:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_mulhi_epi16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2356:19: warning: TODO implement function '__builtin_ia32_pmulhuw128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2354:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_mulhi_epu16(arg___a: __m128i, arg___b: __m128i) __m128i;
pub inline fn _mm_mullo_epi16(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v8hu, @bitCast(__a)) * @as(__v8hu, @bitCast(__b))));
}
// /usr/lib/zig/include/emmintrin.h:2393:10: warning: TODO implement function '__builtin_ia32_pmuludq' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2391:48: warning: unable to translate function, demoted to extern
pub extern fn _mm_mul_su32(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/emmintrin.h:2411:10: warning: TODO implement function '__builtin_ia32_pmuludq128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2409:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_mul_epu32(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2432:10: warning: TODO implement function '__builtin_ia32_psadbw128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2430:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_sad_epu8(arg___a: __m128i, arg___b: __m128i) __m128i;
pub inline fn _mm_sub_epi8(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v16qu, @bitCast(__a)) - @as(__v16qu, @bitCast(__b))));
}
pub inline fn _mm_sub_epi16(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v8hu, @bitCast(__a)) - @as(__v8hu, @bitCast(__b))));
}
pub inline fn _mm_sub_epi32(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v4su, @bitCast(__a)) - @as(__v4su, @bitCast(__b))));
}
// /usr/lib/zig/include/emmintrin.h:2501:17: warning: TODO implement function '__builtin_ia32_psubq' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2499:48: warning: unable to translate function, demoted to extern
pub extern fn _mm_sub_si64(arg___a: __m64, arg___b: __m64) __m64;
pub inline fn _mm_sub_epi64(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v2du, @bitCast(__a)) - @as(__v2du, @bitCast(__b))));
}
// /usr/lib/zig/include/emmintrin.h:2538:19: warning: TODO implement function '__builtin_elementwise_sub_sat' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2536:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_subs_epi8(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2558:19: warning: TODO implement function '__builtin_elementwise_sub_sat' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2556:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_subs_epi16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2577:19: warning: TODO implement function '__builtin_elementwise_sub_sat' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2575:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_subs_epu8(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2596:19: warning: TODO implement function '__builtin_elementwise_sub_sat' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2594:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_subs_epu16(arg___a: __m128i, arg___b: __m128i) __m128i;
pub inline fn _mm_and_si128(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v2du, @bitCast(__a)) & @as(__v2du, @bitCast(__b))));
}
pub inline fn _mm_andnot_si128(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(~@as(__v2du, @bitCast(__a)) & @as(__v2du, @bitCast(__b))));
}
pub inline fn _mm_or_si128(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v2du, @bitCast(__a)) | @as(__v2du, @bitCast(__b))));
}
pub inline fn _mm_xor_si128(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v2du, @bitCast(__a)) ^ @as(__v2du, @bitCast(__b))));
}
// /usr/lib/zig/include/emmintrin.h:2708:19: warning: TODO implement function '__builtin_ia32_psllwi128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2706:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_slli_epi16(arg___a: __m128i, arg___count: c_int) __m128i;
// /usr/lib/zig/include/emmintrin.h:2726:19: warning: TODO implement function '__builtin_ia32_psllw128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2724:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_sll_epi16(arg___a: __m128i, arg___count: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2744:19: warning: TODO implement function '__builtin_ia32_pslldi128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2742:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_slli_epi32(arg___a: __m128i, arg___count: c_int) __m128i;
// /usr/lib/zig/include/emmintrin.h:2762:19: warning: TODO implement function '__builtin_ia32_pslld128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2760:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_sll_epi32(arg___a: __m128i, arg___count: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2780:10: warning: TODO implement function '__builtin_ia32_psllqi128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2778:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_slli_epi64(arg___a: __m128i, arg___count: c_int) __m128i;
// /usr/lib/zig/include/emmintrin.h:2798:10: warning: TODO implement function '__builtin_ia32_psllq128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2796:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_sll_epi64(arg___a: __m128i, arg___count: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2817:19: warning: TODO implement function '__builtin_ia32_psrawi128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2815:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_srai_epi16(arg___a: __m128i, arg___count: c_int) __m128i;
// /usr/lib/zig/include/emmintrin.h:2836:19: warning: TODO implement function '__builtin_ia32_psraw128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2834:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_sra_epi16(arg___a: __m128i, arg___count: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2855:19: warning: TODO implement function '__builtin_ia32_psradi128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2853:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_srai_epi32(arg___a: __m128i, arg___count: c_int) __m128i;
// /usr/lib/zig/include/emmintrin.h:2874:19: warning: TODO implement function '__builtin_ia32_psrad128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2872:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_sra_epi32(arg___a: __m128i, arg___count: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2917:19: warning: TODO implement function '__builtin_ia32_psrlwi128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2915:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_srli_epi16(arg___a: __m128i, arg___count: c_int) __m128i;
// /usr/lib/zig/include/emmintrin.h:2935:19: warning: TODO implement function '__builtin_ia32_psrlw128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2933:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_srl_epi16(arg___a: __m128i, arg___count: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2953:19: warning: TODO implement function '__builtin_ia32_psrldi128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2951:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_srli_epi32(arg___a: __m128i, arg___count: c_int) __m128i;
// /usr/lib/zig/include/emmintrin.h:2971:19: warning: TODO implement function '__builtin_ia32_psrld128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2969:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_srl_epi32(arg___a: __m128i, arg___count: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:2989:10: warning: TODO implement function '__builtin_ia32_psrlqi128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:2987:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_srli_epi64(arg___a: __m128i, arg___count: c_int) __m128i;
// /usr/lib/zig/include/emmintrin.h:3007:10: warning: TODO implement function '__builtin_ia32_psrlq128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:3005:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_srl_epi64(arg___a: __m128i, arg___count: __m128i) __m128i;
pub inline fn _mm_cmpeq_epi8(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v16qi, @bitCast(__a)) == @as(__v16qi, @bitCast(__b))));
}
pub inline fn _mm_cmpeq_epi16(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v8hi, @bitCast(__a)) == @as(__v8hi, @bitCast(__b))));
}
pub inline fn _mm_cmpeq_epi32(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v4si, @bitCast(__a)) == @as(__v4si, @bitCast(__b))));
}
pub inline fn _mm_cmpgt_epi8(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v16qs, @bitCast(__a)) > @as(__v16qs, @bitCast(__b))));
}
pub inline fn _mm_cmpgt_epi16(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v8hi, @bitCast(__a)) > @as(__v8hi, @bitCast(__b))));
}
pub inline fn _mm_cmpgt_epi32(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v4si, @bitCast(__a)) > @as(__v4si, @bitCast(__b))));
}
pub inline fn _mm_cmplt_epi8(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return _mm_cmpgt_epi8(__b, __a);
}
pub inline fn _mm_cmplt_epi16(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return _mm_cmpgt_epi16(__b, __a);
}
pub inline fn _mm_cmplt_epi32(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return _mm_cmpgt_epi32(__b, __a);
}
pub inline fn _mm_cvtsi64_sd(arg___a: __m128d, arg___b: c_longlong) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] = @as(f64, @floatFromInt(__b));
    return __a;
}
// /usr/lib/zig/include/emmintrin.h:3221:10: warning: TODO implement function '__builtin_ia32_cvtsd2si64' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:3220:48: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsd_si64(arg___a: __m128d) c_longlong;
// /usr/lib/zig/include/emmintrin.h:3237:10: warning: TODO implement function '__builtin_ia32_cvttsd2si64' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:3236:48: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttsd_si64(arg___a: __m128d) c_longlong;
pub inline fn _mm_cvtepi32_ps(arg___a: __m128i) __m128 {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128, @bitCast(blk: {
        const tmp = @as(f32, @floatFromInt(@as(__v4si, @bitCast(__a))[0]));
        const tmp_1 = @as(f32, @floatFromInt(@as(__v4si, @bitCast(__a))[1]));
        const tmp_2 = @as(f32, @floatFromInt(@as(__v4si, @bitCast(__a))[2]));
        const tmp_3 = @as(f32, @floatFromInt(@as(__v4si, @bitCast(__a))[3]));
        break :blk __v4sf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
// /usr/lib/zig/include/emmintrin.h:3265:19: warning: TODO implement function '__builtin_ia32_cvtps2dq' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:3264:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtps_epi32(arg___a: __m128) __m128i;
// /usr/lib/zig/include/emmintrin.h:3280:19: warning: TODO implement function '__builtin_ia32_cvttps2dq' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:3279:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttps_epi32(arg___a: __m128) __m128i;
pub inline fn _mm_cvtsi32_si128(arg___a: c_int) __m128i {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128i, @bitCast(blk: {
        const tmp = __a;
        const tmp_1 = @as(c_int, 0);
        const tmp_2 = @as(c_int, 0);
        const tmp_3 = @as(c_int, 0);
        break :blk __v4si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm_cvtsi64_si128(arg___a: c_longlong) __m128i {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128i, @bitCast(blk: {
        const tmp = __a;
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_longlong, @as(c_int, 0))));
        break :blk __v2di{
            tmp,
            tmp_1,
        };
    }));
}
pub inline fn _mm_cvtsi128_si32(arg___a: __m128i) c_int {
    var __a = arg___a;
    _ = &__a;
    var __b: __v4si = @as(__v4si, @bitCast(__a));
    _ = &__b;
    return __b[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm_cvtsi128_si64(arg___a: __m128i) c_longlong {
    var __a = arg___a;
    _ = &__a;
    return __a[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm_load_si128(arg___p: [*c]const __m128i) __m128i {
    var __p = arg___p;
    _ = &__p;
    return __p.*;
}
pub inline fn _mm_loadu_si128(arg___p: [*c]const __m128i_u) __m128i {
    var __p = arg___p;
    _ = &__p;
    const struct___loadu_si128 = extern struct {
        __v: __m128i_u align(1) = @import("std").mem.zeroes(__m128i_u),
    };
    _ = &struct___loadu_si128;
    return @as([*c]const struct___loadu_si128, @ptrCast(@alignCast(__p))).*.__v;
}
pub inline fn _mm_loadl_epi64(arg___p: [*c]const __m128i_u) __m128i {
    var __p = arg___p;
    _ = &__p;
    const struct___mm_loadl_epi64_struct = extern struct {
        __u: c_longlong align(1) = @import("std").mem.zeroes(c_longlong),
    };
    _ = &struct___mm_loadl_epi64_struct;
    return blk: {
        const tmp = @as([*c]const struct___mm_loadl_epi64_struct, @ptrCast(@alignCast(__p))).*.__u;
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_longlong, @as(c_int, 0))));
        break :blk __m128i{
            tmp,
            tmp_1,
        };
    };
}
// /usr/lib/zig/include/emmintrin.h:3407:19: warning: TODO implement function '__builtin_ia32_undef128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:3406:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_undefined_si128() __m128i;
pub inline fn _mm_set_epi64x(arg___q1: c_longlong, arg___q0: c_longlong) __m128i {
    var __q1 = arg___q1;
    _ = &__q1;
    var __q0 = arg___q0;
    _ = &__q0;
    return @as(__m128i, @bitCast(blk: {
        const tmp = __q0;
        const tmp_1 = __q1;
        break :blk __v2di{
            tmp,
            tmp_1,
        };
    }));
}
pub inline fn _mm_set_epi64(arg___q1: __m64, arg___q0: __m64) __m128i {
    var __q1 = arg___q1;
    _ = &__q1;
    var __q0 = arg___q0;
    _ = &__q0;
    return _mm_set_epi64x(@as(c_longlong, @bitCast(__q1)), @as(c_longlong, @bitCast(__q0)));
}
pub inline fn _mm_set_epi32(arg___i3: c_int, arg___i2: c_int, arg___i1: c_int, arg___i0: c_int) __m128i {
    var __i3 = arg___i3;
    _ = &__i3;
    var __i2 = arg___i2;
    _ = &__i2;
    var __i1 = arg___i1;
    _ = &__i1;
    var __i0 = arg___i0;
    _ = &__i0;
    return @as(__m128i, @bitCast(blk: {
        const tmp = __i0;
        const tmp_1 = __i1;
        const tmp_2 = __i2;
        const tmp_3 = __i3;
        break :blk __v4si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm_set_epi16(arg___w7: c_short, arg___w6: c_short, arg___w5: c_short, arg___w4: c_short, arg___w3: c_short, arg___w2: c_short, arg___w1: c_short, arg___w0: c_short) __m128i {
    var __w7 = arg___w7;
    _ = &__w7;
    var __w6 = arg___w6;
    _ = &__w6;
    var __w5 = arg___w5;
    _ = &__w5;
    var __w4 = arg___w4;
    _ = &__w4;
    var __w3 = arg___w3;
    _ = &__w3;
    var __w2 = arg___w2;
    _ = &__w2;
    var __w1 = arg___w1;
    _ = &__w1;
    var __w0 = arg___w0;
    _ = &__w0;
    return @as(__m128i, @bitCast(blk: {
        const tmp = __w0;
        const tmp_1 = __w1;
        const tmp_2 = __w2;
        const tmp_3 = __w3;
        const tmp_4 = __w4;
        const tmp_5 = __w5;
        const tmp_6 = __w6;
        const tmp_7 = __w7;
        break :blk __v8hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
pub inline fn _mm_set_epi8(arg___b15: u8, arg___b14: u8, arg___b13: u8, arg___b12: u8, arg___b11: u8, arg___b10: u8, arg___b9: u8, arg___b8: u8, arg___b7: u8, arg___b6: u8, arg___b5: u8, arg___b4: u8, arg___b3: u8, arg___b2: u8, arg___b1: u8, arg___b0: u8) __m128i {
    var __b15 = arg___b15;
    _ = &__b15;
    var __b14 = arg___b14;
    _ = &__b14;
    var __b13 = arg___b13;
    _ = &__b13;
    var __b12 = arg___b12;
    _ = &__b12;
    var __b11 = arg___b11;
    _ = &__b11;
    var __b10 = arg___b10;
    _ = &__b10;
    var __b9 = arg___b9;
    _ = &__b9;
    var __b8 = arg___b8;
    _ = &__b8;
    var __b7 = arg___b7;
    _ = &__b7;
    var __b6 = arg___b6;
    _ = &__b6;
    var __b5 = arg___b5;
    _ = &__b5;
    var __b4 = arg___b4;
    _ = &__b4;
    var __b3 = arg___b3;
    _ = &__b3;
    var __b2 = arg___b2;
    _ = &__b2;
    var __b1 = arg___b1;
    _ = &__b1;
    var __b0 = arg___b0;
    _ = &__b0;
    return @as(__m128i, @bitCast(blk: {
        const tmp = __b0;
        const tmp_1 = __b1;
        const tmp_2 = __b2;
        const tmp_3 = __b3;
        const tmp_4 = __b4;
        const tmp_5 = __b5;
        const tmp_6 = __b6;
        const tmp_7 = __b7;
        const tmp_8 = __b8;
        const tmp_9 = __b9;
        const tmp_10 = __b10;
        const tmp_11 = __b11;
        const tmp_12 = __b12;
        const tmp_13 = __b13;
        const tmp_14 = __b14;
        const tmp_15 = __b15;
        break :blk __v16qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
pub inline fn _mm_set1_epi64x(arg___q: c_longlong) __m128i {
    var __q = arg___q;
    _ = &__q;
    return _mm_set_epi64x(__q, __q);
}
pub inline fn _mm_set1_epi64(arg___q: __m64) __m128i {
    var __q = arg___q;
    _ = &__q;
    return _mm_set_epi64(__q, __q);
}
pub inline fn _mm_set1_epi32(arg___i: c_int) __m128i {
    var __i = arg___i;
    _ = &__i;
    return _mm_set_epi32(__i, __i, __i, __i);
}
pub inline fn _mm_set1_epi16(arg___w: c_short) __m128i {
    var __w = arg___w;
    _ = &__w;
    return _mm_set_epi16(__w, __w, __w, __w, __w, __w, __w, __w);
}
pub inline fn _mm_set1_epi8(arg___b: u8) __m128i {
    var __b = arg___b;
    _ = &__b;
    return _mm_set_epi8(__b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b);
}
pub inline fn _mm_setr_epi64(arg___q0: __m64, arg___q1: __m64) __m128i {
    var __q0 = arg___q0;
    _ = &__q0;
    var __q1 = arg___q1;
    _ = &__q1;
    return _mm_set_epi64(__q1, __q0);
}
pub inline fn _mm_setr_epi32(arg___i0: c_int, arg___i1: c_int, arg___i2: c_int, arg___i3: c_int) __m128i {
    var __i0 = arg___i0;
    _ = &__i0;
    var __i1 = arg___i1;
    _ = &__i1;
    var __i2 = arg___i2;
    _ = &__i2;
    var __i3 = arg___i3;
    _ = &__i3;
    return _mm_set_epi32(__i3, __i2, __i1, __i0);
}
pub inline fn _mm_setr_epi16(arg___w0: c_short, arg___w1: c_short, arg___w2: c_short, arg___w3: c_short, arg___w4: c_short, arg___w5: c_short, arg___w6: c_short, arg___w7: c_short) __m128i {
    var __w0 = arg___w0;
    _ = &__w0;
    var __w1 = arg___w1;
    _ = &__w1;
    var __w2 = arg___w2;
    _ = &__w2;
    var __w3 = arg___w3;
    _ = &__w3;
    var __w4 = arg___w4;
    _ = &__w4;
    var __w5 = arg___w5;
    _ = &__w5;
    var __w6 = arg___w6;
    _ = &__w6;
    var __w7 = arg___w7;
    _ = &__w7;
    return _mm_set_epi16(__w7, __w6, __w5, __w4, __w3, __w2, __w1, __w0);
}
pub inline fn _mm_setr_epi8(arg___b0: u8, arg___b1: u8, arg___b2: u8, arg___b3: u8, arg___b4: u8, arg___b5: u8, arg___b6: u8, arg___b7: u8, arg___b8: u8, arg___b9: u8, arg___b10: u8, arg___b11: u8, arg___b12: u8, arg___b13: u8, arg___b14: u8, arg___b15: u8) __m128i {
    var __b0 = arg___b0;
    _ = &__b0;
    var __b1 = arg___b1;
    _ = &__b1;
    var __b2 = arg___b2;
    _ = &__b2;
    var __b3 = arg___b3;
    _ = &__b3;
    var __b4 = arg___b4;
    _ = &__b4;
    var __b5 = arg___b5;
    _ = &__b5;
    var __b6 = arg___b6;
    _ = &__b6;
    var __b7 = arg___b7;
    _ = &__b7;
    var __b8 = arg___b8;
    _ = &__b8;
    var __b9 = arg___b9;
    _ = &__b9;
    var __b10 = arg___b10;
    _ = &__b10;
    var __b11 = arg___b11;
    _ = &__b11;
    var __b12 = arg___b12;
    _ = &__b12;
    var __b13 = arg___b13;
    _ = &__b13;
    var __b14 = arg___b14;
    _ = &__b14;
    var __b15 = arg___b15;
    _ = &__b15;
    return _mm_set_epi8(__b15, __b14, __b13, __b12, __b11, __b10, __b9, __b8, __b7, __b6, __b5, __b4, __b3, __b2, __b1, __b0);
}
pub inline fn _mm_setzero_si128() __m128i {
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_longlong, 0);
        const tmp_1 = @as(c_longlong, 0);
        break :blk __v2di{
            tmp,
            tmp_1,
        };
    }));
}
pub inline fn _mm_store_si128(arg___p: [*c]__m128i, arg___b: __m128i) void {
    var __p = arg___p;
    _ = &__p;
    var __b = arg___b;
    _ = &__b;
    __p.* = __b;
}
pub inline fn _mm_storeu_si128(arg___p: [*c]__m128i_u, arg___b: __m128i) void {
    var __p = arg___p;
    _ = &__p;
    var __b = arg___b;
    _ = &__b;
    const struct___storeu_si128 = extern struct {
        __v: __m128i_u align(1) = @import("std").mem.zeroes(__m128i_u),
    };
    _ = &struct___storeu_si128;
    @as([*c]struct___storeu_si128, @ptrCast(@alignCast(__p))).*.__v = __b;
}
pub inline fn _mm_storeu_si64(arg___p: ?*anyopaque, arg___b: __m128i) void {
    var __p = arg___p;
    _ = &__p;
    var __b = arg___b;
    _ = &__b;
    const struct___storeu_si64 = extern struct {
        __v: c_longlong align(1) = @import("std").mem.zeroes(c_longlong),
    };
    _ = &struct___storeu_si64;
    @as([*c]struct___storeu_si64, @ptrCast(@alignCast(__p))).*.__v = @as(__v2di, @bitCast(__b))[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm_storeu_si32(arg___p: ?*anyopaque, arg___b: __m128i) void {
    var __p = arg___p;
    _ = &__p;
    var __b = arg___b;
    _ = &__b;
    const struct___storeu_si32 = extern struct {
        __v: c_int align(1) = @import("std").mem.zeroes(c_int),
    };
    _ = &struct___storeu_si32;
    @as([*c]struct___storeu_si32, @ptrCast(@alignCast(__p))).*.__v = @as(__v4si, @bitCast(__b))[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm_storeu_si16(arg___p: ?*anyopaque, arg___b: __m128i) void {
    var __p = arg___p;
    _ = &__p;
    var __b = arg___b;
    _ = &__b;
    const struct___storeu_si16 = extern struct {
        __v: c_short align(1) = @import("std").mem.zeroes(c_short),
    };
    _ = &struct___storeu_si16;
    @as([*c]struct___storeu_si16, @ptrCast(@alignCast(__p))).*.__v = @as(__v8hi, @bitCast(__b))[@as(c_uint, @intCast(@as(c_int, 0)))];
}
// /usr/lib/zig/include/emmintrin.h:3910:3: warning: TODO implement function '__builtin_ia32_maskmovdqu' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:3907:43: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskmoveu_si128(arg___d: __m128i, arg___n: __m128i, arg___p: [*c]u8) void;
pub inline fn _mm_storel_epi64(arg___p: [*c]__m128i_u, arg___a: __m128i) void {
    var __p = arg___p;
    _ = &__p;
    var __a = arg___a;
    _ = &__a;
    const struct___mm_storel_epi64_struct = extern struct {
        __u: c_longlong align(1) = @import("std").mem.zeroes(c_longlong),
    };
    _ = &struct___mm_storel_epi64_struct;
    @as([*c]struct___mm_storel_epi64_struct, @ptrCast(@alignCast(__p))).*.__u = __a[@as(c_uint, @intCast(@as(c_int, 0)))];
}
// /usr/lib/zig/include/emmintrin.h:3950:3: warning: TODO implement function '__builtin_nontemporal_store' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:3948:43: warning: unable to translate function, demoted to extern
pub extern fn _mm_stream_pd(arg___p: ?*anyopaque, arg___a: __m128d) void;
// /usr/lib/zig/include/emmintrin.h:3968:3: warning: TODO implement function '__builtin_nontemporal_store' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:3966:43: warning: unable to translate function, demoted to extern
pub extern fn _mm_stream_si128(arg___p: ?*anyopaque, arg___a: __m128i) void;
// /usr/lib/zig/include/emmintrin.h:3987:3: warning: TODO implement function '__builtin_ia32_movnti' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:3986:5: warning: unable to translate function, demoted to extern
pub extern fn _mm_stream_si32(arg___p: ?*anyopaque, arg___a: c_int) void;
// /usr/lib/zig/include/emmintrin.h:4007:3: warning: TODO implement function '__builtin_ia32_movnti64' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:4006:5: warning: unable to translate function, demoted to extern
pub extern fn _mm_stream_si64(arg___p: ?*anyopaque, arg___a: c_longlong) void;
pub extern fn _mm_clflush(__p: ?*const anyopaque) void;
pub extern fn _mm_lfence() void;
pub extern fn _mm_mfence() void;
// /usr/lib/zig/include/emmintrin.h:4077:19: warning: TODO implement function '__builtin_ia32_packsswb128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:4075:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_packs_epi16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:4104:19: warning: TODO implement function '__builtin_ia32_packssdw128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:4102:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_packs_epi32(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:4131:19: warning: TODO implement function '__builtin_ia32_packuswb128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:4129:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_packus_epi16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/emmintrin.h:4205:10: warning: TODO implement function '__builtin_ia32_pmovmskb128' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:4204:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_movemask_epi8(arg___a: __m128i) c_int;
pub inline fn _mm_unpackhi_epi8(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.child, @as(__v16qi, @bitCast(__a)), @as(__v16qi, @bitCast(__b)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 9), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 10), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 11), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 13), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 14), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 15), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm_unpackhi_epi16(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.child, @as(__v8hi, @bitCast(__a)), @as(__v8hi, @bitCast(__b)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 5), @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 6), @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 7), @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm_unpackhi_epi32(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.child, @as(__v4si, @bitCast(__a)), @as(__v4si, @bitCast(__b)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 4) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 4) + @as(c_int, 3), @typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm_unpackhi_epi64(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.child, @as(__v2di, @bitCast(__a)), @as(__v2di, @bitCast(__b)), @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 2) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm_unpacklo_epi8(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.child, @as(__v16qi, @bitCast(__a)), @as(__v16qi, @bitCast(__b)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 0), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 3), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 5), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 6), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 7), @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm_unpacklo_epi16(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.child, @as(__v8hi, @bitCast(__a)), @as(__v8hi, @bitCast(__b)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 0), @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 3), @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm_unpacklo_epi32(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.child, @as(__v4si, @bitCast(__a)), @as(__v4si, @bitCast(__b)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 4) + @as(c_int, 0), @typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 4) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v4si, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm_unpacklo_epi64(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.child, @as(__v2di, @bitCast(__a)), @as(__v2di, @bitCast(__b)), @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 2) + @as(c_int, 0), @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm_movepi64_pi64(arg___a: __m128i) __m64 {
    var __a = arg___a;
    _ = &__a;
    return @as(__m64, @bitCast(__a[@as(c_uint, @intCast(@as(c_int, 0)))]));
}
pub inline fn _mm_movpi64_epi64(arg___a: __m64) __m128i {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(__a));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_longlong, @as(c_int, 0))));
        break :blk __v2di{
            tmp,
            tmp_1,
        };
    }));
}
pub inline fn _mm_move_epi64(arg___a: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.child, @as(__v2di, @bitCast(__a)), _mm_setzero_si128(), @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm_unpackhi_pd(arg___a: __m128d, arg___b: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @shuffle(@typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.child, @as(__v2df, @bitCast(__a)), @as(__v2df, @bitCast(__b)), @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 2) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm_unpacklo_pd(arg___a: __m128d, arg___b: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @shuffle(@typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.child, @as(__v2df, @bitCast(__a)), @as(__v2df, @bitCast(__b)), @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 2) + @as(c_int, 0), @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
    });
}
// /usr/lib/zig/include/emmintrin.h:4621:10: warning: TODO implement function '__builtin_ia32_movmskpd' in std.zig.c_builtins

// /usr/lib/zig/include/emmintrin.h:4620:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_movemask_pd(arg___a: __m128d) c_int;
pub inline fn _mm_castpd_ps(arg___a: __m128d) __m128 {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128, @bitCast(__a));
}
pub inline fn _mm_castpd_si128(arg___a: __m128d) __m128i {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128i, @bitCast(__a));
}
pub inline fn _mm_castps_pd(arg___a: __m128) __m128d {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128d, @bitCast(__a));
}
pub inline fn _mm_castps_si128(arg___a: __m128) __m128i {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128i, @bitCast(__a));
}
pub inline fn _mm_castsi128_ps(arg___a: __m128i) __m128 {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128, @bitCast(__a));
}
pub inline fn _mm_castsi128_pd(arg___a: __m128i) __m128d {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128d, @bitCast(__a));
}
pub extern fn _mm_pause() void;
// /usr/lib/zig/include/pmmintrin.h:41:19: warning: TODO implement function '__builtin_ia32_lddqu' in std.zig.c_builtins

// /usr/lib/zig/include/pmmintrin.h:39:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_lddqu_si128(arg___p: [*c]const __m128i_u) __m128i;
// /usr/lib/zig/include/pmmintrin.h:60:10: warning: TODO implement function '__builtin_ia32_addsubps' in std.zig.c_builtins

// /usr/lib/zig/include/pmmintrin.h:58:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_addsub_ps(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/pmmintrin.h:83:10: warning: TODO implement function '__builtin_ia32_haddps' in std.zig.c_builtins

// /usr/lib/zig/include/pmmintrin.h:81:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hadd_ps(arg___a: __m128, arg___b: __m128) __m128;
// /usr/lib/zig/include/pmmintrin.h:106:10: warning: TODO implement function '__builtin_ia32_hsubps' in std.zig.c_builtins

// /usr/lib/zig/include/pmmintrin.h:104:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hsub_ps(arg___a: __m128, arg___b: __m128) __m128;
pub inline fn _mm_movehdup_ps(arg___a: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.child, @as(__v4sf, @bitCast(__a)), @as(__v4sf, @bitCast(__a)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm_moveldup_ps(arg___a: __m128) __m128 {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.child, @as(__v4sf, @bitCast(__a)), @as(__v4sf, @bitCast(__a)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
    });
}
// /usr/lib/zig/include/pmmintrin.h:168:10: warning: TODO implement function '__builtin_ia32_addsubpd' in std.zig.c_builtins

// /usr/lib/zig/include/pmmintrin.h:166:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_addsub_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/pmmintrin.h:191:10: warning: TODO implement function '__builtin_ia32_haddpd' in std.zig.c_builtins

// /usr/lib/zig/include/pmmintrin.h:189:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hadd_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
// /usr/lib/zig/include/pmmintrin.h:214:10: warning: TODO implement function '__builtin_ia32_hsubpd' in std.zig.c_builtins

// /usr/lib/zig/include/pmmintrin.h:212:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hsub_pd(arg___a: __m128d, arg___b: __m128d) __m128d;
pub inline fn _mm_movedup_pd(arg___a: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.child, @as(__v2df, @bitCast(__a)), @as(__v2df, @bitCast(__a)), @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
    });
}
// /usr/lib/zig/include/pmmintrin.h:274:3: warning: TODO implement function '__builtin_ia32_monitor' in std.zig.c_builtins

// /usr/lib/zig/include/pmmintrin.h:272:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_monitor(arg___p: ?*const anyopaque, arg___extensions: c_uint, arg___hints: c_uint) void;
// /usr/lib/zig/include/pmmintrin.h:296:3: warning: TODO implement function '__builtin_ia32_mwait' in std.zig.c_builtins

// /usr/lib/zig/include/pmmintrin.h:294:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mwait(arg___extensions: c_uint, arg___hints: c_uint) void;
// /usr/lib/zig/include/tmmintrin.h:43:19: warning: TODO implement function '__builtin_ia32_pabsb' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:41:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_abs_pi8(arg___a: __m64) __m64;
// /usr/lib/zig/include/tmmintrin.h:61:21: warning: TODO implement function '__builtin_elementwise_abs' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:59:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_abs_epi8(arg___a: __m128i) __m128i;
// /usr/lib/zig/include/tmmintrin.h:79:19: warning: TODO implement function '__builtin_ia32_pabsw' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:77:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_abs_pi16(arg___a: __m64) __m64;
// /usr/lib/zig/include/tmmintrin.h:97:21: warning: TODO implement function '__builtin_elementwise_abs' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:95:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_abs_epi16(arg___a: __m128i) __m128i;
// /usr/lib/zig/include/tmmintrin.h:115:19: warning: TODO implement function '__builtin_ia32_pabsd' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:113:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_abs_pi32(arg___a: __m64) __m64;
// /usr/lib/zig/include/tmmintrin.h:133:21: warning: TODO implement function '__builtin_elementwise_abs' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:131:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_abs_epi32(arg___a: __m128i) __m128i;
// /usr/lib/zig/include/tmmintrin.h:202:21: warning: TODO implement function '__builtin_ia32_phaddw128' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:200:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hadd_epi16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/tmmintrin.h:225:21: warning: TODO implement function '__builtin_ia32_phaddd128' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:223:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hadd_epi32(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/tmmintrin.h:248:19: warning: TODO implement function '__builtin_ia32_phaddw' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:246:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hadd_pi16(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/tmmintrin.h:271:19: warning: TODO implement function '__builtin_ia32_phaddd' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:269:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hadd_pi32(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/tmmintrin.h:296:21: warning: TODO implement function '__builtin_ia32_phaddsw128' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:294:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hadds_epi16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/tmmintrin.h:321:19: warning: TODO implement function '__builtin_ia32_phaddsw' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:319:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hadds_pi16(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/tmmintrin.h:344:21: warning: TODO implement function '__builtin_ia32_phsubw128' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:342:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hsub_epi16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/tmmintrin.h:367:21: warning: TODO implement function '__builtin_ia32_phsubd128' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:365:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hsub_epi32(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/tmmintrin.h:390:19: warning: TODO implement function '__builtin_ia32_phsubw' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:388:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hsub_pi16(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/tmmintrin.h:413:19: warning: TODO implement function '__builtin_ia32_phsubd' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:411:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hsub_pi32(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/tmmintrin.h:438:21: warning: TODO implement function '__builtin_ia32_phsubsw128' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:436:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hsubs_epi16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/tmmintrin.h:463:19: warning: TODO implement function '__builtin_ia32_phsubsw' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:461:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_hsubs_pi16(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/tmmintrin.h:497:21: warning: TODO implement function '__builtin_ia32_pmaddubsw128' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:495:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maddubs_epi16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/tmmintrin.h:527:19: warning: TODO implement function '__builtin_ia32_pmaddubsw' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:525:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maddubs_pi16(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/tmmintrin.h:547:21: warning: TODO implement function '__builtin_ia32_pmulhrsw128' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:545:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mulhrs_epi16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/tmmintrin.h:567:19: warning: TODO implement function '__builtin_ia32_pmulhrsw' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:565:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mulhrs_pi16(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/tmmintrin.h:593:21: warning: TODO implement function '__builtin_ia32_pshufb128' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:591:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_shuffle_epi8(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/tmmintrin.h:618:19: warning: TODO implement function '__builtin_ia32_pshufb' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:616:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_shuffle_pi8(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/tmmintrin.h:644:21: warning: TODO implement function '__builtin_ia32_psignb128' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:642:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sign_epi8(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/tmmintrin.h:670:21: warning: TODO implement function '__builtin_ia32_psignw128' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:668:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sign_epi16(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/tmmintrin.h:696:21: warning: TODO implement function '__builtin_ia32_psignd128' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:694:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sign_epi32(arg___a: __m128i, arg___b: __m128i) __m128i;
// /usr/lib/zig/include/tmmintrin.h:722:19: warning: TODO implement function '__builtin_ia32_psignb' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:720:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sign_pi8(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/tmmintrin.h:748:19: warning: TODO implement function '__builtin_ia32_psignw' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:746:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sign_pi16(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/tmmintrin.h:774:19: warning: TODO implement function '__builtin_ia32_psignd' in std.zig.c_builtins

// /usr/lib/zig/include/tmmintrin.h:772:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sign_pi32(arg___a: __m64, arg___b: __m64) __m64;
// /usr/lib/zig/include/smmintrin.h:439:19: warning: TODO implement function '__builtin_ia32_blendvpd' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:436:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_blendv_pd(arg___V1: __m128d, arg___V2: __m128d, arg___M: __m128d) __m128d;
// /usr/lib/zig/include/smmintrin.h:466:18: warning: TODO implement function '__builtin_ia32_blendvps' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:463:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_blendv_ps(arg___V1: __m128, arg___V2: __m128, arg___M: __m128) __m128;
// /usr/lib/zig/include/smmintrin.h:493:19: warning: TODO implement function '__builtin_ia32_pblendvb128' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:490:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_blendv_epi8(arg___V1: __m128i, arg___V2: __m128i, arg___M: __m128i) __m128i;
pub inline fn _mm_mullo_epi32(arg___V1: __m128i, arg___V2: __m128i) __m128i {
    var __V1 = arg___V1;
    _ = &__V1;
    var __V2 = arg___V2;
    _ = &__V2;
    return @as(__m128i, @bitCast(@as(__v4su, @bitCast(__V1)) * @as(__v4su, @bitCast(__V2))));
}
// /usr/lib/zig/include/smmintrin.h:560:19: warning: TODO implement function '__builtin_ia32_pmuldq128' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:558:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_mul_epi32(arg___V1: __m128i, arg___V2: __m128i) __m128i;
// /usr/lib/zig/include/smmintrin.h:649:19: warning: TODO implement function '__builtin_nontemporal_load' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:648:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_stream_load_si128(arg___V: ?*const anyopaque) __m128i;
// /usr/lib/zig/include/smmintrin.h:668:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:666:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_epi8(arg___V1: __m128i, arg___V2: __m128i) __m128i;
// /usr/lib/zig/include/smmintrin.h:686:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:684:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_epi8(arg___V1: __m128i, arg___V2: __m128i) __m128i;
// /usr/lib/zig/include/smmintrin.h:704:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:702:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_epu16(arg___V1: __m128i, arg___V2: __m128i) __m128i;
// /usr/lib/zig/include/smmintrin.h:722:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:720:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_epu16(arg___V1: __m128i, arg___V2: __m128i) __m128i;
// /usr/lib/zig/include/smmintrin.h:740:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:738:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_epi32(arg___V1: __m128i, arg___V2: __m128i) __m128i;
// /usr/lib/zig/include/smmintrin.h:758:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:756:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_epi32(arg___V1: __m128i, arg___V2: __m128i) __m128i;
// /usr/lib/zig/include/smmintrin.h:776:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:774:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_epu32(arg___V1: __m128i, arg___V2: __m128i) __m128i;
// /usr/lib/zig/include/smmintrin.h:794:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:792:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_epu32(arg___V1: __m128i, arg___V2: __m128i) __m128i;
// /usr/lib/zig/include/smmintrin.h:1095:10: warning: TODO implement function '__builtin_ia32_ptestz128' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:1093:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_testz_si128(arg___M: __m128i, arg___V: __m128i) c_int;
// /usr/lib/zig/include/smmintrin.h:1112:10: warning: TODO implement function '__builtin_ia32_ptestc128' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:1110:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_testc_si128(arg___M: __m128i, arg___V: __m128i) c_int;
// /usr/lib/zig/include/smmintrin.h:1130:10: warning: TODO implement function '__builtin_ia32_ptestnzc128' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:1128:42: warning: unable to translate function, demoted to extern
pub extern fn _mm_testnzc_si128(arg___M: __m128i, arg___V: __m128i) c_int;
pub inline fn _mm_cmpeq_epi64(arg___V1: __m128i, arg___V2: __m128i) __m128i {
    var __V1 = arg___V1;
    _ = &__V1;
    var __V2 = arg___V2;
    _ = &__V2;
    return @as(__m128i, @bitCast(@as(__v2di, @bitCast(__V1)) == @as(__v2di, @bitCast(__V2))));
}
pub inline fn _mm_cvtepi8_epi16(arg___V: __m128i) __m128i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_short, @bitCast(@as(c_short, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_short, @bitCast(@as(c_short, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[1])));
        const tmp_2 = @as(c_short, @bitCast(@as(c_short, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[2])));
        const tmp_3 = @as(c_short, @bitCast(@as(c_short, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[3])));
        const tmp_4 = @as(c_short, @bitCast(@as(c_short, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[4])));
        const tmp_5 = @as(c_short, @bitCast(@as(c_short, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[5])));
        const tmp_6 = @as(c_short, @bitCast(@as(c_short, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[6])));
        const tmp_7 = @as(c_short, @bitCast(@as(c_short, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[7])));
        break :blk __v8hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
pub inline fn _mm_cvtepi8_epi32(arg___V: __m128i) __m128i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[1])));
        const tmp_2 = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[2])));
        const tmp_3 = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[3])));
        break :blk __v4si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm_cvtepi8_epi64(arg___V: __m128i) __m128i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[1])));
        break :blk __v2di{
            tmp,
            tmp_1,
        };
    }));
}
pub inline fn _mm_cvtepi16_epi32(arg___V: __m128i) __m128i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.child, @as(__v8hi, @bitCast(__V)), @as(__v8hi, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.child, @as(__v8hi, @bitCast(__V)), @as(__v8hi, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
        })[1])));
        const tmp_2 = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.child, @as(__v8hi, @bitCast(__V)), @as(__v8hi, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
        })[2])));
        const tmp_3 = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.child, @as(__v8hi, @bitCast(__V)), @as(__v8hi, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
        })[3])));
        break :blk __v4si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm_cvtepi16_epi64(arg___V: __m128i) __m128i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.child, @as(__v8hi, @bitCast(__V)), @as(__v8hi, @bitCast(__V)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.child, @as(__v8hi, @bitCast(__V)), @as(__v8hi, @bitCast(__V)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
        })[1])));
        break :blk __v2di{
            tmp,
            tmp_1,
        };
    }));
}
pub inline fn _mm_cvtepi32_epi64(arg___V: __m128i) __m128i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v4si, @bitCast(__V)))).Vector.child, @as(__v4si, @bitCast(__V)), @as(__v4si, @bitCast(__V)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v4si, @bitCast(__V)))).Vector.child, @as(__v4si, @bitCast(__V)), @as(__v4si, @bitCast(__V)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__V)))).Vector.len),
        })[1])));
        break :blk __v2di{
            tmp,
            tmp_1,
        };
    }));
}
pub inline fn _mm_cvtepu8_epi16(arg___V: __m128i) __m128i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_short, @bitCast(@as(c_ushort, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_short, @bitCast(@as(c_ushort, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[1])));
        const tmp_2 = @as(c_short, @bitCast(@as(c_ushort, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[2])));
        const tmp_3 = @as(c_short, @bitCast(@as(c_ushort, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[3])));
        const tmp_4 = @as(c_short, @bitCast(@as(c_ushort, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[4])));
        const tmp_5 = @as(c_short, @bitCast(@as(c_ushort, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[5])));
        const tmp_6 = @as(c_short, @bitCast(@as(c_ushort, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[6])));
        const tmp_7 = @as(c_short, @bitCast(@as(c_ushort, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[7])));
        break :blk __v8hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
pub inline fn _mm_cvtepu8_epi32(arg___V: __m128i) __m128i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[1])));
        const tmp_2 = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[2])));
        const tmp_3 = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[3])));
        break :blk __v4si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm_cvtepu8_epi64(arg___V: __m128i) __m128i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[1])));
        break :blk __v2di{
            tmp,
            tmp_1,
        };
    }));
}
pub inline fn _mm_cvtepu16_epi32(arg___V: __m128i) __m128i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.child, @as(__v8hu, @bitCast(__V)), @as(__v8hu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.child, @as(__v8hu, @bitCast(__V)), @as(__v8hu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
        })[1])));
        const tmp_2 = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.child, @as(__v8hu, @bitCast(__V)), @as(__v8hu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
        })[2])));
        const tmp_3 = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.child, @as(__v8hu, @bitCast(__V)), @as(__v8hu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
        })[3])));
        break :blk __v4si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm_cvtepu16_epi64(arg___V: __m128i) __m128i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.child, @as(__v8hu, @bitCast(__V)), @as(__v8hu, @bitCast(__V)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.child, @as(__v8hu, @bitCast(__V)), @as(__v8hu, @bitCast(__V)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
        })[1])));
        break :blk __v2di{
            tmp,
            tmp_1,
        };
    }));
}
pub inline fn _mm_cvtepu32_epi64(arg___V: __m128i) __m128i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v4su, @bitCast(__V)))).Vector.child, @as(__v4su, @bitCast(__V)), @as(__v4su, @bitCast(__V)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4su, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4su, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v4su, @bitCast(__V)))).Vector.child, @as(__v4su, @bitCast(__V)), @as(__v4su, @bitCast(__V)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4su, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4su, @bitCast(__V)))).Vector.len),
        })[1])));
        break :blk __v2di{
            tmp,
            tmp_1,
        };
    }));
}
// /usr/lib/zig/include/smmintrin.h:1458:19: warning: TODO implement function '__builtin_ia32_packusdw128' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:1456:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_packus_epi32(arg___V1: __m128i, arg___V2: __m128i) __m128i;
// /usr/lib/zig/include/smmintrin.h:1515:19: warning: TODO implement function '__builtin_ia32_phminposuw128' in std.zig.c_builtins

// /usr/lib/zig/include/smmintrin.h:1514:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_minpos_epu16(arg___V: __m128i) __m128i;
pub inline fn _mm_cmpgt_epi64(arg___V1: __m128i, arg___V2: __m128i) __m128i {
    var __V1 = arg___V1;
    _ = &__V1;
    var __V2 = arg___V2;
    _ = &__V2;
    return @as(__m128i, @bitCast(@as(__v2di, @bitCast(__V1)) > @as(__v2di, @bitCast(__V2))));
}
pub inline fn _mm_popcnt_u32(arg___A: c_uint) c_int {
    var __A = arg___A;
    _ = &__A;
    return __builtin_popcount(__A);
}
// /usr/lib/zig/include/popcntintrin.h:52:10: warning: TODO implement function '__builtin_popcountll' in std.zig.c_builtins

// /usr/lib/zig/include/popcntintrin.h:50:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_popcnt_u64(arg___A: c_ulonglong) c_longlong;
// /usr/lib/zig/include/__wmmintrin_aes.h:37:19: warning: TODO implement function '__builtin_ia32_aesenc128' in std.zig.c_builtins

// /usr/lib/zig/include/__wmmintrin_aes.h:35:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_aesenc_si128(arg___V: __m128i, arg___R: __m128i) __m128i;
// /usr/lib/zig/include/__wmmintrin_aes.h:57:19: warning: TODO implement function '__builtin_ia32_aesenclast128' in std.zig.c_builtins

// /usr/lib/zig/include/__wmmintrin_aes.h:55:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_aesenclast_si128(arg___V: __m128i, arg___R: __m128i) __m128i;
// /usr/lib/zig/include/__wmmintrin_aes.h:77:19: warning: TODO implement function '__builtin_ia32_aesdec128' in std.zig.c_builtins

// /usr/lib/zig/include/__wmmintrin_aes.h:75:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_aesdec_si128(arg___V: __m128i, arg___R: __m128i) __m128i;
// /usr/lib/zig/include/__wmmintrin_aes.h:97:19: warning: TODO implement function '__builtin_ia32_aesdeclast128' in std.zig.c_builtins

// /usr/lib/zig/include/__wmmintrin_aes.h:95:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_aesdeclast_si128(arg___V: __m128i, arg___R: __m128i) __m128i;
// /usr/lib/zig/include/__wmmintrin_aes.h:114:19: warning: TODO implement function '__builtin_ia32_aesimc128' in std.zig.c_builtins

// /usr/lib/zig/include/__wmmintrin_aes.h:112:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_aesimc_si128(arg___V: __m128i) __m128i;
// /usr/lib/zig/include/clflushoptintrin.h:31:3: warning: TODO implement function '__builtin_ia32_clflushopt' in std.zig.c_builtins

// /usr/lib/zig/include/clflushoptintrin.h:30:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_clflushopt(arg___m: ?*const anyopaque) void;
// /usr/lib/zig/include/clwbintrin.h:33:3: warning: TODO implement function '__builtin_ia32_clwb' in std.zig.c_builtins

// /usr/lib/zig/include/clwbintrin.h:32:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_clwb(arg___p: ?*const anyopaque) void;
pub const __v4df = @Vector(4, f64);
pub const __v8sf = @Vector(8, f32);
pub const __v4di = @Vector(4, c_longlong);
pub const __v8si = @Vector(8, c_int);
pub const __v16hi = @Vector(16, c_short);
pub const __v32qi = @Vector(32, u8);
pub const __v4du = @Vector(4, c_ulonglong);
pub const __v8su = @Vector(8, c_uint);
pub const __v16hu = @Vector(16, c_ushort);
pub const __v32qu = @Vector(32, u8);
pub const __v32qs = @Vector(32, i8);
pub const __m256 = @Vector(8, f32);
pub const __m256d = @Vector(4, f64);
pub const __m256i = @Vector(4, c_longlong);
pub const __m256_u = @Vector(8, f32);
pub const __m256d_u = @Vector(4, f64);
pub const __m256i_u = @Vector(4, c_longlong);
pub const __v16hf = @Vector(16, f16);
pub const __m256h = @Vector(16, f16);
pub const __m256h_u = @Vector(16, f16);
// /usr/lib/zig/include/avxintrin.h:48:16: warning: unsupported builtin type
pub const __v16bf = @compileError("unable to resolve typedef child type");
// /usr/lib/zig/include/avxintrin.h:48:16

// /usr/lib/zig/include/avxintrin.h:49:16: warning: unsupported builtin type
pub const __m256bh = @compileError("unable to resolve typedef child type");
// /usr/lib/zig/include/avxintrin.h:49:16
pub inline fn _mm256_add_pd(arg___a: __m256d, arg___b: __m256d) __m256d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256d, @bitCast(@as(__v4df, @bitCast(__a)) + @as(__v4df, @bitCast(__b))));
}
pub inline fn _mm256_add_ps(arg___a: __m256, arg___b: __m256) __m256 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256, @bitCast(@as(__v8sf, @bitCast(__a)) + @as(__v8sf, @bitCast(__b))));
}
pub inline fn _mm256_sub_pd(arg___a: __m256d, arg___b: __m256d) __m256d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256d, @bitCast(@as(__v4df, @bitCast(__a)) - @as(__v4df, @bitCast(__b))));
}
pub inline fn _mm256_sub_ps(arg___a: __m256, arg___b: __m256) __m256 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256, @bitCast(@as(__v8sf, @bitCast(__a)) - @as(__v8sf, @bitCast(__b))));
}
// /usr/lib/zig/include/avxintrin.h:149:19: warning: TODO implement function '__builtin_ia32_addsubpd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:147:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_addsub_pd(arg___a: __m256d, arg___b: __m256d) __m256d;
// /usr/lib/zig/include/avxintrin.h:168:18: warning: TODO implement function '__builtin_ia32_addsubps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:166:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_addsub_ps(arg___a: __m256, arg___b: __m256) __m256;
pub inline fn _mm256_div_pd(arg___a: __m256d, arg___b: __m256d) __m256d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256d, @bitCast(@as(__v4df, @bitCast(__a)) / @as(__v4df, @bitCast(__b))));
}
pub inline fn _mm256_div_ps(arg___a: __m256, arg___b: __m256) __m256 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256, @bitCast(@as(__v8sf, @bitCast(__a)) / @as(__v8sf, @bitCast(__b))));
}
// /usr/lib/zig/include/avxintrin.h:223:19: warning: TODO implement function '__builtin_ia32_maxpd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:221:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_max_pd(arg___a: __m256d, arg___b: __m256d) __m256d;
// /usr/lib/zig/include/avxintrin.h:242:18: warning: TODO implement function '__builtin_ia32_maxps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:240:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_max_ps(arg___a: __m256, arg___b: __m256) __m256;
// /usr/lib/zig/include/avxintrin.h:261:19: warning: TODO implement function '__builtin_ia32_minpd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:259:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_min_pd(arg___a: __m256d, arg___b: __m256d) __m256d;
// /usr/lib/zig/include/avxintrin.h:280:18: warning: TODO implement function '__builtin_ia32_minps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:278:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_min_ps(arg___a: __m256, arg___b: __m256) __m256;
pub inline fn _mm256_mul_pd(arg___a: __m256d, arg___b: __m256d) __m256d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256d, @bitCast(@as(__v4df, @bitCast(__a)) * @as(__v4df, @bitCast(__b))));
}
pub inline fn _mm256_mul_ps(arg___a: __m256, arg___b: __m256) __m256 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256, @bitCast(@as(__v8sf, @bitCast(__a)) * @as(__v8sf, @bitCast(__b))));
}
// /usr/lib/zig/include/avxintrin.h:333:19: warning: TODO implement function '__builtin_ia32_sqrtpd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:331:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sqrt_pd(arg___a: __m256d) __m256d;
// /usr/lib/zig/include/avxintrin.h:350:18: warning: TODO implement function '__builtin_ia32_sqrtps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:348:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sqrt_ps(arg___a: __m256) __m256;
// /usr/lib/zig/include/avxintrin.h:367:18: warning: TODO implement function '__builtin_ia32_rsqrtps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:365:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_rsqrt_ps(arg___a: __m256) __m256;
// /usr/lib/zig/include/avxintrin.h:384:18: warning: TODO implement function '__builtin_ia32_rcpps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:382:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_rcp_ps(arg___a: __m256) __m256;
pub inline fn _mm256_and_pd(arg___a: __m256d, arg___b: __m256d) __m256d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256d, @bitCast(@as(__v4du, @bitCast(__a)) & @as(__v4du, @bitCast(__b))));
}
pub inline fn _mm256_and_ps(arg___a: __m256, arg___b: __m256) __m256 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256, @bitCast(@as(__v8su, @bitCast(__a)) & @as(__v8su, @bitCast(__b))));
}
pub inline fn _mm256_andnot_pd(arg___a: __m256d, arg___b: __m256d) __m256d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256d, @bitCast(~@as(__v4du, @bitCast(__a)) & @as(__v4du, @bitCast(__b))));
}
pub inline fn _mm256_andnot_ps(arg___a: __m256, arg___b: __m256) __m256 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256, @bitCast(~@as(__v8su, @bitCast(__a)) & @as(__v8su, @bitCast(__b))));
}
pub inline fn _mm256_or_pd(arg___a: __m256d, arg___b: __m256d) __m256d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256d, @bitCast(@as(__v4du, @bitCast(__a)) | @as(__v4du, @bitCast(__b))));
}
pub inline fn _mm256_or_ps(arg___a: __m256, arg___b: __m256) __m256 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256, @bitCast(@as(__v8su, @bitCast(__a)) | @as(__v8su, @bitCast(__b))));
}
pub inline fn _mm256_xor_pd(arg___a: __m256d, arg___b: __m256d) __m256d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256d, @bitCast(@as(__v4du, @bitCast(__a)) ^ @as(__v4du, @bitCast(__b))));
}
pub inline fn _mm256_xor_ps(arg___a: __m256, arg___b: __m256) __m256 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256, @bitCast(@as(__v8su, @bitCast(__a)) ^ @as(__v8su, @bitCast(__b))));
}
// /usr/lib/zig/include/avxintrin.h:692:19: warning: TODO implement function '__builtin_ia32_haddpd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:690:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_hadd_pd(arg___a: __m256d, arg___b: __m256d) __m256d;
// /usr/lib/zig/include/avxintrin.h:715:18: warning: TODO implement function '__builtin_ia32_haddps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:713:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_hadd_ps(arg___a: __m256, arg___b: __m256) __m256;
// /usr/lib/zig/include/avxintrin.h:738:19: warning: TODO implement function '__builtin_ia32_hsubpd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:736:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_hsub_pd(arg___a: __m256d, arg___b: __m256d) __m256d;
// /usr/lib/zig/include/avxintrin.h:761:18: warning: TODO implement function '__builtin_ia32_hsubps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:759:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_hsub_ps(arg___a: __m256, arg___b: __m256) __m256;
// /usr/lib/zig/include/avxintrin.h:791:19: warning: TODO implement function '__builtin_ia32_vpermilvarpd' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:789:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_permutevar_pd(arg___a: __m128d, arg___c: __m128i) __m128d;
// /usr/lib/zig/include/avxintrin.h:830:19: warning: TODO implement function '__builtin_ia32_vpermilvarpd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:828:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutevar_pd(arg___a: __m256d, arg___c: __m256i) __m256d;
// /usr/lib/zig/include/avxintrin.h:884:18: warning: TODO implement function '__builtin_ia32_vpermilvarps' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:882:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_permutevar_ps(arg___a: __m128, arg___c: __m128i) __m128;
// /usr/lib/zig/include/avxintrin.h:975:18: warning: TODO implement function '__builtin_ia32_vpermilvarps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:973:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutevar_ps(arg___a: __m256, arg___c: __m256i) __m256;
// /usr/lib/zig/include/avxintrin.h:1399:19: warning: TODO implement function '__builtin_ia32_blendvpd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:1397:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_blendv_pd(arg___a: __m256d, arg___b: __m256d, arg___c: __m256d) __m256d;
// /usr/lib/zig/include/avxintrin.h:1427:18: warning: TODO implement function '__builtin_ia32_blendvps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:1425:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_blendv_ps(arg___a: __m256, arg___b: __m256, arg___c: __m256) __m256;
pub inline fn _mm256_cvtepi32_pd(arg___a: __m128i) __m256d {
    var __a = arg___a;
    _ = &__a;
    return @as(__m256d, @bitCast(blk: {
        const tmp = @as(f64, @floatFromInt(@as(__v4si, @bitCast(__a))[0]));
        const tmp_1 = @as(f64, @floatFromInt(@as(__v4si, @bitCast(__a))[1]));
        const tmp_2 = @as(f64, @floatFromInt(@as(__v4si, @bitCast(__a))[2]));
        const tmp_3 = @as(f64, @floatFromInt(@as(__v4si, @bitCast(__a))[3]));
        break :blk __v4df{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm256_cvtepi32_ps(arg___a: __m256i) __m256 {
    var __a = arg___a;
    _ = &__a;
    return @as(__m256, @bitCast(blk: {
        const tmp = @as(f32, @floatFromInt(@as(__v8si, @bitCast(__a))[0]));
        const tmp_1 = @as(f32, @floatFromInt(@as(__v8si, @bitCast(__a))[1]));
        const tmp_2 = @as(f32, @floatFromInt(@as(__v8si, @bitCast(__a))[2]));
        const tmp_3 = @as(f32, @floatFromInt(@as(__v8si, @bitCast(__a))[3]));
        const tmp_4 = @as(f32, @floatFromInt(@as(__v8si, @bitCast(__a))[4]));
        const tmp_5 = @as(f32, @floatFromInt(@as(__v8si, @bitCast(__a))[5]));
        const tmp_6 = @as(f32, @floatFromInt(@as(__v8si, @bitCast(__a))[6]));
        const tmp_7 = @as(f32, @floatFromInt(@as(__v8si, @bitCast(__a))[7]));
        break :blk __v8sf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avxintrin.h:2211:18: warning: TODO implement function '__builtin_ia32_cvtpd2ps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2209:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtpd_ps(arg___a: __m256d) __m128;
// /usr/lib/zig/include/avxintrin.h:2226:19: warning: TODO implement function '__builtin_ia32_cvtps2dq256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2224:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtps_epi32(arg___a: __m256) __m256i;
pub inline fn _mm256_cvtps_pd(arg___a: __m128) __m256d {
    var __a = arg___a;
    _ = &__a;
    return @as(__m256d, @bitCast(blk: {
        const tmp = @as(f64, @floatCast(@as(__v4sf, @bitCast(__a))[0]));
        const tmp_1 = @as(f64, @floatCast(@as(__v4sf, @bitCast(__a))[1]));
        const tmp_2 = @as(f64, @floatCast(@as(__v4sf, @bitCast(__a))[2]));
        const tmp_3 = @as(f64, @floatCast(@as(__v4sf, @bitCast(__a))[3]));
        break :blk __v4df{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
// /usr/lib/zig/include/avxintrin.h:2259:19: warning: TODO implement function '__builtin_ia32_cvttpd2dq256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2257:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvttpd_epi32(arg___a: __m256d) __m128i;
// /usr/lib/zig/include/avxintrin.h:2276:19: warning: TODO implement function '__builtin_ia32_cvtpd2dq256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2274:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtpd_epi32(arg___a: __m256d) __m128i;
// /usr/lib/zig/include/avxintrin.h:2292:19: warning: TODO implement function '__builtin_ia32_cvttps2dq256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2290:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvttps_epi32(arg___a: __m256) __m256i;
pub inline fn _mm256_cvtsd_f64(arg___a: __m256d) f64 {
    var __a = arg___a;
    _ = &__a;
    return __a[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm256_cvtsi256_si32(arg___a: __m256i) c_int {
    var __a = arg___a;
    _ = &__a;
    var __b: __v8si = @as(__v8si, @bitCast(__a));
    _ = &__b;
    return __b[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm256_cvtss_f32(arg___a: __m256) f32 {
    var __a = arg___a;
    _ = &__a;
    return __a[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm256_movehdup_ps(arg___a: __m256) __m256 {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.child, @as(__v8sf, @bitCast(__a)), @as(__v8sf, @bitCast(__a)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm256_moveldup_ps(arg___a: __m256) __m256 {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.child, @as(__v8sf, @bitCast(__a)), @as(__v8sf, @bitCast(__a)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm256_movedup_pd(arg___a: __m256d) __m256d {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.child, @as(__v4df, @bitCast(__a)), @as(__v4df, @bitCast(__a)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm256_unpackhi_pd(arg___a: __m256d, arg___b: __m256d) __m256d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.child, @as(__v4df, @bitCast(__a)), @as(__v4df, @bitCast(__b)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 1) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 5) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm256_unpacklo_pd(arg___a: __m256d, arg___b: __m256d) __m256d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.child, @as(__v4df, @bitCast(__a)), @as(__v4df, @bitCast(__b)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 0) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 4) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm256_unpackhi_ps(arg___a: __m256, arg___b: __m256) __m256 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @shuffle(@typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.child, @as(__v8sf, @bitCast(__a)), @as(__v8sf, @bitCast(__b)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 2) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 10) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 6) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 14) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm256_unpacklo_ps(arg___a: __m256, arg___b: __m256) __m256 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @shuffle(@typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.child, @as(__v8sf, @bitCast(__a)), @as(__v8sf, @bitCast(__b)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 0) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 4) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 12) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
    });
}
// /usr/lib/zig/include/avxintrin.h:2543:10: warning: TODO implement function '__builtin_ia32_vtestzpd' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2541:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_testz_pd(arg___a: __m128d, arg___b: __m128d) c_int;
// /usr/lib/zig/include/avxintrin.h:2572:10: warning: TODO implement function '__builtin_ia32_vtestcpd' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2570:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_testc_pd(arg___a: __m128d, arg___b: __m128d) c_int;
// /usr/lib/zig/include/avxintrin.h:2602:10: warning: TODO implement function '__builtin_ia32_vtestnzcpd' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2600:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_testnzc_pd(arg___a: __m128d, arg___b: __m128d) c_int;
// /usr/lib/zig/include/avxintrin.h:2631:10: warning: TODO implement function '__builtin_ia32_vtestzps' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2629:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_testz_ps(arg___a: __m128, arg___b: __m128) c_int;
// /usr/lib/zig/include/avxintrin.h:2660:10: warning: TODO implement function '__builtin_ia32_vtestcps' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2658:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_testc_ps(arg___a: __m128, arg___b: __m128) c_int;
// /usr/lib/zig/include/avxintrin.h:2690:10: warning: TODO implement function '__builtin_ia32_vtestnzcps' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2688:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_testnzc_ps(arg___a: __m128, arg___b: __m128) c_int;
// /usr/lib/zig/include/avxintrin.h:2719:10: warning: TODO implement function '__builtin_ia32_vtestzpd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2717:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_testz_pd(arg___a: __m256d, arg___b: __m256d) c_int;
// /usr/lib/zig/include/avxintrin.h:2748:10: warning: TODO implement function '__builtin_ia32_vtestcpd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2746:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_testc_pd(arg___a: __m256d, arg___b: __m256d) c_int;
// /usr/lib/zig/include/avxintrin.h:2778:10: warning: TODO implement function '__builtin_ia32_vtestnzcpd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2776:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_testnzc_pd(arg___a: __m256d, arg___b: __m256d) c_int;
// /usr/lib/zig/include/avxintrin.h:2807:10: warning: TODO implement function '__builtin_ia32_vtestzps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2805:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_testz_ps(arg___a: __m256, arg___b: __m256) c_int;
// /usr/lib/zig/include/avxintrin.h:2836:10: warning: TODO implement function '__builtin_ia32_vtestcps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2834:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_testc_ps(arg___a: __m256, arg___b: __m256) c_int;
// /usr/lib/zig/include/avxintrin.h:2866:10: warning: TODO implement function '__builtin_ia32_vtestnzcps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2864:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_testnzc_ps(arg___a: __m256, arg___b: __m256) c_int;
// /usr/lib/zig/include/avxintrin.h:2892:10: warning: TODO implement function '__builtin_ia32_ptestz256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2890:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_testz_si256(arg___a: __m256i, arg___b: __m256i) c_int;
// /usr/lib/zig/include/avxintrin.h:2918:10: warning: TODO implement function '__builtin_ia32_ptestc256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2916:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_testc_si256(arg___a: __m256i, arg___b: __m256i) c_int;
// /usr/lib/zig/include/avxintrin.h:2945:10: warning: TODO implement function '__builtin_ia32_ptestnzc256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2943:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_testnzc_si256(arg___a: __m256i, arg___b: __m256i) c_int;
// /usr/lib/zig/include/avxintrin.h:2964:10: warning: TODO implement function '__builtin_ia32_movmskpd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2962:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_movemask_pd(arg___a: __m256d) c_int;
// /usr/lib/zig/include/avxintrin.h:2982:10: warning: TODO implement function '__builtin_ia32_movmskps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2980:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_movemask_ps(arg___a: __m256) c_int;
// /usr/lib/zig/include/avxintrin.h:2994:3: warning: TODO implement function '__builtin_ia32_vzeroall' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:2992:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_zeroall() void;
// /usr/lib/zig/include/avxintrin.h:3005:3: warning: TODO implement function '__builtin_ia32_vzeroupper' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3003:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_zeroupper() void;
pub inline fn _mm_broadcast_ss(arg___a: [*c]const f32) __m128 {
    var __a = arg___a;
    _ = &__a;
    const struct___mm_broadcast_ss_struct = extern struct {
        __f: f32 align(1) = @import("std").mem.zeroes(f32),
    };
    _ = &struct___mm_broadcast_ss_struct;
    var __f: f32 = @as([*c]const struct___mm_broadcast_ss_struct, @ptrCast(@alignCast(__a))).*.__f;
    _ = &__f;
    return blk: {
        const tmp = __f;
        const tmp_1 = __f;
        const tmp_2 = __f;
        const tmp_3 = __f;
        break :blk __m128{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    };
}
pub inline fn _mm256_broadcast_sd(arg___a: [*c]const f64) __m256d {
    var __a = arg___a;
    _ = &__a;
    const struct___mm256_broadcast_sd_struct = extern struct {
        __d: f64 align(1) = @import("std").mem.zeroes(f64),
    };
    _ = &struct___mm256_broadcast_sd_struct;
    var __d: f64 = @as([*c]const struct___mm256_broadcast_sd_struct, @ptrCast(@alignCast(__a))).*.__d;
    _ = &__d;
    return @as(__m256d, @bitCast(blk: {
        const tmp = __d;
        const tmp_1 = __d;
        const tmp_2 = __d;
        const tmp_3 = __d;
        break :blk __v4df{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm256_broadcast_ss(arg___a: [*c]const f32) __m256 {
    var __a = arg___a;
    _ = &__a;
    const struct___mm256_broadcast_ss_struct = extern struct {
        __f: f32 align(1) = @import("std").mem.zeroes(f32),
    };
    _ = &struct___mm256_broadcast_ss_struct;
    var __f: f32 = @as([*c]const struct___mm256_broadcast_ss_struct, @ptrCast(@alignCast(__a))).*.__f;
    _ = &__f;
    return @as(__m256, @bitCast(blk: {
        const tmp = __f;
        const tmp_1 = __f;
        const tmp_2 = __f;
        const tmp_3 = __f;
        const tmp_4 = __f;
        const tmp_5 = __f;
        const tmp_6 = __f;
        const tmp_7 = __f;
        break :blk __v8sf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
pub inline fn _mm256_broadcast_pd(arg___a: [*c]const __m128d) __m256d {
    var __a = arg___a;
    _ = &__a;
    var __b: __m128d = _mm_loadu_pd(@as([*c]const f64, @ptrCast(@alignCast(__a))));
    _ = &__b;
    return @as(__m256d, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v2df, @bitCast(__b)))).Vector.child, @as(__v2df, @bitCast(__b)), @as(__v2df, @bitCast(__b)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__b)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__b)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__b)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__b)))).Vector.len),
    })));
}
pub inline fn _mm256_broadcast_ps(arg___a: [*c]const __m128) __m256 {
    var __a = arg___a;
    _ = &__a;
    var __b: __m128 = _mm_loadu_ps(@as([*c]const f32, @ptrCast(@alignCast(__a))));
    _ = &__b;
    return @as(__m256, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__b)))).Vector.child, @as(__v4sf, @bitCast(__b)), @as(__v4sf, @bitCast(__b)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__b)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__b)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__b)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__b)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__b)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__b)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__b)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__b)))).Vector.len),
    })));
}
pub inline fn _mm256_load_pd(arg___p: [*c]const f64) __m256d {
    var __p = arg___p;
    _ = &__p;
    return @as([*c]const __m256d, @ptrCast(@alignCast(__p))).*;
}
pub inline fn _mm256_load_ps(arg___p: [*c]const f32) __m256 {
    var __p = arg___p;
    _ = &__p;
    return @as([*c]const __m256, @ptrCast(@alignCast(__p))).*;
}
pub inline fn _mm256_loadu_pd(arg___p: [*c]const f64) __m256d {
    var __p = arg___p;
    _ = &__p;
    const struct___loadu_pd = extern struct {
        __v: __m256d_u align(1) = @import("std").mem.zeroes(__m256d_u),
    };
    _ = &struct___loadu_pd;
    return @as([*c]const struct___loadu_pd, @ptrCast(@alignCast(__p))).*.__v;
}
pub inline fn _mm256_loadu_ps(arg___p: [*c]const f32) __m256 {
    var __p = arg___p;
    _ = &__p;
    const struct___loadu_ps = extern struct {
        __v: __m256_u align(1) = @import("std").mem.zeroes(__m256_u),
    };
    _ = &struct___loadu_ps;
    return @as([*c]const struct___loadu_ps, @ptrCast(@alignCast(__p))).*.__v;
}
pub inline fn _mm256_load_si256(arg___p: [*c]const __m256i) __m256i {
    var __p = arg___p;
    _ = &__p;
    return __p.*;
}
pub inline fn _mm256_loadu_si256(arg___p: [*c]const __m256i_u) __m256i {
    var __p = arg___p;
    _ = &__p;
    const struct___loadu_si256 = extern struct {
        __v: __m256i_u align(1) = @import("std").mem.zeroes(__m256i_u),
    };
    _ = &struct___loadu_si256;
    return @as([*c]const struct___loadu_si256, @ptrCast(@alignCast(__p))).*.__v;
}
// /usr/lib/zig/include/avxintrin.h:3240:19: warning: TODO implement function '__builtin_ia32_lddqu256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3238:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_lddqu_si256(arg___p: [*c]const __m256i_u) __m256i;
pub inline fn _mm256_store_pd(arg___p: [*c]f64, arg___a: __m256d) void {
    var __p = arg___p;
    _ = &__p;
    var __a = arg___a;
    _ = &__a;
    @as([*c]__m256d, @ptrCast(@alignCast(__p))).* = __a;
}
pub inline fn _mm256_store_ps(arg___p: [*c]f32, arg___a: __m256) void {
    var __p = arg___p;
    _ = &__p;
    var __a = arg___a;
    _ = &__a;
    @as([*c]__m256, @ptrCast(@alignCast(__p))).* = __a;
}
pub inline fn _mm256_storeu_pd(arg___p: [*c]f64, arg___a: __m256d) void {
    var __p = arg___p;
    _ = &__p;
    var __a = arg___a;
    _ = &__a;
    const struct___storeu_pd = extern struct {
        __v: __m256d_u align(1) = @import("std").mem.zeroes(__m256d_u),
    };
    _ = &struct___storeu_pd;
    @as([*c]struct___storeu_pd, @ptrCast(@alignCast(__p))).*.__v = __a;
}
pub inline fn _mm256_storeu_ps(arg___p: [*c]f32, arg___a: __m256) void {
    var __p = arg___p;
    _ = &__p;
    var __a = arg___a;
    _ = &__a;
    const struct___storeu_ps = extern struct {
        __v: __m256_u align(1) = @import("std").mem.zeroes(__m256_u),
    };
    _ = &struct___storeu_ps;
    @as([*c]struct___storeu_ps, @ptrCast(@alignCast(__p))).*.__v = __a;
}
pub inline fn _mm256_store_si256(arg___p: [*c]__m256i, arg___a: __m256i) void {
    var __p = arg___p;
    _ = &__p;
    var __a = arg___a;
    _ = &__a;
    __p.* = __a;
}
pub inline fn _mm256_storeu_si256(arg___p: [*c]__m256i_u, arg___a: __m256i) void {
    var __p = arg___p;
    _ = &__p;
    var __a = arg___a;
    _ = &__a;
    const struct___storeu_si256 = extern struct {
        __v: __m256i_u align(1) = @import("std").mem.zeroes(__m256i_u),
    };
    _ = &struct___storeu_si256;
    @as([*c]struct___storeu_si256, @ptrCast(@alignCast(__p))).*.__v = __a;
}
// /usr/lib/zig/include/avxintrin.h:3382:19: warning: TODO implement function '__builtin_ia32_maskloadpd' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3380:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskload_pd(arg___p: [*c]const f64, arg___m: __m128i) __m128d;
// /usr/lib/zig/include/avxintrin.h:3406:19: warning: TODO implement function '__builtin_ia32_maskloadpd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3404:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskload_pd(arg___p: [*c]const f64, arg___m: __m256i) __m256d;
// /usr/lib/zig/include/avxintrin.h:3431:18: warning: TODO implement function '__builtin_ia32_maskloadps' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3429:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskload_ps(arg___p: [*c]const f32, arg___m: __m128i) __m128;
// /usr/lib/zig/include/avxintrin.h:3455:18: warning: TODO implement function '__builtin_ia32_maskloadps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3453:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskload_ps(arg___p: [*c]const f32, arg___m: __m256i) __m256;
// /usr/lib/zig/include/avxintrin.h:3480:3: warning: TODO implement function '__builtin_ia32_maskstoreps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3478:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskstore_ps(arg___p: [*c]f32, arg___m: __m256i, arg___a: __m256) void;
// /usr/lib/zig/include/avxintrin.h:3504:3: warning: TODO implement function '__builtin_ia32_maskstorepd' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3502:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskstore_pd(arg___p: [*c]f64, arg___m: __m128i, arg___a: __m128d) void;
// /usr/lib/zig/include/avxintrin.h:3528:3: warning: TODO implement function '__builtin_ia32_maskstorepd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3526:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskstore_pd(arg___p: [*c]f64, arg___m: __m256i, arg___a: __m256d) void;
// /usr/lib/zig/include/avxintrin.h:3552:3: warning: TODO implement function '__builtin_ia32_maskstoreps' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3550:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskstore_ps(arg___p: [*c]f32, arg___m: __m128i, arg___a: __m128) void;
// /usr/lib/zig/include/avxintrin.h:3573:3: warning: TODO implement function '__builtin_nontemporal_store' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3570:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_stream_si256(arg___a: ?*anyopaque, arg___b: __m256i) void;
// /usr/lib/zig/include/avxintrin.h:3593:3: warning: TODO implement function '__builtin_nontemporal_store' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3590:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_stream_pd(arg___a: ?*anyopaque, arg___b: __m256d) void;
// /usr/lib/zig/include/avxintrin.h:3614:3: warning: TODO implement function '__builtin_nontemporal_store' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3611:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_stream_ps(arg___p: ?*anyopaque, arg___a: __m256) void;
// /usr/lib/zig/include/avxintrin.h:3628:19: warning: TODO implement function '__builtin_ia32_undef256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3626:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_undefined_pd() __m256d;
// /usr/lib/zig/include/avxintrin.h:3641:18: warning: TODO implement function '__builtin_ia32_undef256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3639:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_undefined_ps() __m256;
// /usr/lib/zig/include/avxintrin.h:3654:19: warning: TODO implement function '__builtin_ia32_undef256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:3652:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_undefined_si256() __m256i;
pub inline fn _mm256_set_pd(arg___a: f64, arg___b: f64, arg___c: f64, arg___d: f64) __m256d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    var __c = arg___c;
    _ = &__c;
    var __d = arg___d;
    _ = &__d;
    return blk: {
        const tmp = __d;
        const tmp_1 = __c;
        const tmp_2 = __b;
        const tmp_3 = __a;
        break :blk __m256d{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    };
}
pub inline fn _mm256_set_ps(arg___a: f32, arg___b: f32, arg___c: f32, arg___d: f32, arg___e: f32, arg___f: f32, arg___g: f32, arg___h: f32) __m256 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    var __c = arg___c;
    _ = &__c;
    var __d = arg___d;
    _ = &__d;
    var __e = arg___e;
    _ = &__e;
    var __f = arg___f;
    _ = &__f;
    var __g = arg___g;
    _ = &__g;
    var __h = arg___h;
    _ = &__h;
    return blk: {
        const tmp = __h;
        const tmp_1 = __g;
        const tmp_2 = __f;
        const tmp_3 = __e;
        const tmp_4 = __d;
        const tmp_5 = __c;
        const tmp_6 = __b;
        const tmp_7 = __a;
        break :blk __m256{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    };
}
pub inline fn _mm256_set_epi32(arg___i0: c_int, arg___i1: c_int, arg___i2: c_int, arg___i3: c_int, arg___i4: c_int, arg___i5: c_int, arg___i6: c_int, arg___i7: c_int) __m256i {
    var __i0 = arg___i0;
    _ = &__i0;
    var __i1 = arg___i1;
    _ = &__i1;
    var __i2 = arg___i2;
    _ = &__i2;
    var __i3 = arg___i3;
    _ = &__i3;
    var __i4 = arg___i4;
    _ = &__i4;
    var __i5 = arg___i5;
    _ = &__i5;
    var __i6 = arg___i6;
    _ = &__i6;
    var __i7 = arg___i7;
    _ = &__i7;
    return @as(__m256i, @bitCast(blk: {
        const tmp = __i7;
        const tmp_1 = __i6;
        const tmp_2 = __i5;
        const tmp_3 = __i4;
        const tmp_4 = __i3;
        const tmp_5 = __i2;
        const tmp_6 = __i1;
        const tmp_7 = __i0;
        break :blk __v8si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
pub inline fn _mm256_set_epi16(arg___w15: c_short, arg___w14: c_short, arg___w13: c_short, arg___w12: c_short, arg___w11: c_short, arg___w10: c_short, arg___w09: c_short, arg___w08: c_short, arg___w07: c_short, arg___w06: c_short, arg___w05: c_short, arg___w04: c_short, arg___w03: c_short, arg___w02: c_short, arg___w01: c_short, arg___w00: c_short) __m256i {
    var __w15 = arg___w15;
    _ = &__w15;
    var __w14 = arg___w14;
    _ = &__w14;
    var __w13 = arg___w13;
    _ = &__w13;
    var __w12 = arg___w12;
    _ = &__w12;
    var __w11 = arg___w11;
    _ = &__w11;
    var __w10 = arg___w10;
    _ = &__w10;
    var __w09 = arg___w09;
    _ = &__w09;
    var __w08 = arg___w08;
    _ = &__w08;
    var __w07 = arg___w07;
    _ = &__w07;
    var __w06 = arg___w06;
    _ = &__w06;
    var __w05 = arg___w05;
    _ = &__w05;
    var __w04 = arg___w04;
    _ = &__w04;
    var __w03 = arg___w03;
    _ = &__w03;
    var __w02 = arg___w02;
    _ = &__w02;
    var __w01 = arg___w01;
    _ = &__w01;
    var __w00 = arg___w00;
    _ = &__w00;
    return @as(__m256i, @bitCast(blk: {
        const tmp = __w00;
        const tmp_1 = __w01;
        const tmp_2 = __w02;
        const tmp_3 = __w03;
        const tmp_4 = __w04;
        const tmp_5 = __w05;
        const tmp_6 = __w06;
        const tmp_7 = __w07;
        const tmp_8 = __w08;
        const tmp_9 = __w09;
        const tmp_10 = __w10;
        const tmp_11 = __w11;
        const tmp_12 = __w12;
        const tmp_13 = __w13;
        const tmp_14 = __w14;
        const tmp_15 = __w15;
        break :blk __v16hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
pub inline fn _mm256_set_epi8(arg___b31: u8, arg___b30: u8, arg___b29: u8, arg___b28: u8, arg___b27: u8, arg___b26: u8, arg___b25: u8, arg___b24: u8, arg___b23: u8, arg___b22: u8, arg___b21: u8, arg___b20: u8, arg___b19: u8, arg___b18: u8, arg___b17: u8, arg___b16: u8, arg___b15: u8, arg___b14: u8, arg___b13: u8, arg___b12: u8, arg___b11: u8, arg___b10: u8, arg___b09: u8, arg___b08: u8, arg___b07: u8, arg___b06: u8, arg___b05: u8, arg___b04: u8, arg___b03: u8, arg___b02: u8, arg___b01: u8, arg___b00: u8) __m256i {
    var __b31 = arg___b31;
    _ = &__b31;
    var __b30 = arg___b30;
    _ = &__b30;
    var __b29 = arg___b29;
    _ = &__b29;
    var __b28 = arg___b28;
    _ = &__b28;
    var __b27 = arg___b27;
    _ = &__b27;
    var __b26 = arg___b26;
    _ = &__b26;
    var __b25 = arg___b25;
    _ = &__b25;
    var __b24 = arg___b24;
    _ = &__b24;
    var __b23 = arg___b23;
    _ = &__b23;
    var __b22 = arg___b22;
    _ = &__b22;
    var __b21 = arg___b21;
    _ = &__b21;
    var __b20 = arg___b20;
    _ = &__b20;
    var __b19 = arg___b19;
    _ = &__b19;
    var __b18 = arg___b18;
    _ = &__b18;
    var __b17 = arg___b17;
    _ = &__b17;
    var __b16 = arg___b16;
    _ = &__b16;
    var __b15 = arg___b15;
    _ = &__b15;
    var __b14 = arg___b14;
    _ = &__b14;
    var __b13 = arg___b13;
    _ = &__b13;
    var __b12 = arg___b12;
    _ = &__b12;
    var __b11 = arg___b11;
    _ = &__b11;
    var __b10 = arg___b10;
    _ = &__b10;
    var __b09 = arg___b09;
    _ = &__b09;
    var __b08 = arg___b08;
    _ = &__b08;
    var __b07 = arg___b07;
    _ = &__b07;
    var __b06 = arg___b06;
    _ = &__b06;
    var __b05 = arg___b05;
    _ = &__b05;
    var __b04 = arg___b04;
    _ = &__b04;
    var __b03 = arg___b03;
    _ = &__b03;
    var __b02 = arg___b02;
    _ = &__b02;
    var __b01 = arg___b01;
    _ = &__b01;
    var __b00 = arg___b00;
    _ = &__b00;
    return @as(__m256i, @bitCast(blk: {
        const tmp = __b00;
        const tmp_1 = __b01;
        const tmp_2 = __b02;
        const tmp_3 = __b03;
        const tmp_4 = __b04;
        const tmp_5 = __b05;
        const tmp_6 = __b06;
        const tmp_7 = __b07;
        const tmp_8 = __b08;
        const tmp_9 = __b09;
        const tmp_10 = __b10;
        const tmp_11 = __b11;
        const tmp_12 = __b12;
        const tmp_13 = __b13;
        const tmp_14 = __b14;
        const tmp_15 = __b15;
        const tmp_16 = __b16;
        const tmp_17 = __b17;
        const tmp_18 = __b18;
        const tmp_19 = __b19;
        const tmp_20 = __b20;
        const tmp_21 = __b21;
        const tmp_22 = __b22;
        const tmp_23 = __b23;
        const tmp_24 = __b24;
        const tmp_25 = __b25;
        const tmp_26 = __b26;
        const tmp_27 = __b27;
        const tmp_28 = __b28;
        const tmp_29 = __b29;
        const tmp_30 = __b30;
        const tmp_31 = __b31;
        break :blk __v32qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
            tmp_16,
            tmp_17,
            tmp_18,
            tmp_19,
            tmp_20,
            tmp_21,
            tmp_22,
            tmp_23,
            tmp_24,
            tmp_25,
            tmp_26,
            tmp_27,
            tmp_28,
            tmp_29,
            tmp_30,
            tmp_31,
        };
    }));
}
pub inline fn _mm256_set_epi64x(arg___a: c_longlong, arg___b: c_longlong, arg___c: c_longlong, arg___d: c_longlong) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    var __c = arg___c;
    _ = &__c;
    var __d = arg___d;
    _ = &__d;
    return @as(__m256i, @bitCast(blk: {
        const tmp = __d;
        const tmp_1 = __c;
        const tmp_2 = __b;
        const tmp_3 = __a;
        break :blk __v4di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm256_setr_pd(arg___a: f64, arg___b: f64, arg___c: f64, arg___d: f64) __m256d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    var __c = arg___c;
    _ = &__c;
    var __d = arg___d;
    _ = &__d;
    return _mm256_set_pd(__d, __c, __b, __a);
}
pub inline fn _mm256_setr_ps(arg___a: f32, arg___b: f32, arg___c: f32, arg___d: f32, arg___e: f32, arg___f: f32, arg___g: f32, arg___h: f32) __m256 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    var __c = arg___c;
    _ = &__c;
    var __d = arg___d;
    _ = &__d;
    var __e = arg___e;
    _ = &__e;
    var __f = arg___f;
    _ = &__f;
    var __g = arg___g;
    _ = &__g;
    var __h = arg___h;
    _ = &__h;
    return _mm256_set_ps(__h, __g, __f, __e, __d, __c, __b, __a);
}
pub inline fn _mm256_setr_epi32(arg___i0: c_int, arg___i1: c_int, arg___i2: c_int, arg___i3: c_int, arg___i4: c_int, arg___i5: c_int, arg___i6: c_int, arg___i7: c_int) __m256i {
    var __i0 = arg___i0;
    _ = &__i0;
    var __i1 = arg___i1;
    _ = &__i1;
    var __i2 = arg___i2;
    _ = &__i2;
    var __i3 = arg___i3;
    _ = &__i3;
    var __i4 = arg___i4;
    _ = &__i4;
    var __i5 = arg___i5;
    _ = &__i5;
    var __i6 = arg___i6;
    _ = &__i6;
    var __i7 = arg___i7;
    _ = &__i7;
    return _mm256_set_epi32(__i7, __i6, __i5, __i4, __i3, __i2, __i1, __i0);
}
pub inline fn _mm256_setr_epi16(arg___w15: c_short, arg___w14: c_short, arg___w13: c_short, arg___w12: c_short, arg___w11: c_short, arg___w10: c_short, arg___w09: c_short, arg___w08: c_short, arg___w07: c_short, arg___w06: c_short, arg___w05: c_short, arg___w04: c_short, arg___w03: c_short, arg___w02: c_short, arg___w01: c_short, arg___w00: c_short) __m256i {
    var __w15 = arg___w15;
    _ = &__w15;
    var __w14 = arg___w14;
    _ = &__w14;
    var __w13 = arg___w13;
    _ = &__w13;
    var __w12 = arg___w12;
    _ = &__w12;
    var __w11 = arg___w11;
    _ = &__w11;
    var __w10 = arg___w10;
    _ = &__w10;
    var __w09 = arg___w09;
    _ = &__w09;
    var __w08 = arg___w08;
    _ = &__w08;
    var __w07 = arg___w07;
    _ = &__w07;
    var __w06 = arg___w06;
    _ = &__w06;
    var __w05 = arg___w05;
    _ = &__w05;
    var __w04 = arg___w04;
    _ = &__w04;
    var __w03 = arg___w03;
    _ = &__w03;
    var __w02 = arg___w02;
    _ = &__w02;
    var __w01 = arg___w01;
    _ = &__w01;
    var __w00 = arg___w00;
    _ = &__w00;
    return _mm256_set_epi16(__w00, __w01, __w02, __w03, __w04, __w05, __w06, __w07, __w08, __w09, __w10, __w11, __w12, __w13, __w14, __w15);
}
pub inline fn _mm256_setr_epi8(arg___b31: u8, arg___b30: u8, arg___b29: u8, arg___b28: u8, arg___b27: u8, arg___b26: u8, arg___b25: u8, arg___b24: u8, arg___b23: u8, arg___b22: u8, arg___b21: u8, arg___b20: u8, arg___b19: u8, arg___b18: u8, arg___b17: u8, arg___b16: u8, arg___b15: u8, arg___b14: u8, arg___b13: u8, arg___b12: u8, arg___b11: u8, arg___b10: u8, arg___b09: u8, arg___b08: u8, arg___b07: u8, arg___b06: u8, arg___b05: u8, arg___b04: u8, arg___b03: u8, arg___b02: u8, arg___b01: u8, arg___b00: u8) __m256i {
    var __b31 = arg___b31;
    _ = &__b31;
    var __b30 = arg___b30;
    _ = &__b30;
    var __b29 = arg___b29;
    _ = &__b29;
    var __b28 = arg___b28;
    _ = &__b28;
    var __b27 = arg___b27;
    _ = &__b27;
    var __b26 = arg___b26;
    _ = &__b26;
    var __b25 = arg___b25;
    _ = &__b25;
    var __b24 = arg___b24;
    _ = &__b24;
    var __b23 = arg___b23;
    _ = &__b23;
    var __b22 = arg___b22;
    _ = &__b22;
    var __b21 = arg___b21;
    _ = &__b21;
    var __b20 = arg___b20;
    _ = &__b20;
    var __b19 = arg___b19;
    _ = &__b19;
    var __b18 = arg___b18;
    _ = &__b18;
    var __b17 = arg___b17;
    _ = &__b17;
    var __b16 = arg___b16;
    _ = &__b16;
    var __b15 = arg___b15;
    _ = &__b15;
    var __b14 = arg___b14;
    _ = &__b14;
    var __b13 = arg___b13;
    _ = &__b13;
    var __b12 = arg___b12;
    _ = &__b12;
    var __b11 = arg___b11;
    _ = &__b11;
    var __b10 = arg___b10;
    _ = &__b10;
    var __b09 = arg___b09;
    _ = &__b09;
    var __b08 = arg___b08;
    _ = &__b08;
    var __b07 = arg___b07;
    _ = &__b07;
    var __b06 = arg___b06;
    _ = &__b06;
    var __b05 = arg___b05;
    _ = &__b05;
    var __b04 = arg___b04;
    _ = &__b04;
    var __b03 = arg___b03;
    _ = &__b03;
    var __b02 = arg___b02;
    _ = &__b02;
    var __b01 = arg___b01;
    _ = &__b01;
    var __b00 = arg___b00;
    _ = &__b00;
    return _mm256_set_epi8(__b00, __b01, __b02, __b03, __b04, __b05, __b06, __b07, __b08, __b09, __b10, __b11, __b12, __b13, __b14, __b15, __b16, __b17, __b18, __b19, __b20, __b21, __b22, __b23, __b24, __b25, __b26, __b27, __b28, __b29, __b30, __b31);
}
pub inline fn _mm256_setr_epi64x(arg___a: c_longlong, arg___b: c_longlong, arg___c: c_longlong, arg___d: c_longlong) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    var __c = arg___c;
    _ = &__c;
    var __d = arg___d;
    _ = &__d;
    return _mm256_set_epi64x(__d, __c, __b, __a);
}
pub inline fn _mm256_set1_pd(arg___w: f64) __m256d {
    var __w = arg___w;
    _ = &__w;
    return _mm256_set_pd(__w, __w, __w, __w);
}
pub inline fn _mm256_set1_ps(arg___w: f32) __m256 {
    var __w = arg___w;
    _ = &__w;
    return _mm256_set_ps(__w, __w, __w, __w, __w, __w, __w, __w);
}
pub inline fn _mm256_set1_epi32(arg___i: c_int) __m256i {
    var __i = arg___i;
    _ = &__i;
    return _mm256_set_epi32(__i, __i, __i, __i, __i, __i, __i, __i);
}
pub inline fn _mm256_set1_epi16(arg___w: c_short) __m256i {
    var __w = arg___w;
    _ = &__w;
    return _mm256_set_epi16(__w, __w, __w, __w, __w, __w, __w, __w, __w, __w, __w, __w, __w, __w, __w, __w);
}
pub inline fn _mm256_set1_epi8(arg___b: u8) __m256i {
    var __b = arg___b;
    _ = &__b;
    return _mm256_set_epi8(__b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b);
}
pub inline fn _mm256_set1_epi64x(arg___q: c_longlong) __m256i {
    var __q = arg___q;
    _ = &__q;
    return _mm256_set_epi64x(__q, __q, __q, __q);
}
pub inline fn _mm256_setzero_pd() __m256d {
    return blk: {
        const tmp = 0.0;
        const tmp_1 = 0.0;
        const tmp_2 = 0.0;
        const tmp_3 = 0.0;
        break :blk __m256d{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    };
}
pub inline fn _mm256_setzero_ps() __m256 {
    return blk: {
        const tmp = 0.0;
        const tmp_1 = 0.0;
        const tmp_2 = 0.0;
        const tmp_3 = 0.0;
        const tmp_4 = 0.0;
        const tmp_5 = 0.0;
        const tmp_6 = 0.0;
        const tmp_7 = 0.0;
        break :blk __m256{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    };
}
pub inline fn _mm256_setzero_si256() __m256i {
    return @as(__m256i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_longlong, @as(c_int, 0))));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_longlong, @as(c_int, 0))));
        const tmp_2 = @as(c_longlong, @bitCast(@as(c_longlong, @as(c_int, 0))));
        const tmp_3 = @as(c_longlong, @bitCast(@as(c_longlong, @as(c_int, 0))));
        break :blk __v4di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm256_castpd_ps(arg___a: __m256d) __m256 {
    var __a = arg___a;
    _ = &__a;
    return @as(__m256, @bitCast(__a));
}
pub inline fn _mm256_castpd_si256(arg___a: __m256d) __m256i {
    var __a = arg___a;
    _ = &__a;
    return @as(__m256i, @bitCast(__a));
}
pub inline fn _mm256_castps_pd(arg___a: __m256) __m256d {
    var __a = arg___a;
    _ = &__a;
    return @as(__m256d, @bitCast(__a));
}
pub inline fn _mm256_castps_si256(arg___a: __m256) __m256i {
    var __a = arg___a;
    _ = &__a;
    return @as(__m256i, @bitCast(__a));
}
pub inline fn _mm256_castsi256_ps(arg___a: __m256i) __m256 {
    var __a = arg___a;
    _ = &__a;
    return @as(__m256, @bitCast(__a));
}
pub inline fn _mm256_castsi256_pd(arg___a: __m256i) __m256d {
    var __a = arg___a;
    _ = &__a;
    return @as(__m256d, @bitCast(__a));
}
pub inline fn _mm256_castpd256_pd128(arg___a: __m256d) __m128d {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.child, @as(__v4df, @bitCast(__a)), @as(__v4df, @bitCast(__a)), @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm256_castps256_ps128(arg___a: __m256) __m128 {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.child, @as(__v8sf, @bitCast(__a)), @as(__v8sf, @bitCast(__a)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm256_castsi256_si128(arg___a: __m256i) __m128i {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.child, @as(__v4di, @bitCast(__a)), @as(__v4di, @bitCast(__a)), @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
    });
}
// /usr/lib/zig/include/avxintrin.h:4516:28: warning: TODO implement function '__builtin_nondeterministic_value' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:4513:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_castpd128_pd256(arg___a: __m128d) __m256d;
// /usr/lib/zig/include/avxintrin.h:4538:42: warning: TODO implement function '__builtin_nondeterministic_value' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:4535:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_castps128_ps256(arg___a: __m128) __m256;
// /usr/lib/zig/include/avxintrin.h:4559:28: warning: TODO implement function '__builtin_nondeterministic_value' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:4556:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_castsi128_si256(arg___a: __m128i) __m256i;
pub inline fn _mm256_zextpd128_pd256(arg___a: __m128d) __m256d {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.child, @as(__v2df, @bitCast(__a)), @as(__v2df, @bitCast(_mm_setzero_pd())), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm256_zextps128_ps256(arg___a: __m128) __m256 {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.child, @as(__v4sf, @bitCast(__a)), @as(__v4sf, @bitCast(_mm_setzero_ps())), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm256_zextsi128_si256(arg___a: __m128i) __m256i {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.child, @as(__v2di, @bitCast(__a)), @as(__v2di, @bitCast(_mm_setzero_si128())), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm256_set_m128(arg___hi: __m128, arg___lo: __m128) __m256 {
    var __hi = arg___hi;
    _ = &__hi;
    var __lo = arg___lo;
    _ = &__lo;
    return @as(__m256, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__lo)))).Vector.child, @as(__v4sf, @bitCast(__lo)), @as(__v4sf, @bitCast(__hi)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__lo)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__lo)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__lo)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__lo)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__lo)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__lo)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__lo)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__lo)))).Vector.len),
    })));
}
pub inline fn _mm256_set_m128d(arg___hi: __m128d, arg___lo: __m128d) __m256d {
    var __hi = arg___hi;
    _ = &__hi;
    var __lo = arg___lo;
    _ = &__lo;
    return @as(__m256d, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v2df, @bitCast(__lo)))).Vector.child, @as(__v2df, @bitCast(__lo)), @as(__v2df, @bitCast(__hi)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__lo)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__lo)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__lo)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__lo)))).Vector.len),
    })));
}
pub inline fn _mm256_set_m128i(arg___hi: __m128i, arg___lo: __m128i) __m256i {
    var __hi = arg___hi;
    _ = &__hi;
    var __lo = arg___lo;
    _ = &__lo;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v2di, @bitCast(__lo)))).Vector.child, @as(__v2di, @bitCast(__lo)), @as(__v2di, @bitCast(__hi)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__lo)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__lo)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__lo)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__lo)))).Vector.len),
    })));
}
pub inline fn _mm256_setr_m128(arg___lo: __m128, arg___hi: __m128) __m256 {
    var __lo = arg___lo;
    _ = &__lo;
    var __hi = arg___hi;
    _ = &__hi;
    return _mm256_set_m128(__hi, __lo);
}
pub inline fn _mm256_setr_m128d(arg___lo: __m128d, arg___hi: __m128d) __m256d {
    var __lo = arg___lo;
    _ = &__lo;
    var __hi = arg___hi;
    _ = &__hi;
    return _mm256_set_m128d(__hi, __lo);
}
pub inline fn _mm256_setr_m128i(arg___lo: __m128i, arg___hi: __m128i) __m256i {
    var __lo = arg___lo;
    _ = &__lo;
    var __hi = arg___hi;
    _ = &__hi;
    return _mm256_set_m128i(__hi, __lo);
}
pub inline fn _mm256_loadu2_m128(arg___addr_hi: [*c]const f32, arg___addr_lo: [*c]const f32) __m256 {
    var __addr_hi = arg___addr_hi;
    _ = &__addr_hi;
    var __addr_lo = arg___addr_lo;
    _ = &__addr_lo;
    return _mm256_set_m128(_mm_loadu_ps(__addr_hi), _mm_loadu_ps(__addr_lo));
}
pub inline fn _mm256_loadu2_m128d(arg___addr_hi: [*c]const f64, arg___addr_lo: [*c]const f64) __m256d {
    var __addr_hi = arg___addr_hi;
    _ = &__addr_hi;
    var __addr_lo = arg___addr_lo;
    _ = &__addr_lo;
    return _mm256_set_m128d(_mm_loadu_pd(__addr_hi), _mm_loadu_pd(__addr_lo));
}
pub inline fn _mm256_loadu2_m128i(arg___addr_hi: [*c]const __m128i_u, arg___addr_lo: [*c]const __m128i_u) __m256i {
    var __addr_hi = arg___addr_hi;
    _ = &__addr_hi;
    var __addr_lo = arg___addr_lo;
    _ = &__addr_lo;
    return _mm256_set_m128i(_mm_loadu_si128(__addr_hi), _mm_loadu_si128(__addr_lo));
}
// /usr/lib/zig/include/avxintrin.h:4763:12: warning: TODO implement function '__builtin_ia32_vextractf128_ps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:5041:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_storeu2_m128(arg___addr_hi: [*c]f32, arg___addr_lo: [*c]f32, arg___a: __m256) void;
// /usr/lib/zig/include/avxintrin.h:4787:13: warning: TODO implement function '__builtin_ia32_vextractf128_pd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:5070:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_storeu2_m128d(arg___addr_hi: [*c]f64, arg___addr_lo: [*c]f64, arg___a: __m256d) void;
// /usr/lib/zig/include/avxintrin.h:4811:13: warning: TODO implement function '__builtin_ia32_vextractf128_si256' in std.zig.c_builtins

// /usr/lib/zig/include/avxintrin.h:5099:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_storeu2_m128i(arg___addr_hi: [*c]__m128i_u, arg___addr_lo: [*c]__m128i_u, arg___a: __m256i) void;
// /usr/lib/zig/include/avx2intrin.h:101:21: warning: TODO implement function '__builtin_elementwise_abs' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:99:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_abs_epi8(arg___a: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:118:21: warning: TODO implement function '__builtin_elementwise_abs' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:116:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_abs_epi16(arg___a: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:135:21: warning: TODO implement function '__builtin_elementwise_abs' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:133:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_abs_epi32(arg___a: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:166:19: warning: TODO implement function '__builtin_ia32_packsswb256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:164:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_packs_epi16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:198:19: warning: TODO implement function '__builtin_ia32_packssdw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:196:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_packs_epi32(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:229:19: warning: TODO implement function '__builtin_ia32_packuswb256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:227:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_packus_epi16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:261:20: warning: TODO implement function '__builtin_ia32_packusdw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:259:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_packus_epi32(arg___V1: __m256i, arg___V2: __m256i) __m256i;
pub inline fn _mm256_add_epi8(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v32qu, @bitCast(__a)) + @as(__v32qu, @bitCast(__b))));
}
pub inline fn _mm256_add_epi16(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v16hu, @bitCast(__a)) + @as(__v16hu, @bitCast(__b))));
}
pub inline fn _mm256_add_epi32(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v8su, @bitCast(__a)) + @as(__v8su, @bitCast(__b))));
}
pub inline fn _mm256_add_epi64(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v4du, @bitCast(__a)) + @as(__v4du, @bitCast(__b))));
}
// /usr/lib/zig/include/avx2intrin.h:356:19: warning: TODO implement function '__builtin_elementwise_add_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:354:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_adds_epi8(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:374:19: warning: TODO implement function '__builtin_elementwise_add_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:372:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_adds_epi16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:393:19: warning: TODO implement function '__builtin_elementwise_add_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:391:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_adds_epu8(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:411:19: warning: TODO implement function '__builtin_elementwise_add_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:409:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_adds_epu16(arg___a: __m256i, arg___b: __m256i) __m256i;
pub inline fn _mm256_and_si256(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v4du, @bitCast(__a)) & @as(__v4du, @bitCast(__b))));
}
pub inline fn _mm256_andnot_si256(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(~@as(__v4du, @bitCast(__a)) & @as(__v4du, @bitCast(__b))));
}
// /usr/lib/zig/include/avx2intrin.h:501:19: warning: TODO implement function '__builtin_ia32_pavgb256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:499:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_avg_epu8(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:527:19: warning: TODO implement function '__builtin_ia32_pavgw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:525:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_avg_epu16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:562:19: warning: TODO implement function '__builtin_ia32_pblendvb256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:560:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_blendv_epi8(arg___V1: __m256i, arg___V2: __m256i, arg___M: __m256i) __m256i;
pub inline fn _mm256_cmpeq_epi8(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v32qi, @bitCast(__a)) == @as(__v32qi, @bitCast(__b))));
}
pub inline fn _mm256_cmpeq_epi16(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v16hi, @bitCast(__a)) == @as(__v16hi, @bitCast(__b))));
}
pub inline fn _mm256_cmpeq_epi32(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v8si, @bitCast(__a)) == @as(__v8si, @bitCast(__b))));
}
pub inline fn _mm256_cmpeq_epi64(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v4di, @bitCast(__a)) == @as(__v4di, @bitCast(__b))));
}
pub inline fn _mm256_cmpgt_epi8(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v32qs, @bitCast(__a)) > @as(__v32qs, @bitCast(__b))));
}
pub inline fn _mm256_cmpgt_epi16(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v16hi, @bitCast(__a)) > @as(__v16hi, @bitCast(__b))));
}
pub inline fn _mm256_cmpgt_epi32(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v8si, @bitCast(__a)) > @as(__v8si, @bitCast(__b))));
}
pub inline fn _mm256_cmpgt_epi64(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v4di, @bitCast(__a)) > @as(__v4di, @bitCast(__b))));
}
// /usr/lib/zig/include/avx2intrin.h:850:21: warning: TODO implement function '__builtin_ia32_phaddw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:848:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_hadd_epi16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:882:21: warning: TODO implement function '__builtin_ia32_phaddd256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:880:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_hadd_epi32(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:917:21: warning: TODO implement function '__builtin_ia32_phaddsw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:915:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_hadds_epi16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:953:21: warning: TODO implement function '__builtin_ia32_phsubw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:951:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_hsub_epi16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:985:21: warning: TODO implement function '__builtin_ia32_phsubd256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:983:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_hsub_epi32(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1021:21: warning: TODO implement function '__builtin_ia32_phsubsw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1019:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_hsubs_epi16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1051:21: warning: TODO implement function '__builtin_ia32_pmaddubsw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1049:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maddubs_epi16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1083:19: warning: TODO implement function '__builtin_ia32_pmaddwd256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1081:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_madd_epi16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1102:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1100:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_max_epi8(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1121:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1119:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_max_epi16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1140:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1138:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_max_epi32(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1159:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1157:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_max_epu8(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1178:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1176:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_max_epu16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1197:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1195:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_max_epu32(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1216:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1214:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_min_epi8(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1235:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1233:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_min_epi16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1254:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1252:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_min_epi32(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1273:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1271:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_min_epu8(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1292:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1290:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_min_epu16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1311:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1309:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_min_epu32(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1334:10: warning: TODO implement function '__builtin_ia32_pmovmskb256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1332:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_movemask_epi8(arg___a: __m256i) c_int;
pub inline fn _mm256_cvtepi8_epi16(arg___V: __m128i) __m256i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m256i, @bitCast(blk: {
        const tmp = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[0])));
        const tmp_1 = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[1])));
        const tmp_2 = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[2])));
        const tmp_3 = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[3])));
        const tmp_4 = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[4])));
        const tmp_5 = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[5])));
        const tmp_6 = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[6])));
        const tmp_7 = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[7])));
        const tmp_8 = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[8])));
        const tmp_9 = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[9])));
        const tmp_10 = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[10])));
        const tmp_11 = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[11])));
        const tmp_12 = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[12])));
        const tmp_13 = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[13])));
        const tmp_14 = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[14])));
        const tmp_15 = @as(c_short, @bitCast(@as(c_short, @as(__v16qs, @bitCast(__V))[15])));
        break :blk __v16hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
pub inline fn _mm256_cvtepi8_epi32(arg___V: __m128i) __m256i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m256i, @bitCast(blk: {
        const tmp = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[1])));
        const tmp_2 = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[2])));
        const tmp_3 = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[3])));
        const tmp_4 = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[4])));
        const tmp_5 = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[5])));
        const tmp_6 = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[6])));
        const tmp_7 = @as(c_int, @bitCast(@as(c_int, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[7])));
        break :blk __v8si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
pub inline fn _mm256_cvtepi8_epi64(arg___V: __m128i) __m256i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m256i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[1])));
        const tmp_2 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[2])));
        const tmp_3 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.child, @as(__v16qs, @bitCast(__V)), @as(__v16qs, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__V)))).Vector.len),
        })[3])));
        break :blk __v4di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm256_cvtepi16_epi32(arg___V: __m128i) __m256i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m256i, @bitCast(blk: {
        const tmp = @as(c_int, @bitCast(@as(c_int, @as(__v8hi, @bitCast(__V))[0])));
        const tmp_1 = @as(c_int, @bitCast(@as(c_int, @as(__v8hi, @bitCast(__V))[1])));
        const tmp_2 = @as(c_int, @bitCast(@as(c_int, @as(__v8hi, @bitCast(__V))[2])));
        const tmp_3 = @as(c_int, @bitCast(@as(c_int, @as(__v8hi, @bitCast(__V))[3])));
        const tmp_4 = @as(c_int, @bitCast(@as(c_int, @as(__v8hi, @bitCast(__V))[4])));
        const tmp_5 = @as(c_int, @bitCast(@as(c_int, @as(__v8hi, @bitCast(__V))[5])));
        const tmp_6 = @as(c_int, @bitCast(@as(c_int, @as(__v8hi, @bitCast(__V))[6])));
        const tmp_7 = @as(c_int, @bitCast(@as(c_int, @as(__v8hi, @bitCast(__V))[7])));
        break :blk __v8si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
pub inline fn _mm256_cvtepi16_epi64(arg___V: __m128i) __m256i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m256i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.child, @as(__v8hi, @bitCast(__V)), @as(__v8hi, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.child, @as(__v8hi, @bitCast(__V)), @as(__v8hi, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
        })[1])));
        const tmp_2 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.child, @as(__v8hi, @bitCast(__V)), @as(__v8hi, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
        })[2])));
        const tmp_3 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.child, @as(__v8hi, @bitCast(__V)), @as(__v8hi, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__V)))).Vector.len),
        })[3])));
        break :blk __v4di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm256_cvtepi32_epi64(arg___V: __m128i) __m256i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m256i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v4si, @bitCast(__V))[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v4si, @bitCast(__V))[1])));
        const tmp_2 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v4si, @bitCast(__V))[2])));
        const tmp_3 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v4si, @bitCast(__V))[3])));
        break :blk __v4di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm256_cvtepu8_epi16(arg___V: __m128i) __m256i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m256i, @bitCast(blk: {
        const tmp = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[0])));
        const tmp_1 = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[1])));
        const tmp_2 = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[2])));
        const tmp_3 = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[3])));
        const tmp_4 = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[4])));
        const tmp_5 = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[5])));
        const tmp_6 = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[6])));
        const tmp_7 = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[7])));
        const tmp_8 = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[8])));
        const tmp_9 = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[9])));
        const tmp_10 = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[10])));
        const tmp_11 = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[11])));
        const tmp_12 = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[12])));
        const tmp_13 = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[13])));
        const tmp_14 = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[14])));
        const tmp_15 = @as(c_short, @bitCast(@as(c_ushort, @as(__v16qu, @bitCast(__V))[15])));
        break :blk __v16hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
pub inline fn _mm256_cvtepu8_epi32(arg___V: __m128i) __m256i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m256i, @bitCast(blk: {
        const tmp = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[1])));
        const tmp_2 = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[2])));
        const tmp_3 = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[3])));
        const tmp_4 = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[4])));
        const tmp_5 = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[5])));
        const tmp_6 = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[6])));
        const tmp_7 = @as(c_int, @bitCast(@as(c_uint, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[7])));
        break :blk __v8si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
pub inline fn _mm256_cvtepu8_epi64(arg___V: __m128i) __m256i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m256i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[1])));
        const tmp_2 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[2])));
        const tmp_3 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.child, @as(__v16qu, @bitCast(__V)), @as(__v16qu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__V)))).Vector.len),
        })[3])));
        break :blk __v4di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm256_cvtepu16_epi32(arg___V: __m128i) __m256i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m256i, @bitCast(blk: {
        const tmp = @as(c_int, @bitCast(@as(c_uint, @as(__v8hu, @bitCast(__V))[0])));
        const tmp_1 = @as(c_int, @bitCast(@as(c_uint, @as(__v8hu, @bitCast(__V))[1])));
        const tmp_2 = @as(c_int, @bitCast(@as(c_uint, @as(__v8hu, @bitCast(__V))[2])));
        const tmp_3 = @as(c_int, @bitCast(@as(c_uint, @as(__v8hu, @bitCast(__V))[3])));
        const tmp_4 = @as(c_int, @bitCast(@as(c_uint, @as(__v8hu, @bitCast(__V))[4])));
        const tmp_5 = @as(c_int, @bitCast(@as(c_uint, @as(__v8hu, @bitCast(__V))[5])));
        const tmp_6 = @as(c_int, @bitCast(@as(c_uint, @as(__v8hu, @bitCast(__V))[6])));
        const tmp_7 = @as(c_int, @bitCast(@as(c_uint, @as(__v8hu, @bitCast(__V))[7])));
        break :blk __v8si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
pub inline fn _mm256_cvtepu16_epi64(arg___V: __m128i) __m256i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m256i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.child, @as(__v8hu, @bitCast(__V)), @as(__v8hu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.child, @as(__v8hu, @bitCast(__V)), @as(__v8hu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
        })[1])));
        const tmp_2 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.child, @as(__v8hu, @bitCast(__V)), @as(__v8hu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
        })[2])));
        const tmp_3 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.child, @as(__v8hu, @bitCast(__V)), @as(__v8hu, @bitCast(__V)), @Vector(4, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8hu, @bitCast(__V)))).Vector.len),
        })[3])));
        break :blk __v4di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
pub inline fn _mm256_cvtepu32_epi64(arg___V: __m128i) __m256i {
    var __V = arg___V;
    _ = &__V;
    return @as(__m256i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v4su, @bitCast(__V))[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v4su, @bitCast(__V))[1])));
        const tmp_2 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v4su, @bitCast(__V))[2])));
        const tmp_3 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v4su, @bitCast(__V))[3])));
        break :blk __v4di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
// /usr/lib/zig/include/avx2intrin.h:1672:19: warning: TODO implement function '__builtin_ia32_pmuldq256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1670:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mul_epi32(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1699:19: warning: TODO implement function '__builtin_ia32_pmulhrsw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1697:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mulhrs_epi16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1718:19: warning: TODO implement function '__builtin_ia32_pmulhuw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1716:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mulhi_epu16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1737:19: warning: TODO implement function '__builtin_ia32_pmulhw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1735:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mulhi_epi16(arg___a: __m256i, arg___b: __m256i) __m256i;
pub inline fn _mm256_mullo_epi16(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v16hu, @bitCast(__a)) * @as(__v16hu, @bitCast(__b))));
}
pub inline fn _mm256_mullo_epi32(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v8su, @bitCast(__a)) * @as(__v8su, @bitCast(__b))));
}
// /usr/lib/zig/include/avx2intrin.h:1801:10: warning: TODO implement function '__builtin_ia32_pmuludq256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1799:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mul_epu32(arg___a: __m256i, arg___b: __m256i) __m256i;
pub inline fn _mm256_or_si256(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v4du, @bitCast(__a)) | @as(__v4du, @bitCast(__b))));
}
// /usr/lib/zig/include/avx2intrin.h:1864:10: warning: TODO implement function '__builtin_ia32_psadbw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1862:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sad_epu8(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:1903:19: warning: TODO implement function '__builtin_ia32_pshufb256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:1901:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_shuffle_epi8(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2030:21: warning: TODO implement function '__builtin_ia32_psignb256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2028:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sign_epi8(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2051:21: warning: TODO implement function '__builtin_ia32_psignw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2049:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sign_epi16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2072:21: warning: TODO implement function '__builtin_ia32_psignd256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2070:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sign_epi32(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2131:19: warning: TODO implement function '__builtin_ia32_psllwi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2129:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_slli_epi16(arg___a: __m256i, arg___count: c_int) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2152:19: warning: TODO implement function '__builtin_ia32_psllw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2150:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sll_epi16(arg___a: __m256i, arg___count: __m128i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2171:19: warning: TODO implement function '__builtin_ia32_pslldi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2169:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_slli_epi32(arg___a: __m256i, arg___count: c_int) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2192:19: warning: TODO implement function '__builtin_ia32_pslld256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2190:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sll_epi32(arg___a: __m256i, arg___count: __m128i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2211:10: warning: TODO implement function '__builtin_ia32_psllqi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2209:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_slli_epi64(arg___a: __m256i, arg___count: c_int) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2232:10: warning: TODO implement function '__builtin_ia32_psllq256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2230:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sll_epi64(arg___a: __m256i, arg___count: __m128i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2252:19: warning: TODO implement function '__builtin_ia32_psrawi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2250:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_srai_epi16(arg___a: __m256i, arg___count: c_int) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2274:19: warning: TODO implement function '__builtin_ia32_psraw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2272:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sra_epi16(arg___a: __m256i, arg___count: __m128i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2294:19: warning: TODO implement function '__builtin_ia32_psradi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2292:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_srai_epi32(arg___a: __m256i, arg___count: c_int) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2316:19: warning: TODO implement function '__builtin_ia32_psrad256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2314:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sra_epi32(arg___a: __m256i, arg___count: __m128i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2375:19: warning: TODO implement function '__builtin_ia32_psrlwi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2373:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_srli_epi16(arg___a: __m256i, arg___count: c_int) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2396:19: warning: TODO implement function '__builtin_ia32_psrlw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2394:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_srl_epi16(arg___a: __m256i, arg___count: __m128i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2415:19: warning: TODO implement function '__builtin_ia32_psrldi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2413:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_srli_epi32(arg___a: __m256i, arg___count: c_int) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2436:19: warning: TODO implement function '__builtin_ia32_psrld256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2434:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_srl_epi32(arg___a: __m256i, arg___count: __m128i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2455:10: warning: TODO implement function '__builtin_ia32_psrlqi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2453:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_srli_epi64(arg___a: __m256i, arg___count: c_int) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2476:10: warning: TODO implement function '__builtin_ia32_psrlq256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2474:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_srl_epi64(arg___a: __m256i, arg___count: __m128i) __m256i;
pub inline fn _mm256_sub_epi8(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v32qu, @bitCast(__a)) - @as(__v32qu, @bitCast(__b))));
}
pub inline fn _mm256_sub_epi16(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v16hu, @bitCast(__a)) - @as(__v16hu, @bitCast(__b))));
}
pub inline fn _mm256_sub_epi32(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v8su, @bitCast(__a)) - @as(__v8su, @bitCast(__b))));
}
pub inline fn _mm256_sub_epi64(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v4du, @bitCast(__a)) - @as(__v4du, @bitCast(__b))));
}
// /usr/lib/zig/include/avx2intrin.h:2608:19: warning: TODO implement function '__builtin_elementwise_sub_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2606:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_subs_epi8(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2634:19: warning: TODO implement function '__builtin_elementwise_sub_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2632:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_subs_epi16(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2661:19: warning: TODO implement function '__builtin_elementwise_sub_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2659:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_subs_epu8(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:2687:19: warning: TODO implement function '__builtin_elementwise_sub_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2685:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_subs_epu16(arg___a: __m256i, arg___b: __m256i) __m256i;
pub inline fn _mm256_unpackhi_epi8(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.child, @as(__v32qi, @bitCast(__a)), @as(__v32qi, @bitCast(__b)), @Vector(32, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 9), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 10), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 11), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 13), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 14), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 15), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(24, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 24), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(25, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 25), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(26, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 26), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(27, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 27), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(28, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 28), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(29, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 29), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(30, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 30), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(31, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 31), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm256_unpackhi_epi16(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.child, @as(__v16hi, @bitCast(__a)), @as(__v16hi, @bitCast(__b)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 5), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 6), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 7), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 13), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 14), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 15), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm256_unpackhi_epi32(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.child, @as(__v8si, @bitCast(__a)), @as(__v8si, @bitCast(__b)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 3), @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 6), @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 7), @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm256_unpackhi_epi64(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.child, @as(__v4di, @bitCast(__a)), @as(__v4di, @bitCast(__b)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 4) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 4) + @as(c_int, 3), @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm256_unpacklo_epi8(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.child, @as(__v32qi, @bitCast(__a)), @as(__v32qi, @bitCast(__b)), @Vector(32, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 0), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 3), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 5), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 6), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 7), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(16, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 16), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(17, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 17), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(18, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 18), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(19, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 19), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(20, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 20), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(21, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 21), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(22, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 22), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(23, @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 23), @typeInfo(@TypeOf(@as(__v32qi, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm256_unpacklo_epi16(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.child, @as(__v16hi, @bitCast(__a)), @as(__v16hi, @bitCast(__b)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 0), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 3), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 9), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 10), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 11), @typeInfo(@TypeOf(@as(__v16hi, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm256_unpacklo_epi32(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.child, @as(__v8si, @bitCast(__a)), @as(__v8si, @bitCast(__b)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 0), @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 5), @typeInfo(@TypeOf(@as(__v8si, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm256_unpacklo_epi64(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.child, @as(__v4di, @bitCast(__a)), @as(__v4di, @bitCast(__b)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 4) + @as(c_int, 0), @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 4) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
    })));
}
pub inline fn _mm256_xor_si256(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v4du, @bitCast(__a)) ^ @as(__v4du, @bitCast(__b))));
}
// /usr/lib/zig/include/avx2intrin.h:2989:19: warning: TODO implement function '__builtin_nontemporal_load' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:2986:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_stream_load_si256(arg___V: ?*const anyopaque) __m256i;
pub inline fn _mm_broadcastss_ps(arg___X: __m128) __m128 {
    var __X = arg___X;
    _ = &__X;
    return @as(__m128, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__X)))).Vector.child, @as(__v4sf, @bitCast(__X)), @as(__v4sf, @bitCast(__X)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__X)))).Vector.len),
    })));
}
pub inline fn _mm_broadcastsd_pd(arg___a: __m128d) __m128d {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.child, @as(__v2df, @bitCast(__a)), @as(__v2df, @bitCast(__a)), @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm256_broadcastss_ps(arg___X: __m128) __m256 {
    var __X = arg___X;
    _ = &__X;
    return @as(__m256, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__X)))).Vector.child, @as(__v4sf, @bitCast(__X)), @as(__v4sf, @bitCast(__X)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__X)))).Vector.len),
    })));
}
pub inline fn _mm256_broadcastsd_pd(arg___X: __m128d) __m256d {
    var __X = arg___X;
    _ = &__X;
    return @as(__m256d, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v2df, @bitCast(__X)))).Vector.child, @as(__v2df, @bitCast(__X)), @as(__v2df, @bitCast(__X)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__X)))).Vector.len),
    })));
}
pub inline fn _mm256_broadcastsi128_si256(arg___X: __m128i) __m256i {
    var __X = arg___X;
    _ = &__X;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v2di, @bitCast(__X)))).Vector.child, @as(__v2di, @bitCast(__X)), @as(__v2di, @bitCast(__X)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__X)))).Vector.len),
    })));
}
pub inline fn _mm256_broadcastb_epi8(arg___X: __m128i) __m256i {
    var __X = arg___X;
    _ = &__X;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.child, @as(__v16qi, @bitCast(__X)), @as(__v16qi, @bitCast(__X)), @Vector(32, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
    })));
}
pub inline fn _mm256_broadcastw_epi16(arg___X: __m128i) __m256i {
    var __X = arg___X;
    _ = &__X;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.child, @as(__v8hi, @bitCast(__X)), @as(__v8hi, @bitCast(__X)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
    })));
}
pub inline fn _mm256_broadcastd_epi32(arg___X: __m128i) __m256i {
    var __X = arg___X;
    _ = &__X;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4si, @bitCast(__X)))).Vector.child, @as(__v4si, @bitCast(__X)), @as(__v4si, @bitCast(__X)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__X)))).Vector.len),
    })));
}
pub inline fn _mm256_broadcastq_epi64(arg___X: __m128i) __m256i {
    var __X = arg___X;
    _ = &__X;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v2di, @bitCast(__X)))).Vector.child, @as(__v2di, @bitCast(__X)), @as(__v2di, @bitCast(__X)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__X)))).Vector.len),
    })));
}
pub inline fn _mm_broadcastb_epi8(arg___X: __m128i) __m128i {
    var __X = arg___X;
    _ = &__X;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.child, @as(__v16qi, @bitCast(__X)), @as(__v16qi, @bitCast(__X)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__X)))).Vector.len),
    })));
}
pub inline fn _mm_broadcastw_epi16(arg___X: __m128i) __m128i {
    var __X = arg___X;
    _ = &__X;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.child, @as(__v8hi, @bitCast(__X)), @as(__v8hi, @bitCast(__X)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__X)))).Vector.len),
    })));
}
pub inline fn _mm_broadcastd_epi32(arg___X: __m128i) __m128i {
    var __X = arg___X;
    _ = &__X;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4si, @bitCast(__X)))).Vector.child, @as(__v4si, @bitCast(__X)), @as(__v4si, @bitCast(__X)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__X)))).Vector.len),
    })));
}
pub inline fn _mm_broadcastq_epi64(arg___X: __m128i) __m128i {
    var __X = arg___X;
    _ = &__X;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v2di, @bitCast(__X)))).Vector.child, @as(__v2di, @bitCast(__X)), @as(__v2di, @bitCast(__X)), @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__X)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__X)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx2intrin.h:3305:19: warning: TODO implement function '__builtin_ia32_permvarsi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3303:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutevar8x32_epi32(arg___a: __m256i, arg___b: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:3363:18: warning: TODO implement function '__builtin_ia32_permvarsf256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3361:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutevar8x32_ps(arg___a: __m256, arg___b: __m256i) __m256;
// /usr/lib/zig/include/avx2intrin.h:3515:19: warning: TODO implement function '__builtin_ia32_maskloadd256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3513:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskload_epi32(arg___X: [*c]const c_int, arg___M: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:3547:19: warning: TODO implement function '__builtin_ia32_maskloadq256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3545:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskload_epi64(arg___X: [*c]const c_longlong, arg___M: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:3579:19: warning: TODO implement function '__builtin_ia32_maskloadd' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3577:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskload_epi32(arg___X: [*c]const c_int, arg___M: __m128i) __m128i;
// /usr/lib/zig/include/avx2intrin.h:3611:19: warning: TODO implement function '__builtin_ia32_maskloadq' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3609:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskload_epi64(arg___X: [*c]const c_longlong, arg___M: __m128i) __m128i;
// /usr/lib/zig/include/avx2intrin.h:3641:3: warning: TODO implement function '__builtin_ia32_maskstored256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3639:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskstore_epi32(arg___X: [*c]c_int, arg___M: __m256i, arg___Y: __m256i) void;
// /usr/lib/zig/include/avx2intrin.h:3671:3: warning: TODO implement function '__builtin_ia32_maskstoreq256' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3669:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskstore_epi64(arg___X: [*c]c_longlong, arg___M: __m256i, arg___Y: __m256i) void;
// /usr/lib/zig/include/avx2intrin.h:3701:3: warning: TODO implement function '__builtin_ia32_maskstored' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3699:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskstore_epi32(arg___X: [*c]c_int, arg___M: __m128i, arg___Y: __m128i) void;
// /usr/lib/zig/include/avx2intrin.h:3731:3: warning: TODO implement function '__builtin_ia32_maskstoreq' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3729:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskstore_epi64(arg___X: [*c]c_longlong, arg___M: __m128i, arg___Y: __m128i) void;
// /usr/lib/zig/include/avx2intrin.h:3753:19: warning: TODO implement function '__builtin_ia32_psllv8si' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3751:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sllv_epi32(arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:3775:19: warning: TODO implement function '__builtin_ia32_psllv4si' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3773:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sllv_epi32(arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx2intrin.h:3797:19: warning: TODO implement function '__builtin_ia32_psllv4di' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3795:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sllv_epi64(arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:3819:19: warning: TODO implement function '__builtin_ia32_psllv2di' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3817:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sllv_epi64(arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx2intrin.h:3842:19: warning: TODO implement function '__builtin_ia32_psrav8si' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3840:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_srav_epi32(arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:3865:19: warning: TODO implement function '__builtin_ia32_psrav4si' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3863:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_srav_epi32(arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx2intrin.h:3887:19: warning: TODO implement function '__builtin_ia32_psrlv8si' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3885:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_srlv_epi32(arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:3909:19: warning: TODO implement function '__builtin_ia32_psrlv4si' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3907:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_srlv_epi32(arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx2intrin.h:3931:19: warning: TODO implement function '__builtin_ia32_psrlv4di' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3929:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_srlv_epi64(arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx2intrin.h:3953:19: warning: TODO implement function '__builtin_ia32_psrlv2di' in std.zig.c_builtins

// /usr/lib/zig/include/avx2intrin.h:3951:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_srlv_epi64(arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/f16cintrin.h:42:16: warning: TODO implement function '__builtin_ia32_vcvtph2ps' in std.zig.c_builtins

// /usr/lib/zig/include/f16cintrin.h:39:1: warning: unable to translate function, demoted to extern
pub extern fn _cvtsh_ss(arg___a: c_ushort) f32;
// /usr/lib/zig/include/f16cintrin.h:112:18: warning: TODO implement function '__builtin_ia32_vcvtph2ps' in std.zig.c_builtins

// /usr/lib/zig/include/f16cintrin.h:110:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtph_ps(arg___a: __m128i) __m128;
// /usr/lib/zig/include/f16cintrin.h:156:18: warning: TODO implement function '__builtin_ia32_vcvtph2ps256' in std.zig.c_builtins

// /usr/lib/zig/include/f16cintrin.h:154:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtph_ps(arg___a: __m128i) __m256;
// /usr/lib/zig/include/bmiintrin.h:36:10: warning: TODO implement function '__builtin_ia32_tzcnt_u16' in std.zig.c_builtins

// /usr/lib/zig/include/bmiintrin.h:34:1: warning: unable to translate function, demoted to extern
pub extern fn __tzcnt_u16(arg___X: c_ushort) c_ushort;
// /usr/lib/zig/include/bmiintrin.h:70:10: warning: TODO implement function '__builtin_ia32_tzcnt_u32' in std.zig.c_builtins

// /usr/lib/zig/include/bmiintrin.h:68:1: warning: unable to translate function, demoted to extern
pub extern fn __tzcnt_u32(arg___X: c_uint) c_uint;
// /usr/lib/zig/include/bmiintrin.h:87:15: warning: TODO implement function '__builtin_ia32_tzcnt_u32' in std.zig.c_builtins

// /usr/lib/zig/include/bmiintrin.h:85:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_tzcnt_32(arg___X: c_uint) c_int;
// /usr/lib/zig/include/bmiintrin.h:123:10: warning: TODO implement function '__builtin_ia32_tzcnt_u64' in std.zig.c_builtins

// /usr/lib/zig/include/bmiintrin.h:121:1: warning: unable to translate function, demoted to extern
pub extern fn __tzcnt_u64(arg___X: c_ulonglong) c_ulonglong;
// /usr/lib/zig/include/bmiintrin.h:140:21: warning: TODO implement function '__builtin_ia32_tzcnt_u64' in std.zig.c_builtins

// /usr/lib/zig/include/bmiintrin.h:138:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_tzcnt_64(arg___X: c_ulonglong) c_longlong;
pub inline fn __andn_u32(arg___X: c_uint, arg___Y: c_uint) c_uint {
    var __X = arg___X;
    _ = &__X;
    var __Y = arg___Y;
    _ = &__Y;
    return ~__X & __Y;
}
// /usr/lib/zig/include/bmiintrin.h:230:10: warning: TODO implement function '__builtin_ia32_bextr_u32' in std.zig.c_builtins

// /usr/lib/zig/include/bmiintrin.h:228:1: warning: unable to translate function, demoted to extern
pub extern fn __bextr_u32(arg___X: c_uint, arg___Y: c_uint) c_uint;
// /usr/lib/zig/include/bmiintrin.h:255:10: warning: TODO implement function '__builtin_ia32_bextr_u32' in std.zig.c_builtins

// /usr/lib/zig/include/bmiintrin.h:253:1: warning: unable to translate function, demoted to extern
pub extern fn _bextr_u32(arg___X: c_uint, arg___Y: c_uint, arg___Z: c_uint) c_uint;
// /usr/lib/zig/include/bmiintrin.h:277:10: warning: TODO implement function '__builtin_ia32_bextr_u32' in std.zig.c_builtins

// /usr/lib/zig/include/bmiintrin.h:276:1: warning: unable to translate function, demoted to extern
pub extern fn _bextr2_u32(arg___X: c_uint, arg___Y: c_uint) c_uint;
pub inline fn __blsi_u32(arg___X: c_uint) c_uint {
    var __X = arg___X;
    _ = &__X;
    return __X & -%__X;
}
pub inline fn __blsmsk_u32(arg___X: c_uint) c_uint {
    var __X = arg___X;
    _ = &__X;
    return __X ^ (__X -% @as(c_uint, @bitCast(@as(c_int, 1))));
}
pub inline fn __blsr_u32(arg___X: c_uint) c_uint {
    var __X = arg___X;
    _ = &__X;
    return __X & (__X -% @as(c_uint, @bitCast(@as(c_int, 1))));
}
pub inline fn __andn_u64(arg___X: c_ulonglong, arg___Y: c_ulonglong) c_ulonglong {
    var __X = arg___X;
    _ = &__X;
    var __Y = arg___Y;
    _ = &__Y;
    return ~__X & __Y;
}
// /usr/lib/zig/include/bmiintrin.h:451:10: warning: TODO implement function '__builtin_ia32_bextr_u64' in std.zig.c_builtins

// /usr/lib/zig/include/bmiintrin.h:449:1: warning: unable to translate function, demoted to extern
pub extern fn __bextr_u64(arg___X: c_ulonglong, arg___Y: c_ulonglong) c_ulonglong;
// /usr/lib/zig/include/bmiintrin.h:476:10: warning: TODO implement function '__builtin_ia32_bextr_u64' in std.zig.c_builtins

// /usr/lib/zig/include/bmiintrin.h:474:1: warning: unable to translate function, demoted to extern
pub extern fn _bextr_u64(arg___X: c_ulonglong, arg___Y: c_uint, arg___Z: c_uint) c_ulonglong;
// /usr/lib/zig/include/bmiintrin.h:498:10: warning: TODO implement function '__builtin_ia32_bextr_u64' in std.zig.c_builtins

// /usr/lib/zig/include/bmiintrin.h:497:1: warning: unable to translate function, demoted to extern
pub extern fn _bextr2_u64(arg___X: c_ulonglong, arg___Y: c_ulonglong) c_ulonglong;
pub inline fn __blsi_u64(arg___X: c_ulonglong) c_ulonglong {
    var __X = arg___X;
    _ = &__X;
    return __X & -%__X;
}
pub inline fn __blsmsk_u64(arg___X: c_ulonglong) c_ulonglong {
    var __X = arg___X;
    _ = &__X;
    return __X ^ (__X -% @as(c_ulonglong, @bitCast(@as(c_longlong, @as(c_int, 1)))));
}
pub inline fn __blsr_u64(arg___X: c_ulonglong) c_ulonglong {
    var __X = arg___X;
    _ = &__X;
    return __X & (__X -% @as(c_ulonglong, @bitCast(@as(c_longlong, @as(c_int, 1)))));
}
// /usr/lib/zig/include/bmi2intrin.h:43:10: warning: TODO implement function '__builtin_ia32_bzhi_si' in std.zig.c_builtins

// /usr/lib/zig/include/bmi2intrin.h:41:1: warning: unable to translate function, demoted to extern
pub extern fn _bzhi_u32(arg___X: c_uint, arg___Y: c_uint) c_uint;
// /usr/lib/zig/include/bmi2intrin.h:73:10: warning: TODO implement function '__builtin_ia32_pdep_si' in std.zig.c_builtins

// /usr/lib/zig/include/bmi2intrin.h:71:1: warning: unable to translate function, demoted to extern
pub extern fn _pdep_u32(arg___X: c_uint, arg___Y: c_uint) c_uint;
// /usr/lib/zig/include/bmi2intrin.h:103:10: warning: TODO implement function '__builtin_ia32_pext_si' in std.zig.c_builtins

// /usr/lib/zig/include/bmi2intrin.h:101:1: warning: unable to translate function, demoted to extern
pub extern fn _pext_u32(arg___X: c_uint, arg___Y: c_uint) c_uint;
pub inline fn _mulx_u32(arg___X: c_uint, arg___Y: c_uint, arg___P_1: [*c]c_uint) c_uint {
    var __X = arg___X;
    _ = &__X;
    var __Y = arg___Y;
    _ = &__Y;
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __res: c_ulonglong = @as(c_ulonglong, @bitCast(@as(c_ulonglong, __X))) *% @as(c_ulonglong, @bitCast(@as(c_ulonglong, __Y)));
    _ = &__res;
    __P_1.* = @as(c_uint, @bitCast(@as(c_uint, @truncate(__res >> @intCast(32)))));
    return @as(c_uint, @bitCast(@as(c_uint, @truncate(__res))));
}
// /usr/lib/zig/include/bmi2intrin.h:159:10: warning: TODO implement function '__builtin_ia32_bzhi_di' in std.zig.c_builtins

// /usr/lib/zig/include/bmi2intrin.h:157:1: warning: unable to translate function, demoted to extern
pub extern fn _bzhi_u64(arg___X: c_ulonglong, arg___Y: c_ulonglong) c_ulonglong;
// /usr/lib/zig/include/bmi2intrin.h:189:10: warning: TODO implement function '__builtin_ia32_pdep_di' in std.zig.c_builtins

// /usr/lib/zig/include/bmi2intrin.h:187:1: warning: unable to translate function, demoted to extern
pub extern fn _pdep_u64(arg___X: c_ulonglong, arg___Y: c_ulonglong) c_ulonglong;
// /usr/lib/zig/include/bmi2intrin.h:219:10: warning: TODO implement function '__builtin_ia32_pext_di' in std.zig.c_builtins

// /usr/lib/zig/include/bmi2intrin.h:217:1: warning: unable to translate function, demoted to extern
pub extern fn _pext_u64(arg___X: c_ulonglong, arg___Y: c_ulonglong) c_ulonglong;
pub inline fn _mulx_u64(arg___X: c_ulonglong, arg___Y: c_ulonglong, arg___P_1: [*c]c_ulonglong) c_ulonglong {
    var __X = arg___X;
    _ = &__X;
    var __Y = arg___Y;
    _ = &__Y;
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __res: u128 = @as(u128, @bitCast(@as(u128, __X))) *% @as(u128, @bitCast(@as(u128, __Y)));
    _ = &__res;
    __P_1.* = @as(c_ulonglong, @bitCast(@as(c_ulonglong, @truncate(__res >> @intCast(64)))));
    return @as(c_ulonglong, @bitCast(@as(c_ulonglong, @truncate(__res))));
}
// /usr/lib/zig/include/lzcntintrin.h:48:10: warning: TODO implement function '__builtin_ia32_lzcnt_u32' in std.zig.c_builtins

// /usr/lib/zig/include/lzcntintrin.h:46:1: warning: unable to translate function, demoted to extern
pub extern fn __lzcnt32(arg___X: c_uint) c_uint;
// /usr/lib/zig/include/lzcntintrin.h:65:10: warning: TODO implement function '__builtin_ia32_lzcnt_u32' in std.zig.c_builtins

// /usr/lib/zig/include/lzcntintrin.h:63:1: warning: unable to translate function, demoted to extern
pub extern fn _lzcnt_u32(arg___X: c_uint) c_uint;
// /usr/lib/zig/include/lzcntintrin.h:98:10: warning: TODO implement function '__builtin_ia32_lzcnt_u64' in std.zig.c_builtins

// /usr/lib/zig/include/lzcntintrin.h:96:1: warning: unable to translate function, demoted to extern
pub extern fn _lzcnt_u64(arg___X: c_ulonglong) c_ulonglong;
// /usr/lib/zig/include/fmaintrin.h:38:18: warning: TODO implement function '__builtin_ia32_vfmaddps' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:36:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmadd_ps(arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/fmaintrin.h:58:19: warning: TODO implement function '__builtin_ia32_vfmaddpd' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:56:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmadd_pd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/fmaintrin.h:86:18: warning: TODO implement function '__builtin_ia32_vfmaddss3' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:84:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmadd_ss(arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/fmaintrin.h:114:19: warning: TODO implement function '__builtin_ia32_vfmaddsd3' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:112:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmadd_sd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/fmaintrin.h:134:18: warning: TODO implement function '__builtin_ia32_vfmaddps' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:132:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmsub_ps(arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/fmaintrin.h:154:19: warning: TODO implement function '__builtin_ia32_vfmaddpd' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:152:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmsub_pd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/fmaintrin.h:182:18: warning: TODO implement function '__builtin_ia32_vfmaddss3' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:180:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmsub_ss(arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/fmaintrin.h:210:19: warning: TODO implement function '__builtin_ia32_vfmaddsd3' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:208:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmsub_sd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/fmaintrin.h:230:18: warning: TODO implement function '__builtin_ia32_vfmaddps' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:228:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fnmadd_ps(arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/fmaintrin.h:250:19: warning: TODO implement function '__builtin_ia32_vfmaddpd' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:248:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fnmadd_pd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/fmaintrin.h:278:18: warning: TODO implement function '__builtin_ia32_vfmaddss3' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:276:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fnmadd_ss(arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/fmaintrin.h:306:19: warning: TODO implement function '__builtin_ia32_vfmaddsd3' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:304:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fnmadd_sd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/fmaintrin.h:326:18: warning: TODO implement function '__builtin_ia32_vfmaddps' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:324:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fnmsub_ps(arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/fmaintrin.h:346:19: warning: TODO implement function '__builtin_ia32_vfmaddpd' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:344:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fnmsub_pd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/fmaintrin.h:374:18: warning: TODO implement function '__builtin_ia32_vfmaddss3' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:372:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fnmsub_ss(arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/fmaintrin.h:402:19: warning: TODO implement function '__builtin_ia32_vfmaddsd3' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:400:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fnmsub_sd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/fmaintrin.h:428:18: warning: TODO implement function '__builtin_ia32_vfmaddsubps' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:426:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmaddsub_ps(arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/fmaintrin.h:452:19: warning: TODO implement function '__builtin_ia32_vfmaddsubpd' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:450:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmaddsub_pd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/fmaintrin.h:478:18: warning: TODO implement function '__builtin_ia32_vfmaddsubps' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:476:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmsubadd_ps(arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/fmaintrin.h:502:19: warning: TODO implement function '__builtin_ia32_vfmaddsubpd' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:500:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmsubadd_pd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/fmaintrin.h:522:18: warning: TODO implement function '__builtin_ia32_vfmaddps256' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:520:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fmadd_ps(arg___A: __m256, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/fmaintrin.h:542:19: warning: TODO implement function '__builtin_ia32_vfmaddpd256' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:540:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fmadd_pd(arg___A: __m256d, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/fmaintrin.h:562:18: warning: TODO implement function '__builtin_ia32_vfmaddps256' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:560:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fmsub_ps(arg___A: __m256, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/fmaintrin.h:582:19: warning: TODO implement function '__builtin_ia32_vfmaddpd256' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:580:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fmsub_pd(arg___A: __m256d, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/fmaintrin.h:602:18: warning: TODO implement function '__builtin_ia32_vfmaddps256' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:600:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fnmadd_ps(arg___A: __m256, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/fmaintrin.h:622:19: warning: TODO implement function '__builtin_ia32_vfmaddpd256' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:620:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fnmadd_pd(arg___A: __m256d, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/fmaintrin.h:642:18: warning: TODO implement function '__builtin_ia32_vfmaddps256' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:640:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fnmsub_ps(arg___A: __m256, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/fmaintrin.h:662:19: warning: TODO implement function '__builtin_ia32_vfmaddpd256' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:660:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fnmsub_pd(arg___A: __m256d, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/fmaintrin.h:692:18: warning: TODO implement function '__builtin_ia32_vfmaddsubps256' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:690:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fmaddsub_ps(arg___A: __m256, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/fmaintrin.h:718:19: warning: TODO implement function '__builtin_ia32_vfmaddsubpd256' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:716:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fmaddsub_pd(arg___A: __m256d, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/fmaintrin.h:748:18: warning: TODO implement function '__builtin_ia32_vfmaddsubps256' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:746:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fmsubadd_ps(arg___A: __m256, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/fmaintrin.h:774:19: warning: TODO implement function '__builtin_ia32_vfmaddsubpd256' in std.zig.c_builtins

// /usr/lib/zig/include/fmaintrin.h:772:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fmsubadd_pd(arg___A: __m256d, arg___B: __m256d, arg___C: __m256d) __m256d;
pub const __v64qi = @Vector(64, u8);
pub const __v32hi = @Vector(32, c_short);
pub const __v8df = @Vector(8, f64);
pub const __v16sf = @Vector(16, f32);
pub const __v8di = @Vector(8, c_longlong);
pub const __v16si = @Vector(16, c_int);
pub const __v64qu = @Vector(64, u8);
pub const __v32hu = @Vector(32, c_ushort);
pub const __v8du = @Vector(8, c_ulonglong);
pub const __v16su = @Vector(16, c_uint);
pub const __v64qs = @Vector(64, i8);
pub const __m512 = @Vector(16, f32);
pub const __m512d = @Vector(8, f64);
pub const __m512i = @Vector(8, c_longlong);
pub const __m512_u = @Vector(16, f32);
pub const __m512d_u = @Vector(8, f64);
pub const __m512i_u = @Vector(8, c_longlong);
pub const __mmask8 = u8;
pub const __mmask16 = c_ushort;
pub const _MM_CMPINT_EQ: c_int = 0;
pub const _MM_CMPINT_LT: c_int = 1;
pub const _MM_CMPINT_LE: c_int = 2;
pub const _MM_CMPINT_UNUSED: c_int = 3;
pub const _MM_CMPINT_NE: c_int = 4;
pub const _MM_CMPINT_NLT: c_int = 5;
pub const _MM_CMPINT_NLE: c_int = 6;
pub const _MM_CMPINT_ENUM = c_uint;
pub const _MM_PERM_AAAA: c_int = 0;
pub const _MM_PERM_AAAB: c_int = 1;
pub const _MM_PERM_AAAC: c_int = 2;
pub const _MM_PERM_AAAD: c_int = 3;
pub const _MM_PERM_AABA: c_int = 4;
pub const _MM_PERM_AABB: c_int = 5;
pub const _MM_PERM_AABC: c_int = 6;
pub const _MM_PERM_AABD: c_int = 7;
pub const _MM_PERM_AACA: c_int = 8;
pub const _MM_PERM_AACB: c_int = 9;
pub const _MM_PERM_AACC: c_int = 10;
pub const _MM_PERM_AACD: c_int = 11;
pub const _MM_PERM_AADA: c_int = 12;
pub const _MM_PERM_AADB: c_int = 13;
pub const _MM_PERM_AADC: c_int = 14;
pub const _MM_PERM_AADD: c_int = 15;
pub const _MM_PERM_ABAA: c_int = 16;
pub const _MM_PERM_ABAB: c_int = 17;
pub const _MM_PERM_ABAC: c_int = 18;
pub const _MM_PERM_ABAD: c_int = 19;
pub const _MM_PERM_ABBA: c_int = 20;
pub const _MM_PERM_ABBB: c_int = 21;
pub const _MM_PERM_ABBC: c_int = 22;
pub const _MM_PERM_ABBD: c_int = 23;
pub const _MM_PERM_ABCA: c_int = 24;
pub const _MM_PERM_ABCB: c_int = 25;
pub const _MM_PERM_ABCC: c_int = 26;
pub const _MM_PERM_ABCD: c_int = 27;
pub const _MM_PERM_ABDA: c_int = 28;
pub const _MM_PERM_ABDB: c_int = 29;
pub const _MM_PERM_ABDC: c_int = 30;
pub const _MM_PERM_ABDD: c_int = 31;
pub const _MM_PERM_ACAA: c_int = 32;
pub const _MM_PERM_ACAB: c_int = 33;
pub const _MM_PERM_ACAC: c_int = 34;
pub const _MM_PERM_ACAD: c_int = 35;
pub const _MM_PERM_ACBA: c_int = 36;
pub const _MM_PERM_ACBB: c_int = 37;
pub const _MM_PERM_ACBC: c_int = 38;
pub const _MM_PERM_ACBD: c_int = 39;
pub const _MM_PERM_ACCA: c_int = 40;
pub const _MM_PERM_ACCB: c_int = 41;
pub const _MM_PERM_ACCC: c_int = 42;
pub const _MM_PERM_ACCD: c_int = 43;
pub const _MM_PERM_ACDA: c_int = 44;
pub const _MM_PERM_ACDB: c_int = 45;
pub const _MM_PERM_ACDC: c_int = 46;
pub const _MM_PERM_ACDD: c_int = 47;
pub const _MM_PERM_ADAA: c_int = 48;
pub const _MM_PERM_ADAB: c_int = 49;
pub const _MM_PERM_ADAC: c_int = 50;
pub const _MM_PERM_ADAD: c_int = 51;
pub const _MM_PERM_ADBA: c_int = 52;
pub const _MM_PERM_ADBB: c_int = 53;
pub const _MM_PERM_ADBC: c_int = 54;
pub const _MM_PERM_ADBD: c_int = 55;
pub const _MM_PERM_ADCA: c_int = 56;
pub const _MM_PERM_ADCB: c_int = 57;
pub const _MM_PERM_ADCC: c_int = 58;
pub const _MM_PERM_ADCD: c_int = 59;
pub const _MM_PERM_ADDA: c_int = 60;
pub const _MM_PERM_ADDB: c_int = 61;
pub const _MM_PERM_ADDC: c_int = 62;
pub const _MM_PERM_ADDD: c_int = 63;
pub const _MM_PERM_BAAA: c_int = 64;
pub const _MM_PERM_BAAB: c_int = 65;
pub const _MM_PERM_BAAC: c_int = 66;
pub const _MM_PERM_BAAD: c_int = 67;
pub const _MM_PERM_BABA: c_int = 68;
pub const _MM_PERM_BABB: c_int = 69;
pub const _MM_PERM_BABC: c_int = 70;
pub const _MM_PERM_BABD: c_int = 71;
pub const _MM_PERM_BACA: c_int = 72;
pub const _MM_PERM_BACB: c_int = 73;
pub const _MM_PERM_BACC: c_int = 74;
pub const _MM_PERM_BACD: c_int = 75;
pub const _MM_PERM_BADA: c_int = 76;
pub const _MM_PERM_BADB: c_int = 77;
pub const _MM_PERM_BADC: c_int = 78;
pub const _MM_PERM_BADD: c_int = 79;
pub const _MM_PERM_BBAA: c_int = 80;
pub const _MM_PERM_BBAB: c_int = 81;
pub const _MM_PERM_BBAC: c_int = 82;
pub const _MM_PERM_BBAD: c_int = 83;
pub const _MM_PERM_BBBA: c_int = 84;
pub const _MM_PERM_BBBB: c_int = 85;
pub const _MM_PERM_BBBC: c_int = 86;
pub const _MM_PERM_BBBD: c_int = 87;
pub const _MM_PERM_BBCA: c_int = 88;
pub const _MM_PERM_BBCB: c_int = 89;
pub const _MM_PERM_BBCC: c_int = 90;
pub const _MM_PERM_BBCD: c_int = 91;
pub const _MM_PERM_BBDA: c_int = 92;
pub const _MM_PERM_BBDB: c_int = 93;
pub const _MM_PERM_BBDC: c_int = 94;
pub const _MM_PERM_BBDD: c_int = 95;
pub const _MM_PERM_BCAA: c_int = 96;
pub const _MM_PERM_BCAB: c_int = 97;
pub const _MM_PERM_BCAC: c_int = 98;
pub const _MM_PERM_BCAD: c_int = 99;
pub const _MM_PERM_BCBA: c_int = 100;
pub const _MM_PERM_BCBB: c_int = 101;
pub const _MM_PERM_BCBC: c_int = 102;
pub const _MM_PERM_BCBD: c_int = 103;
pub const _MM_PERM_BCCA: c_int = 104;
pub const _MM_PERM_BCCB: c_int = 105;
pub const _MM_PERM_BCCC: c_int = 106;
pub const _MM_PERM_BCCD: c_int = 107;
pub const _MM_PERM_BCDA: c_int = 108;
pub const _MM_PERM_BCDB: c_int = 109;
pub const _MM_PERM_BCDC: c_int = 110;
pub const _MM_PERM_BCDD: c_int = 111;
pub const _MM_PERM_BDAA: c_int = 112;
pub const _MM_PERM_BDAB: c_int = 113;
pub const _MM_PERM_BDAC: c_int = 114;
pub const _MM_PERM_BDAD: c_int = 115;
pub const _MM_PERM_BDBA: c_int = 116;
pub const _MM_PERM_BDBB: c_int = 117;
pub const _MM_PERM_BDBC: c_int = 118;
pub const _MM_PERM_BDBD: c_int = 119;
pub const _MM_PERM_BDCA: c_int = 120;
pub const _MM_PERM_BDCB: c_int = 121;
pub const _MM_PERM_BDCC: c_int = 122;
pub const _MM_PERM_BDCD: c_int = 123;
pub const _MM_PERM_BDDA: c_int = 124;
pub const _MM_PERM_BDDB: c_int = 125;
pub const _MM_PERM_BDDC: c_int = 126;
pub const _MM_PERM_BDDD: c_int = 127;
pub const _MM_PERM_CAAA: c_int = 128;
pub const _MM_PERM_CAAB: c_int = 129;
pub const _MM_PERM_CAAC: c_int = 130;
pub const _MM_PERM_CAAD: c_int = 131;
pub const _MM_PERM_CABA: c_int = 132;
pub const _MM_PERM_CABB: c_int = 133;
pub const _MM_PERM_CABC: c_int = 134;
pub const _MM_PERM_CABD: c_int = 135;
pub const _MM_PERM_CACA: c_int = 136;
pub const _MM_PERM_CACB: c_int = 137;
pub const _MM_PERM_CACC: c_int = 138;
pub const _MM_PERM_CACD: c_int = 139;
pub const _MM_PERM_CADA: c_int = 140;
pub const _MM_PERM_CADB: c_int = 141;
pub const _MM_PERM_CADC: c_int = 142;
pub const _MM_PERM_CADD: c_int = 143;
pub const _MM_PERM_CBAA: c_int = 144;
pub const _MM_PERM_CBAB: c_int = 145;
pub const _MM_PERM_CBAC: c_int = 146;
pub const _MM_PERM_CBAD: c_int = 147;
pub const _MM_PERM_CBBA: c_int = 148;
pub const _MM_PERM_CBBB: c_int = 149;
pub const _MM_PERM_CBBC: c_int = 150;
pub const _MM_PERM_CBBD: c_int = 151;
pub const _MM_PERM_CBCA: c_int = 152;
pub const _MM_PERM_CBCB: c_int = 153;
pub const _MM_PERM_CBCC: c_int = 154;
pub const _MM_PERM_CBCD: c_int = 155;
pub const _MM_PERM_CBDA: c_int = 156;
pub const _MM_PERM_CBDB: c_int = 157;
pub const _MM_PERM_CBDC: c_int = 158;
pub const _MM_PERM_CBDD: c_int = 159;
pub const _MM_PERM_CCAA: c_int = 160;
pub const _MM_PERM_CCAB: c_int = 161;
pub const _MM_PERM_CCAC: c_int = 162;
pub const _MM_PERM_CCAD: c_int = 163;
pub const _MM_PERM_CCBA: c_int = 164;
pub const _MM_PERM_CCBB: c_int = 165;
pub const _MM_PERM_CCBC: c_int = 166;
pub const _MM_PERM_CCBD: c_int = 167;
pub const _MM_PERM_CCCA: c_int = 168;
pub const _MM_PERM_CCCB: c_int = 169;
pub const _MM_PERM_CCCC: c_int = 170;
pub const _MM_PERM_CCCD: c_int = 171;
pub const _MM_PERM_CCDA: c_int = 172;
pub const _MM_PERM_CCDB: c_int = 173;
pub const _MM_PERM_CCDC: c_int = 174;
pub const _MM_PERM_CCDD: c_int = 175;
pub const _MM_PERM_CDAA: c_int = 176;
pub const _MM_PERM_CDAB: c_int = 177;
pub const _MM_PERM_CDAC: c_int = 178;
pub const _MM_PERM_CDAD: c_int = 179;
pub const _MM_PERM_CDBA: c_int = 180;
pub const _MM_PERM_CDBB: c_int = 181;
pub const _MM_PERM_CDBC: c_int = 182;
pub const _MM_PERM_CDBD: c_int = 183;
pub const _MM_PERM_CDCA: c_int = 184;
pub const _MM_PERM_CDCB: c_int = 185;
pub const _MM_PERM_CDCC: c_int = 186;
pub const _MM_PERM_CDCD: c_int = 187;
pub const _MM_PERM_CDDA: c_int = 188;
pub const _MM_PERM_CDDB: c_int = 189;
pub const _MM_PERM_CDDC: c_int = 190;
pub const _MM_PERM_CDDD: c_int = 191;
pub const _MM_PERM_DAAA: c_int = 192;
pub const _MM_PERM_DAAB: c_int = 193;
pub const _MM_PERM_DAAC: c_int = 194;
pub const _MM_PERM_DAAD: c_int = 195;
pub const _MM_PERM_DABA: c_int = 196;
pub const _MM_PERM_DABB: c_int = 197;
pub const _MM_PERM_DABC: c_int = 198;
pub const _MM_PERM_DABD: c_int = 199;
pub const _MM_PERM_DACA: c_int = 200;
pub const _MM_PERM_DACB: c_int = 201;
pub const _MM_PERM_DACC: c_int = 202;
pub const _MM_PERM_DACD: c_int = 203;
pub const _MM_PERM_DADA: c_int = 204;
pub const _MM_PERM_DADB: c_int = 205;
pub const _MM_PERM_DADC: c_int = 206;
pub const _MM_PERM_DADD: c_int = 207;
pub const _MM_PERM_DBAA: c_int = 208;
pub const _MM_PERM_DBAB: c_int = 209;
pub const _MM_PERM_DBAC: c_int = 210;
pub const _MM_PERM_DBAD: c_int = 211;
pub const _MM_PERM_DBBA: c_int = 212;
pub const _MM_PERM_DBBB: c_int = 213;
pub const _MM_PERM_DBBC: c_int = 214;
pub const _MM_PERM_DBBD: c_int = 215;
pub const _MM_PERM_DBCA: c_int = 216;
pub const _MM_PERM_DBCB: c_int = 217;
pub const _MM_PERM_DBCC: c_int = 218;
pub const _MM_PERM_DBCD: c_int = 219;
pub const _MM_PERM_DBDA: c_int = 220;
pub const _MM_PERM_DBDB: c_int = 221;
pub const _MM_PERM_DBDC: c_int = 222;
pub const _MM_PERM_DBDD: c_int = 223;
pub const _MM_PERM_DCAA: c_int = 224;
pub const _MM_PERM_DCAB: c_int = 225;
pub const _MM_PERM_DCAC: c_int = 226;
pub const _MM_PERM_DCAD: c_int = 227;
pub const _MM_PERM_DCBA: c_int = 228;
pub const _MM_PERM_DCBB: c_int = 229;
pub const _MM_PERM_DCBC: c_int = 230;
pub const _MM_PERM_DCBD: c_int = 231;
pub const _MM_PERM_DCCA: c_int = 232;
pub const _MM_PERM_DCCB: c_int = 233;
pub const _MM_PERM_DCCC: c_int = 234;
pub const _MM_PERM_DCCD: c_int = 235;
pub const _MM_PERM_DCDA: c_int = 236;
pub const _MM_PERM_DCDB: c_int = 237;
pub const _MM_PERM_DCDC: c_int = 238;
pub const _MM_PERM_DCDD: c_int = 239;
pub const _MM_PERM_DDAA: c_int = 240;
pub const _MM_PERM_DDAB: c_int = 241;
pub const _MM_PERM_DDAC: c_int = 242;
pub const _MM_PERM_DDAD: c_int = 243;
pub const _MM_PERM_DDBA: c_int = 244;
pub const _MM_PERM_DDBB: c_int = 245;
pub const _MM_PERM_DDBC: c_int = 246;
pub const _MM_PERM_DDBD: c_int = 247;
pub const _MM_PERM_DDCA: c_int = 248;
pub const _MM_PERM_DDCB: c_int = 249;
pub const _MM_PERM_DDCC: c_int = 250;
pub const _MM_PERM_DDCD: c_int = 251;
pub const _MM_PERM_DDDA: c_int = 252;
pub const _MM_PERM_DDDB: c_int = 253;
pub const _MM_PERM_DDDC: c_int = 254;
pub const _MM_PERM_DDDD: c_int = 255;
pub const _MM_PERM_ENUM = c_uint;
pub const _MM_MANT_NORM_1_2: c_int = 0;
pub const _MM_MANT_NORM_p5_2: c_int = 1;
pub const _MM_MANT_NORM_p5_1: c_int = 2;
pub const _MM_MANT_NORM_p75_1p5: c_int = 3;
pub const _MM_MANTISSA_NORM_ENUM = c_uint;
pub const _MM_MANT_SIGN_src: c_int = 0;
pub const _MM_MANT_SIGN_zero: c_int = 1;
pub const _MM_MANT_SIGN_nan: c_int = 2;
pub const _MM_MANTISSA_SIGN_ENUM = c_uint;
pub inline fn _mm512_setzero_si512() __m512i {
    return @as(__m512i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_longlong, @as(c_int, 0))));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_longlong, @as(c_int, 0))));
        const tmp_2 = @as(c_longlong, @bitCast(@as(c_longlong, @as(c_int, 0))));
        const tmp_3 = @as(c_longlong, @bitCast(@as(c_longlong, @as(c_int, 0))));
        const tmp_4 = @as(c_longlong, @bitCast(@as(c_longlong, @as(c_int, 0))));
        const tmp_5 = @as(c_longlong, @bitCast(@as(c_longlong, @as(c_int, 0))));
        const tmp_6 = @as(c_longlong, @bitCast(@as(c_longlong, @as(c_int, 0))));
        const tmp_7 = @as(c_longlong, @bitCast(@as(c_longlong, @as(c_int, 0))));
        break :blk __v8di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:191:19: warning: TODO implement function '__builtin_ia32_undef512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:189:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_undefined_pd() __m512d;
// /usr/lib/zig/include/avx512fintrin.h:197:18: warning: TODO implement function '__builtin_ia32_undef512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:195:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_undefined() __m512;
// /usr/lib/zig/include/avx512fintrin.h:203:18: warning: TODO implement function '__builtin_ia32_undef512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:201:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_undefined_ps() __m512;
// /usr/lib/zig/include/avx512fintrin.h:209:19: warning: TODO implement function '__builtin_ia32_undef512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:207:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_undefined_epi32() __m512i;
pub inline fn _mm512_broadcastd_epi32(arg___A: __m128i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.child, @as(__v4si, @bitCast(__A)), @as(__v4si, @bitCast(__A)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:222:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:220:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcastd_epi32(arg___O: __m512i, arg___M: __mmask16, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:230:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:228:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcastd_epi32(arg___M: __mmask16, arg___A: __m128i) __m512i;
pub inline fn _mm512_broadcastq_epi64(arg___A: __m128i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.child, @as(__v2di, @bitCast(__A)), @as(__v2di, @bitCast(__A)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:245:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:243:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcastq_epi64(arg___O: __m512i, arg___M: __mmask8, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:254:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:252:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcastq_epi64(arg___M: __mmask8, arg___A: __m128i) __m512i;
pub inline fn _mm512_setzero_ps() __m512 {
    return blk: {
        const tmp = 0.0;
        const tmp_1 = 0.0;
        const tmp_2 = 0.0;
        const tmp_3 = 0.0;
        const tmp_4 = 0.0;
        const tmp_5 = 0.0;
        const tmp_6 = 0.0;
        const tmp_7 = 0.0;
        const tmp_8 = 0.0;
        const tmp_9 = 0.0;
        const tmp_10 = 0.0;
        const tmp_11 = 0.0;
        const tmp_12 = 0.0;
        const tmp_13 = 0.0;
        const tmp_14 = 0.0;
        const tmp_15 = 0.0;
        break :blk __m512{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    };
}
pub inline fn _mm512_setzero_pd() __m512d {
    return blk: {
        const tmp = 0.0;
        const tmp_1 = 0.0;
        const tmp_2 = 0.0;
        const tmp_3 = 0.0;
        const tmp_4 = 0.0;
        const tmp_5 = 0.0;
        const tmp_6 = 0.0;
        const tmp_7 = 0.0;
        break :blk __m512d{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    };
}
pub inline fn _mm512_set1_ps(arg___w: f32) __m512 {
    var __w = arg___w;
    _ = &__w;
    return blk: {
        const tmp = __w;
        const tmp_1 = __w;
        const tmp_2 = __w;
        const tmp_3 = __w;
        const tmp_4 = __w;
        const tmp_5 = __w;
        const tmp_6 = __w;
        const tmp_7 = __w;
        const tmp_8 = __w;
        const tmp_9 = __w;
        const tmp_10 = __w;
        const tmp_11 = __w;
        const tmp_12 = __w;
        const tmp_13 = __w;
        const tmp_14 = __w;
        const tmp_15 = __w;
        break :blk __m512{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    };
}
pub inline fn _mm512_set1_pd(arg___w: f64) __m512d {
    var __w = arg___w;
    _ = &__w;
    return blk: {
        const tmp = __w;
        const tmp_1 = __w;
        const tmp_2 = __w;
        const tmp_3 = __w;
        const tmp_4 = __w;
        const tmp_5 = __w;
        const tmp_6 = __w;
        const tmp_7 = __w;
        break :blk __m512d{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    };
}
pub inline fn _mm512_set1_epi8(arg___w: u8) __m512i {
    var __w = arg___w;
    _ = &__w;
    return @as(__m512i, @bitCast(blk: {
        const tmp = __w;
        const tmp_1 = __w;
        const tmp_2 = __w;
        const tmp_3 = __w;
        const tmp_4 = __w;
        const tmp_5 = __w;
        const tmp_6 = __w;
        const tmp_7 = __w;
        const tmp_8 = __w;
        const tmp_9 = __w;
        const tmp_10 = __w;
        const tmp_11 = __w;
        const tmp_12 = __w;
        const tmp_13 = __w;
        const tmp_14 = __w;
        const tmp_15 = __w;
        const tmp_16 = __w;
        const tmp_17 = __w;
        const tmp_18 = __w;
        const tmp_19 = __w;
        const tmp_20 = __w;
        const tmp_21 = __w;
        const tmp_22 = __w;
        const tmp_23 = __w;
        const tmp_24 = __w;
        const tmp_25 = __w;
        const tmp_26 = __w;
        const tmp_27 = __w;
        const tmp_28 = __w;
        const tmp_29 = __w;
        const tmp_30 = __w;
        const tmp_31 = __w;
        const tmp_32 = __w;
        const tmp_33 = __w;
        const tmp_34 = __w;
        const tmp_35 = __w;
        const tmp_36 = __w;
        const tmp_37 = __w;
        const tmp_38 = __w;
        const tmp_39 = __w;
        const tmp_40 = __w;
        const tmp_41 = __w;
        const tmp_42 = __w;
        const tmp_43 = __w;
        const tmp_44 = __w;
        const tmp_45 = __w;
        const tmp_46 = __w;
        const tmp_47 = __w;
        const tmp_48 = __w;
        const tmp_49 = __w;
        const tmp_50 = __w;
        const tmp_51 = __w;
        const tmp_52 = __w;
        const tmp_53 = __w;
        const tmp_54 = __w;
        const tmp_55 = __w;
        const tmp_56 = __w;
        const tmp_57 = __w;
        const tmp_58 = __w;
        const tmp_59 = __w;
        const tmp_60 = __w;
        const tmp_61 = __w;
        const tmp_62 = __w;
        const tmp_63 = __w;
        break :blk __v64qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
            tmp_16,
            tmp_17,
            tmp_18,
            tmp_19,
            tmp_20,
            tmp_21,
            tmp_22,
            tmp_23,
            tmp_24,
            tmp_25,
            tmp_26,
            tmp_27,
            tmp_28,
            tmp_29,
            tmp_30,
            tmp_31,
            tmp_32,
            tmp_33,
            tmp_34,
            tmp_35,
            tmp_36,
            tmp_37,
            tmp_38,
            tmp_39,
            tmp_40,
            tmp_41,
            tmp_42,
            tmp_43,
            tmp_44,
            tmp_45,
            tmp_46,
            tmp_47,
            tmp_48,
            tmp_49,
            tmp_50,
            tmp_51,
            tmp_52,
            tmp_53,
            tmp_54,
            tmp_55,
            tmp_56,
            tmp_57,
            tmp_58,
            tmp_59,
            tmp_60,
            tmp_61,
            tmp_62,
            tmp_63,
        };
    }));
}
pub inline fn _mm512_set1_epi16(arg___w: c_short) __m512i {
    var __w = arg___w;
    _ = &__w;
    return @as(__m512i, @bitCast(blk: {
        const tmp = __w;
        const tmp_1 = __w;
        const tmp_2 = __w;
        const tmp_3 = __w;
        const tmp_4 = __w;
        const tmp_5 = __w;
        const tmp_6 = __w;
        const tmp_7 = __w;
        const tmp_8 = __w;
        const tmp_9 = __w;
        const tmp_10 = __w;
        const tmp_11 = __w;
        const tmp_12 = __w;
        const tmp_13 = __w;
        const tmp_14 = __w;
        const tmp_15 = __w;
        const tmp_16 = __w;
        const tmp_17 = __w;
        const tmp_18 = __w;
        const tmp_19 = __w;
        const tmp_20 = __w;
        const tmp_21 = __w;
        const tmp_22 = __w;
        const tmp_23 = __w;
        const tmp_24 = __w;
        const tmp_25 = __w;
        const tmp_26 = __w;
        const tmp_27 = __w;
        const tmp_28 = __w;
        const tmp_29 = __w;
        const tmp_30 = __w;
        const tmp_31 = __w;
        break :blk __v32hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
            tmp_16,
            tmp_17,
            tmp_18,
            tmp_19,
            tmp_20,
            tmp_21,
            tmp_22,
            tmp_23,
            tmp_24,
            tmp_25,
            tmp_26,
            tmp_27,
            tmp_28,
            tmp_29,
            tmp_30,
            tmp_31,
        };
    }));
}
pub inline fn _mm512_set1_epi32(arg___s: c_int) __m512i {
    var __s = arg___s;
    _ = &__s;
    return @as(__m512i, @bitCast(blk: {
        const tmp = __s;
        const tmp_1 = __s;
        const tmp_2 = __s;
        const tmp_3 = __s;
        const tmp_4 = __s;
        const tmp_5 = __s;
        const tmp_6 = __s;
        const tmp_7 = __s;
        const tmp_8 = __s;
        const tmp_9 = __s;
        const tmp_10 = __s;
        const tmp_11 = __s;
        const tmp_12 = __s;
        const tmp_13 = __s;
        const tmp_14 = __s;
        const tmp_15 = __s;
        break :blk __v16si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:323:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:321:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_set1_epi32(arg___M: __mmask16, arg___A: c_int) __m512i;
pub inline fn _mm512_set1_epi64(arg___d: c_longlong) __m512i {
    var __d = arg___d;
    _ = &__d;
    return @as(__m512i, @bitCast(blk: {
        const tmp = __d;
        const tmp_1 = __d;
        const tmp_2 = __d;
        const tmp_3 = __d;
        const tmp_4 = __d;
        const tmp_5 = __d;
        const tmp_6 = __d;
        const tmp_7 = __d;
        break :blk __v8di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:337:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:335:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_set1_epi64(arg___M: __mmask8, arg___A: c_longlong) __m512i;
pub inline fn _mm512_broadcastss_ps(arg___A: __m128) __m512 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.child, @as(__v4sf, @bitCast(__A)), @as(__v4sf, @bitCast(__A)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
    })));
}
pub inline fn _mm512_set4_epi32(arg___A: c_int, arg___B: c_int, arg___C: c_int, arg___D: c_int) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    var __C = arg___C;
    _ = &__C;
    var __D = arg___D;
    _ = &__D;
    return @as(__m512i, @bitCast(blk: {
        const tmp = __D;
        const tmp_1 = __C;
        const tmp_2 = __B;
        const tmp_3 = __A;
        const tmp_4 = __D;
        const tmp_5 = __C;
        const tmp_6 = __B;
        const tmp_7 = __A;
        const tmp_8 = __D;
        const tmp_9 = __C;
        const tmp_10 = __B;
        const tmp_11 = __A;
        const tmp_12 = __D;
        const tmp_13 = __C;
        const tmp_14 = __B;
        const tmp_15 = __A;
        break :blk __v16si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
pub inline fn _mm512_set4_epi64(arg___A: c_longlong, arg___B: c_longlong, arg___C: c_longlong, arg___D: c_longlong) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    var __C = arg___C;
    _ = &__C;
    var __D = arg___D;
    _ = &__D;
    return @as(__m512i, @bitCast(blk: {
        const tmp = __D;
        const tmp_1 = __C;
        const tmp_2 = __B;
        const tmp_3 = __A;
        const tmp_4 = __D;
        const tmp_5 = __C;
        const tmp_6 = __B;
        const tmp_7 = __A;
        break :blk __v8di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
pub inline fn _mm512_set4_pd(arg___A: f64, arg___B: f64, arg___C: f64, arg___D: f64) __m512d {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    var __C = arg___C;
    _ = &__C;
    var __D = arg___D;
    _ = &__D;
    return blk: {
        const tmp = __D;
        const tmp_1 = __C;
        const tmp_2 = __B;
        const tmp_3 = __A;
        const tmp_4 = __D;
        const tmp_5 = __C;
        const tmp_6 = __B;
        const tmp_7 = __A;
        break :blk __m512d{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    };
}
pub inline fn _mm512_set4_ps(arg___A: f32, arg___B: f32, arg___C: f32, arg___D: f32) __m512 {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    var __C = arg___C;
    _ = &__C;
    var __D = arg___D;
    _ = &__D;
    return blk: {
        const tmp = __D;
        const tmp_1 = __C;
        const tmp_2 = __B;
        const tmp_3 = __A;
        const tmp_4 = __D;
        const tmp_5 = __C;
        const tmp_6 = __B;
        const tmp_7 = __A;
        const tmp_8 = __D;
        const tmp_9 = __C;
        const tmp_10 = __B;
        const tmp_11 = __A;
        const tmp_12 = __D;
        const tmp_13 = __C;
        const tmp_14 = __B;
        const tmp_15 = __A;
        break :blk __m512{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    };
}
pub inline fn _mm512_broadcastsd_pd(arg___A: __m128d) __m512d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512d, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.child, @as(__v2df, @bitCast(__A)), @as(__v2df, @bitCast(__A)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:404:39: warning: TODO implement function '__builtin_nondeterministic_value' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:402:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_castpd256_pd512(arg___a: __m256d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:411:39: warning: TODO implement function '__builtin_nondeterministic_value' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:409:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_castps256_ps512(arg___a: __m256) __m512;
pub inline fn _mm512_castpd512_pd128(arg___a: __m512d) __m128d {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(__a)).Vector.child, __a, __a, @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__a)).Vector.len),
    });
}
pub inline fn _mm512_castpd512_pd256(arg___A: __m512d) __m256d {
    var __A = arg___A;
    _ = &__A;
    return @shuffle(@typeInfo(@TypeOf(__A)).Vector.child, __A, __A, @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__A)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__A)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(__A)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(__A)).Vector.len),
    });
}
pub inline fn _mm512_castps512_ps128(arg___a: __m512) __m128 {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(__a)).Vector.child, __a, __a, @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(__a)).Vector.len),
    });
}
pub inline fn _mm512_castps512_ps256(arg___A: __m512) __m256 {
    var __A = arg___A;
    _ = &__A;
    return @shuffle(@typeInfo(@TypeOf(__A)).Vector.child, __A, __A, @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__A)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__A)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(__A)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(__A)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(__A)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(__A)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(__A)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(__A)).Vector.len),
    });
}
pub inline fn _mm512_castpd_ps(arg___A: __m512d) __m512 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512, @bitCast(__A));
}
pub inline fn _mm512_castpd_si512(arg___A: __m512d) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(__A));
}
// /usr/lib/zig/include/avx512fintrin.h:454:17: warning: TODO implement function '__builtin_nondeterministic_value' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:452:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_castpd128_pd512(arg___A: __m128d) __m512d;
pub inline fn _mm512_castps_pd(arg___A: __m512) __m512d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512d, @bitCast(__A));
}
pub inline fn _mm512_castps_si512(arg___A: __m512) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(__A));
}
// /usr/lib/zig/include/avx512fintrin.h:475:16: warning: TODO implement function '__builtin_nondeterministic_value' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:473:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_castps128_ps512(arg___A: __m128) __m512;
// /usr/lib/zig/include/avx512fintrin.h:484:17: warning: TODO implement function '__builtin_nondeterministic_value' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:482:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_castsi128_si512(arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:493:42: warning: TODO implement function '__builtin_nondeterministic_value' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:491:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_castsi256_si512(arg___A: __m256i) __m512i;
pub inline fn _mm512_castsi512_ps(arg___A: __m512i) __m512 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512, @bitCast(__A));
}
pub inline fn _mm512_castsi512_pd(arg___A: __m512i) __m512d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512d, @bitCast(__A));
}
pub inline fn _mm512_castsi512_si128(arg___A: __m512i) __m128i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(__A)).Vector.child, __A, __A, @Vector(2, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__A)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__A)).Vector.len),
    })));
}
pub inline fn _mm512_castsi512_si256(arg___A: __m512i) __m256i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(__A)).Vector.child, __A, __A, @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__A)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__A)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(__A)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(__A)).Vector.len),
    })));
}
pub inline fn _mm512_int2mask(arg___a: c_int) __mmask16 {
    var __a = arg___a;
    _ = &__a;
    return @as(__mmask16, @bitCast(@as(c_short, @truncate(__a))));
}
pub inline fn _mm512_mask2int(arg___a: __mmask16) c_int {
    var __a = arg___a;
    _ = &__a;
    return @as(c_int, @bitCast(@as(c_uint, __a)));
}
pub inline fn _mm512_zextpd128_pd512(arg___a: __m128d) __m512d {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.child, @as(__v2df, @bitCast(__a)), @as(__v2df, @bitCast(_mm_setzero_pd())), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm512_zextpd256_pd512(arg___a: __m256d) __m512d {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.child, @as(__v4df, @bitCast(__a)), @as(__v4df, @bitCast(_mm256_setzero_pd())), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm512_zextps128_ps512(arg___a: __m128) __m512 {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.child, @as(__v4sf, @bitCast(__a)), @as(__v4sf, @bitCast(_mm_setzero_ps())), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm512_zextps256_ps512(arg___a: __m256) __m512 {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.child, @as(__v8sf, @bitCast(__a)), @as(__v8sf, @bitCast(_mm256_setzero_ps())), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm512_zextsi128_si512(arg___a: __m128i) __m512i {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.child, @as(__v2di, @bitCast(__a)), @as(__v2di, @bitCast(_mm_setzero_si128())), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm512_zextsi256_si512(arg___a: __m256i) __m512i {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.child, @as(__v4di, @bitCast(__a)), @as(__v4di, @bitCast(_mm256_setzero_si256())), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__a)))).Vector.len),
    });
}
pub inline fn _mm512_and_epi32(arg___a: __m512i, arg___b: __m512i) __m512i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512i, @bitCast(@as(__v16su, @bitCast(__a)) & @as(__v16su, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512fintrin.h:652:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:650:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_and_epi32(arg___src: __m512i, arg___k: __mmask16, arg___a: __m512i, arg___b: __m512i) __m512i;
pub inline fn _mm512_maskz_and_epi32(arg___k: __mmask16, arg___a: __m512i, arg___b: __m512i) __m512i {
    var __k = arg___k;
    _ = &__k;
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return _mm512_mask_and_epi32(_mm512_setzero_si512(), __k, __a, __b);
}
pub inline fn _mm512_and_epi64(arg___a: __m512i, arg___b: __m512i) __m512i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512i, @bitCast(@as(__v8du, @bitCast(__a)) & @as(__v8du, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512fintrin.h:673:22: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:671:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_and_epi64(arg___src: __m512i, arg___k: __mmask8, arg___a: __m512i, arg___b: __m512i) __m512i;
pub inline fn _mm512_maskz_and_epi64(arg___k: __mmask8, arg___a: __m512i, arg___b: __m512i) __m512i {
    var __k = arg___k;
    _ = &__k;
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return _mm512_mask_and_epi64(_mm512_setzero_si512(), __k, __a, __b);
}
pub inline fn _mm512_andnot_si512(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(~@as(__v8du, @bitCast(__A)) & @as(__v8du, @bitCast(__B))));
}
pub inline fn _mm512_andnot_epi32(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(~@as(__v16su, @bitCast(__A)) & @as(__v16su, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512fintrin.h:700:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:698:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_andnot_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_maskz_andnot_epi32(arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm512_mask_andnot_epi32(_mm512_setzero_si512(), __U, __A, __B);
}
pub inline fn _mm512_andnot_epi64(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(~@as(__v8du, @bitCast(__A)) & @as(__v8du, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512fintrin.h:721:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:719:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_andnot_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_maskz_andnot_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm512_mask_andnot_epi64(_mm512_setzero_si512(), __U, __A, __B);
}
pub inline fn _mm512_or_epi32(arg___a: __m512i, arg___b: __m512i) __m512i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512i, @bitCast(@as(__v16su, @bitCast(__a)) | @as(__v16su, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512fintrin.h:742:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:740:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_or_epi32(arg___src: __m512i, arg___k: __mmask16, arg___a: __m512i, arg___b: __m512i) __m512i;
pub inline fn _mm512_maskz_or_epi32(arg___k: __mmask16, arg___a: __m512i, arg___b: __m512i) __m512i {
    var __k = arg___k;
    _ = &__k;
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return _mm512_mask_or_epi32(_mm512_setzero_si512(), __k, __a, __b);
}
pub inline fn _mm512_or_epi64(arg___a: __m512i, arg___b: __m512i) __m512i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512i, @bitCast(@as(__v8du, @bitCast(__a)) | @as(__v8du, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512fintrin.h:762:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:760:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_or_epi64(arg___src: __m512i, arg___k: __mmask8, arg___a: __m512i, arg___b: __m512i) __m512i;
pub inline fn _mm512_maskz_or_epi64(arg___k: __mmask8, arg___a: __m512i, arg___b: __m512i) __m512i {
    var __k = arg___k;
    _ = &__k;
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return _mm512_mask_or_epi64(_mm512_setzero_si512(), __k, __a, __b);
}
pub inline fn _mm512_xor_epi32(arg___a: __m512i, arg___b: __m512i) __m512i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512i, @bitCast(@as(__v16su, @bitCast(__a)) ^ @as(__v16su, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512fintrin.h:782:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:780:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_xor_epi32(arg___src: __m512i, arg___k: __mmask16, arg___a: __m512i, arg___b: __m512i) __m512i;
pub inline fn _mm512_maskz_xor_epi32(arg___k: __mmask16, arg___a: __m512i, arg___b: __m512i) __m512i {
    var __k = arg___k;
    _ = &__k;
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return _mm512_mask_xor_epi32(_mm512_setzero_si512(), __k, __a, __b);
}
pub inline fn _mm512_xor_epi64(arg___a: __m512i, arg___b: __m512i) __m512i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512i, @bitCast(@as(__v8du, @bitCast(__a)) ^ @as(__v8du, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512fintrin.h:802:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:800:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_xor_epi64(arg___src: __m512i, arg___k: __mmask8, arg___a: __m512i, arg___b: __m512i) __m512i;
pub inline fn _mm512_maskz_xor_epi64(arg___k: __mmask8, arg___a: __m512i, arg___b: __m512i) __m512i {
    var __k = arg___k;
    _ = &__k;
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return _mm512_mask_xor_epi64(_mm512_setzero_si512(), __k, __a, __b);
}
pub inline fn _mm512_and_si512(arg___a: __m512i, arg___b: __m512i) __m512i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512i, @bitCast(@as(__v8du, @bitCast(__a)) & @as(__v8du, @bitCast(__b))));
}
pub inline fn _mm512_or_si512(arg___a: __m512i, arg___b: __m512i) __m512i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512i, @bitCast(@as(__v8du, @bitCast(__a)) | @as(__v8du, @bitCast(__b))));
}
pub inline fn _mm512_xor_si512(arg___a: __m512i, arg___b: __m512i) __m512i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512i, @bitCast(@as(__v8du, @bitCast(__a)) ^ @as(__v8du, @bitCast(__b))));
}
pub inline fn _mm512_add_pd(arg___a: __m512d, arg___b: __m512d) __m512d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512d, @bitCast(@as(__v8df, @bitCast(__a)) + @as(__v8df, @bitCast(__b))));
}
pub inline fn _mm512_add_ps(arg___a: __m512, arg___b: __m512) __m512 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512, @bitCast(@as(__v16sf, @bitCast(__a)) + @as(__v16sf, @bitCast(__b))));
}
pub inline fn _mm512_mul_pd(arg___a: __m512d, arg___b: __m512d) __m512d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512d, @bitCast(@as(__v8df, @bitCast(__a)) * @as(__v8df, @bitCast(__b))));
}
pub inline fn _mm512_mul_ps(arg___a: __m512, arg___b: __m512) __m512 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512, @bitCast(@as(__v16sf, @bitCast(__a)) * @as(__v16sf, @bitCast(__b))));
}
pub inline fn _mm512_sub_pd(arg___a: __m512d, arg___b: __m512d) __m512d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512d, @bitCast(@as(__v8df, @bitCast(__a)) - @as(__v8df, @bitCast(__b))));
}
pub inline fn _mm512_sub_ps(arg___a: __m512, arg___b: __m512) __m512 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512, @bitCast(@as(__v16sf, @bitCast(__a)) - @as(__v16sf, @bitCast(__b))));
}
pub inline fn _mm512_add_epi64(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@as(__v8du, @bitCast(__A)) + @as(__v8du, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512fintrin.h:878:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:876:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_add_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:886:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:884:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_add_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_sub_epi64(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@as(__v8du, @bitCast(__A)) - @as(__v8du, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512fintrin.h:900:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:898:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sub_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:908:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:906:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sub_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_add_epi32(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@as(__v16su, @bitCast(__A)) + @as(__v16su, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512fintrin.h:922:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:920:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_add_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:930:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:928:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_add_epi32(arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_sub_epi32(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@as(__v16su, @bitCast(__A)) - @as(__v16su, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512fintrin.h:944:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:942:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sub_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:952:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:950:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sub_epi32(arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:974:20: warning: TODO implement function '__builtin_ia32_maxpd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:972:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_max_pd(arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:981:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:979:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_max_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:989:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:987:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_max_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1011:19: warning: TODO implement function '__builtin_ia32_maxps512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1009:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_max_ps(arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1018:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1016:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_max_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1026:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1024:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_max_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1033:19: warning: TODO implement function '__builtin_ia32_maxss_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1032:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_max_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:1042:19: warning: TODO implement function '__builtin_ia32_maxss_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1041:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_max_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:1069:20: warning: TODO implement function '__builtin_ia32_maxsd_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1068:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_max_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:1078:20: warning: TODO implement function '__builtin_ia32_maxsd_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1077:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_max_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:1107:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1105:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_max_epi32(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1113:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1111:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_max_epi32(arg___W: __m512i, arg___M: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1121:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1119:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_max_epi32(arg___M: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1129:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1127:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_max_epu32(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1135:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1133:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_max_epu32(arg___W: __m512i, arg___M: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1143:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1141:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_max_epu32(arg___M: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1151:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1149:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_max_epi64(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1157:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1155:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_max_epi64(arg___W: __m512i, arg___M: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1165:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1163:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_max_epi64(arg___M: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1173:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1171:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_max_epu64(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1179:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1177:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_max_epu64(arg___W: __m512i, arg___M: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1187:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1185:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_max_epu64(arg___M: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1209:20: warning: TODO implement function '__builtin_ia32_minpd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1207:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_min_pd(arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1216:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1214:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_min_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1224:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1222:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_min_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1246:19: warning: TODO implement function '__builtin_ia32_minps512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1244:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_min_ps(arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1253:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1251:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_min_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1261:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1259:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_min_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1268:19: warning: TODO implement function '__builtin_ia32_minss_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1267:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_min_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:1277:19: warning: TODO implement function '__builtin_ia32_minss_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1276:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_min_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:1304:20: warning: TODO implement function '__builtin_ia32_minsd_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1303:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_min_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:1313:20: warning: TODO implement function '__builtin_ia32_minsd_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1312:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_min_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:1342:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1340:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_min_epi32(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1348:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1346:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_min_epi32(arg___W: __m512i, arg___M: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1356:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1354:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_min_epi32(arg___M: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1364:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1362:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_min_epu32(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1370:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1368:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_min_epu32(arg___W: __m512i, arg___M: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1378:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1376:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_min_epu32(arg___M: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1386:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1384:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_min_epi64(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1392:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1390:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_min_epi64(arg___W: __m512i, arg___M: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1400:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1398:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_min_epi64(arg___M: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1408:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1406:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_min_epu64(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1414:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1412:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_min_epu64(arg___W: __m512i, arg___M: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1422:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1420:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_min_epu64(arg___M: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1430:19: warning: TODO implement function '__builtin_ia32_pmuldq512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1428:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mul_epi32(arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1436:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1434:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mul_epi32(arg___W: __m512i, arg___M: __mmask8, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1444:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1442:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mul_epi32(arg___M: __mmask8, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1452:19: warning: TODO implement function '__builtin_ia32_pmuludq512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1450:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mul_epu32(arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1458:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1456:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mul_epu32(arg___W: __m512i, arg___M: __mmask8, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1466:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1464:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mul_epu32(arg___M: __mmask8, arg___X: __m512i, arg___Y: __m512i) __m512i;
pub inline fn _mm512_mullo_epi32(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@as(__v16su, @bitCast(__A)) * @as(__v16su, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512fintrin.h:1480:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1478:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mullo_epi32(arg___M: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1488:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1486:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mullo_epi32(arg___W: __m512i, arg___M: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_mullox_epi64(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@as(__v8du, @bitCast(__A)) * @as(__v8du, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512fintrin.h:1500:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1499:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mullox_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1521:19: warning: TODO implement function '__builtin_ia32_sqrtpd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1519:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_sqrt_pd(arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1528:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1526:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sqrt_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1536:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1534:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sqrt_pd(arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1557:18: warning: TODO implement function '__builtin_ia32_sqrtps512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1555:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_sqrt_ps(arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1564:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1562:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sqrt_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1572:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1570:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sqrt_ps(arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1580:20: warning: TODO implement function '__builtin_ia32_rsqrt14pd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1578:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_rsqrt14_pd(arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1588:20: warning: TODO implement function '__builtin_ia32_rsqrt14pd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1586:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_rsqrt14_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1596:20: warning: TODO implement function '__builtin_ia32_rsqrt14pd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1594:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_rsqrt14_pd(arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1605:19: warning: TODO implement function '__builtin_ia32_rsqrt14ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1603:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_rsqrt14_ps(arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1614:19: warning: TODO implement function '__builtin_ia32_rsqrt14ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1612:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_rsqrt14_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1622:19: warning: TODO implement function '__builtin_ia32_rsqrt14ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1620:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_rsqrt14_ps(arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1631:19: warning: TODO implement function '__builtin_ia32_rsqrt14ss_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1629:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rsqrt14_ss(arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:1641:18: warning: TODO implement function '__builtin_ia32_rsqrt14ss_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1639:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rsqrt14_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:1650:18: warning: TODO implement function '__builtin_ia32_rsqrt14ss_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1648:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rsqrt14_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:1659:20: warning: TODO implement function '__builtin_ia32_rsqrt14sd_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1657:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rsqrt14_sd(arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:1669:19: warning: TODO implement function '__builtin_ia32_rsqrt14sd_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1667:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rsqrt14_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:1678:19: warning: TODO implement function '__builtin_ia32_rsqrt14sd_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1676:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rsqrt14_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:1687:20: warning: TODO implement function '__builtin_ia32_rcp14pd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1685:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_rcp14_pd(arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1696:20: warning: TODO implement function '__builtin_ia32_rcp14pd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1694:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_rcp14_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1704:20: warning: TODO implement function '__builtin_ia32_rcp14pd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1702:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_rcp14_pd(arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1713:19: warning: TODO implement function '__builtin_ia32_rcp14ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1711:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_rcp14_ps(arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1722:19: warning: TODO implement function '__builtin_ia32_rcp14ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1720:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_rcp14_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1730:19: warning: TODO implement function '__builtin_ia32_rcp14ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1728:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_rcp14_ps(arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1739:19: warning: TODO implement function '__builtin_ia32_rcp14ss_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1737:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rcp14_ss(arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:1749:18: warning: TODO implement function '__builtin_ia32_rcp14ss_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1747:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rcp14_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:1758:18: warning: TODO implement function '__builtin_ia32_rcp14ss_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1756:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rcp14_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:1767:20: warning: TODO implement function '__builtin_ia32_rcp14sd_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1765:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rcp14_sd(arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:1777:19: warning: TODO implement function '__builtin_ia32_rcp14sd_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1775:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rcp14_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:1786:19: warning: TODO implement function '__builtin_ia32_rcp14sd_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1784:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rcp14_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:1795:19: warning: TODO implement function '__builtin_ia32_rndscaleps_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1793:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_floor_ps(arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1804:19: warning: TODO implement function '__builtin_ia32_rndscaleps_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1802:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_floor_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1813:20: warning: TODO implement function '__builtin_ia32_rndscalepd_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1811:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_floor_pd(arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1822:20: warning: TODO implement function '__builtin_ia32_rndscalepd_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1820:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_floor_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1831:19: warning: TODO implement function '__builtin_ia32_rndscaleps_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1829:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_ceil_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1840:19: warning: TODO implement function '__builtin_ia32_rndscaleps_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1838:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_ceil_ps(arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1849:20: warning: TODO implement function '__builtin_ia32_rndscalepd_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1847:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_ceil_pd(arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1858:20: warning: TODO implement function '__builtin_ia32_rndscalepd_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1856:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_ceil_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1867:19: warning: TODO implement function '__builtin_elementwise_abs' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1865:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_abs_epi64(arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1873:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1871:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_abs_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1881:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1879:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_abs_epi64(arg___U: __mmask8, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1889:19: warning: TODO implement function '__builtin_elementwise_abs' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1887:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_abs_epi32(arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1895:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1893:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_abs_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1903:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1901:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_abs_epi32(arg___U: __mmask16, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:1911:10: warning: TODO implement function '__builtin_ia32_selectss_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1909:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_add_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:1917:10: warning: TODO implement function '__builtin_ia32_selectss_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1915:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_add_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:1941:10: warning: TODO implement function '__builtin_ia32_selectsd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1939:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_add_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:1947:10: warning: TODO implement function '__builtin_ia32_selectsd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1945:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_add_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:1969:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1968:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_add_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1976:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1975:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_add_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:1983:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1982:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_add_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:1990:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:1989:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_add_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2026:10: warning: TODO implement function '__builtin_ia32_selectss_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2024:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sub_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:2032:10: warning: TODO implement function '__builtin_ia32_selectss_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2030:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sub_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:2055:10: warning: TODO implement function '__builtin_ia32_selectsd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2053:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sub_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:2061:10: warning: TODO implement function '__builtin_ia32_selectsd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2059:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sub_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:2084:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2083:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sub_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2091:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2090:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sub_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2098:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2097:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sub_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2105:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2104:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sub_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2141:10: warning: TODO implement function '__builtin_ia32_selectss_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2139:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mul_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:2147:10: warning: TODO implement function '__builtin_ia32_selectss_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2145:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mul_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:2170:10: warning: TODO implement function '__builtin_ia32_selectsd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2168:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mul_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:2176:10: warning: TODO implement function '__builtin_ia32_selectsd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2174:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mul_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:2199:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2198:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mul_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2206:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2205:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mul_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2213:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2212:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mul_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2220:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2219:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mul_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2256:10: warning: TODO implement function '__builtin_ia32_selectss_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2254:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_div_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:2262:10: warning: TODO implement function '__builtin_ia32_selectss_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2260:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_div_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:2286:10: warning: TODO implement function '__builtin_ia32_selectsd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2284:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_div_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:2292:10: warning: TODO implement function '__builtin_ia32_selectsd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2290:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_div_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
pub inline fn _mm512_div_pd(arg___a: __m512d, arg___b: __m512d) __m512d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512d, @bitCast(@as(__v8df, @bitCast(__a)) / @as(__v8df, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512fintrin.h:2321:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2320:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_div_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2328:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2327:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_div_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
pub inline fn _mm512_div_ps(arg___a: __m512, arg___b: __m512) __m512 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512, @bitCast(@as(__v16sf, @bitCast(__a)) / @as(__v16sf, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512fintrin.h:2341:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2340:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_div_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2348:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2347:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_div_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2532:20: warning: TODO implement function '__builtin_ia32_vfmaddpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2530:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fmadd_pd(arg___A: __m512d, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2542:20: warning: TODO implement function '__builtin_ia32_vfmaddpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2540:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fmadd_pd(arg___A: __m512d, arg___U: __mmask8, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2552:20: warning: TODO implement function '__builtin_ia32_vfmaddpd512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2550:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fmadd_pd(arg___A: __m512d, arg___B: __m512d, arg___C: __m512d, arg___U: __mmask8) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2562:20: warning: TODO implement function '__builtin_ia32_vfmaddpd512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2560:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fmadd_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2572:20: warning: TODO implement function '__builtin_ia32_vfmaddpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2570:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fmsub_pd(arg___A: __m512d, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2582:20: warning: TODO implement function '__builtin_ia32_vfmaddpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2580:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fmsub_pd(arg___A: __m512d, arg___U: __mmask8, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2592:20: warning: TODO implement function '__builtin_ia32_vfmaddpd512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2590:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fmsub_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2602:20: warning: TODO implement function '__builtin_ia32_vfmaddpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2600:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fnmadd_pd(arg___A: __m512d, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2612:20: warning: TODO implement function '__builtin_ia32_vfmaddpd512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2610:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fnmadd_pd(arg___A: __m512d, arg___B: __m512d, arg___C: __m512d, arg___U: __mmask8) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2622:20: warning: TODO implement function '__builtin_ia32_vfmaddpd512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2620:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fnmadd_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2632:20: warning: TODO implement function '__builtin_ia32_vfmaddpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2630:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fnmsub_pd(arg___A: __m512d, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2642:20: warning: TODO implement function '__builtin_ia32_vfmaddpd512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2640:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fnmsub_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2736:19: warning: TODO implement function '__builtin_ia32_vfmaddps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2734:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fmadd_ps(arg___A: __m512, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2746:19: warning: TODO implement function '__builtin_ia32_vfmaddps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2744:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fmadd_ps(arg___A: __m512, arg___U: __mmask16, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2756:19: warning: TODO implement function '__builtin_ia32_vfmaddps512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2754:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fmadd_ps(arg___A: __m512, arg___B: __m512, arg___C: __m512, arg___U: __mmask16) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2766:19: warning: TODO implement function '__builtin_ia32_vfmaddps512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2764:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fmadd_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2776:19: warning: TODO implement function '__builtin_ia32_vfmaddps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2774:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fmsub_ps(arg___A: __m512, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2786:19: warning: TODO implement function '__builtin_ia32_vfmaddps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2784:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fmsub_ps(arg___A: __m512, arg___U: __mmask16, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2796:19: warning: TODO implement function '__builtin_ia32_vfmaddps512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2794:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fmsub_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2806:19: warning: TODO implement function '__builtin_ia32_vfmaddps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2804:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fnmadd_ps(arg___A: __m512, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2816:19: warning: TODO implement function '__builtin_ia32_vfmaddps512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2814:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fnmadd_ps(arg___A: __m512, arg___B: __m512, arg___C: __m512, arg___U: __mmask16) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2826:19: warning: TODO implement function '__builtin_ia32_vfmaddps512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2824:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fnmadd_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2836:19: warning: TODO implement function '__builtin_ia32_vfmaddps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2834:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fnmsub_ps(arg___A: __m512, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2846:19: warning: TODO implement function '__builtin_ia32_vfmaddps512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2844:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fnmsub_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:2905:20: warning: TODO implement function '__builtin_ia32_vfmaddsubpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2903:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fmaddsub_pd(arg___A: __m512d, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2915:20: warning: TODO implement function '__builtin_ia32_vfmaddsubpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2913:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fmaddsub_pd(arg___A: __m512d, arg___U: __mmask8, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2925:20: warning: TODO implement function '__builtin_ia32_vfmaddsubpd512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2923:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fmaddsub_pd(arg___A: __m512d, arg___B: __m512d, arg___C: __m512d, arg___U: __mmask8) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2935:20: warning: TODO implement function '__builtin_ia32_vfmaddsubpd512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2933:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fmaddsub_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2945:20: warning: TODO implement function '__builtin_ia32_vfmaddsubpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2943:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fmsubadd_pd(arg___A: __m512d, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2955:20: warning: TODO implement function '__builtin_ia32_vfmaddsubpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2953:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fmsubadd_pd(arg___A: __m512d, arg___U: __mmask8, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:2965:20: warning: TODO implement function '__builtin_ia32_vfmaddsubpd512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:2963:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fmsubadd_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:3024:19: warning: TODO implement function '__builtin_ia32_vfmaddsubps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3022:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fmaddsub_ps(arg___A: __m512, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3034:19: warning: TODO implement function '__builtin_ia32_vfmaddsubps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3032:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fmaddsub_ps(arg___A: __m512, arg___U: __mmask16, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3044:19: warning: TODO implement function '__builtin_ia32_vfmaddsubps512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3042:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fmaddsub_ps(arg___A: __m512, arg___B: __m512, arg___C: __m512, arg___U: __mmask16) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3054:19: warning: TODO implement function '__builtin_ia32_vfmaddsubps512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3052:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fmaddsub_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3064:19: warning: TODO implement function '__builtin_ia32_vfmaddsubps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3062:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fmsubadd_ps(arg___A: __m512, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3074:19: warning: TODO implement function '__builtin_ia32_vfmaddsubps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3072:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fmsubadd_ps(arg___A: __m512, arg___U: __mmask16, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3084:19: warning: TODO implement function '__builtin_ia32_vfmaddsubps512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3082:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fmsubadd_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3101:19: warning: TODO implement function '__builtin_ia32_vfmsubpd512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3099:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fmsub_pd(arg___A: __m512d, arg___B: __m512d, arg___C: __m512d, arg___U: __mmask8) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:3117:18: warning: TODO implement function '__builtin_ia32_vfmsubps512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3115:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fmsub_ps(arg___A: __m512, arg___B: __m512, arg___C: __m512, arg___U: __mmask16) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3134:19: warning: TODO implement function '__builtin_ia32_vfmsubaddpd512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3132:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fmsubadd_pd(arg___A: __m512d, arg___B: __m512d, arg___C: __m512d, arg___U: __mmask8) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:3151:18: warning: TODO implement function '__builtin_ia32_vfmsubaddps512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3149:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fmsubadd_ps(arg___A: __m512, arg___B: __m512, arg___C: __m512, arg___U: __mmask16) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3168:20: warning: TODO implement function '__builtin_ia32_vfmaddpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3166:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fnmadd_pd(arg___A: __m512d, arg___U: __mmask8, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:3185:19: warning: TODO implement function '__builtin_ia32_vfmaddps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3183:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fnmadd_ps(arg___A: __m512, arg___U: __mmask16, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3209:20: warning: TODO implement function '__builtin_ia32_vfmaddpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3207:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fnmsub_pd(arg___A: __m512d, arg___U: __mmask8, arg___B: __m512d, arg___C: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:3219:20: warning: TODO implement function '__builtin_ia32_vfmsubpd512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3217:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fnmsub_pd(arg___A: __m512d, arg___B: __m512d, arg___C: __m512d, arg___U: __mmask8) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:3243:19: warning: TODO implement function '__builtin_ia32_vfmaddps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3241:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fnmsub_ps(arg___A: __m512, arg___U: __mmask16, arg___B: __m512, arg___C: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3253:19: warning: TODO implement function '__builtin_ia32_vfmsubps512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3251:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fnmsub_ps(arg___A: __m512, arg___B: __m512, arg___C: __m512, arg___U: __mmask16) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3267:19: warning: TODO implement function '__builtin_ia32_vpermi2vard512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3265:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutex2var_epi32(arg___A: __m512i, arg___I: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3275:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3272:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_permutex2var_epi32(arg___A: __m512i, arg___U: __mmask16, arg___I: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3284:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3281:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask2_permutex2var_epi32(arg___A: __m512i, arg___I: __m512i, arg___U: __mmask16, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3293:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3290:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_permutex2var_epi32(arg___U: __mmask16, arg___A: __m512i, arg___I: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3301:19: warning: TODO implement function '__builtin_ia32_vpermi2varq512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3299:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutex2var_epi64(arg___A: __m512i, arg___I: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3309:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3306:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_permutex2var_epi64(arg___A: __m512i, arg___U: __mmask8, arg___I: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3318:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3315:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask2_permutex2var_epi64(arg___A: __m512i, arg___I: __m512i, arg___U: __mmask8, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3327:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3324:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_permutex2var_epi64(arg___U: __mmask8, arg___A: __m512i, arg___I: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3396:20: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3394:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_blend_pd(arg___U: __mmask8, arg___A: __m512d, arg___W: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:3404:19: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3402:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_blend_ps(arg___U: __mmask16, arg___A: __m512, arg___W: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3412:20: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3410:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_blend_epi64(arg___U: __mmask8, arg___A: __m512i, arg___W: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3420:20: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3418:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_blend_epi32(arg___U: __mmask16, arg___A: __m512i, arg___W: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3558:20: warning: TODO implement function '__builtin_ia32_cvttps2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3556:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvttps_epu32(arg___A: __m512) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3568:20: warning: TODO implement function '__builtin_ia32_cvttps2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3566:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvttps_epu32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3577:20: warning: TODO implement function '__builtin_ia32_cvttps2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3575:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvttps_epu32(arg___U: __mmask16, arg___A: __m512) __m512i;
pub inline fn _mm512_cvtepu32_ps(arg___A: __m512i) __m512 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512, @bitCast(blk: {
        const tmp = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[0]));
        const tmp_1 = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[1]));
        const tmp_2 = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[2]));
        const tmp_3 = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[3]));
        const tmp_4 = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[4]));
        const tmp_5 = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[5]));
        const tmp_6 = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[6]));
        const tmp_7 = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[7]));
        const tmp_8 = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[8]));
        const tmp_9 = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[9]));
        const tmp_10 = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[10]));
        const tmp_11 = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[11]));
        const tmp_12 = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[12]));
        const tmp_13 = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[13]));
        const tmp_14 = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[14]));
        const tmp_15 = @as(f32, @floatFromInt(@as(__v16su, @bitCast(__A))[15]));
        break :blk __v16sf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:3622:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3620:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepu32_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512i) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3630:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3628:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepu32_ps(arg___U: __mmask16, arg___A: __m512i) __m512;
pub inline fn _mm512_cvtepi32_pd(arg___A: __m256i) __m512d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512d, @bitCast(blk: {
        const tmp = @as(f64, @floatFromInt(@as(__v8si, @bitCast(__A))[0]));
        const tmp_1 = @as(f64, @floatFromInt(@as(__v8si, @bitCast(__A))[1]));
        const tmp_2 = @as(f64, @floatFromInt(@as(__v8si, @bitCast(__A))[2]));
        const tmp_3 = @as(f64, @floatFromInt(@as(__v8si, @bitCast(__A))[3]));
        const tmp_4 = @as(f64, @floatFromInt(@as(__v8si, @bitCast(__A))[4]));
        const tmp_5 = @as(f64, @floatFromInt(@as(__v8si, @bitCast(__A))[5]));
        const tmp_6 = @as(f64, @floatFromInt(@as(__v8si, @bitCast(__A))[6]));
        const tmp_7 = @as(f64, @floatFromInt(@as(__v8si, @bitCast(__A))[7]));
        break :blk __v8df{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:3644:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3642:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi32_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m256i) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:3652:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3650:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi32_pd(arg___U: __mmask8, arg___A: __m256i) __m512d;
pub inline fn _mm512_cvtepi32lo_pd(arg___A: __m512i) __m512d {
    var __A = arg___A;
    _ = &__A;
    return _mm512_cvtepi32_pd(_mm512_castsi512_si256(__A));
}
pub inline fn _mm512_mask_cvtepi32lo_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512i) __m512d {
    var __W = arg___W;
    _ = &__W;
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return _mm512_mask_cvtepi32_pd(__W, __U, _mm512_castsi512_si256(__A));
}
pub inline fn _mm512_cvtepi32_ps(arg___A: __m512i) __m512 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512, @bitCast(blk: {
        const tmp = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[0]));
        const tmp_1 = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[1]));
        const tmp_2 = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[2]));
        const tmp_3 = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[3]));
        const tmp_4 = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[4]));
        const tmp_5 = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[5]));
        const tmp_6 = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[6]));
        const tmp_7 = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[7]));
        const tmp_8 = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[8]));
        const tmp_9 = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[9]));
        const tmp_10 = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[10]));
        const tmp_11 = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[11]));
        const tmp_12 = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[12]));
        const tmp_13 = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[13]));
        const tmp_14 = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[14]));
        const tmp_15 = @as(f32, @floatFromInt(@as(__v16si, @bitCast(__A))[15]));
        break :blk __v16sf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:3678:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3676:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi32_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512i) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3686:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3684:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi32_ps(arg___U: __mmask16, arg___A: __m512i) __m512;
pub inline fn _mm512_cvtepu32_pd(arg___A: __m256i) __m512d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512d, @bitCast(blk: {
        const tmp = @as(f64, @floatFromInt(@as(__v8su, @bitCast(__A))[0]));
        const tmp_1 = @as(f64, @floatFromInt(@as(__v8su, @bitCast(__A))[1]));
        const tmp_2 = @as(f64, @floatFromInt(@as(__v8su, @bitCast(__A))[2]));
        const tmp_3 = @as(f64, @floatFromInt(@as(__v8su, @bitCast(__A))[3]));
        const tmp_4 = @as(f64, @floatFromInt(@as(__v8su, @bitCast(__A))[4]));
        const tmp_5 = @as(f64, @floatFromInt(@as(__v8su, @bitCast(__A))[5]));
        const tmp_6 = @as(f64, @floatFromInt(@as(__v8su, @bitCast(__A))[6]));
        const tmp_7 = @as(f64, @floatFromInt(@as(__v8su, @bitCast(__A))[7]));
        break :blk __v8df{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:3700:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3698:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepu32_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m256i) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:3708:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3706:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepu32_pd(arg___U: __mmask8, arg___A: __m256i) __m512d;
pub inline fn _mm512_cvtepu32lo_pd(arg___A: __m512i) __m512d {
    var __A = arg___A;
    _ = &__A;
    return _mm512_cvtepu32_pd(_mm512_castsi512_si256(__A));
}
pub inline fn _mm512_mask_cvtepu32lo_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512i) __m512d {
    var __W = arg___W;
    _ = &__W;
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return _mm512_mask_cvtepu32_pd(__W, __U, _mm512_castsi512_si256(__A));
}
// /usr/lib/zig/include/avx512fintrin.h:3743:19: warning: TODO implement function '__builtin_ia32_cvtpd2ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3741:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtpd_ps(arg___A: __m512d) __m256;
// /usr/lib/zig/include/avx512fintrin.h:3752:19: warning: TODO implement function '__builtin_ia32_cvtpd2ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3750:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtpd_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m512d) __m256;
// /usr/lib/zig/include/avx512fintrin.h:3761:19: warning: TODO implement function '__builtin_ia32_cvtpd2ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3759:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtpd_ps(arg___U: __mmask8, arg___A: __m512d) __m256;
pub inline fn _mm512_cvtpd_pslo(arg___A: __m512d) __m512 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.child, @as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))), @as(__v8sf, @bitCast(_mm256_setzero_ps())), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_cvtpd_ps(__A))))).Vector.len),
    })));
}
pub inline fn _mm512_mask_cvtpd_pslo(arg___W: __m512, arg___U: __mmask8, arg___A: __m512d) __m512 {
    var __W = arg___W;
    _ = &__W;
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return @as(__m512, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.child, @as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))), @as(__v8sf, @bitCast(_mm256_setzero_ps())), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(_mm512_mask_cvtpd_ps(_mm512_castps512_ps256(__W), __U, __A))))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:3823:19: warning: TODO implement function '__builtin_ia32_vcvtph2ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3821:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtph_ps(arg___A: __m256i) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3833:19: warning: TODO implement function '__builtin_ia32_vcvtph2ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3831:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtph_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m256i) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3842:19: warning: TODO implement function '__builtin_ia32_vcvtph2ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3840:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtph_ps(arg___U: __mmask16, arg___A: __m256i) __m512;
// /usr/lib/zig/include/avx512fintrin.h:3866:19: warning: TODO implement function '__builtin_ia32_cvttpd2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3864:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvttpd_epi32(arg___a: __m512d) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:3875:20: warning: TODO implement function '__builtin_ia32_cvttpd2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3873:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvttpd_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m512d) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:3884:20: warning: TODO implement function '__builtin_ia32_cvttpd2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3882:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvttpd_epi32(arg___U: __mmask8, arg___A: __m512d) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:3909:5: warning: TODO implement function '__builtin_ia32_cvttps2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3906:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvttps_epi32(arg___a: __m512) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3917:20: warning: TODO implement function '__builtin_ia32_cvttps2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3915:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvttps_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3926:20: warning: TODO implement function '__builtin_ia32_cvttps2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3924:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvttps_epi32(arg___U: __mmask16, arg___A: __m512) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3950:20: warning: TODO implement function '__builtin_ia32_cvtps2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3948:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtps_epi32(arg___A: __m512) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3959:20: warning: TODO implement function '__builtin_ia32_cvtps2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3957:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtps_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3968:20: warning: TODO implement function '__builtin_ia32_cvtps2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3966:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtps_epi32(arg___U: __mmask16, arg___A: __m512) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:3993:20: warning: TODO implement function '__builtin_ia32_cvtpd2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:3991:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtpd_epi32(arg___A: __m512d) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:4003:20: warning: TODO implement function '__builtin_ia32_cvtpd2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4001:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtpd_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m512d) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:4012:20: warning: TODO implement function '__builtin_ia32_cvtpd2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4010:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtpd_epi32(arg___U: __mmask8, arg___A: __m512d) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:4037:20: warning: TODO implement function '__builtin_ia32_cvtps2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4035:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtps_epu32(arg___A: __m512) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4047:20: warning: TODO implement function '__builtin_ia32_cvtps2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4045:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtps_epu32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4056:20: warning: TODO implement function '__builtin_ia32_cvtps2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4054:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtps_epu32(arg___U: __mmask16, arg___A: __m512) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4081:20: warning: TODO implement function '__builtin_ia32_cvtpd2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4079:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtpd_epu32(arg___A: __m512d) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:4091:20: warning: TODO implement function '__builtin_ia32_cvtpd2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4089:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtpd_epu32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m512d) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:4100:20: warning: TODO implement function '__builtin_ia32_cvtpd2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4098:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtpd_epu32(arg___U: __mmask8, arg___A: __m512d) __m256i;
pub inline fn _mm512_cvtsd_f64(arg___a: __m512d) f64 {
    var __a = arg___a;
    _ = &__a;
    return __a[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm512_cvtss_f32(arg___a: __m512) f32 {
    var __a = arg___a;
    _ = &__a;
    return __a[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm512_unpackhi_pd(arg___a: __m512d, arg___b: __m512d) __m512d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512d, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.child, @as(__v8df, @bitCast(__a)), @as(__v8df, @bitCast(__b)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 1) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 9) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 1) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 9) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 1) + @as(c_int, 6), @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 9) + @as(c_int, 6), @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:4131:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4129:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_unpackhi_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:4139:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4137:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_unpackhi_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
pub inline fn _mm512_unpacklo_pd(arg___a: __m512d, arg___b: __m512d) __m512d {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512d, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.child, @as(__v8df, @bitCast(__a)), @as(__v8df, @bitCast(__b)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 0) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 0) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 0) + @as(c_int, 6), @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 6), @typeInfo(@TypeOf(@as(__v8df, @bitCast(__a)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:4154:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4152:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_unpacklo_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:4162:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4160:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_unpacklo_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
pub inline fn _mm512_unpackhi_ps(arg___a: __m512, arg___b: __m512) __m512 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.child, @as(__v16sf, @bitCast(__a)), @as(__v16sf, @bitCast(__b)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(18, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(19, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 2) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 18) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 3) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 19) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 2) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 18) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 3) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 19) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 2) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 18) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 3) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 19) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:4180:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4178:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_unpackhi_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:4188:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4186:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_unpackhi_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
pub inline fn _mm512_unpacklo_ps(arg___a: __m512, arg___b: __m512) __m512 {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m512, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.child, @as(__v16sf, @bitCast(__a)), @as(__v16sf, @bitCast(__b)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(16, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(17, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 0) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 1) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 17) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 0) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 1) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 17) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 0) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 1) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 17) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__a)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:4206:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4204:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_unpacklo_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:4214:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4212:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_unpacklo_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
pub inline fn _mm512_unpackhi_epi32(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.child, @as(__v16si, @bitCast(__A)), @as(__v16si, @bitCast(__B)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(18, @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(19, @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 2) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 18) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 3) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 19) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 2) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 18) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 3) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 19) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 2) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 18) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 3) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 19) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:4232:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4230:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_unpackhi_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4240:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4238:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_unpackhi_epi32(arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_unpacklo_epi32(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.child, @as(__v16si, @bitCast(__A)), @as(__v16si, @bitCast(__B)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(16, @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(17, @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 0) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 1) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 17) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 0) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 1) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 17) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 0) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 16) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 1) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 17) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v16si, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:4258:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4256:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_unpacklo_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4266:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4264:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_unpacklo_epi32(arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_unpackhi_epi64(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.child, @as(__v8di, @bitCast(__A)), @as(__v8di, @bitCast(__B)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 1) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 9) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 1) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 9) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 1) + @as(c_int, 6), @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 9) + @as(c_int, 6), @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:4281:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4279:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_unpackhi_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4289:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4287:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_unpackhi_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_unpacklo_epi64(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.child, @as(__v8di, @bitCast(__A)), @as(__v8di, @bitCast(__B)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 0) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 0) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 0) + @as(c_int, 6), @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 8) + @as(c_int, 6), @typeInfo(@TypeOf(@as(__v8di, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:4304:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4302:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_unpacklo_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4312:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4310:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_unpacklo_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_loadu_si512(arg___P_1: ?*const anyopaque) __m512i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_si512 = extern struct {
        __v: __m512i_u align(1) = @import("std").mem.zeroes(__m512i_u),
    };
    _ = &struct___loadu_si512;
    return @as([*c]const struct___loadu_si512, @ptrCast(@alignCast(__P_1))).*.__v;
}
pub inline fn _mm512_loadu_epi32(arg___P_1: ?*const anyopaque) __m512i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_epi32 = extern struct {
        __v: __m512i_u align(1) = @import("std").mem.zeroes(__m512i_u),
    };
    _ = &struct___loadu_epi32;
    return @as([*c]const struct___loadu_epi32, @ptrCast(@alignCast(__P_1))).*.__v;
}
// /usr/lib/zig/include/avx512fintrin.h:4341:20: warning: TODO implement function '__builtin_ia32_loaddqusi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4339:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_loadu_epi32(arg___W: __m512i, arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4350:20: warning: TODO implement function '__builtin_ia32_loaddqusi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4348:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_loadu_epi32(arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m512i;
pub inline fn _mm512_loadu_epi64(arg___P_1: ?*const anyopaque) __m512i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_epi64 = extern struct {
        __v: __m512i_u align(1) = @import("std").mem.zeroes(__m512i_u),
    };
    _ = &struct___loadu_epi64;
    return @as([*c]const struct___loadu_epi64, @ptrCast(@alignCast(__P_1))).*.__v;
}
// /usr/lib/zig/include/avx512fintrin.h:4368:20: warning: TODO implement function '__builtin_ia32_loaddqudi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4366:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_loadu_epi64(arg___W: __m512i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4376:20: warning: TODO implement function '__builtin_ia32_loaddqudi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4374:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_loadu_epi64(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4385:19: warning: TODO implement function '__builtin_ia32_loadups512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4383:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_loadu_ps(arg___W: __m512, arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m512;
// /usr/lib/zig/include/avx512fintrin.h:4393:19: warning: TODO implement function '__builtin_ia32_loadups512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4391:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_loadu_ps(arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m512;
// /usr/lib/zig/include/avx512fintrin.h:4402:20: warning: TODO implement function '__builtin_ia32_loadupd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4400:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_loadu_pd(arg___W: __m512d, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:4410:20: warning: TODO implement function '__builtin_ia32_loadupd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4408:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_loadu_pd(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m512d;
pub inline fn _mm512_loadu_pd(arg___p: ?*const anyopaque) __m512d {
    var __p = arg___p;
    _ = &__p;
    const struct___loadu_pd = extern struct {
        __v: __m512d_u align(1) = @import("std").mem.zeroes(__m512d_u),
    };
    _ = &struct___loadu_pd;
    return @as([*c]const struct___loadu_pd, @ptrCast(@alignCast(__p))).*.__v;
}
pub inline fn _mm512_loadu_ps(arg___p: ?*const anyopaque) __m512 {
    var __p = arg___p;
    _ = &__p;
    const struct___loadu_ps = extern struct {
        __v: __m512_u align(1) = @import("std").mem.zeroes(__m512_u),
    };
    _ = &struct___loadu_ps;
    return @as([*c]const struct___loadu_ps, @ptrCast(@alignCast(__p))).*.__v;
}
pub inline fn _mm512_load_ps(arg___p: ?*const anyopaque) __m512 {
    var __p = arg___p;
    _ = &__p;
    return @as([*c]const __m512, @ptrCast(@alignCast(__p))).*;
}
// /usr/lib/zig/include/avx512fintrin.h:4443:19: warning: TODO implement function '__builtin_ia32_loadaps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4441:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_load_ps(arg___W: __m512, arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m512;
// /usr/lib/zig/include/avx512fintrin.h:4451:19: warning: TODO implement function '__builtin_ia32_loadaps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4449:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_load_ps(arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m512;
pub inline fn _mm512_load_pd(arg___p: ?*const anyopaque) __m512d {
    var __p = arg___p;
    _ = &__p;
    return @as([*c]const __m512d, @ptrCast(@alignCast(__p))).*;
}
// /usr/lib/zig/include/avx512fintrin.h:4466:20: warning: TODO implement function '__builtin_ia32_loadapd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4464:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_load_pd(arg___W: __m512d, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:4474:20: warning: TODO implement function '__builtin_ia32_loadapd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4472:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_load_pd(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m512d;
pub inline fn _mm512_load_si512(arg___P_1: ?*const anyopaque) __m512i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    return @as([*c]const __m512i, @ptrCast(@alignCast(__P_1))).*;
}
pub inline fn _mm512_load_epi32(arg___P_1: ?*const anyopaque) __m512i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    return @as([*c]const __m512i, @ptrCast(@alignCast(__P_1))).*;
}
pub inline fn _mm512_load_epi64(arg___P_1: ?*const anyopaque) __m512i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    return @as([*c]const __m512i, @ptrCast(@alignCast(__P_1))).*;
}
pub inline fn _mm512_storeu_epi64(arg___P_1: ?*anyopaque, arg___A: __m512i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_epi64 = extern struct {
        __v: __m512i_u align(1) = @import("std").mem.zeroes(__m512i_u),
    };
    _ = &struct___storeu_epi64;
    @as([*c]struct___storeu_epi64, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
// /usr/lib/zig/include/avx512fintrin.h:4512:3: warning: TODO implement function '__builtin_ia32_storedqudi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4510:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_storeu_epi64(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m512i) void;
pub inline fn _mm512_storeu_si512(arg___P_1: ?*anyopaque, arg___A: __m512i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_si512 = extern struct {
        __v: __m512i_u align(1) = @import("std").mem.zeroes(__m512i_u),
    };
    _ = &struct___storeu_si512;
    @as([*c]struct___storeu_si512, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
pub inline fn _mm512_storeu_epi32(arg___P_1: ?*anyopaque, arg___A: __m512i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_epi32 = extern struct {
        __v: __m512i_u align(1) = @import("std").mem.zeroes(__m512i_u),
    };
    _ = &struct___storeu_epi32;
    @as([*c]struct___storeu_epi32, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
// /usr/lib/zig/include/avx512fintrin.h:4537:3: warning: TODO implement function '__builtin_ia32_storedqusi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4535:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_storeu_epi32(arg___P_1: ?*anyopaque, arg___U: __mmask16, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:4544:3: warning: TODO implement function '__builtin_ia32_storeupd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4542:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_storeu_pd(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m512d) void;
pub inline fn _mm512_storeu_pd(arg___P_1: ?*anyopaque, arg___A: __m512d) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_pd = extern struct {
        __v: __m512d_u align(1) = @import("std").mem.zeroes(__m512d_u),
    };
    _ = &struct___storeu_pd;
    @as([*c]struct___storeu_pd, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
// /usr/lib/zig/include/avx512fintrin.h:4559:3: warning: TODO implement function '__builtin_ia32_storeups512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4557:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_storeu_ps(arg___P_1: ?*anyopaque, arg___U: __mmask16, arg___A: __m512) void;
pub inline fn _mm512_storeu_ps(arg___P_1: ?*anyopaque, arg___A: __m512) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_ps = extern struct {
        __v: __m512_u align(1) = @import("std").mem.zeroes(__m512_u),
    };
    _ = &struct___storeu_ps;
    @as([*c]struct___storeu_ps, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
// /usr/lib/zig/include/avx512fintrin.h:4575:3: warning: TODO implement function '__builtin_ia32_storeapd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4573:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_store_pd(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m512d) void;
pub inline fn _mm512_store_pd(arg___P_1: ?*anyopaque, arg___A: __m512d) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    @as([*c]__m512d, @ptrCast(@alignCast(__P_1))).* = __A;
}
// /usr/lib/zig/include/avx512fintrin.h:4587:3: warning: TODO implement function '__builtin_ia32_storeaps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4585:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_store_ps(arg___P_1: ?*anyopaque, arg___U: __mmask16, arg___A: __m512) void;
pub inline fn _mm512_store_ps(arg___P_1: ?*anyopaque, arg___A: __m512) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    @as([*c]__m512, @ptrCast(@alignCast(__P_1))).* = __A;
}
pub inline fn _mm512_store_si512(arg___P_1: ?*anyopaque, arg___A: __m512i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    @as([*c]__m512i, @ptrCast(@alignCast(__P_1))).* = __A;
}
pub inline fn _mm512_store_epi32(arg___P_1: ?*anyopaque, arg___A: __m512i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    @as([*c]__m512i, @ptrCast(@alignCast(__P_1))).* = __A;
}
pub inline fn _mm512_store_epi64(arg___P_1: ?*anyopaque, arg___A: __m512i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    @as([*c]__m512i, @ptrCast(@alignCast(__P_1))).* = __A;
}
// /usr/lib/zig/include/avx512fintrin.h:4620:10: warning: TODO implement function '__builtin_ia32_knothi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4618:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_knot(arg___M: __mmask16) __mmask16;
pub inline fn _mm512_cvtepi8_epi32(arg___A: __m128i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(blk: {
        const tmp = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[0])));
        const tmp_1 = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[1])));
        const tmp_2 = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[2])));
        const tmp_3 = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[3])));
        const tmp_4 = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[4])));
        const tmp_5 = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[5])));
        const tmp_6 = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[6])));
        const tmp_7 = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[7])));
        const tmp_8 = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[8])));
        const tmp_9 = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[9])));
        const tmp_10 = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[10])));
        const tmp_11 = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[11])));
        const tmp_12 = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[12])));
        const tmp_13 = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[13])));
        const tmp_14 = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[14])));
        const tmp_15 = @as(c_int, @bitCast(@as(c_int, @as(__v16qs, @bitCast(__A))[15])));
        break :blk __v16si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:4736:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4734:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi8_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4744:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4742:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi8_epi32(arg___U: __mmask16, arg___A: __m128i) __m512i;
pub inline fn _mm512_cvtepi8_epi64(arg___A: __m128i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.child, @as(__v16qs, @bitCast(__A)), @as(__v16qs, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.child, @as(__v16qs, @bitCast(__A)), @as(__v16qs, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
        })[1])));
        const tmp_2 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.child, @as(__v16qs, @bitCast(__A)), @as(__v16qs, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
        })[2])));
        const tmp_3 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.child, @as(__v16qs, @bitCast(__A)), @as(__v16qs, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
        })[3])));
        const tmp_4 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.child, @as(__v16qs, @bitCast(__A)), @as(__v16qs, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
        })[4])));
        const tmp_5 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.child, @as(__v16qs, @bitCast(__A)), @as(__v16qs, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
        })[5])));
        const tmp_6 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.child, @as(__v16qs, @bitCast(__A)), @as(__v16qs, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
        })[6])));
        const tmp_7 = @as(c_longlong, @bitCast(@as(c_longlong, @shuffle(@typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.child, @as(__v16qs, @bitCast(__A)), @as(__v16qs, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qs, @bitCast(__A)))).Vector.len),
        })[7])));
        break :blk __v8di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:4760:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4758:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi8_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4768:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4766:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi8_epi64(arg___U: __mmask8, arg___A: __m128i) __m512i;
pub inline fn _mm512_cvtepi32_epi64(arg___X: __m256i) __m512i {
    var __X = arg___X;
    _ = &__X;
    return @as(__m512i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8si, @bitCast(__X))[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8si, @bitCast(__X))[1])));
        const tmp_2 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8si, @bitCast(__X))[2])));
        const tmp_3 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8si, @bitCast(__X))[3])));
        const tmp_4 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8si, @bitCast(__X))[4])));
        const tmp_5 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8si, @bitCast(__X))[5])));
        const tmp_6 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8si, @bitCast(__X))[6])));
        const tmp_7 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8si, @bitCast(__X))[7])));
        break :blk __v8di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:4782:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4780:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi32_epi64(arg___W: __m512i, arg___U: __mmask8, arg___X: __m256i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4790:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4788:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi32_epi64(arg___U: __mmask8, arg___X: __m256i) __m512i;
pub inline fn _mm512_cvtepi16_epi32(arg___A: __m256i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(blk: {
        const tmp = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[0])));
        const tmp_1 = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[1])));
        const tmp_2 = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[2])));
        const tmp_3 = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[3])));
        const tmp_4 = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[4])));
        const tmp_5 = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[5])));
        const tmp_6 = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[6])));
        const tmp_7 = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[7])));
        const tmp_8 = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[8])));
        const tmp_9 = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[9])));
        const tmp_10 = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[10])));
        const tmp_11 = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[11])));
        const tmp_12 = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[12])));
        const tmp_13 = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[13])));
        const tmp_14 = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[14])));
        const tmp_15 = @as(c_int, @bitCast(@as(c_int, @as(__v16hi, @bitCast(__A))[15])));
        break :blk __v16si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:4804:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4802:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi16_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m256i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4812:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4810:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi16_epi32(arg___U: __mmask16, arg___A: __m256i) __m512i;
pub inline fn _mm512_cvtepi16_epi64(arg___A: __m128i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8hi, @bitCast(__A))[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8hi, @bitCast(__A))[1])));
        const tmp_2 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8hi, @bitCast(__A))[2])));
        const tmp_3 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8hi, @bitCast(__A))[3])));
        const tmp_4 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8hi, @bitCast(__A))[4])));
        const tmp_5 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8hi, @bitCast(__A))[5])));
        const tmp_6 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8hi, @bitCast(__A))[6])));
        const tmp_7 = @as(c_longlong, @bitCast(@as(c_longlong, @as(__v8hi, @bitCast(__A))[7])));
        break :blk __v8di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:4826:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4824:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi16_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4834:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4832:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi16_epi64(arg___U: __mmask8, arg___A: __m128i) __m512i;
pub inline fn _mm512_cvtepu8_epi32(arg___A: __m128i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(blk: {
        const tmp = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[0])));
        const tmp_1 = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[1])));
        const tmp_2 = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[2])));
        const tmp_3 = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[3])));
        const tmp_4 = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[4])));
        const tmp_5 = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[5])));
        const tmp_6 = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[6])));
        const tmp_7 = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[7])));
        const tmp_8 = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[8])));
        const tmp_9 = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[9])));
        const tmp_10 = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[10])));
        const tmp_11 = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[11])));
        const tmp_12 = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[12])));
        const tmp_13 = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[13])));
        const tmp_14 = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[14])));
        const tmp_15 = @as(c_int, @bitCast(@as(c_uint, @as(__v16qu, @bitCast(__A))[15])));
        break :blk __v16si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:4848:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4846:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepu8_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4856:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4854:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepu8_epi32(arg___U: __mmask16, arg___A: __m128i) __m512i;
pub inline fn _mm512_cvtepu8_epi64(arg___A: __m128i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.child, @as(__v16qu, @bitCast(__A)), @as(__v16qu, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
        })[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.child, @as(__v16qu, @bitCast(__A)), @as(__v16qu, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
        })[1])));
        const tmp_2 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.child, @as(__v16qu, @bitCast(__A)), @as(__v16qu, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
        })[2])));
        const tmp_3 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.child, @as(__v16qu, @bitCast(__A)), @as(__v16qu, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
        })[3])));
        const tmp_4 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.child, @as(__v16qu, @bitCast(__A)), @as(__v16qu, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
        })[4])));
        const tmp_5 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.child, @as(__v16qu, @bitCast(__A)), @as(__v16qu, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
        })[5])));
        const tmp_6 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.child, @as(__v16qu, @bitCast(__A)), @as(__v16qu, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
        })[6])));
        const tmp_7 = @as(c_longlong, @bitCast(@as(c_ulonglong, @shuffle(@typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.child, @as(__v16qu, @bitCast(__A)), @as(__v16qu, @bitCast(__A)), @Vector(8, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16qu, @bitCast(__A)))).Vector.len),
        })[7])));
        break :blk __v8di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:4870:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4868:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepu8_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4878:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4876:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepu8_epi64(arg___U: __mmask8, arg___A: __m128i) __m512i;
pub inline fn _mm512_cvtepu32_epi64(arg___X: __m256i) __m512i {
    var __X = arg___X;
    _ = &__X;
    return @as(__m512i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8su, @bitCast(__X))[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8su, @bitCast(__X))[1])));
        const tmp_2 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8su, @bitCast(__X))[2])));
        const tmp_3 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8su, @bitCast(__X))[3])));
        const tmp_4 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8su, @bitCast(__X))[4])));
        const tmp_5 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8su, @bitCast(__X))[5])));
        const tmp_6 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8su, @bitCast(__X))[6])));
        const tmp_7 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8su, @bitCast(__X))[7])));
        break :blk __v8di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:4892:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4890:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepu32_epi64(arg___W: __m512i, arg___U: __mmask8, arg___X: __m256i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4900:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4898:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepu32_epi64(arg___U: __mmask8, arg___X: __m256i) __m512i;
pub inline fn _mm512_cvtepu16_epi32(arg___A: __m256i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(blk: {
        const tmp = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[0])));
        const tmp_1 = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[1])));
        const tmp_2 = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[2])));
        const tmp_3 = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[3])));
        const tmp_4 = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[4])));
        const tmp_5 = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[5])));
        const tmp_6 = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[6])));
        const tmp_7 = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[7])));
        const tmp_8 = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[8])));
        const tmp_9 = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[9])));
        const tmp_10 = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[10])));
        const tmp_11 = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[11])));
        const tmp_12 = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[12])));
        const tmp_13 = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[13])));
        const tmp_14 = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[14])));
        const tmp_15 = @as(c_int, @bitCast(@as(c_uint, @as(__v16hu, @bitCast(__A))[15])));
        break :blk __v16si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:4914:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4912:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepu16_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m256i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4922:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4920:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepu16_epi32(arg___U: __mmask16, arg___A: __m256i) __m512i;
pub inline fn _mm512_cvtepu16_epi64(arg___A: __m128i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(blk: {
        const tmp = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8hu, @bitCast(__A))[0])));
        const tmp_1 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8hu, @bitCast(__A))[1])));
        const tmp_2 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8hu, @bitCast(__A))[2])));
        const tmp_3 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8hu, @bitCast(__A))[3])));
        const tmp_4 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8hu, @bitCast(__A))[4])));
        const tmp_5 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8hu, @bitCast(__A))[5])));
        const tmp_6 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8hu, @bitCast(__A))[6])));
        const tmp_7 = @as(c_longlong, @bitCast(@as(c_ulonglong, @as(__v8hu, @bitCast(__A))[7])));
        break :blk __v8di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:4936:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4934:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepu16_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4944:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4942:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepu16_epi64(arg___U: __mmask8, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4952:19: warning: TODO implement function '__builtin_ia32_prorvd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4950:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_rorv_epi32(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4958:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4956:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_rorv_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4966:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4964:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_rorv_epi32(arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4974:19: warning: TODO implement function '__builtin_ia32_prorvq512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4972:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_rorv_epi64(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4980:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4978:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_rorv_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4988:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:4986:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_rorv_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5064:19: warning: TODO implement function '__builtin_ia32_prolvd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5062:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_rolv_epi32(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5070:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5068:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_rolv_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5078:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5076:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_rolv_epi32(arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5086:19: warning: TODO implement function '__builtin_ia32_prolvq512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5084:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_rolv_epi64(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5092:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5090:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_rolv_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5100:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5098:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_rolv_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5134:19: warning: TODO implement function '__builtin_ia32_pslldi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5132:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_slli_epi32(arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5141:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5138:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_slli_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5148:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5147:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_slli_epi32(arg___U: __mmask16, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5156:19: warning: TODO implement function '__builtin_ia32_psllqi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5154:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_slli_epi64(arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5162:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5160:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_slli_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5170:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5168:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_slli_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5178:19: warning: TODO implement function '__builtin_ia32_psrldi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5176:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_srli_epi32(arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5185:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5182:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_srli_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5192:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5191:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_srli_epi32(arg___U: __mmask16, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5200:19: warning: TODO implement function '__builtin_ia32_psrlqi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5198:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_srli_epi64(arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5207:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5204:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_srli_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5216:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5213:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_srli_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5224:20: warning: TODO implement function '__builtin_ia32_movdqa32load512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5222:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_load_epi32(arg___W: __m512i, arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5232:20: warning: TODO implement function '__builtin_ia32_movdqa32load512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5230:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_load_epi32(arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5241:3: warning: TODO implement function '__builtin_ia32_movdqa32store512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5239:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_store_epi32(arg___P_1: ?*anyopaque, arg___U: __mmask16, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:5248:20: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5246:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mov_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5256:20: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5254:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mov_epi32(arg___U: __mmask16, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5264:20: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5262:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mov_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5272:20: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5270:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mov_epi64(arg___U: __mmask8, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5280:20: warning: TODO implement function '__builtin_ia32_movdqa64load512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5278:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_load_epi64(arg___W: __m512i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5288:20: warning: TODO implement function '__builtin_ia32_movdqa64load512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5286:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_load_epi64(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5297:3: warning: TODO implement function '__builtin_ia32_movdqa64store512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5295:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_store_epi64(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m512i) void;
pub inline fn _mm512_movedup_pd(arg___A: __m512d) __m512d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512d, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8df, @bitCast(__A)))).Vector.child, @as(__v8df, @bitCast(__A)), @as(__v8df, @bitCast(__A)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v8df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v8df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v8df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v8df, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:5311:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5309:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_movedup_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:5319:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5317:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_movedup_pd(arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:5492:20: warning: TODO implement function '__builtin_ia32_getexpsd128_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5490:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_getexp_sd(arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:5499:19: warning: TODO implement function '__builtin_ia32_getexpsd128_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5497:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_getexp_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:5515:19: warning: TODO implement function '__builtin_ia32_getexpsd128_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5513:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_getexp_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:5537:19: warning: TODO implement function '__builtin_ia32_getexpss128_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5535:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_getexp_ss(arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:5544:18: warning: TODO implement function '__builtin_ia32_getexpss128_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5542:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_getexp_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:5560:18: warning: TODO implement function '__builtin_ia32_getexpss128_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5558:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_getexp_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
pub inline fn _mm512_kmov(arg___A: __mmask16) __mmask16 {
    var __A = arg___A;
    _ = &__A;
    return __A;
}
// /usr/lib/zig/include/avx512fintrin.h:5685:19: warning: TODO implement function '__builtin_ia32_pslld512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5683:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_sll_epi32(arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5691:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5689:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sll_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5699:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5697:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sll_epi32(arg___U: __mmask16, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5707:19: warning: TODO implement function '__builtin_ia32_psllq512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5705:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_sll_epi64(arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5713:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5711:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sll_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5721:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5719:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sll_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5729:19: warning: TODO implement function '__builtin_ia32_psllv16si' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5727:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_sllv_epi32(arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5735:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5733:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sllv_epi32(arg___W: __m512i, arg___U: __mmask16, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5743:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5741:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sllv_epi32(arg___U: __mmask16, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5751:19: warning: TODO implement function '__builtin_ia32_psllv8di' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5749:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_sllv_epi64(arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5757:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5755:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sllv_epi64(arg___W: __m512i, arg___U: __mmask8, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5765:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5763:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sllv_epi64(arg___U: __mmask8, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5773:19: warning: TODO implement function '__builtin_ia32_psrad512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5771:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_sra_epi32(arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5779:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5777:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sra_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5787:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5785:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sra_epi32(arg___U: __mmask16, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5795:19: warning: TODO implement function '__builtin_ia32_psraq512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5793:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_sra_epi64(arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5801:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5799:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sra_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5809:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5807:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sra_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5817:19: warning: TODO implement function '__builtin_ia32_psrav16si' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5815:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_srav_epi32(arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5823:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5821:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_srav_epi32(arg___W: __m512i, arg___U: __mmask16, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5831:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5829:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_srav_epi32(arg___U: __mmask16, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5839:19: warning: TODO implement function '__builtin_ia32_psrav8di' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5837:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_srav_epi64(arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5845:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5843:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_srav_epi64(arg___W: __m512i, arg___U: __mmask8, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5853:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5851:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_srav_epi64(arg___U: __mmask8, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5861:19: warning: TODO implement function '__builtin_ia32_psrld512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5859:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_srl_epi32(arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5867:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5865:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_srl_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5875:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5873:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_srl_epi32(arg___U: __mmask16, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5883:19: warning: TODO implement function '__builtin_ia32_psrlq512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5881:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_srl_epi64(arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5889:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5887:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_srl_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5897:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5895:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_srl_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5905:19: warning: TODO implement function '__builtin_ia32_psrlv16si' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5903:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_srlv_epi32(arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5911:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5909:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_srlv_epi32(arg___W: __m512i, arg___U: __mmask16, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5919:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5917:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_srlv_epi32(arg___U: __mmask16, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5927:19: warning: TODO implement function '__builtin_ia32_psrlv8di' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5925:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_srlv_epi64(arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5933:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5931:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_srlv_epi64(arg___W: __m512i, arg___U: __mmask8, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:5941:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:5939:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_srlv_epi64(arg___U: __mmask8, arg___X: __m512i, arg___Y: __m512i) __m512i;
pub const _MM_TERNLOG_A: c_int = 240;
pub const _MM_TERNLOG_B: c_int = 204;
pub const _MM_TERNLOG_C: c_int = 170;
pub const _MM_TERNLOG_ENUM = c_uint;
// /usr/lib/zig/include/avx512fintrin.h:6002:21: warning: TODO implement function '__builtin_ia32_vcvtsd2usi32' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6000:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsd_u32(arg___A: __m128d) c_uint;
// /usr/lib/zig/include/avx512fintrin.h:6014:31: warning: TODO implement function '__builtin_ia32_vcvtsd2usi64' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6012:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsd_u64(arg___A: __m128d) c_ulonglong;
// /usr/lib/zig/include/avx512fintrin.h:6040:21: warning: TODO implement function '__builtin_ia32_vcvtss2usi32' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6038:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtss_u32(arg___A: __m128) c_uint;
// /usr/lib/zig/include/avx512fintrin.h:6052:31: warning: TODO implement function '__builtin_ia32_vcvtss2usi64' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6050:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtss_u64(arg___A: __m128) c_ulonglong;
// /usr/lib/zig/include/avx512fintrin.h:6067:16: warning: TODO implement function '__builtin_ia32_vcvttsd2si32' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6065:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttsd_i32(arg___A: __m128d) c_int;
// /usr/lib/zig/include/avx512fintrin.h:6081:22: warning: TODO implement function '__builtin_ia32_vcvttsd2si64' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6079:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttsd_i64(arg___A: __m128d) c_longlong;
// /usr/lib/zig/include/avx512fintrin.h:6092:21: warning: TODO implement function '__builtin_ia32_vcvttsd2usi32' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6090:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttsd_u32(arg___A: __m128d) c_uint;
// /usr/lib/zig/include/avx512fintrin.h:6104:31: warning: TODO implement function '__builtin_ia32_vcvttsd2usi64' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6102:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttsd_u64(arg___A: __m128d) c_ulonglong;
// /usr/lib/zig/include/avx512fintrin.h:6119:16: warning: TODO implement function '__builtin_ia32_vcvttss2si32' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6117:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttss_i32(arg___A: __m128) c_int;
// /usr/lib/zig/include/avx512fintrin.h:6133:22: warning: TODO implement function '__builtin_ia32_vcvttss2si64' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6131:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttss_i64(arg___A: __m128) c_longlong;
// /usr/lib/zig/include/avx512fintrin.h:6144:21: warning: TODO implement function '__builtin_ia32_vcvttss2usi32' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6142:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttss_u32(arg___A: __m128) c_uint;
// /usr/lib/zig/include/avx512fintrin.h:6156:31: warning: TODO implement function '__builtin_ia32_vcvttss2usi64' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6154:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttss_u64(arg___A: __m128) c_ulonglong;
// /usr/lib/zig/include/avx512fintrin.h:6191:19: warning: TODO implement function '__builtin_ia32_vpermilvarpd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6189:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutevar_pd(arg___A: __m512d, arg___C: __m512i) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:6197:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6195:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_permutevar_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d, arg___C: __m512i) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:6205:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6203:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_permutevar_pd(arg___U: __mmask8, arg___A: __m512d, arg___C: __m512i) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:6213:18: warning: TODO implement function '__builtin_ia32_vpermilvarps512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6211:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutevar_ps(arg___A: __m512, arg___C: __m512i) __m512;
// /usr/lib/zig/include/avx512fintrin.h:6219:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6217:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_permutevar_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512, arg___C: __m512i) __m512;
// /usr/lib/zig/include/avx512fintrin.h:6227:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6225:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_permutevar_ps(arg___U: __mmask16, arg___A: __m512, arg___C: __m512i) __m512;
// /usr/lib/zig/include/avx512fintrin.h:6235:19: warning: TODO implement function '__builtin_ia32_vpermi2varpd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6233:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutex2var_pd(arg___A: __m512d, arg___I: __m512i, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:6242:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6240:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_permutex2var_pd(arg___A: __m512d, arg___U: __mmask8, arg___I: __m512i, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:6251:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6248:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask2_permutex2var_pd(arg___A: __m512d, arg___I: __m512i, arg___U: __mmask8, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:6260:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6257:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_permutex2var_pd(arg___U: __mmask8, arg___A: __m512d, arg___I: __m512i, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:6268:18: warning: TODO implement function '__builtin_ia32_vpermi2varps512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6266:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutex2var_ps(arg___A: __m512, arg___I: __m512i, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:6275:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6273:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_permutex2var_ps(arg___A: __m512, arg___U: __mmask16, arg___I: __m512i, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:6283:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6281:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask2_permutex2var_ps(arg___A: __m512, arg___I: __m512i, arg___U: __mmask16, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:6291:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6289:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_permutex2var_ps(arg___U: __mmask16, arg___A: __m512, arg___I: __m512i, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:6315:20: warning: TODO implement function '__builtin_ia32_cvttpd2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6313:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvttpd_epu32(arg___A: __m512d) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:6325:20: warning: TODO implement function '__builtin_ia32_cvttpd2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6323:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvttpd_epu32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m512d) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:6334:20: warning: TODO implement function '__builtin_ia32_cvttpd2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6332:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvttpd_epu32(arg___U: __mmask8, arg___A: __m512d) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:6446:20: warning: TODO implement function '__builtin_ia32_scalefpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6444:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_scalef_pd(arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:6457:20: warning: TODO implement function '__builtin_ia32_scalefpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6455:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_scalef_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:6467:20: warning: TODO implement function '__builtin_ia32_scalefpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6465:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_scalef_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:6496:19: warning: TODO implement function '__builtin_ia32_scalefps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6494:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_scalef_ps(arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:6507:19: warning: TODO implement function '__builtin_ia32_scalefps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6505:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_scalef_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:6517:19: warning: TODO implement function '__builtin_ia32_scalefps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6515:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_scalef_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:6534:20: warning: TODO implement function '__builtin_ia32_scalefsd_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6532:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_scalef_sd(arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:6543:19: warning: TODO implement function '__builtin_ia32_scalefsd_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6541:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_scalef_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:6559:19: warning: TODO implement function '__builtin_ia32_scalefsd_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6557:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_scalef_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:6581:19: warning: TODO implement function '__builtin_ia32_scalefss_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6579:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_scalef_ss(arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:6590:18: warning: TODO implement function '__builtin_ia32_scalefss_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6588:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_scalef_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:6606:18: warning: TODO implement function '__builtin_ia32_scalefss_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6604:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_scalef_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:6623:19: warning: TODO implement function '__builtin_ia32_psradi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6621:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_srai_epi32(arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:6630:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6627:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_srai_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:6638:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6636:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_srai_epi32(arg___U: __mmask16, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:6646:19: warning: TODO implement function '__builtin_ia32_psraqi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6644:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_srai_epi64(arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:6652:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6650:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_srai_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:6660:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6658:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_srai_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:6758:19: warning: TODO implement function '__builtin_ia32_sqrtsd_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6756:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sqrt_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:6774:19: warning: TODO implement function '__builtin_ia32_sqrtsd_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6772:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sqrt_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:6796:18: warning: TODO implement function '__builtin_ia32_sqrtss_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6794:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sqrt_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:6812:18: warning: TODO implement function '__builtin_ia32_sqrtss_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6810:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sqrt_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
pub inline fn _mm512_broadcast_f32x4(arg___A: __m128) __m512 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.child, @as(__v4sf, @bitCast(__A)), @as(__v4sf, @bitCast(__A)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:6836:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6834:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcast_f32x4(arg___O: __m512, arg___M: __mmask16, arg___A: __m128) __m512;
// /usr/lib/zig/include/avx512fintrin.h:6844:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6842:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcast_f32x4(arg___M: __mmask16, arg___A: __m128) __m512;
pub inline fn _mm512_broadcast_f64x4(arg___A: __m256d) __m512d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512d, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4df, @bitCast(__A)))).Vector.child, @as(__v4df, @bitCast(__A)), @as(__v4df, @bitCast(__A)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4df, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:6859:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6857:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcast_f64x4(arg___O: __m512d, arg___M: __mmask8, arg___A: __m256d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:6867:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6865:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcast_f64x4(arg___M: __mmask8, arg___A: __m256d) __m512d;
pub inline fn _mm512_broadcast_i32x4(arg___A: __m128i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.child, @as(__v4si, @bitCast(__A)), @as(__v4si, @bitCast(__A)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:6883:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6881:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcast_i32x4(arg___O: __m512i, arg___M: __mmask16, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:6891:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6889:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcast_i32x4(arg___M: __mmask16, arg___A: __m128i) __m512i;
pub inline fn _mm512_broadcast_i64x4(arg___A: __m256i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4di, @bitCast(__A)))).Vector.child, @as(__v4di, @bitCast(__A)), @as(__v4di, @bitCast(__A)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4di, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:6906:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6904:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcast_i64x4(arg___O: __m512i, arg___M: __mmask8, arg___A: __m256i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:6914:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6912:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcast_i64x4(arg___M: __mmask8, arg___A: __m256i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:6922:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6920:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcastsd_pd(arg___O: __m512d, arg___M: __mmask8, arg___A: __m128d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:6930:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6928:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcastsd_pd(arg___M: __mmask8, arg___A: __m128d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:6938:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6936:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcastss_ps(arg___O: __m512, arg___M: __mmask16, arg___A: __m128) __m512;
// /usr/lib/zig/include/avx512fintrin.h:6946:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6944:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcastss_ps(arg___M: __mmask16, arg___A: __m128) __m512;
// /usr/lib/zig/include/avx512fintrin.h:6954:20: warning: TODO implement function '__builtin_ia32_pmovsdb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6952:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtsepi32_epi8(arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:6962:20: warning: TODO implement function '__builtin_ia32_pmovsdb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6960:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtsepi32_epi8(arg___O: __m128i, arg___M: __mmask16, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:6969:20: warning: TODO implement function '__builtin_ia32_pmovsdb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6967:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtsepi32_epi8(arg___M: __mmask16, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:6977:3: warning: TODO implement function '__builtin_ia32_pmovsdb512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6975:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtsepi32_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask16, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:6983:20: warning: TODO implement function '__builtin_ia32_pmovsdw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6981:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtsepi32_epi16(arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:6991:20: warning: TODO implement function '__builtin_ia32_pmovsdw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6989:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtsepi32_epi16(arg___O: __m256i, arg___M: __mmask16, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:6998:20: warning: TODO implement function '__builtin_ia32_pmovsdw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:6996:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtsepi32_epi16(arg___M: __mmask16, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7006:3: warning: TODO implement function '__builtin_ia32_pmovsdw512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7004:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtsepi32_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask16, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:7012:20: warning: TODO implement function '__builtin_ia32_pmovsqb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7010:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtsepi64_epi8(arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7020:20: warning: TODO implement function '__builtin_ia32_pmovsqb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7018:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtsepi64_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7027:20: warning: TODO implement function '__builtin_ia32_pmovsqb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7025:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtsepi64_epi8(arg___M: __mmask8, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7035:3: warning: TODO implement function '__builtin_ia32_pmovsqb512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7033:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtsepi64_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:7041:20: warning: TODO implement function '__builtin_ia32_pmovsqd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7039:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtsepi64_epi32(arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7049:20: warning: TODO implement function '__builtin_ia32_pmovsqd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7047:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtsepi64_epi32(arg___O: __m256i, arg___M: __mmask8, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7056:20: warning: TODO implement function '__builtin_ia32_pmovsqd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7054:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtsepi64_epi32(arg___M: __mmask8, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7064:3: warning: TODO implement function '__builtin_ia32_pmovsqd512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7062:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtsepi64_storeu_epi32(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:7070:20: warning: TODO implement function '__builtin_ia32_pmovsqw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7068:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtsepi64_epi16(arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7078:20: warning: TODO implement function '__builtin_ia32_pmovsqw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7076:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtsepi64_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7085:20: warning: TODO implement function '__builtin_ia32_pmovsqw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7083:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtsepi64_epi16(arg___M: __mmask8, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7093:3: warning: TODO implement function '__builtin_ia32_pmovsqw512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7091:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtsepi64_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:7099:20: warning: TODO implement function '__builtin_ia32_pmovusdb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7097:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtusepi32_epi8(arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7107:20: warning: TODO implement function '__builtin_ia32_pmovusdb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7105:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtusepi32_epi8(arg___O: __m128i, arg___M: __mmask16, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7115:20: warning: TODO implement function '__builtin_ia32_pmovusdb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7113:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtusepi32_epi8(arg___M: __mmask16, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7123:3: warning: TODO implement function '__builtin_ia32_pmovusdb512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7121:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtusepi32_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask16, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:7129:20: warning: TODO implement function '__builtin_ia32_pmovusdw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7127:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtusepi32_epi16(arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7137:20: warning: TODO implement function '__builtin_ia32_pmovusdw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7135:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtusepi32_epi16(arg___O: __m256i, arg___M: __mmask16, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7145:20: warning: TODO implement function '__builtin_ia32_pmovusdw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7143:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtusepi32_epi16(arg___M: __mmask16, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7153:3: warning: TODO implement function '__builtin_ia32_pmovusdw512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7151:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtusepi32_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask16, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:7159:20: warning: TODO implement function '__builtin_ia32_pmovusqb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7157:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtusepi64_epi8(arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7167:20: warning: TODO implement function '__builtin_ia32_pmovusqb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7165:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtusepi64_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7175:20: warning: TODO implement function '__builtin_ia32_pmovusqb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7173:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtusepi64_epi8(arg___M: __mmask8, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7183:3: warning: TODO implement function '__builtin_ia32_pmovusqb512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7181:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtusepi64_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:7189:20: warning: TODO implement function '__builtin_ia32_pmovusqd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7187:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtusepi64_epi32(arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7197:20: warning: TODO implement function '__builtin_ia32_pmovusqd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7195:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtusepi64_epi32(arg___O: __m256i, arg___M: __mmask8, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7204:20: warning: TODO implement function '__builtin_ia32_pmovusqd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7202:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtusepi64_epi32(arg___M: __mmask8, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7212:3: warning: TODO implement function '__builtin_ia32_pmovusqd512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7210:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtusepi64_storeu_epi32(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:7218:20: warning: TODO implement function '__builtin_ia32_pmovusqw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7216:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtusepi64_epi16(arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7226:20: warning: TODO implement function '__builtin_ia32_pmovusqw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7224:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtusepi64_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7233:20: warning: TODO implement function '__builtin_ia32_pmovusqw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7231:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtusepi64_epi16(arg___M: __mmask8, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7241:3: warning: TODO implement function '__builtin_ia32_pmovusqw512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7239:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtusepi64_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:7247:20: warning: TODO implement function '__builtin_ia32_pmovdb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7245:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtepi32_epi8(arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7255:20: warning: TODO implement function '__builtin_ia32_pmovdb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7253:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi32_epi8(arg___O: __m128i, arg___M: __mmask16, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7262:20: warning: TODO implement function '__builtin_ia32_pmovdb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7260:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi32_epi8(arg___M: __mmask16, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7270:3: warning: TODO implement function '__builtin_ia32_pmovdb512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7268:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi32_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask16, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:7276:20: warning: TODO implement function '__builtin_ia32_pmovdw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7274:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtepi32_epi16(arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7284:20: warning: TODO implement function '__builtin_ia32_pmovdw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7282:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi32_epi16(arg___O: __m256i, arg___M: __mmask16, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7291:20: warning: TODO implement function '__builtin_ia32_pmovdw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7289:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi32_epi16(arg___M: __mmask16, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7299:3: warning: TODO implement function '__builtin_ia32_pmovdw512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7297:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi32_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask16, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:7305:20: warning: TODO implement function '__builtin_ia32_pmovqb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7303:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtepi64_epi8(arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7313:20: warning: TODO implement function '__builtin_ia32_pmovqb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7311:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi64_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7320:20: warning: TODO implement function '__builtin_ia32_pmovqb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7318:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi64_epi8(arg___M: __mmask8, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7328:3: warning: TODO implement function '__builtin_ia32_pmovqb512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7326:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi64_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:7334:20: warning: TODO implement function '__builtin_ia32_pmovqd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7332:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtepi64_epi32(arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7342:20: warning: TODO implement function '__builtin_ia32_pmovqd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7340:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi64_epi32(arg___O: __m256i, arg___M: __mmask8, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7349:20: warning: TODO implement function '__builtin_ia32_pmovqd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7347:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi64_epi32(arg___M: __mmask8, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512fintrin.h:7357:3: warning: TODO implement function '__builtin_ia32_pmovqd512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7355:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi64_storeu_epi32(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:7363:20: warning: TODO implement function '__builtin_ia32_pmovqw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7361:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtepi64_epi16(arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7371:20: warning: TODO implement function '__builtin_ia32_pmovqw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7369:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi64_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7378:20: warning: TODO implement function '__builtin_ia32_pmovqw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7376:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi64_epi16(arg___M: __mmask8, arg___A: __m512i) __m128i;
// /usr/lib/zig/include/avx512fintrin.h:7386:3: warning: TODO implement function '__builtin_ia32_pmovqw512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7384:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi64_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:7571:20: warning: TODO implement function '__builtin_ia32_getexppd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7569:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_getexp_pd(arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:7580:20: warning: TODO implement function '__builtin_ia32_getexppd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7578:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_getexp_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:7589:20: warning: TODO implement function '__builtin_ia32_getexppd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7587:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_getexp_pd(arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:7613:19: warning: TODO implement function '__builtin_ia32_getexpps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7611:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_getexp_ps(arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:7622:19: warning: TODO implement function '__builtin_ia32_getexpps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7620:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_getexp_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:7631:19: warning: TODO implement function '__builtin_ia32_getexpps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7629:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_getexp_ps(arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:7816:10: warning: TODO implement function '__builtin_ia32_vfmaddss3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7814:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmadd_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:7838:10: warning: TODO implement function '__builtin_ia32_vfmaddss3_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7836:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmadd_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:7854:10: warning: TODO implement function '__builtin_ia32_vfmaddss3_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7852:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmadd_ss(arg___W: __m128, arg___X: __m128, arg___Y: __m128, arg___U: __mmask8) __m128;
// /usr/lib/zig/include/avx512fintrin.h:7870:10: warning: TODO implement function '__builtin_ia32_vfmaddss3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7868:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmsub_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:7892:10: warning: TODO implement function '__builtin_ia32_vfmaddss3_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7890:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmsub_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:7908:10: warning: TODO implement function '__builtin_ia32_vfmsubss3_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7906:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmsub_ss(arg___W: __m128, arg___X: __m128, arg___Y: __m128, arg___U: __mmask8) __m128;
// /usr/lib/zig/include/avx512fintrin.h:7924:10: warning: TODO implement function '__builtin_ia32_vfmaddss3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7922:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fnmadd_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:7946:10: warning: TODO implement function '__builtin_ia32_vfmaddss3_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7944:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fnmadd_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:7962:10: warning: TODO implement function '__builtin_ia32_vfmaddss3_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7960:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fnmadd_ss(arg___W: __m128, arg___X: __m128, arg___Y: __m128, arg___U: __mmask8) __m128;
// /usr/lib/zig/include/avx512fintrin.h:7978:10: warning: TODO implement function '__builtin_ia32_vfmaddss3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7976:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fnmsub_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:8000:10: warning: TODO implement function '__builtin_ia32_vfmaddss3_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:7998:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fnmsub_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:8016:10: warning: TODO implement function '__builtin_ia32_vfmsubss3_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8014:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fnmsub_ss(arg___W: __m128, arg___X: __m128, arg___Y: __m128, arg___U: __mmask8) __m128;
// /usr/lib/zig/include/avx512fintrin.h:8032:10: warning: TODO implement function '__builtin_ia32_vfmaddsd3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8030:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmadd_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8054:10: warning: TODO implement function '__builtin_ia32_vfmaddsd3_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8052:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmadd_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8070:10: warning: TODO implement function '__builtin_ia32_vfmaddsd3_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8068:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmadd_sd(arg___W: __m128d, arg___X: __m128d, arg___Y: __m128d, arg___U: __mmask8) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8086:10: warning: TODO implement function '__builtin_ia32_vfmaddsd3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8084:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmsub_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8108:10: warning: TODO implement function '__builtin_ia32_vfmaddsd3_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8106:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmsub_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8124:10: warning: TODO implement function '__builtin_ia32_vfmsubsd3_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8122:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmsub_sd(arg___W: __m128d, arg___X: __m128d, arg___Y: __m128d, arg___U: __mmask8) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8140:10: warning: TODO implement function '__builtin_ia32_vfmaddsd3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8138:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fnmadd_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8162:10: warning: TODO implement function '__builtin_ia32_vfmaddsd3_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8160:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fnmadd_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8178:10: warning: TODO implement function '__builtin_ia32_vfmaddsd3_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8176:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fnmadd_sd(arg___W: __m128d, arg___X: __m128d, arg___Y: __m128d, arg___U: __mmask8) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8194:10: warning: TODO implement function '__builtin_ia32_vfmaddsd3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8192:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fnmsub_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8216:10: warning: TODO implement function '__builtin_ia32_vfmaddsd3_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8214:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fnmsub_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8233:10: warning: TODO implement function '__builtin_ia32_vfmsubsd3_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8231:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fnmsub_sd(arg___W: __m128d, arg___X: __m128d, arg___Y: __m128d, arg___U: __mmask8) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8275:19: warning: TODO implement function '__builtin_ia32_permvardf512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8273:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutexvar_pd(arg___X: __m512i, arg___Y: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:8281:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8279:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_permutexvar_pd(arg___W: __m512d, arg___U: __mmask8, arg___X: __m512i, arg___Y: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:8289:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8287:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_permutexvar_pd(arg___U: __mmask8, arg___X: __m512i, arg___Y: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:8297:19: warning: TODO implement function '__builtin_ia32_permvardi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8295:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutexvar_epi64(arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8303:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8301:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_permutexvar_epi64(arg___M: __mmask8, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8312:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8309:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_permutexvar_epi64(arg___W: __m512i, arg___M: __mmask8, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8320:18: warning: TODO implement function '__builtin_ia32_permvarsf512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8318:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutexvar_ps(arg___X: __m512i, arg___Y: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:8326:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8324:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_permutexvar_ps(arg___W: __m512, arg___U: __mmask16, arg___X: __m512i, arg___Y: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:8334:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8332:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_permutexvar_ps(arg___U: __mmask16, arg___X: __m512i, arg___Y: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:8342:19: warning: TODO implement function '__builtin_ia32_permvarsi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8340:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutexvar_epi32(arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8350:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8348:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_permutexvar_epi32(arg___M: __mmask16, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8359:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8356:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_permutexvar_epi32(arg___W: __m512i, arg___M: __mmask16, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8369:22: warning: TODO implement function '__builtin_ia32_kandhi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8367:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_kand(arg___A: __mmask16, arg___B: __mmask16) __mmask16;
// /usr/lib/zig/include/avx512fintrin.h:8375:22: warning: TODO implement function '__builtin_ia32_kandnhi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8373:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_kandn(arg___A: __mmask16, arg___B: __mmask16) __mmask16;
// /usr/lib/zig/include/avx512fintrin.h:8381:22: warning: TODO implement function '__builtin_ia32_korhi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8379:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_kor(arg___A: __mmask16, arg___B: __mmask16) __mmask16;
// /usr/lib/zig/include/avx512fintrin.h:8387:10: warning: TODO implement function '__builtin_ia32_kortestchi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8385:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_kortestc(arg___A: __mmask16, arg___B: __mmask16) c_int;
// /usr/lib/zig/include/avx512fintrin.h:8393:10: warning: TODO implement function '__builtin_ia32_kortestzhi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8391:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_kortestz(arg___A: __mmask16, arg___B: __mmask16) c_int;
// /usr/lib/zig/include/avx512fintrin.h:8399:25: warning: TODO implement function '__builtin_ia32_kortestchi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8397:1: warning: unable to translate function, demoted to extern
pub extern fn _kortestc_mask16_u8(arg___A: __mmask16, arg___B: __mmask16) u8;
// /usr/lib/zig/include/avx512fintrin.h:8405:25: warning: TODO implement function '__builtin_ia32_kortestzhi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8403:1: warning: unable to translate function, demoted to extern
pub extern fn _kortestz_mask16_u8(arg___A: __mmask16, arg___B: __mmask16) u8;
// /usr/lib/zig/include/avx512fintrin.h:8410:25: warning: TODO implement function '__builtin_ia32_kortestchi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8409:1: warning: unable to translate function, demoted to extern
pub extern fn _kortest_mask16_u8(arg___A: __mmask16, arg___B: __mmask16, arg___C: [*c]u8) u8;
// /usr/lib/zig/include/avx512fintrin.h:8417:22: warning: TODO implement function '__builtin_ia32_kunpckhi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8415:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_kunpackb(arg___A: __mmask16, arg___B: __mmask16) __mmask16;
// /usr/lib/zig/include/avx512fintrin.h:8423:22: warning: TODO implement function '__builtin_ia32_kxnorhi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8421:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_kxnor(arg___A: __mmask16, arg___B: __mmask16) __mmask16;
// /usr/lib/zig/include/avx512fintrin.h:8429:22: warning: TODO implement function '__builtin_ia32_kxorhi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8427:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_kxor(arg___A: __mmask16, arg___B: __mmask16) __mmask16;
// /usr/lib/zig/include/avx512fintrin.h:8447:24: warning: TODO implement function '__builtin_ia32_kmovw' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8446:1: warning: unable to translate function, demoted to extern
pub extern fn _cvtmask16_u32(arg___A: __mmask16) c_uint;
// /usr/lib/zig/include/avx512fintrin.h:8452:21: warning: TODO implement function '__builtin_ia32_kmovw' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8451:1: warning: unable to translate function, demoted to extern
pub extern fn _cvtu32_mask16(arg___A: c_uint) __mmask16;
// /usr/lib/zig/include/avx512fintrin.h:8457:21: warning: TODO implement function '__builtin_ia32_kmovw' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8456:1: warning: unable to translate function, demoted to extern
pub extern fn _load_mask16(arg___A: [*c]__mmask16) __mmask16;
// /usr/lib/zig/include/avx512fintrin.h:8462:23: warning: TODO implement function '__builtin_ia32_kmovw' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8461:1: warning: unable to translate function, demoted to extern
pub extern fn _store_mask16(arg___A: [*c]__mmask16, arg___B: __mmask16) void;
// /usr/lib/zig/include/avx512fintrin.h:8469:3: warning: TODO implement function '__builtin_nontemporal_store' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8466:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_stream_si512(arg___P_1: ?*anyopaque, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:8476:20: warning: TODO implement function '__builtin_nontemporal_load' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8473:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_stream_load_si512(arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8483:3: warning: TODO implement function '__builtin_nontemporal_store' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8480:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_stream_pd(arg___P_1: ?*anyopaque, arg___A: __m512d) void;
// /usr/lib/zig/include/avx512fintrin.h:8490:3: warning: TODO implement function '__builtin_nontemporal_store' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8487:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_stream_ps(arg___P_1: ?*anyopaque, arg___A: __m512) void;
// /usr/lib/zig/include/avx512fintrin.h:8496:20: warning: TODO implement function '__builtin_ia32_compressdf512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8494:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_compress_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:8504:20: warning: TODO implement function '__builtin_ia32_compressdf512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8502:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_compress_pd(arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:8513:20: warning: TODO implement function '__builtin_ia32_compressdi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8511:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_compress_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8521:20: warning: TODO implement function '__builtin_ia32_compressdi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8519:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_compress_epi64(arg___U: __mmask8, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8530:19: warning: TODO implement function '__builtin_ia32_compresssf512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8528:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_compress_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:8538:19: warning: TODO implement function '__builtin_ia32_compresssf512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8536:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_compress_ps(arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:8547:20: warning: TODO implement function '__builtin_ia32_compresssi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8545:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_compress_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8555:20: warning: TODO implement function '__builtin_ia32_compresssi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8553:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_compress_epi32(arg___U: __mmask16, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:4996:15: warning: TODO implement function '__builtin_ia32_cmpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8608:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_test_epi32_mask(arg___A: __m512i, arg___B: __m512i) __mmask16;
// /usr/lib/zig/include/avx512fintrin.h:5016:15: warning: TODO implement function '__builtin_ia32_cmpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8615:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_test_epi32_mask(arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __mmask16;
// /usr/lib/zig/include/avx512fintrin.h:5006:14: warning: TODO implement function '__builtin_ia32_cmpq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8622:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_test_epi64_mask(arg___A: __m512i, arg___B: __m512i) __mmask8;
// /usr/lib/zig/include/avx512fintrin.h:5026:14: warning: TODO implement function '__builtin_ia32_cmpq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8629:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_test_epi64_mask(arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __mmask8;
// /usr/lib/zig/include/avx512fintrin.h:4996:15: warning: TODO implement function '__builtin_ia32_cmpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8636:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_testn_epi32_mask(arg___A: __m512i, arg___B: __m512i) __mmask16;
// /usr/lib/zig/include/avx512fintrin.h:5016:15: warning: TODO implement function '__builtin_ia32_cmpd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8643:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_testn_epi32_mask(arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __mmask16;
// /usr/lib/zig/include/avx512fintrin.h:5006:14: warning: TODO implement function '__builtin_ia32_cmpq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8650:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_testn_epi64_mask(arg___A: __m512i, arg___B: __m512i) __mmask8;
// /usr/lib/zig/include/avx512fintrin.h:5026:14: warning: TODO implement function '__builtin_ia32_cmpq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8657:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_testn_epi64_mask(arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __mmask8;
pub inline fn _mm512_movehdup_ps(arg___A: __m512) __m512 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.child, @as(__v16sf, @bitCast(__A)), @as(__v16sf, @bitCast(__A)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:8673:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8671:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_movehdup_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:8681:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8679:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_movehdup_ps(arg___U: __mmask16, arg___A: __m512) __m512;
pub inline fn _mm512_moveldup_ps(arg___A: __m512) __m512 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.child, @as(__v16sf, @bitCast(__A)), @as(__v16sf, @bitCast(__A)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(@as(__v16sf, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512fintrin.h:8696:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8694:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_moveldup_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:8704:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8702:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_moveldup_ps(arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:8712:10: warning: TODO implement function '__builtin_ia32_selectss_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8710:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_move_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:8718:10: warning: TODO implement function '__builtin_ia32_selectss_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8716:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_move_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512fintrin.h:8725:10: warning: TODO implement function '__builtin_ia32_selectsd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8723:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_move_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8731:10: warning: TODO implement function '__builtin_ia32_selectsd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8729:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_move_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8738:3: warning: TODO implement function '__builtin_ia32_storess128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8736:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_store_ss(arg___W: [*c]f32, arg___U: __mmask8, arg___A: __m128) void;
// /usr/lib/zig/include/avx512fintrin.h:8744:3: warning: TODO implement function '__builtin_ia32_storesd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8742:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_store_sd(arg___W: [*c]f64, arg___U: __mmask8, arg___A: __m128d) void;
// /usr/lib/zig/include/avx512fintrin.h:8754:19: warning: TODO implement function '__builtin_ia32_loadss128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8748:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_load_ss(arg___W: __m128, arg___U: __mmask8, arg___A: [*c]const f32) __m128;
// /usr/lib/zig/include/avx512fintrin.h:8760:18: warning: TODO implement function '__builtin_ia32_loadss128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8758:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_load_ss(arg___U: __mmask8, arg___A: [*c]const f32) __m128;
// /usr/lib/zig/include/avx512fintrin.h:8772:20: warning: TODO implement function '__builtin_ia32_loadsd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8766:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_load_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: [*c]const f64) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8778:20: warning: TODO implement function '__builtin_ia32_loadsd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8776:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_load_sd(arg___U: __mmask8, arg___A: [*c]const f64) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:8799:20: warning: TODO implement function '__builtin_ia32_expanddf512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8797:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_expand_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:8807:20: warning: TODO implement function '__builtin_ia32_expanddf512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8805:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_expand_pd(arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:8815:20: warning: TODO implement function '__builtin_ia32_expanddi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8813:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_expand_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8823:20: warning: TODO implement function '__builtin_ia32_expanddi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8821:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_expand_epi64(arg___U: __mmask8, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8831:20: warning: TODO implement function '__builtin_ia32_expandloaddf512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8829:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_expandloadu_pd(arg___W: __m512d, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:8839:20: warning: TODO implement function '__builtin_ia32_expandloaddf512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8837:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_expandloadu_pd(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:8847:20: warning: TODO implement function '__builtin_ia32_expandloaddi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8845:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_expandloadu_epi64(arg___W: __m512i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8855:20: warning: TODO implement function '__builtin_ia32_expandloaddi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8853:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_expandloadu_epi64(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8863:19: warning: TODO implement function '__builtin_ia32_expandloadsf512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8861:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_expandloadu_ps(arg___W: __m512, arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m512;
// /usr/lib/zig/include/avx512fintrin.h:8871:19: warning: TODO implement function '__builtin_ia32_expandloadsf512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8869:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_expandloadu_ps(arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m512;
// /usr/lib/zig/include/avx512fintrin.h:8879:20: warning: TODO implement function '__builtin_ia32_expandloadsi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8877:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_expandloadu_epi32(arg___W: __m512i, arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8887:20: warning: TODO implement function '__builtin_ia32_expandloadsi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8885:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_expandloadu_epi32(arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8895:19: warning: TODO implement function '__builtin_ia32_expandsf512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8893:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_expand_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:8903:19: warning: TODO implement function '__builtin_ia32_expandsf512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8901:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_expand_ps(arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:8911:20: warning: TODO implement function '__builtin_ia32_expandsi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8909:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_expand_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:8919:20: warning: TODO implement function '__builtin_ia32_expandsi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8917:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_expand_epi32(arg___U: __mmask16, arg___A: __m512i) __m512i;
pub inline fn _mm512_cvtps_pd(arg___A: __m256) __m512d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512d, @bitCast(blk: {
        const tmp = @as(f64, @floatCast(@as(__v8sf, @bitCast(__A))[0]));
        const tmp_1 = @as(f64, @floatCast(@as(__v8sf, @bitCast(__A))[1]));
        const tmp_2 = @as(f64, @floatCast(@as(__v8sf, @bitCast(__A))[2]));
        const tmp_3 = @as(f64, @floatCast(@as(__v8sf, @bitCast(__A))[3]));
        const tmp_4 = @as(f64, @floatCast(@as(__v8sf, @bitCast(__A))[4]));
        const tmp_5 = @as(f64, @floatCast(@as(__v8sf, @bitCast(__A))[5]));
        const tmp_6 = @as(f64, @floatCast(@as(__v8sf, @bitCast(__A))[6]));
        const tmp_7 = @as(f64, @floatCast(@as(__v8sf, @bitCast(__A))[7]));
        break :blk __v8df{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512fintrin.h:8948:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8946:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtps_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m256) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:8956:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8954:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtps_pd(arg___U: __mmask8, arg___A: __m256) __m512d;
pub inline fn _mm512_cvtpslo_pd(arg___A: __m512) __m512d {
    var __A = arg___A;
    _ = &__A;
    return _mm512_cvtps_pd(_mm512_castps512_ps256(__A));
}
pub inline fn _mm512_mask_cvtpslo_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512) __m512d {
    var __W = arg___W;
    _ = &__W;
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return _mm512_mask_cvtps_pd(__W, __U, _mm512_castps512_ps256(__A));
}
// /usr/lib/zig/include/avx512fintrin.h:8976:20: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8974:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mov_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:8984:20: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8982:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mov_pd(arg___U: __mmask8, arg___A: __m512d) __m512d;
// /usr/lib/zig/include/avx512fintrin.h:8992:19: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8990:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mov_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:9000:19: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:8998:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mov_ps(arg___U: __mmask16, arg___A: __m512) __m512;
// /usr/lib/zig/include/avx512fintrin.h:9008:3: warning: TODO implement function '__builtin_ia32_compressstoredf512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9006:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_compressstoreu_pd(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m512d) void;
// /usr/lib/zig/include/avx512fintrin.h:9015:3: warning: TODO implement function '__builtin_ia32_compressstoredi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9013:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_compressstoreu_epi64(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:9022:3: warning: TODO implement function '__builtin_ia32_compressstoresf512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9020:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_compressstoreu_ps(arg___P_1: ?*anyopaque, arg___U: __mmask16, arg___A: __m512) void;
// /usr/lib/zig/include/avx512fintrin.h:9029:3: warning: TODO implement function '__builtin_ia32_compressstoresi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9027:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_compressstoreu_epi32(arg___P_1: ?*anyopaque, arg___U: __mmask16, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512fintrin.h:9054:10: warning: TODO implement function '__builtin_ia32_cvtsd2ss_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9052:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsd_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128d) __m128;
// /usr/lib/zig/include/avx512fintrin.h:9063:10: warning: TODO implement function '__builtin_ia32_cvtsd2ss_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9061:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtsd_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128d) __m128;
// /usr/lib/zig/include/avx512fintrin.h:9127:10: warning: TODO implement function '__builtin_ia32_cvtss2sd_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9125:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtss_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128) __m128d;
// /usr/lib/zig/include/avx512fintrin.h:9136:10: warning: TODO implement function '__builtin_ia32_cvtss2sd_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9134:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtss_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128) __m128d;
pub inline fn _mm_cvtu32_sd(arg___A: __m128d, arg___B: c_uint) __m128d {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    __A[@as(c_uint, @intCast(@as(c_int, 0)))] = @as(f64, @floatFromInt(__B));
    return __A;
}
pub inline fn _mm_cvtu64_sd(arg___A: __m128d, arg___B: c_ulonglong) __m128d {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    __A[@as(c_uint, @intCast(@as(c_int, 0)))] = @as(f64, @floatFromInt(__B));
    return __A;
}
pub inline fn _mm_cvtu32_ss(arg___A: __m128, arg___B: c_uint) __m128 {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    __A[@as(c_uint, @intCast(@as(c_int, 0)))] = @as(f32, @floatFromInt(__B));
    return __A;
}
pub inline fn _mm_cvtu64_ss(arg___A: __m128, arg___B: c_ulonglong) __m128 {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    __A[@as(c_uint, @intCast(@as(c_int, 0)))] = @as(f32, @floatFromInt(__B));
    return __A;
}
// /usr/lib/zig/include/avx512fintrin.h:9189:20: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9187:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_set1_epi32(arg___O: __m512i, arg___M: __mmask16, arg___A: c_int) __m512i;
// /usr/lib/zig/include/avx512fintrin.h:9197:20: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9195:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_set1_epi64(arg___O: __m512i, arg___M: __mmask8, arg___A: c_longlong) __m512i;
pub inline fn _mm512_set_epi8(arg___e63: u8, arg___e62: u8, arg___e61: u8, arg___e60: u8, arg___e59: u8, arg___e58: u8, arg___e57: u8, arg___e56: u8, arg___e55: u8, arg___e54: u8, arg___e53: u8, arg___e52: u8, arg___e51: u8, arg___e50: u8, arg___e49: u8, arg___e48: u8, arg___e47: u8, arg___e46: u8, arg___e45: u8, arg___e44: u8, arg___e43: u8, arg___e42: u8, arg___e41: u8, arg___e40: u8, arg___e39: u8, arg___e38: u8, arg___e37: u8, arg___e36: u8, arg___e35: u8, arg___e34: u8, arg___e33: u8, arg___e32: u8, arg___e31: u8, arg___e30: u8, arg___e29: u8, arg___e28: u8, arg___e27: u8, arg___e26: u8, arg___e25: u8, arg___e24: u8, arg___e23: u8, arg___e22: u8, arg___e21: u8, arg___e20: u8, arg___e19: u8, arg___e18: u8, arg___e17: u8, arg___e16: u8, arg___e15: u8, arg___e14: u8, arg___e13: u8, arg___e12: u8, arg___e11: u8, arg___e10: u8, arg___e9: u8, arg___e8: u8, arg___e7: u8, arg___e6: u8, arg___e5: u8, arg___e4: u8, arg___e3: u8, arg___e2: u8, arg___e1: u8, arg___e0: u8) __m512i {
    var __e63 = arg___e63;
    _ = &__e63;
    var __e62 = arg___e62;
    _ = &__e62;
    var __e61 = arg___e61;
    _ = &__e61;
    var __e60 = arg___e60;
    _ = &__e60;
    var __e59 = arg___e59;
    _ = &__e59;
    var __e58 = arg___e58;
    _ = &__e58;
    var __e57 = arg___e57;
    _ = &__e57;
    var __e56 = arg___e56;
    _ = &__e56;
    var __e55 = arg___e55;
    _ = &__e55;
    var __e54 = arg___e54;
    _ = &__e54;
    var __e53 = arg___e53;
    _ = &__e53;
    var __e52 = arg___e52;
    _ = &__e52;
    var __e51 = arg___e51;
    _ = &__e51;
    var __e50 = arg___e50;
    _ = &__e50;
    var __e49 = arg___e49;
    _ = &__e49;
    var __e48 = arg___e48;
    _ = &__e48;
    var __e47 = arg___e47;
    _ = &__e47;
    var __e46 = arg___e46;
    _ = &__e46;
    var __e45 = arg___e45;
    _ = &__e45;
    var __e44 = arg___e44;
    _ = &__e44;
    var __e43 = arg___e43;
    _ = &__e43;
    var __e42 = arg___e42;
    _ = &__e42;
    var __e41 = arg___e41;
    _ = &__e41;
    var __e40 = arg___e40;
    _ = &__e40;
    var __e39 = arg___e39;
    _ = &__e39;
    var __e38 = arg___e38;
    _ = &__e38;
    var __e37 = arg___e37;
    _ = &__e37;
    var __e36 = arg___e36;
    _ = &__e36;
    var __e35 = arg___e35;
    _ = &__e35;
    var __e34 = arg___e34;
    _ = &__e34;
    var __e33 = arg___e33;
    _ = &__e33;
    var __e32 = arg___e32;
    _ = &__e32;
    var __e31 = arg___e31;
    _ = &__e31;
    var __e30 = arg___e30;
    _ = &__e30;
    var __e29 = arg___e29;
    _ = &__e29;
    var __e28 = arg___e28;
    _ = &__e28;
    var __e27 = arg___e27;
    _ = &__e27;
    var __e26 = arg___e26;
    _ = &__e26;
    var __e25 = arg___e25;
    _ = &__e25;
    var __e24 = arg___e24;
    _ = &__e24;
    var __e23 = arg___e23;
    _ = &__e23;
    var __e22 = arg___e22;
    _ = &__e22;
    var __e21 = arg___e21;
    _ = &__e21;
    var __e20 = arg___e20;
    _ = &__e20;
    var __e19 = arg___e19;
    _ = &__e19;
    var __e18 = arg___e18;
    _ = &__e18;
    var __e17 = arg___e17;
    _ = &__e17;
    var __e16 = arg___e16;
    _ = &__e16;
    var __e15 = arg___e15;
    _ = &__e15;
    var __e14 = arg___e14;
    _ = &__e14;
    var __e13 = arg___e13;
    _ = &__e13;
    var __e12 = arg___e12;
    _ = &__e12;
    var __e11 = arg___e11;
    _ = &__e11;
    var __e10 = arg___e10;
    _ = &__e10;
    var __e9 = arg___e9;
    _ = &__e9;
    var __e8 = arg___e8;
    _ = &__e8;
    var __e7 = arg___e7;
    _ = &__e7;
    var __e6 = arg___e6;
    _ = &__e6;
    var __e5 = arg___e5;
    _ = &__e5;
    var __e4 = arg___e4;
    _ = &__e4;
    var __e3 = arg___e3;
    _ = &__e3;
    var __e2 = arg___e2;
    _ = &__e2;
    var __e1 = arg___e1;
    _ = &__e1;
    var __e0 = arg___e0;
    _ = &__e0;
    return @as(__m512i, @bitCast(blk: {
        const tmp = __e0;
        const tmp_1 = __e1;
        const tmp_2 = __e2;
        const tmp_3 = __e3;
        const tmp_4 = __e4;
        const tmp_5 = __e5;
        const tmp_6 = __e6;
        const tmp_7 = __e7;
        const tmp_8 = __e8;
        const tmp_9 = __e9;
        const tmp_10 = __e10;
        const tmp_11 = __e11;
        const tmp_12 = __e12;
        const tmp_13 = __e13;
        const tmp_14 = __e14;
        const tmp_15 = __e15;
        const tmp_16 = __e16;
        const tmp_17 = __e17;
        const tmp_18 = __e18;
        const tmp_19 = __e19;
        const tmp_20 = __e20;
        const tmp_21 = __e21;
        const tmp_22 = __e22;
        const tmp_23 = __e23;
        const tmp_24 = __e24;
        const tmp_25 = __e25;
        const tmp_26 = __e26;
        const tmp_27 = __e27;
        const tmp_28 = __e28;
        const tmp_29 = __e29;
        const tmp_30 = __e30;
        const tmp_31 = __e31;
        const tmp_32 = __e32;
        const tmp_33 = __e33;
        const tmp_34 = __e34;
        const tmp_35 = __e35;
        const tmp_36 = __e36;
        const tmp_37 = __e37;
        const tmp_38 = __e38;
        const tmp_39 = __e39;
        const tmp_40 = __e40;
        const tmp_41 = __e41;
        const tmp_42 = __e42;
        const tmp_43 = __e43;
        const tmp_44 = __e44;
        const tmp_45 = __e45;
        const tmp_46 = __e46;
        const tmp_47 = __e47;
        const tmp_48 = __e48;
        const tmp_49 = __e49;
        const tmp_50 = __e50;
        const tmp_51 = __e51;
        const tmp_52 = __e52;
        const tmp_53 = __e53;
        const tmp_54 = __e54;
        const tmp_55 = __e55;
        const tmp_56 = __e56;
        const tmp_57 = __e57;
        const tmp_58 = __e58;
        const tmp_59 = __e59;
        const tmp_60 = __e60;
        const tmp_61 = __e61;
        const tmp_62 = __e62;
        const tmp_63 = __e63;
        break :blk __v64qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
            tmp_16,
            tmp_17,
            tmp_18,
            tmp_19,
            tmp_20,
            tmp_21,
            tmp_22,
            tmp_23,
            tmp_24,
            tmp_25,
            tmp_26,
            tmp_27,
            tmp_28,
            tmp_29,
            tmp_30,
            tmp_31,
            tmp_32,
            tmp_33,
            tmp_34,
            tmp_35,
            tmp_36,
            tmp_37,
            tmp_38,
            tmp_39,
            tmp_40,
            tmp_41,
            tmp_42,
            tmp_43,
            tmp_44,
            tmp_45,
            tmp_46,
            tmp_47,
            tmp_48,
            tmp_49,
            tmp_50,
            tmp_51,
            tmp_52,
            tmp_53,
            tmp_54,
            tmp_55,
            tmp_56,
            tmp_57,
            tmp_58,
            tmp_59,
            tmp_60,
            tmp_61,
            tmp_62,
            tmp_63,
        };
    }));
}
pub inline fn _mm512_set_epi16(arg___e31: c_short, arg___e30: c_short, arg___e29: c_short, arg___e28: c_short, arg___e27: c_short, arg___e26: c_short, arg___e25: c_short, arg___e24: c_short, arg___e23: c_short, arg___e22: c_short, arg___e21: c_short, arg___e20: c_short, arg___e19: c_short, arg___e18: c_short, arg___e17: c_short, arg___e16: c_short, arg___e15: c_short, arg___e14: c_short, arg___e13: c_short, arg___e12: c_short, arg___e11: c_short, arg___e10: c_short, arg___e9: c_short, arg___e8: c_short, arg___e7: c_short, arg___e6: c_short, arg___e5: c_short, arg___e4: c_short, arg___e3: c_short, arg___e2: c_short, arg___e1: c_short, arg___e0: c_short) __m512i {
    var __e31 = arg___e31;
    _ = &__e31;
    var __e30 = arg___e30;
    _ = &__e30;
    var __e29 = arg___e29;
    _ = &__e29;
    var __e28 = arg___e28;
    _ = &__e28;
    var __e27 = arg___e27;
    _ = &__e27;
    var __e26 = arg___e26;
    _ = &__e26;
    var __e25 = arg___e25;
    _ = &__e25;
    var __e24 = arg___e24;
    _ = &__e24;
    var __e23 = arg___e23;
    _ = &__e23;
    var __e22 = arg___e22;
    _ = &__e22;
    var __e21 = arg___e21;
    _ = &__e21;
    var __e20 = arg___e20;
    _ = &__e20;
    var __e19 = arg___e19;
    _ = &__e19;
    var __e18 = arg___e18;
    _ = &__e18;
    var __e17 = arg___e17;
    _ = &__e17;
    var __e16 = arg___e16;
    _ = &__e16;
    var __e15 = arg___e15;
    _ = &__e15;
    var __e14 = arg___e14;
    _ = &__e14;
    var __e13 = arg___e13;
    _ = &__e13;
    var __e12 = arg___e12;
    _ = &__e12;
    var __e11 = arg___e11;
    _ = &__e11;
    var __e10 = arg___e10;
    _ = &__e10;
    var __e9 = arg___e9;
    _ = &__e9;
    var __e8 = arg___e8;
    _ = &__e8;
    var __e7 = arg___e7;
    _ = &__e7;
    var __e6 = arg___e6;
    _ = &__e6;
    var __e5 = arg___e5;
    _ = &__e5;
    var __e4 = arg___e4;
    _ = &__e4;
    var __e3 = arg___e3;
    _ = &__e3;
    var __e2 = arg___e2;
    _ = &__e2;
    var __e1 = arg___e1;
    _ = &__e1;
    var __e0 = arg___e0;
    _ = &__e0;
    return @as(__m512i, @bitCast(blk: {
        const tmp = __e0;
        const tmp_1 = __e1;
        const tmp_2 = __e2;
        const tmp_3 = __e3;
        const tmp_4 = __e4;
        const tmp_5 = __e5;
        const tmp_6 = __e6;
        const tmp_7 = __e7;
        const tmp_8 = __e8;
        const tmp_9 = __e9;
        const tmp_10 = __e10;
        const tmp_11 = __e11;
        const tmp_12 = __e12;
        const tmp_13 = __e13;
        const tmp_14 = __e14;
        const tmp_15 = __e15;
        const tmp_16 = __e16;
        const tmp_17 = __e17;
        const tmp_18 = __e18;
        const tmp_19 = __e19;
        const tmp_20 = __e20;
        const tmp_21 = __e21;
        const tmp_22 = __e22;
        const tmp_23 = __e23;
        const tmp_24 = __e24;
        const tmp_25 = __e25;
        const tmp_26 = __e26;
        const tmp_27 = __e27;
        const tmp_28 = __e28;
        const tmp_29 = __e29;
        const tmp_30 = __e30;
        const tmp_31 = __e31;
        break :blk __v32hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
            tmp_16,
            tmp_17,
            tmp_18,
            tmp_19,
            tmp_20,
            tmp_21,
            tmp_22,
            tmp_23,
            tmp_24,
            tmp_25,
            tmp_26,
            tmp_27,
            tmp_28,
            tmp_29,
            tmp_30,
            tmp_31,
        };
    }));
}
pub inline fn _mm512_set_epi32(arg___A: c_int, arg___B: c_int, arg___C: c_int, arg___D: c_int, arg___E: c_int, arg___F: c_int, arg___G: c_int, arg___H: c_int, arg___I: c_int, arg___J: c_int, arg___K: c_int, arg___L: c_int, arg___M: c_int, arg___N: c_int, arg___O: c_int, arg___P_1: c_int) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    var __C = arg___C;
    _ = &__C;
    var __D = arg___D;
    _ = &__D;
    var __E = arg___E;
    _ = &__E;
    var __F = arg___F;
    _ = &__F;
    var __G = arg___G;
    _ = &__G;
    var __H = arg___H;
    _ = &__H;
    var __I = arg___I;
    _ = &__I;
    var __J = arg___J;
    _ = &__J;
    var __K = arg___K;
    _ = &__K;
    var __L = arg___L;
    _ = &__L;
    var __M = arg___M;
    _ = &__M;
    var __N = arg___N;
    _ = &__N;
    var __O = arg___O;
    _ = &__O;
    var __P_1 = arg___P_1;
    _ = &__P_1;
    return @as(__m512i, @bitCast(blk: {
        const tmp = __P_1;
        const tmp_1 = __O;
        const tmp_2 = __N;
        const tmp_3 = __M;
        const tmp_4 = __L;
        const tmp_5 = __K;
        const tmp_6 = __J;
        const tmp_7 = __I;
        const tmp_8 = __H;
        const tmp_9 = __G;
        const tmp_10 = __F;
        const tmp_11 = __E;
        const tmp_12 = __D;
        const tmp_13 = __C;
        const tmp_14 = __B;
        const tmp_15 = __A;
        break :blk __v16si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
pub inline fn _mm512_set_epi64(arg___A: c_longlong, arg___B: c_longlong, arg___C: c_longlong, arg___D: c_longlong, arg___E: c_longlong, arg___F: c_longlong, arg___G: c_longlong, arg___H: c_longlong) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    var __C = arg___C;
    _ = &__C;
    var __D = arg___D;
    _ = &__D;
    var __E = arg___E;
    _ = &__E;
    var __F = arg___F;
    _ = &__F;
    var __G = arg___G;
    _ = &__G;
    var __H = arg___H;
    _ = &__H;
    return @as(__m512i, @bitCast(blk: {
        const tmp = __H;
        const tmp_1 = __G;
        const tmp_2 = __F;
        const tmp_3 = __E;
        const tmp_4 = __D;
        const tmp_5 = __C;
        const tmp_6 = __B;
        const tmp_7 = __A;
        break :blk __v8di{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
pub inline fn _mm512_set_pd(arg___A: f64, arg___B: f64, arg___C: f64, arg___D: f64, arg___E: f64, arg___F: f64, arg___G: f64, arg___H: f64) __m512d {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    var __C = arg___C;
    _ = &__C;
    var __D = arg___D;
    _ = &__D;
    var __E = arg___E;
    _ = &__E;
    var __F = arg___F;
    _ = &__F;
    var __G = arg___G;
    _ = &__G;
    var __H = arg___H;
    _ = &__H;
    return blk: {
        const tmp = __H;
        const tmp_1 = __G;
        const tmp_2 = __F;
        const tmp_3 = __E;
        const tmp_4 = __D;
        const tmp_5 = __C;
        const tmp_6 = __B;
        const tmp_7 = __A;
        break :blk __m512d{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    };
}
pub inline fn _mm512_set_ps(arg___A: f32, arg___B: f32, arg___C: f32, arg___D: f32, arg___E: f32, arg___F: f32, arg___G: f32, arg___H: f32, arg___I: f32, arg___J: f32, arg___K: f32, arg___L: f32, arg___M: f32, arg___N: f32, arg___O: f32, arg___P_1: f32) __m512 {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    var __C = arg___C;
    _ = &__C;
    var __D = arg___D;
    _ = &__D;
    var __E = arg___E;
    _ = &__E;
    var __F = arg___F;
    _ = &__F;
    var __G = arg___G;
    _ = &__G;
    var __H = arg___H;
    _ = &__H;
    var __I = arg___I;
    _ = &__I;
    var __J = arg___J;
    _ = &__J;
    var __K = arg___K;
    _ = &__K;
    var __L = arg___L;
    _ = &__L;
    var __M = arg___M;
    _ = &__M;
    var __N = arg___N;
    _ = &__N;
    var __O = arg___O;
    _ = &__O;
    var __P_1 = arg___P_1;
    _ = &__P_1;
    return blk: {
        const tmp = __P_1;
        const tmp_1 = __O;
        const tmp_2 = __N;
        const tmp_3 = __M;
        const tmp_4 = __L;
        const tmp_5 = __K;
        const tmp_6 = __J;
        const tmp_7 = __I;
        const tmp_8 = __H;
        const tmp_9 = __G;
        const tmp_10 = __F;
        const tmp_11 = __E;
        const tmp_12 = __D;
        const tmp_13 = __C;
        const tmp_14 = __B;
        const tmp_15 = __A;
        break :blk __m512{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    };
}
pub inline fn _mm512_abs_ps(arg___A: __m512) __m512 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512, @bitCast(_mm512_and_epi32(_mm512_set1_epi32(@as(c_int, 2147483647)), @as(__m512i, @bitCast(__A)))));
}
pub inline fn _mm512_mask_abs_ps(arg___W: __m512, arg___K: __mmask16, arg___A: __m512) __m512 {
    var __W = arg___W;
    _ = &__W;
    var __K = arg___K;
    _ = &__K;
    var __A = arg___A;
    _ = &__A;
    return @as(__m512, @bitCast(_mm512_mask_and_epi32(@as(__m512i, @bitCast(__W)), __K, _mm512_set1_epi32(@as(c_int, 2147483647)), @as(__m512i, @bitCast(__A)))));
}
pub inline fn _mm512_abs_pd(arg___A: __m512d) __m512d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512d, @bitCast(_mm512_and_epi64(_mm512_set1_epi64(@as(c_longlong, @bitCast(@as(c_longlong, @as(c_long, 9223372036854775807))))), @as(__v8di, @bitCast(__A)))));
}
pub inline fn _mm512_mask_abs_pd(arg___W: __m512d, arg___K: __mmask8, arg___A: __m512d) __m512d {
    var __W = arg___W;
    _ = &__W;
    var __K = arg___K;
    _ = &__K;
    var __A = arg___A;
    _ = &__A;
    return @as(__m512d, @bitCast(_mm512_mask_and_epi64(@as(__v8di, @bitCast(__W)), __K, _mm512_set1_epi64(@as(c_longlong, @bitCast(@as(c_longlong, @as(c_long, 9223372036854775807))))), @as(__v8di, @bitCast(__A)))));
}
// /usr/lib/zig/include/avx512fintrin.h:9336:10: warning: TODO implement function '__builtin_reduce_add' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9335:51: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_add_epi64(arg___W: __m512i) c_longlong;
// /usr/lib/zig/include/avx512fintrin.h:9340:10: warning: TODO implement function '__builtin_reduce_mul' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9339:51: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_mul_epi64(arg___W: __m512i) c_longlong;
// /usr/lib/zig/include/avx512fintrin.h:9344:10: warning: TODO implement function '__builtin_reduce_and' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9343:51: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_and_epi64(arg___W: __m512i) c_longlong;
// /usr/lib/zig/include/avx512fintrin.h:9348:10: warning: TODO implement function '__builtin_reduce_or' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9347:51: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_or_epi64(arg___W: __m512i) c_longlong;
// /usr/lib/zig/include/avx512fintrin.h:9354:10: warning: TODO implement function '__builtin_reduce_add' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9352:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_add_epi64(arg___M: __mmask8, arg___W: __m512i) c_longlong;
// /usr/lib/zig/include/avx512fintrin.h:9360:10: warning: TODO implement function '__builtin_reduce_mul' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9358:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_mul_epi64(arg___M: __mmask8, arg___W: __m512i) c_longlong;
// /usr/lib/zig/include/avx512fintrin.h:9366:10: warning: TODO implement function '__builtin_reduce_and' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9364:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_and_epi64(arg___M: __mmask8, arg___W: __m512i) c_longlong;
// /usr/lib/zig/include/avx512fintrin.h:9372:10: warning: TODO implement function '__builtin_reduce_or' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9370:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_or_epi64(arg___M: __mmask8, arg___W: __m512i) c_longlong;
// /usr/lib/zig/include/avx512fintrin.h:9379:10: warning: TODO implement function '__builtin_ia32_reduce_fadd_pd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9378:48: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_add_pd(arg___W: __m512d) f64;
// /usr/lib/zig/include/avx512fintrin.h:9383:10: warning: TODO implement function '__builtin_ia32_reduce_fmul_pd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9382:48: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_mul_pd(arg___W: __m512d) f64;
// /usr/lib/zig/include/avx512fintrin.h:9389:10: warning: TODO implement function '__builtin_ia32_reduce_fadd_pd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9387:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_add_pd(arg___M: __mmask8, arg___W: __m512d) f64;
// /usr/lib/zig/include/avx512fintrin.h:9395:10: warning: TODO implement function '__builtin_ia32_reduce_fmul_pd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9393:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_mul_pd(arg___M: __mmask8, arg___W: __m512d) f64;
// /usr/lib/zig/include/avx512fintrin.h:9400:10: warning: TODO implement function '__builtin_reduce_add' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9399:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_add_epi32(arg___W: __m512i) c_int;
// /usr/lib/zig/include/avx512fintrin.h:9405:10: warning: TODO implement function '__builtin_reduce_mul' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9404:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_mul_epi32(arg___W: __m512i) c_int;
// /usr/lib/zig/include/avx512fintrin.h:9410:10: warning: TODO implement function '__builtin_reduce_and' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9409:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_and_epi32(arg___W: __m512i) c_int;
// /usr/lib/zig/include/avx512fintrin.h:9415:10: warning: TODO implement function '__builtin_reduce_or' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9414:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_or_epi32(arg___W: __m512i) c_int;
// /usr/lib/zig/include/avx512fintrin.h:9421:10: warning: TODO implement function '__builtin_reduce_add' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9419:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_add_epi32(arg___M: __mmask16, arg___W: __m512i) c_int;
// /usr/lib/zig/include/avx512fintrin.h:9427:10: warning: TODO implement function '__builtin_reduce_mul' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9425:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_mul_epi32(arg___M: __mmask16, arg___W: __m512i) c_int;
// /usr/lib/zig/include/avx512fintrin.h:9433:10: warning: TODO implement function '__builtin_reduce_and' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9431:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_and_epi32(arg___M: __mmask16, arg___W: __m512i) c_int;
// /usr/lib/zig/include/avx512fintrin.h:9439:10: warning: TODO implement function '__builtin_reduce_or' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9437:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_or_epi32(arg___M: __mmask16, arg___W: __m512i) c_int;
// /usr/lib/zig/include/avx512fintrin.h:9444:10: warning: TODO implement function '__builtin_ia32_reduce_fadd_ps512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9443:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_add_ps(arg___W: __m512) f32;
// /usr/lib/zig/include/avx512fintrin.h:9449:10: warning: TODO implement function '__builtin_ia32_reduce_fmul_ps512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9448:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_mul_ps(arg___W: __m512) f32;
// /usr/lib/zig/include/avx512fintrin.h:9455:10: warning: TODO implement function '__builtin_ia32_reduce_fadd_ps512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9453:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_add_ps(arg___M: __mmask16, arg___W: __m512) f32;
// /usr/lib/zig/include/avx512fintrin.h:9461:10: warning: TODO implement function '__builtin_ia32_reduce_fmul_ps512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9459:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_mul_ps(arg___M: __mmask16, arg___W: __m512) f32;
// /usr/lib/zig/include/avx512fintrin.h:9466:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9465:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_max_epi64(arg___V: __m512i) c_longlong;
// /usr/lib/zig/include/avx512fintrin.h:9471:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9470:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_max_epu64(arg___V: __m512i) c_ulonglong;
// /usr/lib/zig/include/avx512fintrin.h:9476:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9475:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_min_epi64(arg___V: __m512i) c_longlong;
// /usr/lib/zig/include/avx512fintrin.h:9481:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9480:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_min_epu64(arg___V: __m512i) c_ulonglong;
// /usr/lib/zig/include/avx512fintrin.h:9487:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9485:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_max_epi64(arg___M: __mmask8, arg___V: __m512i) c_longlong;
// /usr/lib/zig/include/avx512fintrin.h:9493:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9491:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_max_epu64(arg___M: __mmask8, arg___V: __m512i) c_ulonglong;
// /usr/lib/zig/include/avx512fintrin.h:9499:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9497:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_min_epi64(arg___M: __mmask8, arg___V: __m512i) c_longlong;
// /usr/lib/zig/include/avx512fintrin.h:9505:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9503:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_min_epu64(arg___M: __mmask8, arg___V: __m512i) c_ulonglong;
// /usr/lib/zig/include/avx512fintrin.h:9509:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9508:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_max_epi32(arg___V: __m512i) c_int;
// /usr/lib/zig/include/avx512fintrin.h:9514:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9513:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_max_epu32(arg___V: __m512i) c_uint;
// /usr/lib/zig/include/avx512fintrin.h:9519:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9518:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_min_epi32(arg___V: __m512i) c_int;
// /usr/lib/zig/include/avx512fintrin.h:9524:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9523:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_min_epu32(arg___V: __m512i) c_uint;
// /usr/lib/zig/include/avx512fintrin.h:9530:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9528:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_max_epi32(arg___M: __mmask16, arg___V: __m512i) c_int;
// /usr/lib/zig/include/avx512fintrin.h:9536:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9534:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_max_epu32(arg___M: __mmask16, arg___V: __m512i) c_uint;
// /usr/lib/zig/include/avx512fintrin.h:9542:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9540:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_min_epi32(arg___M: __mmask16, arg___V: __m512i) c_int;
// /usr/lib/zig/include/avx512fintrin.h:9548:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9546:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_min_epu32(arg___M: __mmask16, arg___V: __m512i) c_uint;
// /usr/lib/zig/include/avx512fintrin.h:9553:10: warning: TODO implement function '__builtin_ia32_reduce_fmax_pd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9552:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_max_pd(arg___V: __m512d) f64;
// /usr/lib/zig/include/avx512fintrin.h:9558:10: warning: TODO implement function '__builtin_ia32_reduce_fmin_pd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9557:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_min_pd(arg___V: __m512d) f64;
// /usr/lib/zig/include/avx512fintrin.h:9563:44: warning: TODO implement function '__builtin_inf' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9562:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_max_pd(arg___M: __mmask8, arg___V: __m512d) f64;
// /usr/lib/zig/include/avx512fintrin.h:9569:43: warning: TODO implement function '__builtin_inf' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9568:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_min_pd(arg___M: __mmask8, arg___V: __m512d) f64;
// /usr/lib/zig/include/avx512fintrin.h:9575:10: warning: TODO implement function '__builtin_ia32_reduce_fmax_ps512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9574:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_max_ps(arg___V: __m512) f32;
// /usr/lib/zig/include/avx512fintrin.h:9580:10: warning: TODO implement function '__builtin_ia32_reduce_fmin_ps512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9579:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_min_ps(arg___V: __m512) f32;
// /usr/lib/zig/include/avx512fintrin.h:9586:10: warning: TODO implement function '__builtin_ia32_reduce_fmax_ps512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9584:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_max_ps(arg___M: __mmask16, arg___V: __m512) f32;
// /usr/lib/zig/include/avx512fintrin.h:9592:10: warning: TODO implement function '__builtin_ia32_reduce_fmin_ps512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fintrin.h:9590:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_reduce_min_ps(arg___M: __mmask16, arg___V: __m512) f32;
pub inline fn _mm512_cvtsi512_si32(arg___A: __m512i) c_int {
    var __A = arg___A;
    _ = &__A;
    var __b: __v16si = @as(__v16si, @bitCast(__A));
    _ = &__b;
    return __b[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub const __v2hi = @Vector(2, c_short);
pub const __v4qi = @Vector(4, u8);
pub const __v2qi = @Vector(2, u8);
// /usr/lib/zig/include/avx512vlintrin.h:235:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:233:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_add_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:243:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:241:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_add_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:251:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:249:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_add_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:259:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:257:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_add_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:267:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:265:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sub_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:275:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:273:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sub_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:283:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:281:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sub_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:291:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:289:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sub_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:299:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:297:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_add_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:307:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:305:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_add_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:315:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:313:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_add_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:323:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:321:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_add_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:331:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:329:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sub_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:339:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:337:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sub_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:347:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:345:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sub_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:355:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:353:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sub_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:363:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:361:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mul_epi32(arg___W: __m256i, arg___M: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:371:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:369:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mul_epi32(arg___M: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:379:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:377:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mul_epi32(arg___W: __m128i, arg___M: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:387:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:385:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mul_epi32(arg___M: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:395:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:393:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mul_epu32(arg___W: __m256i, arg___M: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:403:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:401:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mul_epu32(arg___M: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:411:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:409:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mul_epu32(arg___W: __m128i, arg___M: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:419:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:417:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mul_epu32(arg___M: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:427:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:425:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mullo_epi32(arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:435:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:433:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mullo_epi32(arg___W: __m256i, arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:443:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:441:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mullo_epi32(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:451:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:449:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mullo_epi32(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
pub inline fn _mm256_and_epi32(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v8su, @bitCast(__a)) & @as(__v8su, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512vlintrin.h:465:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:463:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_and_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
pub inline fn _mm256_maskz_and_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm256_mask_and_epi32(_mm256_setzero_si256(), __U, __A, __B);
}
pub inline fn _mm_and_epi32(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v4su, @bitCast(__a)) & @as(__v4su, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512vlintrin.h:485:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:483:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_and_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
pub inline fn _mm_maskz_and_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm_mask_and_epi32(_mm_setzero_si128(), __U, __A, __B);
}
pub inline fn _mm256_andnot_epi32(arg___A: __m256i, arg___B: __m256i) __m256i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m256i, @bitCast(~@as(__v8su, @bitCast(__A)) & @as(__v8su, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512vlintrin.h:505:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:503:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_andnot_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
pub inline fn _mm256_maskz_andnot_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm256_mask_andnot_epi32(_mm256_setzero_si256(), __U, __A, __B);
}
pub inline fn _mm_andnot_epi32(arg___A: __m128i, arg___B: __m128i) __m128i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m128i, @bitCast(~@as(__v4su, @bitCast(__A)) & @as(__v4su, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512vlintrin.h:526:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:524:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_andnot_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
pub inline fn _mm_maskz_andnot_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm_mask_andnot_epi32(_mm_setzero_si128(), __U, __A, __B);
}
pub inline fn _mm256_or_epi32(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v8su, @bitCast(__a)) | @as(__v8su, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512vlintrin.h:546:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:544:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_or_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
pub inline fn _mm256_maskz_or_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm256_mask_or_epi32(_mm256_setzero_si256(), __U, __A, __B);
}
pub inline fn _mm_or_epi32(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v4su, @bitCast(__a)) | @as(__v4su, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512vlintrin.h:566:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:564:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_or_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
pub inline fn _mm_maskz_or_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm_mask_or_epi32(_mm_setzero_si128(), __U, __A, __B);
}
pub inline fn _mm256_xor_epi32(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v8su, @bitCast(__a)) ^ @as(__v8su, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512vlintrin.h:586:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:584:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_xor_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
pub inline fn _mm256_maskz_xor_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm256_mask_xor_epi32(_mm256_setzero_si256(), __U, __A, __B);
}
pub inline fn _mm_xor_epi32(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v4su, @bitCast(__a)) ^ @as(__v4su, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512vlintrin.h:606:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:604:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_xor_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
pub inline fn _mm_maskz_xor_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm_mask_xor_epi32(_mm_setzero_si128(), __U, __A, __B);
}
pub inline fn _mm256_and_epi64(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v4du, @bitCast(__a)) & @as(__v4du, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512vlintrin.h:626:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:624:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_and_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
pub inline fn _mm256_maskz_and_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm256_mask_and_epi64(_mm256_setzero_si256(), __U, __A, __B);
}
pub inline fn _mm_and_epi64(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v2du, @bitCast(__a)) & @as(__v2du, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512vlintrin.h:646:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:644:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_and_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
pub inline fn _mm_maskz_and_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm_mask_and_epi64(_mm_setzero_si128(), __U, __A, __B);
}
pub inline fn _mm256_andnot_epi64(arg___A: __m256i, arg___B: __m256i) __m256i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m256i, @bitCast(~@as(__v4du, @bitCast(__A)) & @as(__v4du, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512vlintrin.h:666:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:664:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_andnot_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
pub inline fn _mm256_maskz_andnot_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm256_mask_andnot_epi64(_mm256_setzero_si256(), __U, __A, __B);
}
pub inline fn _mm_andnot_epi64(arg___A: __m128i, arg___B: __m128i) __m128i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m128i, @bitCast(~@as(__v2du, @bitCast(__A)) & @as(__v2du, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512vlintrin.h:687:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:685:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_andnot_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
pub inline fn _mm_maskz_andnot_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm_mask_andnot_epi64(_mm_setzero_si128(), __U, __A, __B);
}
pub inline fn _mm256_or_epi64(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v4du, @bitCast(__a)) | @as(__v4du, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512vlintrin.h:707:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:705:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_or_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
pub inline fn _mm256_maskz_or_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm256_mask_or_epi64(_mm256_setzero_si256(), __U, __A, __B);
}
pub inline fn _mm_or_epi64(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v2du, @bitCast(__a)) | @as(__v2du, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512vlintrin.h:727:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:725:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_or_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
pub inline fn _mm_maskz_or_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm_mask_or_epi64(_mm_setzero_si128(), __U, __A, __B);
}
pub inline fn _mm256_xor_epi64(arg___a: __m256i, arg___b: __m256i) __m256i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m256i, @bitCast(@as(__v4du, @bitCast(__a)) ^ @as(__v4du, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512vlintrin.h:747:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:745:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_xor_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
pub inline fn _mm256_maskz_xor_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm256_mask_xor_epi64(_mm256_setzero_si256(), __U, __A, __B);
}
pub inline fn _mm_xor_epi64(arg___a: __m128i, arg___b: __m128i) __m128i {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    return @as(__m128i, @bitCast(@as(__v2du, @bitCast(__a)) ^ @as(__v2du, @bitCast(__b))));
}
// /usr/lib/zig/include/avx512vlintrin.h:768:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:765:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_xor_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
pub inline fn _mm_maskz_xor_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm_mask_xor_epi64(_mm_setzero_si128(), __U, __A, __B);
}
// /usr/lib/zig/include/avx512vlintrin.h:902:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:900:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmadd_pd(arg___A: __m128d, arg___U: __mmask8, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:912:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:910:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmadd_pd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d, arg___U: __mmask8) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:922:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:920:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmadd_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:932:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:930:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmsub_pd(arg___A: __m128d, arg___U: __mmask8, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:942:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:940:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmsub_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:952:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:950:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fnmadd_pd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d, arg___U: __mmask8) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:962:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:960:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fnmadd_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:972:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:970:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fnmsub_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:982:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:980:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fmadd_pd(arg___A: __m256d, arg___U: __mmask8, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:992:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:990:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fmadd_pd(arg___A: __m256d, arg___B: __m256d, arg___C: __m256d, arg___U: __mmask8) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1002:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1000:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fmadd_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1012:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1010:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fmsub_pd(arg___A: __m256d, arg___U: __mmask8, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1022:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1020:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fmsub_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1032:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1030:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fnmadd_pd(arg___A: __m256d, arg___B: __m256d, arg___C: __m256d, arg___U: __mmask8) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1042:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1040:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fnmadd_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1052:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1050:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fnmsub_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1062:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1060:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmadd_ps(arg___A: __m128, arg___U: __mmask8, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1072:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1070:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmadd_ps(arg___A: __m128, arg___B: __m128, arg___C: __m128, arg___U: __mmask8) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1082:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1080:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmadd_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1092:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1090:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmsub_ps(arg___A: __m128, arg___U: __mmask8, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1102:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1100:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmsub_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1112:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1110:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fnmadd_ps(arg___A: __m128, arg___B: __m128, arg___C: __m128, arg___U: __mmask8) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1122:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1120:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fnmadd_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1132:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1130:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fnmsub_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1142:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1140:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fmadd_ps(arg___A: __m256, arg___U: __mmask8, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1152:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1150:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fmadd_ps(arg___A: __m256, arg___B: __m256, arg___C: __m256, arg___U: __mmask8) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1162:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1160:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fmadd_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1172:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1170:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fmsub_ps(arg___A: __m256, arg___U: __mmask8, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1182:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1180:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fmsub_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1192:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1190:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fnmadd_ps(arg___A: __m256, arg___B: __m256, arg___C: __m256, arg___U: __mmask8) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1202:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1200:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fnmadd_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1212:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1210:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fnmsub_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1222:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1220:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmaddsub_pd(arg___A: __m128d, arg___U: __mmask8, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1232:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1230:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmaddsub_pd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d, arg___U: __mmask8) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1242:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1240:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmaddsub_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1252:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1250:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmsubadd_pd(arg___A: __m128d, arg___U: __mmask8, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1262:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1260:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmsubadd_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1272:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1270:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fmaddsub_pd(arg___A: __m256d, arg___U: __mmask8, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1282:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1280:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fmaddsub_pd(arg___A: __m256d, arg___B: __m256d, arg___C: __m256d, arg___U: __mmask8) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1292:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1290:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fmaddsub_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1302:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1300:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fmsubadd_pd(arg___A: __m256d, arg___U: __mmask8, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1312:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1310:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fmsubadd_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1322:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1320:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmaddsub_ps(arg___A: __m128, arg___U: __mmask8, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1332:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1330:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmaddsub_ps(arg___A: __m128, arg___B: __m128, arg___C: __m128, arg___U: __mmask8) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1342:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1340:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmaddsub_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1352:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1350:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmsubadd_ps(arg___A: __m128, arg___U: __mmask8, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1362:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1360:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmsubadd_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1373:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1370:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fmaddsub_ps(arg___A: __m256, arg___U: __mmask8, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1383:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1381:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fmaddsub_ps(arg___A: __m256, arg___B: __m256, arg___C: __m256, arg___U: __mmask8) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1393:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1391:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fmaddsub_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1403:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1401:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fmsubadd_ps(arg___A: __m256, arg___U: __mmask8, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1413:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1411:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fmsubadd_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1423:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1421:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmsub_pd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d, arg___U: __mmask8) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1433:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1431:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fmsub_pd(arg___A: __m256d, arg___B: __m256d, arg___C: __m256d, arg___U: __mmask8) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1443:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1441:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmsub_ps(arg___A: __m128, arg___B: __m128, arg___C: __m128, arg___U: __mmask8) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1453:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1451:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fmsub_ps(arg___A: __m256, arg___B: __m256, arg___C: __m256, arg___U: __mmask8) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1463:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1461:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmsubadd_pd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d, arg___U: __mmask8) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1473:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1471:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fmsubadd_pd(arg___A: __m256d, arg___B: __m256d, arg___C: __m256d, arg___U: __mmask8) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1483:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1481:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmsubadd_ps(arg___A: __m128, arg___B: __m128, arg___C: __m128, arg___U: __mmask8) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1493:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1491:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fmsubadd_ps(arg___A: __m256, arg___B: __m256, arg___C: __m256, arg___U: __mmask8) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1503:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1501:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fnmadd_pd(arg___A: __m128d, arg___U: __mmask8, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1513:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1511:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fnmadd_pd(arg___A: __m256d, arg___U: __mmask8, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1523:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1521:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fnmadd_ps(arg___A: __m128, arg___U: __mmask8, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1533:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1531:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fnmadd_ps(arg___A: __m256, arg___U: __mmask8, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1543:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1541:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fnmsub_pd(arg___A: __m128d, arg___U: __mmask8, arg___B: __m128d, arg___C: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1553:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1551:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fnmsub_pd(arg___A: __m128d, arg___B: __m128d, arg___C: __m128d, arg___U: __mmask8) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1563:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1561:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fnmsub_pd(arg___A: __m256d, arg___U: __mmask8, arg___B: __m256d, arg___C: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1573:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1571:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fnmsub_pd(arg___A: __m256d, arg___B: __m256d, arg___C: __m256d, arg___U: __mmask8) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1583:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1581:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fnmsub_ps(arg___A: __m128, arg___U: __mmask8, arg___B: __m128, arg___C: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1593:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1591:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fnmsub_ps(arg___A: __m128, arg___B: __m128, arg___C: __m128, arg___U: __mmask8) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1603:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1601:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fnmsub_ps(arg___A: __m256, arg___U: __mmask8, arg___B: __m256, arg___C: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1613:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1611:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fnmsub_ps(arg___A: __m256, arg___B: __m256, arg___C: __m256, arg___U: __mmask8) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1622:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1621:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_add_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1629:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1628:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_add_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1636:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1635:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_add_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1643:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1642:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_add_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1650:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1649:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_add_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1657:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1656:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_add_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1664:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1663:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_add_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1671:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1670:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_add_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1678:20: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1677:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_blend_epi32(arg___U: __mmask8, arg___A: __m128i, arg___W: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:1685:20: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1684:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_blend_epi32(arg___U: __mmask8, arg___A: __m256i, arg___W: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:1692:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1691:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_blend_pd(arg___U: __mmask8, arg___A: __m128d, arg___W: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1699:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1698:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_blend_pd(arg___U: __mmask8, arg___A: __m256d, arg___W: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1706:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1705:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_blend_ps(arg___U: __mmask8, arg___A: __m128, arg___W: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1713:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1712:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_blend_ps(arg___U: __mmask8, arg___A: __m256, arg___W: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1720:20: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1719:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_blend_epi64(arg___U: __mmask8, arg___A: __m128i, arg___W: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:1727:20: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1726:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_blend_epi64(arg___U: __mmask8, arg___A: __m256i, arg___W: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:1734:20: warning: TODO implement function '__builtin_ia32_compressdf128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1733:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_compress_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1741:20: warning: TODO implement function '__builtin_ia32_compressdf128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1740:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_compress_pd(arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1749:20: warning: TODO implement function '__builtin_ia32_compressdf256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1748:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_compress_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1756:20: warning: TODO implement function '__builtin_ia32_compressdf256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1755:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_compress_pd(arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1764:20: warning: TODO implement function '__builtin_ia32_compressdi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1763:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_compress_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:1771:20: warning: TODO implement function '__builtin_ia32_compressdi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1770:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_compress_epi64(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:1779:20: warning: TODO implement function '__builtin_ia32_compressdi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1778:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_compress_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:1786:20: warning: TODO implement function '__builtin_ia32_compressdi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1785:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_compress_epi64(arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:1794:19: warning: TODO implement function '__builtin_ia32_compresssf128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1793:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_compress_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1801:19: warning: TODO implement function '__builtin_ia32_compresssf128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1800:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_compress_ps(arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1809:19: warning: TODO implement function '__builtin_ia32_compresssf256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1808:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_compress_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1816:19: warning: TODO implement function '__builtin_ia32_compresssf256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1815:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_compress_ps(arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1824:20: warning: TODO implement function '__builtin_ia32_compresssi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1823:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_compress_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:1831:20: warning: TODO implement function '__builtin_ia32_compresssi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1830:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_compress_epi32(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:1839:20: warning: TODO implement function '__builtin_ia32_compresssi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1838:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_compress_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:1846:20: warning: TODO implement function '__builtin_ia32_compresssi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1845:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_compress_epi32(arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:1854:3: warning: TODO implement function '__builtin_ia32_compressstoredf128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1853:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_compressstoreu_pd(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m128d) void;
// /usr/lib/zig/include/avx512vlintrin.h:1861:3: warning: TODO implement function '__builtin_ia32_compressstoredf256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1860:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_compressstoreu_pd(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m256d) void;
// /usr/lib/zig/include/avx512vlintrin.h:1868:3: warning: TODO implement function '__builtin_ia32_compressstoredi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1867:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_compressstoreu_epi64(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m128i) void;
// /usr/lib/zig/include/avx512vlintrin.h:1875:3: warning: TODO implement function '__builtin_ia32_compressstoredi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1874:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_compressstoreu_epi64(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlintrin.h:1882:3: warning: TODO implement function '__builtin_ia32_compressstoresf128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1881:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_compressstoreu_ps(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m128) void;
// /usr/lib/zig/include/avx512vlintrin.h:1889:3: warning: TODO implement function '__builtin_ia32_compressstoresf256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1888:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_compressstoreu_ps(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m256) void;
// /usr/lib/zig/include/avx512vlintrin.h:1896:3: warning: TODO implement function '__builtin_ia32_compressstoresi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1895:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_compressstoreu_epi32(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m128i) void;
// /usr/lib/zig/include/avx512vlintrin.h:1903:3: warning: TODO implement function '__builtin_ia32_compressstoresi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1902:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_compressstoreu_epi32(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlintrin.h:1910:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1909:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi32_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128i) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1917:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1916:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi32_pd(arg___U: __mmask8, arg___A: __m128i) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:1924:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1923:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi32_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m128i) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1931:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1930:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi32_pd(arg___U: __mmask8, arg___A: __m128i) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:1938:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1937:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi32_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128i) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1945:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1944:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi32_ps(arg___U: __mmask8, arg___A: __m128i) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:1952:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1951:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi32_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256i) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1959:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1958:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi32_ps(arg___U: __mmask8, arg___A: __m256i) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:1966:20: warning: TODO implement function '__builtin_ia32_cvtpd2dq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1965:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtpd_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:1973:20: warning: TODO implement function '__builtin_ia32_cvtpd2dq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1972:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtpd_epi32(arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:1981:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1980:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtpd_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m256d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:1988:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1987:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtpd_epi32(arg___U: __mmask8, arg___A: __m256d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:1995:19: warning: TODO implement function '__builtin_ia32_cvtpd2ps_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:1994:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtpd_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128d) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2002:19: warning: TODO implement function '__builtin_ia32_cvtpd2ps_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2001:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtpd_ps(arg___U: __mmask8, arg___A: __m128d) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2010:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2009:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtpd_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m256d) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2017:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2016:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtpd_ps(arg___U: __mmask8, arg___A: __m256d) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2024:20: warning: TODO implement function '__builtin_ia32_cvtpd2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2023:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtpd_epu32(arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2032:20: warning: TODO implement function '__builtin_ia32_cvtpd2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2031:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtpd_epu32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2039:20: warning: TODO implement function '__builtin_ia32_cvtpd2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2038:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtpd_epu32(arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2047:20: warning: TODO implement function '__builtin_ia32_cvtpd2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2046:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtpd_epu32(arg___A: __m256d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2055:20: warning: TODO implement function '__builtin_ia32_cvtpd2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2054:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtpd_epu32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m256d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2062:20: warning: TODO implement function '__builtin_ia32_cvtpd2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2061:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtpd_epu32(arg___U: __mmask8, arg___A: __m256d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2070:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2069:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtps_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2077:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2076:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtps_epi32(arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2084:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2083:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtps_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2091:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2090:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtps_epi32(arg___U: __mmask8, arg___A: __m256) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2098:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2097:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtps_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2105:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2104:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtps_pd(arg___U: __mmask8, arg___A: __m128) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2112:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2111:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtps_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m128) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2119:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2118:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtps_pd(arg___U: __mmask8, arg___A: __m128) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2126:20: warning: TODO implement function '__builtin_ia32_cvtps2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2125:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtps_epu32(arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2134:20: warning: TODO implement function '__builtin_ia32_cvtps2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2133:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtps_epu32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2141:20: warning: TODO implement function '__builtin_ia32_cvtps2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2140:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtps_epu32(arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2149:20: warning: TODO implement function '__builtin_ia32_cvtps2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2148:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtps_epu32(arg___A: __m256) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2157:20: warning: TODO implement function '__builtin_ia32_cvtps2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2156:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtps_epu32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2164:20: warning: TODO implement function '__builtin_ia32_cvtps2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2163:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtps_epu32(arg___U: __mmask8, arg___A: __m256) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2172:20: warning: TODO implement function '__builtin_ia32_cvttpd2dq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2171:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvttpd_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2179:20: warning: TODO implement function '__builtin_ia32_cvttpd2dq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2178:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvttpd_epi32(arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2187:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2186:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvttpd_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m256d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2194:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2193:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvttpd_epi32(arg___U: __mmask8, arg___A: __m256d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2201:20: warning: TODO implement function '__builtin_ia32_cvttpd2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2200:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttpd_epu32(arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2209:20: warning: TODO implement function '__builtin_ia32_cvttpd2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2208:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvttpd_epu32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2216:20: warning: TODO implement function '__builtin_ia32_cvttpd2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2215:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvttpd_epu32(arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2224:20: warning: TODO implement function '__builtin_ia32_cvttpd2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2223:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvttpd_epu32(arg___A: __m256d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2232:20: warning: TODO implement function '__builtin_ia32_cvttpd2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2231:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvttpd_epu32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m256d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2239:20: warning: TODO implement function '__builtin_ia32_cvttpd2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2238:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvttpd_epu32(arg___U: __mmask8, arg___A: __m256d) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2247:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2246:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvttps_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2254:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2253:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvttps_epi32(arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2261:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2260:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvttps_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2268:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2267:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvttps_epi32(arg___U: __mmask8, arg___A: __m256) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2275:20: warning: TODO implement function '__builtin_ia32_cvttps2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2274:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttps_epu32(arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2283:20: warning: TODO implement function '__builtin_ia32_cvttps2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2282:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvttps_epu32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2290:20: warning: TODO implement function '__builtin_ia32_cvttps2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2289:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvttps_epu32(arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2298:20: warning: TODO implement function '__builtin_ia32_cvttps2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2297:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvttps_epu32(arg___A: __m256) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2306:20: warning: TODO implement function '__builtin_ia32_cvttps2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2305:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvttps_epu32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2313:20: warning: TODO implement function '__builtin_ia32_cvttps2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2312:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvttps_epu32(arg___U: __mmask8, arg___A: __m256) __m256i;
pub inline fn _mm_cvtepu32_pd(arg___A: __m128i) __m128d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128d, @bitCast(blk: {
        const tmp = @as(f64, @floatFromInt(@shuffle(@typeInfo(@TypeOf(@as(__v4su, @bitCast(__A)))).Vector.child, @as(__v4su, @bitCast(__A)), @as(__v4su, @bitCast(__A)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4su, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4su, @bitCast(__A)))).Vector.len),
        })[0]));
        const tmp_1 = @as(f64, @floatFromInt(@shuffle(@typeInfo(@TypeOf(@as(__v4su, @bitCast(__A)))).Vector.child, @as(__v4su, @bitCast(__A)), @as(__v4su, @bitCast(__A)), @Vector(2, i32){
            @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4su, @bitCast(__A)))).Vector.len),
            @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4su, @bitCast(__A)))).Vector.len),
        })[1]));
        break :blk __v2df{
            tmp,
            tmp_1,
        };
    }));
}
// /usr/lib/zig/include/avx512vlintrin.h:2327:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2326:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepu32_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128i) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2334:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2333:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepu32_pd(arg___U: __mmask8, arg___A: __m128i) __m128d;
pub inline fn _mm256_cvtepu32_pd(arg___A: __m128i) __m256d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m256d, @bitCast(blk: {
        const tmp = @as(f64, @floatFromInt(@as(__v4su, @bitCast(__A))[0]));
        const tmp_1 = @as(f64, @floatFromInt(@as(__v4su, @bitCast(__A))[1]));
        const tmp_2 = @as(f64, @floatFromInt(@as(__v4su, @bitCast(__A))[2]));
        const tmp_3 = @as(f64, @floatFromInt(@as(__v4su, @bitCast(__A))[3]));
        break :blk __v4df{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
// /usr/lib/zig/include/avx512vlintrin.h:2346:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2345:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepu32_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m128i) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2353:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2352:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepu32_pd(arg___U: __mmask8, arg___A: __m128i) __m256d;
pub inline fn _mm_cvtepu32_ps(arg___A: __m128i) __m128 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128, @bitCast(blk: {
        const tmp = @as(f32, @floatFromInt(@as(__v4su, @bitCast(__A))[0]));
        const tmp_1 = @as(f32, @floatFromInt(@as(__v4su, @bitCast(__A))[1]));
        const tmp_2 = @as(f32, @floatFromInt(@as(__v4su, @bitCast(__A))[2]));
        const tmp_3 = @as(f32, @floatFromInt(@as(__v4su, @bitCast(__A))[3]));
        break :blk __v4sf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
// /usr/lib/zig/include/avx512vlintrin.h:2365:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2364:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepu32_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128i) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2372:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2371:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepu32_ps(arg___U: __mmask8, arg___A: __m128i) __m128;
pub inline fn _mm256_cvtepu32_ps(arg___A: __m256i) __m256 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m256, @bitCast(blk: {
        const tmp = @as(f32, @floatFromInt(@as(__v8su, @bitCast(__A))[0]));
        const tmp_1 = @as(f32, @floatFromInt(@as(__v8su, @bitCast(__A))[1]));
        const tmp_2 = @as(f32, @floatFromInt(@as(__v8su, @bitCast(__A))[2]));
        const tmp_3 = @as(f32, @floatFromInt(@as(__v8su, @bitCast(__A))[3]));
        const tmp_4 = @as(f32, @floatFromInt(@as(__v8su, @bitCast(__A))[4]));
        const tmp_5 = @as(f32, @floatFromInt(@as(__v8su, @bitCast(__A))[5]));
        const tmp_6 = @as(f32, @floatFromInt(@as(__v8su, @bitCast(__A))[6]));
        const tmp_7 = @as(f32, @floatFromInt(@as(__v8su, @bitCast(__A))[7]));
        break :blk __v8sf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512vlintrin.h:2384:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2383:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepu32_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256i) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2391:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2390:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepu32_ps(arg___U: __mmask8, arg___A: __m256i) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2398:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2397:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_div_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2405:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2404:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_div_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2412:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2411:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_div_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2419:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2418:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_div_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2426:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2425:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_div_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2433:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2432:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_div_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2440:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2439:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_div_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2447:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2446:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_div_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2454:20: warning: TODO implement function '__builtin_ia32_expanddf128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2453:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_expand_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2461:20: warning: TODO implement function '__builtin_ia32_expanddf128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2460:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_expand_pd(arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2469:20: warning: TODO implement function '__builtin_ia32_expanddf256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2468:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_expand_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2476:20: warning: TODO implement function '__builtin_ia32_expanddf256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2475:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_expand_pd(arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2484:20: warning: TODO implement function '__builtin_ia32_expanddi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2483:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_expand_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2491:20: warning: TODO implement function '__builtin_ia32_expanddi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2490:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_expand_epi64(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2499:20: warning: TODO implement function '__builtin_ia32_expanddi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2498:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_expand_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2506:20: warning: TODO implement function '__builtin_ia32_expanddi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2505:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_expand_epi64(arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2514:20: warning: TODO implement function '__builtin_ia32_expandloaddf128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2513:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_expandloadu_pd(arg___W: __m128d, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2522:20: warning: TODO implement function '__builtin_ia32_expandloaddf128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2521:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_expandloadu_pd(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2531:20: warning: TODO implement function '__builtin_ia32_expandloaddf256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2530:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_expandloadu_pd(arg___W: __m256d, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2539:20: warning: TODO implement function '__builtin_ia32_expandloaddf256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2538:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_expandloadu_pd(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2548:20: warning: TODO implement function '__builtin_ia32_expandloaddi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2547:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_expandloadu_epi64(arg___W: __m128i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2556:20: warning: TODO implement function '__builtin_ia32_expandloaddi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2555:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_expandloadu_epi64(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2566:20: warning: TODO implement function '__builtin_ia32_expandloaddi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2564:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_expandloadu_epi64(arg___W: __m256i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2574:20: warning: TODO implement function '__builtin_ia32_expandloaddi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2573:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_expandloadu_epi64(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2583:19: warning: TODO implement function '__builtin_ia32_expandloadsf128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2582:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_expandloadu_ps(arg___W: __m128, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2590:19: warning: TODO implement function '__builtin_ia32_expandloadsf128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2589:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_expandloadu_ps(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2599:19: warning: TODO implement function '__builtin_ia32_expandloadsf256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2598:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_expandloadu_ps(arg___W: __m256, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2606:19: warning: TODO implement function '__builtin_ia32_expandloadsf256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2605:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_expandloadu_ps(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2615:20: warning: TODO implement function '__builtin_ia32_expandloadsi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2614:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_expandloadu_epi32(arg___W: __m128i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2623:20: warning: TODO implement function '__builtin_ia32_expandloadsi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2622:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_expandloadu_epi32(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2632:20: warning: TODO implement function '__builtin_ia32_expandloadsi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2630:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_expandloadu_epi32(arg___W: __m256i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2640:20: warning: TODO implement function '__builtin_ia32_expandloadsi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2639:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_expandloadu_epi32(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2649:19: warning: TODO implement function '__builtin_ia32_expandsf128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2648:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_expand_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2656:19: warning: TODO implement function '__builtin_ia32_expandsf128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2655:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_expand_ps(arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2664:19: warning: TODO implement function '__builtin_ia32_expandsf256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2663:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_expand_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2671:19: warning: TODO implement function '__builtin_ia32_expandsf256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2670:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_expand_ps(arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2679:20: warning: TODO implement function '__builtin_ia32_expandsi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2678:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_expand_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2686:20: warning: TODO implement function '__builtin_ia32_expandsi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2685:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_expand_epi32(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2694:20: warning: TODO implement function '__builtin_ia32_expandsi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2693:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_expand_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2701:20: warning: TODO implement function '__builtin_ia32_expandsi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2700:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_expand_epi32(arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2709:20: warning: TODO implement function '__builtin_ia32_getexppd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2708:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_getexp_pd(arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2717:20: warning: TODO implement function '__builtin_ia32_getexppd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2716:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_getexp_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2724:20: warning: TODO implement function '__builtin_ia32_getexppd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2723:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_getexp_pd(arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2732:20: warning: TODO implement function '__builtin_ia32_getexppd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2731:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_getexp_pd(arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2740:20: warning: TODO implement function '__builtin_ia32_getexppd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2739:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_getexp_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2747:20: warning: TODO implement function '__builtin_ia32_getexppd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2746:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_getexp_pd(arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2755:19: warning: TODO implement function '__builtin_ia32_getexpps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2754:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_getexp_ps(arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2763:19: warning: TODO implement function '__builtin_ia32_getexpps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2762:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_getexp_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2770:19: warning: TODO implement function '__builtin_ia32_getexpps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2769:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_getexp_ps(arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2778:19: warning: TODO implement function '__builtin_ia32_getexpps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2777:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_getexp_ps(arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2786:19: warning: TODO implement function '__builtin_ia32_getexpps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2785:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_getexp_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2793:19: warning: TODO implement function '__builtin_ia32_getexpps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2792:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_getexp_ps(arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2801:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2800:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_max_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2808:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2807:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_max_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2815:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2814:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_max_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2822:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2821:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_max_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2829:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2828:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_max_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2836:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2835:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_max_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2843:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2842:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_max_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2850:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2849:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_max_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2857:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2856:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_min_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2864:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2863:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_min_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2871:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2870:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_min_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2878:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2877:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_min_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2885:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2884:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_min_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2892:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2891:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_min_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2899:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2898:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_min_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2906:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2905:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_min_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2913:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2912:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mul_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2920:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2919:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mul_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:2927:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2926:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mul_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2934:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2933:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mul_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:2941:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2940:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mul_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2948:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2947:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mul_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:2955:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2954:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mul_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2962:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2961:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mul_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:2969:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2968:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_abs_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2976:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2975:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_abs_epi32(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:2983:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2982:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_abs_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2990:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2989:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_abs_epi32(arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:2997:19: warning: TODO implement function '__builtin_elementwise_abs' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:2996:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_abs_epi64(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3002:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3001:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_abs_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3009:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3008:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_abs_epi64(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3016:19: warning: TODO implement function '__builtin_elementwise_abs' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3015:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_abs_epi64(arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3021:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3020:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_abs_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3028:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3027:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_abs_epi64(arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3035:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3034:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_max_epi32(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3042:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3041:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_max_epi32(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3049:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3048:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_max_epi32(arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3056:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3055:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_max_epi32(arg___W: __m256i, arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3063:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3062:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_epi64(arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3068:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3067:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_max_epi64(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3075:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3074:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_max_epi64(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3082:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3081:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_max_epi64(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3087:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3086:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_max_epi64(arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3094:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3093:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_max_epi64(arg___W: __m256i, arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3101:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3100:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_max_epu32(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3108:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3107:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_max_epu32(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3115:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3114:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_max_epu32(arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3122:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3121:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_max_epu32(arg___W: __m256i, arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3129:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3128:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_epu64(arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3134:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3133:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_max_epu64(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3141:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3140:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_max_epu64(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3148:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3147:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_max_epu64(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3153:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3152:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_max_epu64(arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3160:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3159:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_max_epu64(arg___W: __m256i, arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3167:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3166:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_min_epi32(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3174:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3173:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_min_epi32(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3181:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3180:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_min_epi32(arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3188:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3187:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_min_epi32(arg___W: __m256i, arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3195:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3194:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_epi64(arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3200:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3199:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_min_epi64(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3207:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3206:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_min_epi64(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3214:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3213:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_min_epi64(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3219:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3218:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_min_epi64(arg___W: __m256i, arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3226:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3225:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_min_epi64(arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3233:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3232:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_min_epu32(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3240:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3239:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_min_epu32(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3247:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3246:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_min_epu32(arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3254:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3253:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_min_epu32(arg___W: __m256i, arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3261:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3260:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_epu64(arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3266:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3265:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_min_epu64(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3273:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3272:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_min_epu64(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3280:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3279:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_min_epu64(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3285:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3284:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_min_epu64(arg___W: __m256i, arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3292:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3291:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_min_epu64(arg___M: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3373:20: warning: TODO implement function '__builtin_ia32_scalefpd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3372:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_scalef_pd(arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:3383:20: warning: TODO implement function '__builtin_ia32_scalefpd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3381:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_scalef_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:3391:20: warning: TODO implement function '__builtin_ia32_scalefpd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3390:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_scalef_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:3400:20: warning: TODO implement function '__builtin_ia32_scalefpd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3399:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_scalef_pd(arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:3410:20: warning: TODO implement function '__builtin_ia32_scalefpd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3408:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_scalef_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:3418:20: warning: TODO implement function '__builtin_ia32_scalefpd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3417:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_scalef_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:3427:19: warning: TODO implement function '__builtin_ia32_scalefps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3426:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_scalef_ps(arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:3436:19: warning: TODO implement function '__builtin_ia32_scalefps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3435:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_scalef_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:3444:19: warning: TODO implement function '__builtin_ia32_scalefps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3443:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_scalef_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:3453:19: warning: TODO implement function '__builtin_ia32_scalefps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3452:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_scalef_ps(arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:3463:19: warning: TODO implement function '__builtin_ia32_scalefps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3461:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_scalef_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:3471:19: warning: TODO implement function '__builtin_ia32_scalefps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3470:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_scalef_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:3640:21: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3639:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sqrt_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:3647:21: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3646:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sqrt_pd(arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:3654:21: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3653:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sqrt_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:3661:21: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3660:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sqrt_pd(arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:3668:20: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3667:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sqrt_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:3675:20: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3674:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sqrt_ps(arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:3682:20: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3681:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sqrt_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:3689:20: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3688:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sqrt_ps(arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:3696:21: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3695:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sub_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:3703:21: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3702:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sub_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:3710:21: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3709:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sub_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:3717:21: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3716:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sub_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:3724:20: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3723:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sub_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:3731:20: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3730:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sub_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:3738:20: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3737:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sub_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:3745:20: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3744:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sub_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:3752:21: warning: TODO implement function '__builtin_ia32_vpermi2vard128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3751:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_permutex2var_epi32(arg___A: __m128i, arg___I: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3759:21: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3757:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_permutex2var_epi32(arg___A: __m128i, arg___U: __mmask8, arg___I: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3767:21: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3765:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask2_permutex2var_epi32(arg___A: __m128i, arg___I: __m128i, arg___U: __mmask8, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3775:21: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3773:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_permutex2var_epi32(arg___U: __mmask8, arg___A: __m128i, arg___I: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3782:21: warning: TODO implement function '__builtin_ia32_vpermi2vard256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3781:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutex2var_epi32(arg___A: __m256i, arg___I: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3789:21: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3787:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_permutex2var_epi32(arg___A: __m256i, arg___U: __mmask8, arg___I: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3797:21: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3795:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask2_permutex2var_epi32(arg___A: __m256i, arg___I: __m256i, arg___U: __mmask8, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3805:21: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3803:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_permutex2var_epi32(arg___U: __mmask8, arg___A: __m256i, arg___I: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3812:21: warning: TODO implement function '__builtin_ia32_vpermi2varpd128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3811:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_permutex2var_pd(arg___A: __m128d, arg___I: __m128i, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:3818:21: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3817:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_permutex2var_pd(arg___A: __m128d, arg___U: __mmask8, arg___I: __m128i, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:3825:21: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3824:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask2_permutex2var_pd(arg___A: __m128d, arg___I: __m128i, arg___U: __mmask8, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:3832:21: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3831:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_permutex2var_pd(arg___U: __mmask8, arg___A: __m128d, arg___I: __m128i, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:3839:21: warning: TODO implement function '__builtin_ia32_vpermi2varpd256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3838:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutex2var_pd(arg___A: __m256d, arg___I: __m256i, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:3846:21: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3844:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_permutex2var_pd(arg___A: __m256d, arg___U: __mmask8, arg___I: __m256i, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:3854:21: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3852:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask2_permutex2var_pd(arg___A: __m256d, arg___I: __m256i, arg___U: __mmask8, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:3862:21: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3860:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_permutex2var_pd(arg___U: __mmask8, arg___A: __m256d, arg___I: __m256i, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:3869:20: warning: TODO implement function '__builtin_ia32_vpermi2varps128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3868:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_permutex2var_ps(arg___A: __m128, arg___I: __m128i, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:3875:20: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3874:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_permutex2var_ps(arg___A: __m128, arg___U: __mmask8, arg___I: __m128i, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:3882:20: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3881:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask2_permutex2var_ps(arg___A: __m128, arg___I: __m128i, arg___U: __mmask8, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:3889:20: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3888:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_permutex2var_ps(arg___U: __mmask8, arg___A: __m128, arg___I: __m128i, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:3896:20: warning: TODO implement function '__builtin_ia32_vpermi2varps256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3895:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutex2var_ps(arg___A: __m256, arg___I: __m256i, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:3902:20: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3901:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_permutex2var_ps(arg___A: __m256, arg___U: __mmask8, arg___I: __m256i, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:3910:20: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3908:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask2_permutex2var_ps(arg___A: __m256, arg___I: __m256i, arg___U: __mmask8, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:3918:20: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3916:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_permutex2var_ps(arg___U: __mmask8, arg___A: __m256, arg___I: __m256i, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:3925:21: warning: TODO implement function '__builtin_ia32_vpermi2varq128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3924:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_permutex2var_epi64(arg___A: __m128i, arg___I: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3932:21: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3930:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_permutex2var_epi64(arg___A: __m128i, arg___U: __mmask8, arg___I: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3940:21: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3938:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask2_permutex2var_epi64(arg___A: __m128i, arg___I: __m128i, arg___U: __mmask8, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3948:21: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3946:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_permutex2var_epi64(arg___U: __mmask8, arg___A: __m128i, arg___I: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3956:21: warning: TODO implement function '__builtin_ia32_vpermi2varq256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3955:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutex2var_epi64(arg___A: __m256i, arg___I: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3963:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3961:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_permutex2var_epi64(arg___A: __m256i, arg___U: __mmask8, arg___I: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3971:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3969:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask2_permutex2var_epi64(arg___A: __m256i, arg___I: __m256i, arg___U: __mmask8, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3979:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3977:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_permutex2var_epi64(arg___U: __mmask8, arg___A: __m256i, arg___I: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:3987:21: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3985:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi8_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:3995:21: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:3993:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi8_epi32(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4003:21: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4001:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi8_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4011:21: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4009:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi8_epi32(arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4019:21: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4017:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi8_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4027:21: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4025:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi8_epi64(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4035:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4033:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi8_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4043:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4041:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi8_epi64(arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4051:21: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4049:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi32_epi64(arg___W: __m128i, arg___U: __mmask8, arg___X: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4059:21: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4057:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi32_epi64(arg___U: __mmask8, arg___X: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4067:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4065:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi32_epi64(arg___W: __m256i, arg___U: __mmask8, arg___X: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4075:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4073:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi32_epi64(arg___U: __mmask8, arg___X: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4083:21: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4081:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi16_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4091:21: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4089:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi16_epi32(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4099:21: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4097:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi16_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4107:21: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4105:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi16_epi32(arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4115:21: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4113:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi16_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4123:21: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4121:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi16_epi64(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4131:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4129:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi16_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4139:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4137:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi16_epi64(arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4148:21: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4146:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepu8_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4156:21: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4154:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepu8_epi32(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4164:21: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4162:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepu8_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4172:21: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4170:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepu8_epi32(arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4180:21: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4178:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepu8_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4188:21: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4186:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepu8_epi64(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4196:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4194:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepu8_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4204:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4202:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepu8_epi64(arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4212:21: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4210:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepu32_epi64(arg___W: __m128i, arg___U: __mmask8, arg___X: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4220:21: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4218:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepu32_epi64(arg___U: __mmask8, arg___X: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4228:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4226:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepu32_epi64(arg___W: __m256i, arg___U: __mmask8, arg___X: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4236:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4234:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepu32_epi64(arg___U: __mmask8, arg___X: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4244:21: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4242:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepu16_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4252:21: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4250:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepu16_epi32(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4260:21: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4258:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepu16_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4268:21: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4266:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepu16_epi32(arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4276:21: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4274:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepu16_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4284:21: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4282:3: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepu16_epi64(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4292:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4290:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepu16_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4300:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4298:3: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepu16_epi64(arg___U: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4361:19: warning: TODO implement function '__builtin_ia32_prolvd128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4359:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rolv_epi32(arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4367:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4365:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rolv_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4375:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4373:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rolv_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4383:19: warning: TODO implement function '__builtin_ia32_prolvd256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4381:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_rolv_epi32(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4389:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4387:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_rolv_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4397:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4395:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_rolv_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4405:19: warning: TODO implement function '__builtin_ia32_prolvq128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4403:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rolv_epi64(arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4411:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4409:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rolv_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4419:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4417:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rolv_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4427:19: warning: TODO implement function '__builtin_ia32_prolvq256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4425:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_rolv_epi64(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4433:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4431:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_rolv_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4441:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4439:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_rolv_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4501:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4499:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sll_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4509:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4507:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sll_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4517:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4515:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sll_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4525:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4523:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sll_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4533:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4531:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_slli_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4541:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4539:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_slli_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4549:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4547:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_slli_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4557:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4555:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_slli_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4565:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4563:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sll_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4573:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4571:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sll_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4581:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4579:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sll_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4589:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4587:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sll_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4597:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4595:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_slli_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4605:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4603:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_slli_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4613:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4611:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_slli_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4621:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4619:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_slli_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4629:19: warning: TODO implement function '__builtin_ia32_prorvd128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4627:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rorv_epi32(arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4635:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4633:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rorv_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4643:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4641:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rorv_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4651:19: warning: TODO implement function '__builtin_ia32_prorvd256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4649:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_rorv_epi32(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4657:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4655:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_rorv_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4665:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4663:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_rorv_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4673:19: warning: TODO implement function '__builtin_ia32_prorvq128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4671:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rorv_epi64(arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4679:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4677:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rorv_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4687:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4685:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rorv_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4695:19: warning: TODO implement function '__builtin_ia32_prorvq256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4693:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_rorv_epi64(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4701:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4699:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_rorv_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4709:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4707:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_rorv_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4717:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4715:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sllv_epi64(arg___W: __m128i, arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4725:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4723:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sllv_epi64(arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4733:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4731:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sllv_epi64(arg___W: __m256i, arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4741:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4739:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sllv_epi64(arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4749:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4747:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sllv_epi32(arg___W: __m128i, arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4757:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4755:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sllv_epi32(arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4765:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4763:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sllv_epi32(arg___W: __m256i, arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4773:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4771:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sllv_epi32(arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4781:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4779:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_srlv_epi64(arg___W: __m128i, arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4789:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4787:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_srlv_epi64(arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4797:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4795:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_srlv_epi64(arg___W: __m256i, arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4805:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4803:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_srlv_epi64(arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4813:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4811:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_srlv_epi32(arg___W: __m128i, arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4821:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4819:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_srlv_epi32(arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4829:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4827:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_srlv_epi32(arg___W: __m256i, arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4837:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4835:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_srlv_epi32(arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4845:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4843:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_srl_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4853:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4851:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_srl_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4861:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4859:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_srl_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4869:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4867:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_srl_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4877:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4875:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_srli_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4885:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4883:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_srli_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4893:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4891:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_srli_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4901:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4899:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_srli_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4909:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4907:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_srl_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4917:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4915:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_srl_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4925:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4923:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_srl_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4933:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4931:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_srl_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4941:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4939:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_srli_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4949:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4947:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_srli_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4957:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4955:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_srli_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4965:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4963:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_srli_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4973:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4971:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_srav_epi32(arg___W: __m128i, arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4981:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4979:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_srav_epi32(arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:4989:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4987:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_srav_epi32(arg___W: __m256i, arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:4997:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:4995:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_srav_epi32(arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:5005:19: warning: TODO implement function '__builtin_ia32_psravq128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5003:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_srav_epi64(arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:5011:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5009:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_srav_epi64(arg___W: __m128i, arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:5019:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5017:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_srav_epi64(arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:5027:19: warning: TODO implement function '__builtin_ia32_psravq256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5025:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_srav_epi64(arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:5033:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5031:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_srav_epi64(arg___W: __m256i, arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:5041:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5039:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_srav_epi64(arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:5049:20: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5047:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mov_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:5057:20: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5055:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mov_epi32(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:5066:20: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5064:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mov_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:5074:20: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5072:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mov_epi32(arg___U: __mmask8, arg___A: __m256i) __m256i;
pub inline fn _mm_load_epi32(arg___P_1: ?*const anyopaque) __m128i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    return @as([*c]const __m128i, @ptrCast(@alignCast(__P_1))).*;
}
// /usr/lib/zig/include/avx512vlintrin.h:5088:20: warning: TODO implement function '__builtin_ia32_movdqa32load128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5086:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_load_epi32(arg___W: __m128i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:5097:20: warning: TODO implement function '__builtin_ia32_movdqa32load128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5095:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_load_epi32(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
pub inline fn _mm256_load_epi32(arg___P_1: ?*const anyopaque) __m256i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    return @as([*c]const __m256i, @ptrCast(@alignCast(__P_1))).*;
}
// /usr/lib/zig/include/avx512vlintrin.h:5113:20: warning: TODO implement function '__builtin_ia32_movdqa32load256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5111:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_load_epi32(arg___W: __m256i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:5122:20: warning: TODO implement function '__builtin_ia32_movdqa32load256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5120:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_load_epi32(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256i;
pub inline fn _mm_store_epi32(arg___P_1: ?*anyopaque, arg___A: __m128i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    @as([*c]__m128i, @ptrCast(@alignCast(__P_1))).* = __A;
}
// /usr/lib/zig/include/avx512vlintrin.h:5138:3: warning: TODO implement function '__builtin_ia32_movdqa32store128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5136:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_store_epi32(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m128i) void;
pub inline fn _mm256_store_epi32(arg___P_1: ?*anyopaque, arg___A: __m256i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    @as([*c]__m256i, @ptrCast(@alignCast(__P_1))).* = __A;
}
// /usr/lib/zig/include/avx512vlintrin.h:5152:3: warning: TODO implement function '__builtin_ia32_movdqa32store256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5150:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_store_epi32(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlintrin.h:5160:20: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5158:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mov_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:5168:20: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5166:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mov_epi64(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:5176:20: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5174:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mov_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:5184:20: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5182:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mov_epi64(arg___U: __mmask8, arg___A: __m256i) __m256i;
pub inline fn _mm_load_epi64(arg___P_1: ?*const anyopaque) __m128i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    return @as([*c]const __m128i, @ptrCast(@alignCast(__P_1))).*;
}
// /usr/lib/zig/include/avx512vlintrin.h:5198:20: warning: TODO implement function '__builtin_ia32_movdqa64load128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5196:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_load_epi64(arg___W: __m128i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:5207:20: warning: TODO implement function '__builtin_ia32_movdqa64load128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5205:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_load_epi64(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
pub inline fn _mm256_load_epi64(arg___P_1: ?*const anyopaque) __m256i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    return @as([*c]const __m256i, @ptrCast(@alignCast(__P_1))).*;
}
// /usr/lib/zig/include/avx512vlintrin.h:5223:20: warning: TODO implement function '__builtin_ia32_movdqa64load256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5221:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_load_epi64(arg___W: __m256i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:5232:20: warning: TODO implement function '__builtin_ia32_movdqa64load256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5230:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_load_epi64(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256i;
pub inline fn _mm_store_epi64(arg___P_1: ?*anyopaque, arg___A: __m128i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    @as([*c]__m128i, @ptrCast(@alignCast(__P_1))).* = __A;
}
// /usr/lib/zig/include/avx512vlintrin.h:5248:3: warning: TODO implement function '__builtin_ia32_movdqa64store128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5246:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_store_epi64(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m128i) void;
pub inline fn _mm256_store_epi64(arg___P_1: ?*anyopaque, arg___A: __m256i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    @as([*c]__m256i, @ptrCast(@alignCast(__P_1))).* = __A;
}
// /usr/lib/zig/include/avx512vlintrin.h:5262:3: warning: TODO implement function '__builtin_ia32_movdqa64store256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5260:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_store_epi64(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlintrin.h:5270:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5268:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_movedup_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:5278:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5276:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_movedup_pd(arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:5286:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5284:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_movedup_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:5294:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5292:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_movedup_pd(arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:5302:20: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5300:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_set1_epi32(arg___O: __m128i, arg___M: __mmask8, arg___A: c_int) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:5310:20: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5308:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_set1_epi32(arg___M: __mmask8, arg___A: c_int) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:5318:20: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5316:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_set1_epi32(arg___O: __m256i, arg___M: __mmask8, arg___A: c_int) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:5326:20: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5324:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_set1_epi32(arg___M: __mmask8, arg___A: c_int) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:5335:20: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5333:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_set1_epi64(arg___O: __m128i, arg___M: __mmask8, arg___A: c_longlong) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:5343:20: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5341:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_set1_epi64(arg___M: __mmask8, arg___A: c_longlong) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:5351:20: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5349:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_set1_epi64(arg___O: __m256i, arg___M: __mmask8, arg___A: c_longlong) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:5359:21: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5357:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_set1_epi64(arg___M: __mmask8, arg___A: c_longlong) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:5439:20: warning: TODO implement function '__builtin_ia32_loadapd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5437:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_load_pd(arg___W: __m128d, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:5447:20: warning: TODO implement function '__builtin_ia32_loadapd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5445:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_load_pd(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:5456:20: warning: TODO implement function '__builtin_ia32_loadapd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5454:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_load_pd(arg___W: __m256d, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:5464:20: warning: TODO implement function '__builtin_ia32_loadapd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5462:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_load_pd(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:5473:19: warning: TODO implement function '__builtin_ia32_loadaps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5471:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_load_ps(arg___W: __m128, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:5481:19: warning: TODO implement function '__builtin_ia32_loadaps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5479:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_load_ps(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:5490:19: warning: TODO implement function '__builtin_ia32_loadaps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5488:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_load_ps(arg___W: __m256, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:5498:19: warning: TODO implement function '__builtin_ia32_loadaps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5496:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_load_ps(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256;
pub inline fn _mm_loadu_epi64(arg___P_1: ?*const anyopaque) __m128i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_epi64 = extern struct {
        __v: __m128i_u align(1) = @import("std").mem.zeroes(__m128i_u),
    };
    _ = &struct___loadu_epi64;
    return @as([*c]const struct___loadu_epi64, @ptrCast(@alignCast(__P_1))).*.__v;
}
// /usr/lib/zig/include/avx512vlintrin.h:5516:20: warning: TODO implement function '__builtin_ia32_loaddqudi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5514:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_loadu_epi64(arg___W: __m128i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:5524:20: warning: TODO implement function '__builtin_ia32_loaddqudi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5522:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_loadu_epi64(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
pub inline fn _mm256_loadu_epi64(arg___P_1: ?*const anyopaque) __m256i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_epi64 = extern struct {
        __v: __m256i_u align(1) = @import("std").mem.zeroes(__m256i_u),
    };
    _ = &struct___loadu_epi64;
    return @as([*c]const struct___loadu_epi64, @ptrCast(@alignCast(__P_1))).*.__v;
}
// /usr/lib/zig/include/avx512vlintrin.h:5542:20: warning: TODO implement function '__builtin_ia32_loaddqudi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5540:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_loadu_epi64(arg___W: __m256i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:5550:20: warning: TODO implement function '__builtin_ia32_loaddqudi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5548:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_loadu_epi64(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256i;
pub inline fn _mm_loadu_epi32(arg___P_1: ?*const anyopaque) __m128i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_epi32 = extern struct {
        __v: __m128i_u align(1) = @import("std").mem.zeroes(__m128i_u),
    };
    _ = &struct___loadu_epi32;
    return @as([*c]const struct___loadu_epi32, @ptrCast(@alignCast(__P_1))).*.__v;
}
// /usr/lib/zig/include/avx512vlintrin.h:5568:20: warning: TODO implement function '__builtin_ia32_loaddqusi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5566:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_loadu_epi32(arg___W: __m128i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:5576:20: warning: TODO implement function '__builtin_ia32_loaddqusi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5574:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_loadu_epi32(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
pub inline fn _mm256_loadu_epi32(arg___P_1: ?*const anyopaque) __m256i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_epi32 = extern struct {
        __v: __m256i_u align(1) = @import("std").mem.zeroes(__m256i_u),
    };
    _ = &struct___loadu_epi32;
    return @as([*c]const struct___loadu_epi32, @ptrCast(@alignCast(__P_1))).*.__v;
}
// /usr/lib/zig/include/avx512vlintrin.h:5594:20: warning: TODO implement function '__builtin_ia32_loaddqusi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5592:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_loadu_epi32(arg___W: __m256i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:5602:20: warning: TODO implement function '__builtin_ia32_loaddqusi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5600:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_loadu_epi32(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:5611:20: warning: TODO implement function '__builtin_ia32_loadupd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5609:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_loadu_pd(arg___W: __m128d, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:5619:20: warning: TODO implement function '__builtin_ia32_loadupd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5617:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_loadu_pd(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:5628:20: warning: TODO implement function '__builtin_ia32_loadupd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5626:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_loadu_pd(arg___W: __m256d, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:5636:20: warning: TODO implement function '__builtin_ia32_loadupd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5634:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_loadu_pd(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:5645:19: warning: TODO implement function '__builtin_ia32_loadups128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5643:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_loadu_ps(arg___W: __m128, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:5653:19: warning: TODO implement function '__builtin_ia32_loadups128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5651:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_loadu_ps(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:5662:19: warning: TODO implement function '__builtin_ia32_loadups256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5660:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_loadu_ps(arg___W: __m256, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:5670:19: warning: TODO implement function '__builtin_ia32_loadups256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5668:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_loadu_ps(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:5679:3: warning: TODO implement function '__builtin_ia32_storeapd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5677:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_store_pd(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m128d) void;
// /usr/lib/zig/include/avx512vlintrin.h:5687:3: warning: TODO implement function '__builtin_ia32_storeapd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5685:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_store_pd(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m256d) void;
// /usr/lib/zig/include/avx512vlintrin.h:5695:3: warning: TODO implement function '__builtin_ia32_storeaps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5693:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_store_ps(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m128) void;
// /usr/lib/zig/include/avx512vlintrin.h:5703:3: warning: TODO implement function '__builtin_ia32_storeaps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5701:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_store_ps(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m256) void;
pub inline fn _mm_storeu_epi64(arg___P_1: ?*anyopaque, arg___A: __m128i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_epi64 = extern struct {
        __v: __m128i_u align(1) = @import("std").mem.zeroes(__m128i_u),
    };
    _ = &struct___storeu_epi64;
    @as([*c]struct___storeu_epi64, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
// /usr/lib/zig/include/avx512vlintrin.h:5720:3: warning: TODO implement function '__builtin_ia32_storedqudi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5718:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_storeu_epi64(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m128i) void;
pub inline fn _mm256_storeu_epi64(arg___P_1: ?*anyopaque, arg___A: __m256i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_epi64 = extern struct {
        __v: __m256i_u align(1) = @import("std").mem.zeroes(__m256i_u),
    };
    _ = &struct___storeu_epi64;
    @as([*c]struct___storeu_epi64, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
// /usr/lib/zig/include/avx512vlintrin.h:5737:3: warning: TODO implement function '__builtin_ia32_storedqudi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5735:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_storeu_epi64(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m256i) void;
pub inline fn _mm_storeu_epi32(arg___P_1: ?*anyopaque, arg___A: __m128i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_epi32 = extern struct {
        __v: __m128i_u align(1) = @import("std").mem.zeroes(__m128i_u),
    };
    _ = &struct___storeu_epi32;
    @as([*c]struct___storeu_epi32, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
// /usr/lib/zig/include/avx512vlintrin.h:5754:3: warning: TODO implement function '__builtin_ia32_storedqusi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5752:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_storeu_epi32(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m128i) void;
pub inline fn _mm256_storeu_epi32(arg___P_1: ?*anyopaque, arg___A: __m256i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_epi32 = extern struct {
        __v: __m256i_u align(1) = @import("std").mem.zeroes(__m256i_u),
    };
    _ = &struct___storeu_epi32;
    @as([*c]struct___storeu_epi32, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
// /usr/lib/zig/include/avx512vlintrin.h:5771:3: warning: TODO implement function '__builtin_ia32_storedqusi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5769:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_storeu_epi32(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlintrin.h:5779:3: warning: TODO implement function '__builtin_ia32_storeupd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5777:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_storeu_pd(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m128d) void;
// /usr/lib/zig/include/avx512vlintrin.h:5787:3: warning: TODO implement function '__builtin_ia32_storeupd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5785:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_storeu_pd(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m256d) void;
// /usr/lib/zig/include/avx512vlintrin.h:5795:3: warning: TODO implement function '__builtin_ia32_storeups128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5793:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_storeu_ps(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m128) void;
// /usr/lib/zig/include/avx512vlintrin.h:5803:3: warning: TODO implement function '__builtin_ia32_storeups256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5801:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_storeu_ps(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m256) void;
// /usr/lib/zig/include/avx512vlintrin.h:5812:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5810:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_unpackhi_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:5820:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5818:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_unpackhi_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:5828:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5826:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_unpackhi_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:5836:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5834:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_unpackhi_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:5844:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5842:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_unpackhi_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:5852:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5850:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_unpackhi_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:5860:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5858:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_unpackhi_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:5868:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5866:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_unpackhi_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:5876:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5874:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_unpacklo_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:5884:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5882:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_unpacklo_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:5892:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5890:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_unpacklo_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:5900:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5898:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_unpacklo_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:5908:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5906:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_unpacklo_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:5916:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5914:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_unpacklo_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:5924:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5922:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_unpacklo_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:5932:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5930:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_unpacklo_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:5940:20: warning: TODO implement function '__builtin_ia32_rcp14pd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5938:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rcp14_pd(arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:5949:20: warning: TODO implement function '__builtin_ia32_rcp14pd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5947:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rcp14_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:5957:20: warning: TODO implement function '__builtin_ia32_rcp14pd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5955:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rcp14_pd(arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:5966:20: warning: TODO implement function '__builtin_ia32_rcp14pd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5964:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_rcp14_pd(arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:5975:20: warning: TODO implement function '__builtin_ia32_rcp14pd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5973:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_rcp14_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:5983:20: warning: TODO implement function '__builtin_ia32_rcp14pd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5981:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_rcp14_pd(arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:5992:19: warning: TODO implement function '__builtin_ia32_rcp14ps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5990:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rcp14_ps(arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:6001:19: warning: TODO implement function '__builtin_ia32_rcp14ps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:5999:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rcp14_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:6009:19: warning: TODO implement function '__builtin_ia32_rcp14ps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6007:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rcp14_ps(arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:6018:19: warning: TODO implement function '__builtin_ia32_rcp14ps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6016:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_rcp14_ps(arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:6027:19: warning: TODO implement function '__builtin_ia32_rcp14ps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6025:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_rcp14_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:6035:19: warning: TODO implement function '__builtin_ia32_rcp14ps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6033:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_rcp14_ps(arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:6084:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6082:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_permutevar_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___C: __m128i) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:6092:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6090:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_permutevar_pd(arg___U: __mmask8, arg___A: __m128d, arg___C: __m128i) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:6100:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6098:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_permutevar_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d, arg___C: __m256i) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:6108:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6106:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_permutevar_pd(arg___U: __mmask8, arg___A: __m256d, arg___C: __m256i) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:6116:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6114:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_permutevar_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___C: __m128i) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:6124:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6122:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_permutevar_ps(arg___U: __mmask8, arg___A: __m128, arg___C: __m128i) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:6132:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6130:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_permutevar_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256, arg___C: __m256i) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:6140:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6138:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_permutevar_ps(arg___U: __mmask8, arg___A: __m256, arg___C: __m256i) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:780:14: warning: TODO implement function '__builtin_ia32_cmpd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6146:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_test_epi32_mask(arg___A: __m128i, arg___B: __m128i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:785:14: warning: TODO implement function '__builtin_ia32_cmpd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6152:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_test_epi32_mask(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:800:14: warning: TODO implement function '__builtin_ia32_cmpd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6159:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_test_epi32_mask(arg___A: __m256i, arg___B: __m256i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:805:14: warning: TODO implement function '__builtin_ia32_cmpd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6166:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_test_epi32_mask(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:820:14: warning: TODO implement function '__builtin_ia32_cmpq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6173:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_test_epi64_mask(arg___A: __m128i, arg___B: __m128i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:825:14: warning: TODO implement function '__builtin_ia32_cmpq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6179:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_test_epi64_mask(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:840:14: warning: TODO implement function '__builtin_ia32_cmpq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6186:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_test_epi64_mask(arg___A: __m256i, arg___B: __m256i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:845:14: warning: TODO implement function '__builtin_ia32_cmpq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6193:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_test_epi64_mask(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:780:14: warning: TODO implement function '__builtin_ia32_cmpd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6200:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_testn_epi32_mask(arg___A: __m128i, arg___B: __m128i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:785:14: warning: TODO implement function '__builtin_ia32_cmpd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6206:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_testn_epi32_mask(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:800:14: warning: TODO implement function '__builtin_ia32_cmpd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6213:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_testn_epi32_mask(arg___A: __m256i, arg___B: __m256i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:805:14: warning: TODO implement function '__builtin_ia32_cmpd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6220:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_testn_epi32_mask(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:820:14: warning: TODO implement function '__builtin_ia32_cmpq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6227:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_testn_epi64_mask(arg___A: __m128i, arg___B: __m128i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:825:14: warning: TODO implement function '__builtin_ia32_cmpq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6233:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_testn_epi64_mask(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:840:14: warning: TODO implement function '__builtin_ia32_cmpq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6240:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_testn_epi64_mask(arg___A: __m256i, arg___B: __m256i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:845:14: warning: TODO implement function '__builtin_ia32_cmpq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6247:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_testn_epi64_mask(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __mmask8;
// /usr/lib/zig/include/avx512vlintrin.h:6256:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6254:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_unpackhi_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6264:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6262:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_unpackhi_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6272:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6270:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_unpackhi_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6280:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6278:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_unpackhi_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6288:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6286:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_unpackhi_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6296:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6294:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_unpackhi_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6304:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6302:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_unpackhi_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6312:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6310:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_unpackhi_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6320:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6318:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_unpacklo_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6328:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6326:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_unpacklo_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6336:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6334:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_unpacklo_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6344:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6342:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_unpacklo_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6352:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6350:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_unpacklo_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6360:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6358:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_unpacklo_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6368:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6366:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_unpacklo_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6376:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6374:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_unpacklo_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6384:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6382:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sra_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6392:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6390:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sra_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6400:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6398:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sra_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6408:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6406:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sra_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6416:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6414:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_srai_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6424:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6422:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_srai_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6432:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6430:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_srai_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6440:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6438:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_srai_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6448:19: warning: TODO implement function '__builtin_ia32_psraq128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6446:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sra_epi64(arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6454:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6452:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sra_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6462:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6460:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sra_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6470:19: warning: TODO implement function '__builtin_ia32_psraq256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6468:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sra_epi64(arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6476:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6474:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sra_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6484:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6482:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sra_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6492:19: warning: TODO implement function '__builtin_ia32_psraqi128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6490:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_srai_epi64(arg___A: __m128i, arg___imm: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6498:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6496:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_srai_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___imm: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6506:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6504:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_srai_epi64(arg___U: __mmask8, arg___A: __m128i, arg___imm: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6514:19: warning: TODO implement function '__builtin_ia32_psraqi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6512:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_srai_epi64(arg___A: __m256i, arg___imm: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6521:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6518:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_srai_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___imm: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6529:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6527:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_srai_epi64(arg___U: __mmask8, arg___A: __m256i, arg___imm: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6694:20: warning: TODO implement function '__builtin_ia32_rsqrt14pd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6692:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rsqrt14_pd(arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:6703:20: warning: TODO implement function '__builtin_ia32_rsqrt14pd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6701:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rsqrt14_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:6711:20: warning: TODO implement function '__builtin_ia32_rsqrt14pd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6709:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rsqrt14_pd(arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:6720:20: warning: TODO implement function '__builtin_ia32_rsqrt14pd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6718:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_rsqrt14_pd(arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:6729:20: warning: TODO implement function '__builtin_ia32_rsqrt14pd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6727:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_rsqrt14_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:6737:20: warning: TODO implement function '__builtin_ia32_rsqrt14pd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6735:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_rsqrt14_pd(arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:6746:19: warning: TODO implement function '__builtin_ia32_rsqrt14ps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6744:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_rsqrt14_ps(arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:6755:19: warning: TODO implement function '__builtin_ia32_rsqrt14ps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6753:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rsqrt14_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:6763:19: warning: TODO implement function '__builtin_ia32_rsqrt14ps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6761:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rsqrt14_ps(arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:6772:19: warning: TODO implement function '__builtin_ia32_rsqrt14ps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6770:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_rsqrt14_ps(arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:6781:19: warning: TODO implement function '__builtin_ia32_rsqrt14ps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6779:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_rsqrt14_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:6789:19: warning: TODO implement function '__builtin_ia32_rsqrt14ps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6787:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_rsqrt14_ps(arg___U: __mmask8, arg___A: __m256) __m256;
pub inline fn _mm256_broadcast_f32x4(arg___A: __m128) __m256 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m256, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.child, @as(__v4sf, @bitCast(__A)), @as(__v4sf, @bitCast(__A)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vlintrin.h:6805:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6803:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_broadcast_f32x4(arg___O: __m256, arg___M: __mmask8, arg___A: __m128) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:6813:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6811:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_broadcast_f32x4(arg___M: __mmask8, arg___A: __m128) __m256;
pub inline fn _mm256_broadcast_i32x4(arg___A: __m128i) __m256i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.child, @as(__v4si, @bitCast(__A)), @as(__v4si, @bitCast(__A)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vlintrin.h:6828:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6826:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_broadcast_i32x4(arg___O: __m256i, arg___M: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6836:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6834:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_broadcast_i32x4(arg___M: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6844:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6842:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_broadcastsd_pd(arg___O: __m256d, arg___M: __mmask8, arg___A: __m128d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:6852:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6850:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_broadcastsd_pd(arg___M: __mmask8, arg___A: __m128d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:6860:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6858:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_broadcastss_ps(arg___O: __m128, arg___M: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:6868:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6866:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_broadcastss_ps(arg___M: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:6876:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6874:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_broadcastss_ps(arg___O: __m256, arg___M: __mmask8, arg___A: __m128) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:6884:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6882:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_broadcastss_ps(arg___M: __mmask8, arg___A: __m128) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:6892:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6890:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_broadcastd_epi32(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6900:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6898:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_broadcastd_epi32(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6908:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6906:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_broadcastd_epi32(arg___O: __m256i, arg___M: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6916:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6914:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_broadcastd_epi32(arg___M: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6924:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6922:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_broadcastq_epi64(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6932:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6930:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_broadcastq_epi64(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6940:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6938:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_broadcastq_epi64(arg___O: __m256i, arg___M: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6948:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6946:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_broadcastq_epi64(arg___M: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:6956:20: warning: TODO implement function '__builtin_ia32_pmovsdb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6954:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsepi32_epi8(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6964:20: warning: TODO implement function '__builtin_ia32_pmovsdb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6962:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsepi32_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6971:20: warning: TODO implement function '__builtin_ia32_pmovsdb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6969:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtsepi32_epi8(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6979:3: warning: TODO implement function '__builtin_ia32_pmovsdb128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6977:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsepi32_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
// /usr/lib/zig/include/avx512vlintrin.h:6985:20: warning: TODO implement function '__builtin_ia32_pmovsdb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6983:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtsepi32_epi8(arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:6993:20: warning: TODO implement function '__builtin_ia32_pmovsdb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6991:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtsepi32_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7000:20: warning: TODO implement function '__builtin_ia32_pmovsdb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:6998:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtsepi32_epi8(arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7008:3: warning: TODO implement function '__builtin_ia32_pmovsdb256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7006:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtsepi32_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7014:20: warning: TODO implement function '__builtin_ia32_pmovsdw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7012:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsepi32_epi16(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7022:20: warning: TODO implement function '__builtin_ia32_pmovsdw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7020:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsepi32_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7030:20: warning: TODO implement function '__builtin_ia32_pmovsdw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7028:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtsepi32_epi16(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7038:3: warning: TODO implement function '__builtin_ia32_pmovsdw128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7036:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsepi32_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7044:20: warning: TODO implement function '__builtin_ia32_pmovsdw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7042:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtsepi32_epi16(arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7052:20: warning: TODO implement function '__builtin_ia32_pmovsdw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7050:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtsepi32_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7059:20: warning: TODO implement function '__builtin_ia32_pmovsdw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7057:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtsepi32_epi16(arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7067:3: warning: TODO implement function '__builtin_ia32_pmovsdw256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7065:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtsepi32_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7073:20: warning: TODO implement function '__builtin_ia32_pmovsqb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7071:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsepi64_epi8(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7081:20: warning: TODO implement function '__builtin_ia32_pmovsqb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7079:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsepi64_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7088:20: warning: TODO implement function '__builtin_ia32_pmovsqb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7086:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtsepi64_epi8(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7096:3: warning: TODO implement function '__builtin_ia32_pmovsqb128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7094:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsepi64_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7102:20: warning: TODO implement function '__builtin_ia32_pmovsqb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7100:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtsepi64_epi8(arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7110:20: warning: TODO implement function '__builtin_ia32_pmovsqb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7108:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtsepi64_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7117:20: warning: TODO implement function '__builtin_ia32_pmovsqb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7115:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtsepi64_epi8(arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7125:3: warning: TODO implement function '__builtin_ia32_pmovsqb256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7123:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtsepi64_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7131:20: warning: TODO implement function '__builtin_ia32_pmovsqd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7129:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsepi64_epi32(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7139:20: warning: TODO implement function '__builtin_ia32_pmovsqd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7137:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsepi64_epi32(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7146:20: warning: TODO implement function '__builtin_ia32_pmovsqd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7144:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtsepi64_epi32(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7154:3: warning: TODO implement function '__builtin_ia32_pmovsqd128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7152:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsepi64_storeu_epi32(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7160:20: warning: TODO implement function '__builtin_ia32_pmovsqd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7158:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtsepi64_epi32(arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7168:20: warning: TODO implement function '__builtin_ia32_pmovsqd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7166:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtsepi64_epi32(arg___O: __m128i, arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7176:20: warning: TODO implement function '__builtin_ia32_pmovsqd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7174:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtsepi64_epi32(arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7184:3: warning: TODO implement function '__builtin_ia32_pmovsqd256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7182:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtsepi64_storeu_epi32(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7190:20: warning: TODO implement function '__builtin_ia32_pmovsqw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7188:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsepi64_epi16(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7198:20: warning: TODO implement function '__builtin_ia32_pmovsqw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7196:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsepi64_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7205:20: warning: TODO implement function '__builtin_ia32_pmovsqw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7203:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtsepi64_epi16(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7213:3: warning: TODO implement function '__builtin_ia32_pmovsqw128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7211:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsepi64_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7219:20: warning: TODO implement function '__builtin_ia32_pmovsqw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7217:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtsepi64_epi16(arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7227:20: warning: TODO implement function '__builtin_ia32_pmovsqw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7225:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtsepi64_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7234:20: warning: TODO implement function '__builtin_ia32_pmovsqw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7232:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtsepi64_epi16(arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7242:3: warning: TODO implement function '__builtin_ia32_pmovsqw256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7240:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtsepi64_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7248:20: warning: TODO implement function '__builtin_ia32_pmovusdb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7246:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtusepi32_epi8(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7256:20: warning: TODO implement function '__builtin_ia32_pmovusdb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7254:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtusepi32_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7264:20: warning: TODO implement function '__builtin_ia32_pmovusdb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7262:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtusepi32_epi8(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7272:3: warning: TODO implement function '__builtin_ia32_pmovusdb128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7270:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtusepi32_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7278:20: warning: TODO implement function '__builtin_ia32_pmovusdb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7276:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtusepi32_epi8(arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7286:20: warning: TODO implement function '__builtin_ia32_pmovusdb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7284:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtusepi32_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7294:20: warning: TODO implement function '__builtin_ia32_pmovusdb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7292:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtusepi32_epi8(arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7302:3: warning: TODO implement function '__builtin_ia32_pmovusdb256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7300:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtusepi32_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7308:20: warning: TODO implement function '__builtin_ia32_pmovusdw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7306:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtusepi32_epi16(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7316:20: warning: TODO implement function '__builtin_ia32_pmovusdw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7314:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtusepi32_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7323:20: warning: TODO implement function '__builtin_ia32_pmovusdw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7321:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtusepi32_epi16(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7331:3: warning: TODO implement function '__builtin_ia32_pmovusdw128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7329:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtusepi32_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7337:20: warning: TODO implement function '__builtin_ia32_pmovusdw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7335:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtusepi32_epi16(arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7345:20: warning: TODO implement function '__builtin_ia32_pmovusdw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7343:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtusepi32_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7352:20: warning: TODO implement function '__builtin_ia32_pmovusdw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7350:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtusepi32_epi16(arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7360:3: warning: TODO implement function '__builtin_ia32_pmovusdw256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7358:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtusepi32_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7366:20: warning: TODO implement function '__builtin_ia32_pmovusqb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7364:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtusepi64_epi8(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7374:20: warning: TODO implement function '__builtin_ia32_pmovusqb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7372:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtusepi64_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7382:20: warning: TODO implement function '__builtin_ia32_pmovusqb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7380:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtusepi64_epi8(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7390:3: warning: TODO implement function '__builtin_ia32_pmovusqb128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7388:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtusepi64_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7396:20: warning: TODO implement function '__builtin_ia32_pmovusqb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7394:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtusepi64_epi8(arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7404:20: warning: TODO implement function '__builtin_ia32_pmovusqb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7402:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtusepi64_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7412:20: warning: TODO implement function '__builtin_ia32_pmovusqb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7410:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtusepi64_epi8(arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7420:3: warning: TODO implement function '__builtin_ia32_pmovusqb256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7418:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtusepi64_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7426:20: warning: TODO implement function '__builtin_ia32_pmovusqd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7424:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtusepi64_epi32(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7434:20: warning: TODO implement function '__builtin_ia32_pmovusqd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7432:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtusepi64_epi32(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7441:20: warning: TODO implement function '__builtin_ia32_pmovusqd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7439:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtusepi64_epi32(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7449:3: warning: TODO implement function '__builtin_ia32_pmovusqd128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7447:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtusepi64_storeu_epi32(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7455:20: warning: TODO implement function '__builtin_ia32_pmovusqd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7453:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtusepi64_epi32(arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7463:20: warning: TODO implement function '__builtin_ia32_pmovusqd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7461:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtusepi64_epi32(arg___O: __m128i, arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7470:20: warning: TODO implement function '__builtin_ia32_pmovusqd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7468:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtusepi64_epi32(arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7478:3: warning: TODO implement function '__builtin_ia32_pmovusqd256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7476:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtusepi64_storeu_epi32(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7484:20: warning: TODO implement function '__builtin_ia32_pmovusqw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7482:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtusepi64_epi16(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7492:20: warning: TODO implement function '__builtin_ia32_pmovusqw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7490:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtusepi64_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7499:20: warning: TODO implement function '__builtin_ia32_pmovusqw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7497:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtusepi64_epi16(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7507:3: warning: TODO implement function '__builtin_ia32_pmovusqw128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7505:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtusepi64_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
// /usr/lib/zig/include/avx512vlintrin.h:7513:20: warning: TODO implement function '__builtin_ia32_pmovusqw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7511:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtusepi64_epi16(arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7521:20: warning: TODO implement function '__builtin_ia32_pmovusqw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7519:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtusepi64_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7528:20: warning: TODO implement function '__builtin_ia32_pmovusqw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7526:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtusepi64_epi16(arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7536:3: warning: TODO implement function '__builtin_ia32_pmovusqw256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7534:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtusepi64_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m256i) void;
pub inline fn _mm_cvtepi32_epi8(arg___A: __m128i) __m128i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
        const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
        const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
        break :blk __v4qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    })).Vector.child, blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
        const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
        const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
        break :blk __v4qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }, blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        break :blk __v4qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }, @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vlintrin.h:7550:20: warning: TODO implement function '__builtin_ia32_pmovdb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7548:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi32_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7557:20: warning: TODO implement function '__builtin_ia32_pmovdb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7555:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi32_epi8(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7566:3: warning: TODO implement function '__builtin_ia32_pmovdb128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7564:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi32_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
pub inline fn _mm256_cvtepi32_epi8(arg___A: __m256i) __m128i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
        const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
        const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
        const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
        const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
        const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
        const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
        break :blk __v8qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    })).Vector.child, blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
        const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
        const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
        const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
        const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
        const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
        const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
        break :blk __v8qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }, blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        break :blk __v8qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }, @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8si, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vlintrin.h:7581:20: warning: TODO implement function '__builtin_ia32_pmovdb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7579:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi32_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7588:20: warning: TODO implement function '__builtin_ia32_pmovdb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7586:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi32_epi8(arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7596:3: warning: TODO implement function '__builtin_ia32_pmovdb256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7594:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi32_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m256i) void;
pub inline fn _mm_cvtepi32_epi16(arg___A: __m128i) __m128i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(blk: {
        const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[0]))));
        const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[1]))));
        const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[2]))));
        const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[3]))));
        break :blk __v4hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    })).Vector.child, blk: {
        const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[0]))));
        const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[1]))));
        const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[2]))));
        const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[3]))));
        break :blk __v4hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }, blk: {
        const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        break :blk __v4hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }, @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4si, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vlintrin.h:7610:20: warning: TODO implement function '__builtin_ia32_pmovdw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7608:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi32_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7617:20: warning: TODO implement function '__builtin_ia32_pmovdw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7615:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi32_epi16(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7625:3: warning: TODO implement function '__builtin_ia32_pmovdw128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7623:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi32_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
pub inline fn _mm256_cvtepi32_epi16(arg___A: __m256i) __m128i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v8si, @bitCast(__A))[0]))));
        const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v8si, @bitCast(__A))[1]))));
        const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v8si, @bitCast(__A))[2]))));
        const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v8si, @bitCast(__A))[3]))));
        const tmp_4 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v8si, @bitCast(__A))[4]))));
        const tmp_5 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v8si, @bitCast(__A))[5]))));
        const tmp_6 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v8si, @bitCast(__A))[6]))));
        const tmp_7 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v8si, @bitCast(__A))[7]))));
        break :blk __v8hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512vlintrin.h:7637:20: warning: TODO implement function '__builtin_ia32_pmovdw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7635:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi32_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7644:20: warning: TODO implement function '__builtin_ia32_pmovdw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7642:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi32_epi16(arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7652:3: warning: TODO implement function '__builtin_ia32_pmovdw256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7650:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi32_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m256i) void;
pub inline fn _mm_cvtepi64_epi8(arg___A: __m128i) __m128i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
        break :blk __v2qi{
            tmp,
            tmp_1,
        };
    })).Vector.child, blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
        break :blk __v2qi{
            tmp,
            tmp_1,
        };
    }, blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        break :blk __v2qi{
            tmp,
            tmp_1,
        };
    }, @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2qi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vlintrin.h:7666:20: warning: TODO implement function '__builtin_ia32_pmovqb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7664:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi64_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7673:20: warning: TODO implement function '__builtin_ia32_pmovqb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7671:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi64_epi8(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7681:3: warning: TODO implement function '__builtin_ia32_pmovqb128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7679:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi64_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
pub inline fn _mm256_cvtepi64_epi8(arg___A: __m256i) __m128i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
        const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
        const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
        break :blk __v4qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    })).Vector.child, blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
        const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
        const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
        break :blk __v4qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }, blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        break :blk __v4qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }, @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vlintrin.h:7695:20: warning: TODO implement function '__builtin_ia32_pmovqb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7693:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi64_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7702:20: warning: TODO implement function '__builtin_ia32_pmovqb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7700:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi64_epi8(arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7710:3: warning: TODO implement function '__builtin_ia32_pmovqb256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7708:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi64_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m256i) void;
pub inline fn _mm_cvtepi64_epi32(arg___A: __m128i) __m128i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(blk: {
        const tmp = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v2di, @bitCast(__A))[0]))));
        const tmp_1 = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v2di, @bitCast(__A))[1]))));
        break :blk __v2si{
            tmp,
            tmp_1,
        };
    })).Vector.child, blk: {
        const tmp = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v2di, @bitCast(__A))[0]))));
        const tmp_1 = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v2di, @bitCast(__A))[1]))));
        break :blk __v2si{
            tmp,
            tmp_1,
        };
    }, blk: {
        const tmp = @as(c_int, 0);
        const tmp_1 = @as(c_int, 0);
        break :blk __v2si{
            tmp,
            tmp_1,
        };
    }, @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2si{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2si{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2si{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2si{
                tmp,
                tmp_1,
            };
        })).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vlintrin.h:7723:20: warning: TODO implement function '__builtin_ia32_pmovqd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7721:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi64_epi32(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7730:20: warning: TODO implement function '__builtin_ia32_pmovqd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7728:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi64_epi32(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7738:3: warning: TODO implement function '__builtin_ia32_pmovqd128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7736:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi64_storeu_epi32(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
pub inline fn _mm256_cvtepi64_epi32(arg___A: __m256i) __m128i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v4di, @bitCast(__A))[0]))));
        const tmp_1 = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v4di, @bitCast(__A))[1]))));
        const tmp_2 = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v4di, @bitCast(__A))[2]))));
        const tmp_3 = @as(c_int, @bitCast(@as(c_int, @truncate(@as(__v4di, @bitCast(__A))[3]))));
        break :blk __v4si{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
// /usr/lib/zig/include/avx512vlintrin.h:7750:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7748:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi64_epi32(arg___O: __m128i, arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7758:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7756:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi64_epi32(arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7766:3: warning: TODO implement function '__builtin_ia32_pmovqd256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7764:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi64_storeu_epi32(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m256i) void;
pub inline fn _mm_cvtepi64_epi16(arg___A: __m128i) __m128i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(blk: {
        const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[0]))));
        const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[1]))));
        break :blk __v2hi{
            tmp,
            tmp_1,
        };
    })).Vector.child, blk: {
        const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[0]))));
        const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[1]))));
        break :blk __v2hi{
            tmp,
            tmp_1,
        };
    }, blk: {
        const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        break :blk __v2hi{
            tmp,
            tmp_1,
        };
    }, @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2hi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2hi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2hi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2hi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2hi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2hi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2hi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v2di, @bitCast(__A))[1]))));
            break :blk __v2hi{
                tmp,
                tmp_1,
            };
        })).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vlintrin.h:7780:20: warning: TODO implement function '__builtin_ia32_pmovqw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7778:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi64_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7788:20: warning: TODO implement function '__builtin_ia32_pmovqw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7786:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi64_epi16(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7796:3: warning: TODO implement function '__builtin_ia32_pmovqw128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7794:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi64_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
pub inline fn _mm256_cvtepi64_epi16(arg___A: __m256i) __m128i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(blk: {
        const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[0]))));
        const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[1]))));
        const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[2]))));
        const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[3]))));
        break :blk __v4hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    })).Vector.child, blk: {
        const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[0]))));
        const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[1]))));
        const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[2]))));
        const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[3]))));
        break :blk __v4hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }, blk: {
        const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        break :blk __v4hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }, @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[0]))));
            const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[1]))));
            const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[2]))));
            const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(__v4di, @bitCast(__A))[3]))));
            break :blk __v4hi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
            };
        })).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vlintrin.h:7810:20: warning: TODO implement function '__builtin_ia32_pmovqw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7808:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi64_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7817:20: warning: TODO implement function '__builtin_ia32_pmovqw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7815:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi64_epi16(arg___M: __mmask8, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlintrin.h:7825:3: warning: TODO implement function '__builtin_ia32_pmovqw256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:7823:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi64_storeu_epi16(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlintrin.h:8089:19: warning: TODO implement function '__builtin_ia32_permvardf256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8087:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutexvar_pd(arg___X: __m256i, arg___Y: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:8096:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8093:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_permutexvar_pd(arg___W: __m256d, arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:8104:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8102:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_permutexvar_pd(arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:8112:19: warning: TODO implement function '__builtin_ia32_permvardi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8110:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutexvar_epi64(arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:8118:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8116:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_permutexvar_epi64(arg___M: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:8127:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8124:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_permutexvar_epi64(arg___W: __m256i, arg___M: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:8137:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8135:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_permutexvar_ps(arg___W: __m256, arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:8145:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8143:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_permutexvar_ps(arg___U: __mmask8, arg___X: __m256i, arg___Y: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:8156:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8153:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_permutexvar_epi32(arg___W: __m256i, arg___M: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:8164:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8162:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_permutexvar_epi32(arg___M: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlintrin.h:8228:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8226:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_movehdup_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:8236:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8234:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_movehdup_ps(arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:8244:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8242:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_movehdup_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:8252:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8250:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_movehdup_ps(arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:8260:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8258:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_moveldup_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:8268:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8266:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_moveldup_ps(arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:8276:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8274:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_moveldup_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:8284:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8282:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_moveldup_ps(arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:8312:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8310:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mov_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:8320:20: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8318:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mov_pd(arg___U: __mmask8, arg___A: __m128d) __m128d;
// /usr/lib/zig/include/avx512vlintrin.h:8328:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8326:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mov_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:8336:20: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8334:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mov_pd(arg___U: __mmask8, arg___A: __m256d) __m256d;
// /usr/lib/zig/include/avx512vlintrin.h:8344:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8342:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mov_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:8352:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8350:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mov_ps(arg___U: __mmask8, arg___A: __m128) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:8360:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8358:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mov_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:8368:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8366:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mov_ps(arg___U: __mmask8, arg___A: __m256) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:8376:19: warning: TODO implement function '__builtin_ia32_vcvtph2ps_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8374:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtph_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128i) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:8384:19: warning: TODO implement function '__builtin_ia32_vcvtph2ps_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8382:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtph_ps(arg___U: __mmask8, arg___A: __m128i) __m128;
// /usr/lib/zig/include/avx512vlintrin.h:8393:19: warning: TODO implement function '__builtin_ia32_vcvtph2ps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8391:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtph_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m128i) __m256;
// /usr/lib/zig/include/avx512vlintrin.h:8401:19: warning: TODO implement function '__builtin_ia32_vcvtph2ps256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlintrin.h:8399:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtph_ps(arg___U: __mmask8, arg___A: __m128i) __m256;
pub const __mmask32 = c_uint;
pub const __mmask64 = c_ulonglong;
// /usr/lib/zig/include/avx512bwintrin.h:31:10: warning: TODO implement function '__builtin_ia32_knotsi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:29:1: warning: unable to translate function, demoted to extern
pub extern fn _knot_mask32(arg___M: __mmask32) __mmask32;
// /usr/lib/zig/include/avx512bwintrin.h:35:10: warning: TODO implement function '__builtin_ia32_knotdi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:34:46: warning: unable to translate function, demoted to extern
pub extern fn _knot_mask64(arg___M: __mmask64) __mmask64;
// /usr/lib/zig/include/avx512bwintrin.h:41:21: warning: TODO implement function '__builtin_ia32_kandsi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:39:1: warning: unable to translate function, demoted to extern
pub extern fn _kand_mask32(arg___A: __mmask32, arg___B: __mmask32) __mmask32;
// /usr/lib/zig/include/avx512bwintrin.h:46:21: warning: TODO implement function '__builtin_ia32_kanddi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:44:48: warning: unable to translate function, demoted to extern
pub extern fn _kand_mask64(arg___A: __mmask64, arg___B: __mmask64) __mmask64;
// /usr/lib/zig/include/avx512bwintrin.h:52:21: warning: TODO implement function '__builtin_ia32_kandnsi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:50:1: warning: unable to translate function, demoted to extern
pub extern fn _kandn_mask32(arg___A: __mmask32, arg___B: __mmask32) __mmask32;
// /usr/lib/zig/include/avx512bwintrin.h:57:21: warning: TODO implement function '__builtin_ia32_kandndi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:55:48: warning: unable to translate function, demoted to extern
pub extern fn _kandn_mask64(arg___A: __mmask64, arg___B: __mmask64) __mmask64;
// /usr/lib/zig/include/avx512bwintrin.h:63:21: warning: TODO implement function '__builtin_ia32_korsi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:61:1: warning: unable to translate function, demoted to extern
pub extern fn _kor_mask32(arg___A: __mmask32, arg___B: __mmask32) __mmask32;
// /usr/lib/zig/include/avx512bwintrin.h:68:21: warning: TODO implement function '__builtin_ia32_kordi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:66:48: warning: unable to translate function, demoted to extern
pub extern fn _kor_mask64(arg___A: __mmask64, arg___B: __mmask64) __mmask64;
// /usr/lib/zig/include/avx512bwintrin.h:74:21: warning: TODO implement function '__builtin_ia32_kxnorsi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:72:1: warning: unable to translate function, demoted to extern
pub extern fn _kxnor_mask32(arg___A: __mmask32, arg___B: __mmask32) __mmask32;
// /usr/lib/zig/include/avx512bwintrin.h:79:21: warning: TODO implement function '__builtin_ia32_kxnordi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:77:48: warning: unable to translate function, demoted to extern
pub extern fn _kxnor_mask64(arg___A: __mmask64, arg___B: __mmask64) __mmask64;
// /usr/lib/zig/include/avx512bwintrin.h:85:21: warning: TODO implement function '__builtin_ia32_kxorsi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:83:1: warning: unable to translate function, demoted to extern
pub extern fn _kxor_mask32(arg___A: __mmask32, arg___B: __mmask32) __mmask32;
// /usr/lib/zig/include/avx512bwintrin.h:90:21: warning: TODO implement function '__builtin_ia32_kxordi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:88:48: warning: unable to translate function, demoted to extern
pub extern fn _kxor_mask64(arg___A: __mmask64, arg___B: __mmask64) __mmask64;
// /usr/lib/zig/include/avx512bwintrin.h:96:25: warning: TODO implement function '__builtin_ia32_kortestcsi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:94:1: warning: unable to translate function, demoted to extern
pub extern fn _kortestc_mask32_u8(arg___A: __mmask32, arg___B: __mmask32) u8;
// /usr/lib/zig/include/avx512bwintrin.h:102:25: warning: TODO implement function '__builtin_ia32_kortestzsi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:100:1: warning: unable to translate function, demoted to extern
pub extern fn _kortestz_mask32_u8(arg___A: __mmask32, arg___B: __mmask32) u8;
// /usr/lib/zig/include/avx512bwintrin.h:107:25: warning: TODO implement function '__builtin_ia32_kortestcsi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:106:1: warning: unable to translate function, demoted to extern
pub extern fn _kortest_mask32_u8(arg___A: __mmask32, arg___B: __mmask32, arg___C: [*c]u8) u8;
// /usr/lib/zig/include/avx512bwintrin.h:113:25: warning: TODO implement function '__builtin_ia32_kortestcdi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:112:1: warning: unable to translate function, demoted to extern
pub extern fn _kortestc_mask64_u8(arg___A: __mmask64, arg___B: __mmask64) u8;
// /usr/lib/zig/include/avx512bwintrin.h:118:25: warning: TODO implement function '__builtin_ia32_kortestzdi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:117:1: warning: unable to translate function, demoted to extern
pub extern fn _kortestz_mask64_u8(arg___A: __mmask64, arg___B: __mmask64) u8;
// /usr/lib/zig/include/avx512bwintrin.h:123:25: warning: TODO implement function '__builtin_ia32_kortestcdi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:122:1: warning: unable to translate function, demoted to extern
pub extern fn _kortest_mask64_u8(arg___A: __mmask64, arg___B: __mmask64, arg___C: [*c]u8) u8;
// /usr/lib/zig/include/avx512bwintrin.h:130:25: warning: TODO implement function '__builtin_ia32_ktestcsi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:128:1: warning: unable to translate function, demoted to extern
pub extern fn _ktestc_mask32_u8(arg___A: __mmask32, arg___B: __mmask32) u8;
// /usr/lib/zig/include/avx512bwintrin.h:136:25: warning: TODO implement function '__builtin_ia32_ktestzsi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:134:1: warning: unable to translate function, demoted to extern
pub extern fn _ktestz_mask32_u8(arg___A: __mmask32, arg___B: __mmask32) u8;
// /usr/lib/zig/include/avx512bwintrin.h:141:25: warning: TODO implement function '__builtin_ia32_ktestcsi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:140:1: warning: unable to translate function, demoted to extern
pub extern fn _ktest_mask32_u8(arg___A: __mmask32, arg___B: __mmask32, arg___C: [*c]u8) u8;
// /usr/lib/zig/include/avx512bwintrin.h:147:25: warning: TODO implement function '__builtin_ia32_ktestcdi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:146:1: warning: unable to translate function, demoted to extern
pub extern fn _ktestc_mask64_u8(arg___A: __mmask64, arg___B: __mmask64) u8;
// /usr/lib/zig/include/avx512bwintrin.h:152:25: warning: TODO implement function '__builtin_ia32_ktestzdi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:151:1: warning: unable to translate function, demoted to extern
pub extern fn _ktestz_mask64_u8(arg___A: __mmask64, arg___B: __mmask64) u8;
// /usr/lib/zig/include/avx512bwintrin.h:157:25: warning: TODO implement function '__builtin_ia32_ktestcdi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:156:1: warning: unable to translate function, demoted to extern
pub extern fn _ktest_mask64_u8(arg___A: __mmask64, arg___B: __mmask64, arg___C: [*c]u8) u8;
// /usr/lib/zig/include/avx512bwintrin.h:164:21: warning: TODO implement function '__builtin_ia32_kaddsi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:162:1: warning: unable to translate function, demoted to extern
pub extern fn _kadd_mask32(arg___A: __mmask32, arg___B: __mmask32) __mmask32;
// /usr/lib/zig/include/avx512bwintrin.h:169:21: warning: TODO implement function '__builtin_ia32_kadddi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:167:48: warning: unable to translate function, demoted to extern
pub extern fn _kadd_mask64(arg___A: __mmask64, arg___B: __mmask64) __mmask64;
// /usr/lib/zig/include/avx512bwintrin.h:186:24: warning: TODO implement function '__builtin_ia32_kmovd' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:185:1: warning: unable to translate function, demoted to extern
pub extern fn _cvtmask32_u32(arg___A: __mmask32) c_uint;
// /usr/lib/zig/include/avx512bwintrin.h:191:30: warning: TODO implement function '__builtin_ia32_kmovq' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:190:1: warning: unable to translate function, demoted to extern
pub extern fn _cvtmask64_u64(arg___A: __mmask64) c_ulonglong;
// /usr/lib/zig/include/avx512bwintrin.h:196:21: warning: TODO implement function '__builtin_ia32_kmovd' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:195:1: warning: unable to translate function, demoted to extern
pub extern fn _cvtu32_mask32(arg___A: c_uint) __mmask32;
// /usr/lib/zig/include/avx512bwintrin.h:201:21: warning: TODO implement function '__builtin_ia32_kmovq' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:200:1: warning: unable to translate function, demoted to extern
pub extern fn _cvtu64_mask64(arg___A: c_ulonglong) __mmask64;
// /usr/lib/zig/include/avx512bwintrin.h:206:21: warning: TODO implement function '__builtin_ia32_kmovd' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:205:1: warning: unable to translate function, demoted to extern
pub extern fn _load_mask32(arg___A: [*c]__mmask32) __mmask32;
// /usr/lib/zig/include/avx512bwintrin.h:210:21: warning: TODO implement function '__builtin_ia32_kmovq' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:209:48: warning: unable to translate function, demoted to extern
pub extern fn _load_mask64(arg___A: [*c]__mmask64) __mmask64;
// /usr/lib/zig/include/avx512bwintrin.h:215:23: warning: TODO implement function '__builtin_ia32_kmovd' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:214:1: warning: unable to translate function, demoted to extern
pub extern fn _store_mask32(arg___A: [*c]__mmask32, arg___B: __mmask32) void;
// /usr/lib/zig/include/avx512bwintrin.h:220:23: warning: TODO implement function '__builtin_ia32_kmovq' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:218:43: warning: unable to translate function, demoted to extern
pub extern fn _store_mask64(arg___A: [*c]__mmask64, arg___B: __mmask64) void;
pub inline fn _mm512_add_epi8(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@as(__v64qu, @bitCast(__A)) + @as(__v64qu, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512bwintrin.h:372:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:371:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_add_epi8(arg___W: __m512i, arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:379:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:378:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_add_epi8(arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_sub_epi8(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@as(__v64qu, @bitCast(__A)) - @as(__v64qu, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512bwintrin.h:391:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:390:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sub_epi8(arg___W: __m512i, arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:398:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:397:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sub_epi8(arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_add_epi16(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@as(__v32hu, @bitCast(__A)) + @as(__v32hu, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512bwintrin.h:410:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:409:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_add_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:417:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:416:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_add_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_sub_epi16(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@as(__v32hu, @bitCast(__A)) - @as(__v32hu, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512bwintrin.h:429:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:428:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sub_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:436:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:435:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sub_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_mullo_epi16(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@as(__v32hu, @bitCast(__A)) * @as(__v32hu, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512bwintrin.h:448:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:447:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mullo_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:455:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:454:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mullo_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:463:20: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:461:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_blend_epi8(arg___U: __mmask64, arg___A: __m512i, arg___W: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:471:20: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:469:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_blend_epi16(arg___U: __mmask32, arg___A: __m512i, arg___W: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:479:19: warning: TODO implement function '__builtin_elementwise_abs' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:477:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_abs_epi8(arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:485:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:483:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_abs_epi8(arg___W: __m512i, arg___U: __mmask64, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:493:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:491:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_abs_epi8(arg___U: __mmask64, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:501:19: warning: TODO implement function '__builtin_elementwise_abs' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:499:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_abs_epi16(arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:507:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:505:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_abs_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:515:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:513:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_abs_epi16(arg___U: __mmask32, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:523:19: warning: TODO implement function '__builtin_ia32_packssdw512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:521:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_packs_epi32(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:529:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:527:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_packs_epi32(arg___M: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:537:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:535:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_packs_epi32(arg___W: __m512i, arg___M: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:545:19: warning: TODO implement function '__builtin_ia32_packsswb512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:543:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_packs_epi16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:551:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:549:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_packs_epi16(arg___W: __m512i, arg___M: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:559:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:557:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_packs_epi16(arg___M: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:567:19: warning: TODO implement function '__builtin_ia32_packusdw512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:565:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_packus_epi32(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:573:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:571:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_packus_epi32(arg___M: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:581:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:579:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_packus_epi32(arg___W: __m512i, arg___M: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:589:19: warning: TODO implement function '__builtin_ia32_packuswb512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:587:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_packus_epi16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:595:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:593:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_packus_epi16(arg___W: __m512i, arg___M: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:603:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:601:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_packus_epi16(arg___M: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:611:19: warning: TODO implement function '__builtin_elementwise_add_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:609:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_adds_epi8(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:617:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:615:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_adds_epi8(arg___W: __m512i, arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:625:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:623:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_adds_epi8(arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:633:19: warning: TODO implement function '__builtin_elementwise_add_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:631:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_adds_epi16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:639:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:637:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_adds_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:647:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:645:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_adds_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:655:19: warning: TODO implement function '__builtin_elementwise_add_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:653:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_adds_epu8(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:661:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:659:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_adds_epu8(arg___W: __m512i, arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:669:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:667:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_adds_epu8(arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:677:19: warning: TODO implement function '__builtin_elementwise_add_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:675:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_adds_epu16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:683:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:681:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_adds_epu16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:691:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:689:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_adds_epu16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:699:19: warning: TODO implement function '__builtin_ia32_pavgb512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:697:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_avg_epu8(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:706:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:703:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_avg_epu8(arg___W: __m512i, arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:714:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:712:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_avg_epu8(arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:722:19: warning: TODO implement function '__builtin_ia32_pavgw512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:720:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_avg_epu16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:729:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:726:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_avg_epu16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:737:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:735:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_avg_epu16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:745:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:743:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_max_epi8(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:751:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:749:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_max_epi8(arg___M: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:759:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:757:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_max_epi8(arg___W: __m512i, arg___M: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:767:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:765:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_max_epi16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:773:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:771:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_max_epi16(arg___M: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:782:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:779:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_max_epi16(arg___W: __m512i, arg___M: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:790:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:788:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_max_epu8(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:796:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:794:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_max_epu8(arg___M: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:804:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:802:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_max_epu8(arg___W: __m512i, arg___M: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:812:19: warning: TODO implement function '__builtin_elementwise_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:810:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_max_epu16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:818:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:816:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_max_epu16(arg___M: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:826:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:824:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_max_epu16(arg___W: __m512i, arg___M: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:834:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:832:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_min_epi8(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:840:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:838:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_min_epi8(arg___M: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:848:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:846:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_min_epi8(arg___W: __m512i, arg___M: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:856:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:854:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_min_epi16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:862:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:860:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_min_epi16(arg___M: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:870:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:868:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_min_epi16(arg___W: __m512i, arg___M: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:878:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:876:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_min_epu8(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:884:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:882:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_min_epu8(arg___M: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:892:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:890:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_min_epu8(arg___W: __m512i, arg___M: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:900:19: warning: TODO implement function '__builtin_elementwise_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:898:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_min_epu16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:906:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:904:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_min_epu16(arg___M: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:914:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:912:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_min_epu16(arg___W: __m512i, arg___M: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:922:19: warning: TODO implement function '__builtin_ia32_pshufb512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:920:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_shuffle_epi8(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:928:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:926:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_shuffle_epi8(arg___W: __m512i, arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:936:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:934:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_shuffle_epi8(arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:944:19: warning: TODO implement function '__builtin_elementwise_sub_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:942:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_subs_epi8(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:950:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:948:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_subs_epi8(arg___W: __m512i, arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:958:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:956:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_subs_epi8(arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:966:19: warning: TODO implement function '__builtin_elementwise_sub_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:964:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_subs_epi16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:972:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:970:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_subs_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:980:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:978:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_subs_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:988:19: warning: TODO implement function '__builtin_elementwise_sub_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:986:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_subs_epu8(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:994:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:992:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_subs_epu8(arg___W: __m512i, arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1002:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1000:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_subs_epu8(arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1010:19: warning: TODO implement function '__builtin_elementwise_sub_sat' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1008:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_subs_epu16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1016:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1014:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_subs_epu16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1024:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1022:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_subs_epu16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1032:19: warning: TODO implement function '__builtin_ia32_vpermi2varhi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1030:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutex2var_epi16(arg___A: __m512i, arg___I: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1040:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1037:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_permutex2var_epi16(arg___A: __m512i, arg___U: __mmask32, arg___I: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1049:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1046:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask2_permutex2var_epi16(arg___A: __m512i, arg___I: __m512i, arg___U: __mmask32, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1058:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1055:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_permutex2var_epi16(arg___U: __mmask32, arg___A: __m512i, arg___I: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1066:19: warning: TODO implement function '__builtin_ia32_pmulhrsw512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1064:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mulhrs_epi16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1072:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1070:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mulhrs_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1080:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1078:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mulhrs_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1088:19: warning: TODO implement function '__builtin_ia32_pmulhw512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1086:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mulhi_epi16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1095:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1092:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mulhi_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1103:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1101:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mulhi_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1111:19: warning: TODO implement function '__builtin_ia32_pmulhuw512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1109:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mulhi_epu16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1117:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1115:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mulhi_epu16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1125:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1123:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mulhi_epu16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1132:19: warning: TODO implement function '__builtin_ia32_pmaddubsw512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1131:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maddubs_epi16(arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1138:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1136:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_maddubs_epi16(arg___W: __m512i, arg___U: __mmask32, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1145:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1144:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_maddubs_epi16(arg___U: __mmask32, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1152:19: warning: TODO implement function '__builtin_ia32_pmaddwd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1151:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_madd_epi16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1157:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1156:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_madd_epi16(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1164:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1163:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_madd_epi16(arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1171:20: warning: TODO implement function '__builtin_ia32_pmovswb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1170:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtsepi16_epi8(arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512bwintrin.h:1178:20: warning: TODO implement function '__builtin_ia32_pmovswb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1177:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtsepi16_epi8(arg___O: __m256i, arg___M: __mmask32, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512bwintrin.h:1185:20: warning: TODO implement function '__builtin_ia32_pmovswb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1184:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtsepi16_epi8(arg___M: __mmask32, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512bwintrin.h:1192:20: warning: TODO implement function '__builtin_ia32_pmovuswb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1191:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtusepi16_epi8(arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512bwintrin.h:1199:20: warning: TODO implement function '__builtin_ia32_pmovuswb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1198:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtusepi16_epi8(arg___O: __m256i, arg___M: __mmask32, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512bwintrin.h:1206:20: warning: TODO implement function '__builtin_ia32_pmovuswb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1205:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtusepi16_epi8(arg___M: __mmask32, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512bwintrin.h:1213:20: warning: TODO implement function '__builtin_ia32_pmovwb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1212:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtepi16_epi8(arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512bwintrin.h:1220:20: warning: TODO implement function '__builtin_ia32_pmovwb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1219:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi16_epi8(arg___O: __m256i, arg___M: __mmask32, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512bwintrin.h:1227:20: warning: TODO implement function '__builtin_ia32_pmovwb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1226:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi16_epi8(arg___M: __mmask32, arg___A: __m512i) __m256i;
// /usr/lib/zig/include/avx512bwintrin.h:1235:3: warning: TODO implement function '__builtin_ia32_pmovwb512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1233:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi16_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask32, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512bwintrin.h:1241:3: warning: TODO implement function '__builtin_ia32_pmovswb512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1239:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtsepi16_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask32, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512bwintrin.h:1247:3: warning: TODO implement function '__builtin_ia32_pmovuswb512mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1245:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtusepi16_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask32, arg___A: __m512i) void;
pub inline fn _mm512_unpackhi_epi8(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.child, @as(__v64qi, @bitCast(__A)), @as(__v64qi, @bitCast(__B)), @Vector(64, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 9), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 10), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 11), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 13), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 14), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 15), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(24, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 24), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(25, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 25), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(26, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 26), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(27, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 27), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(28, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 28), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(29, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 29), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(30, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 30), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(31, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 31), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(40, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 40), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(41, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 41), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(42, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 42), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(43, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 43), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(44, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 44), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(45, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 45), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(46, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 46), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(47, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 47), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(56, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 56), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(57, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 57), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(58, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 58), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(59, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 59), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(60, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 60), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(61, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 61), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(62, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 62), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(63, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 63), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512bwintrin.h:1273:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1272:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_unpackhi_epi8(arg___W: __m512i, arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1280:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1279:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_unpackhi_epi8(arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_unpackhi_epi16(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.child, @as(__v32hi, @bitCast(__A)), @as(__v32hi, @bitCast(__B)), @Vector(32, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 5), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 6), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 7), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 12), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 13), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 14), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 15), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(20, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 20), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(21, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 21), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(22, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 22), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(23, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 23), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(28, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 28), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(29, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 29), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(30, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 30), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(31, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 31), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512bwintrin.h:1300:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1299:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_unpackhi_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1307:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1306:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_unpackhi_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_unpacklo_epi8(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.child, @as(__v64qi, @bitCast(__A)), @as(__v64qi, @bitCast(__B)), @Vector(64, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 0), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 3), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 4), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 5), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 6), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 7), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(16, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 16), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(17, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 17), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(18, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 18), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(19, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 19), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(20, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 20), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(21, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 21), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(22, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 22), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(23, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 23), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(32, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 32), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(33, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 33), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(34, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 34), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(35, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 35), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(36, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 36), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(37, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 37), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(38, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 38), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(39, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 39), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(48, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 48), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(49, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 49), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(50, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 50), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(51, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 51), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(52, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 52), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(53, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 53), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(54, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 54), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(55, @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 64) + @as(c_int, 55), @typeInfo(@TypeOf(@as(__v64qi, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512bwintrin.h:1335:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1334:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_unpacklo_epi8(arg___W: __m512i, arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1342:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1341:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_unpacklo_epi8(arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_unpacklo_epi16(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.child, @as(__v32hi, @bitCast(__A)), @as(__v32hi, @bitCast(__B)), @Vector(32, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 0), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 1), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 2), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 3), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 8), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 9), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 10), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 11), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(16, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 16), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(17, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 17), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(18, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 18), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(19, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 19), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(24, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 24), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(25, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 25), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(26, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 26), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(27, @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(@as(c_int, 32) + @as(c_int, 27), @typeInfo(@TypeOf(@as(__v32hi, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512bwintrin.h:1362:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1361:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_unpacklo_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1369:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1368:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_unpacklo_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_cvtepi8_epi16(arg___A: __m256i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(blk: {
        const tmp = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[0])));
        const tmp_1 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[1])));
        const tmp_2 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[2])));
        const tmp_3 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[3])));
        const tmp_4 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[4])));
        const tmp_5 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[5])));
        const tmp_6 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[6])));
        const tmp_7 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[7])));
        const tmp_8 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[8])));
        const tmp_9 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[9])));
        const tmp_10 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[10])));
        const tmp_11 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[11])));
        const tmp_12 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[12])));
        const tmp_13 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[13])));
        const tmp_14 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[14])));
        const tmp_15 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[15])));
        const tmp_16 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[16])));
        const tmp_17 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[17])));
        const tmp_18 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[18])));
        const tmp_19 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[19])));
        const tmp_20 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[20])));
        const tmp_21 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[21])));
        const tmp_22 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[22])));
        const tmp_23 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[23])));
        const tmp_24 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[24])));
        const tmp_25 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[25])));
        const tmp_26 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[26])));
        const tmp_27 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[27])));
        const tmp_28 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[28])));
        const tmp_29 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[29])));
        const tmp_30 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[30])));
        const tmp_31 = @as(c_short, @bitCast(@as(c_short, @as(__v32qs, @bitCast(__A))[31])));
        break :blk __v32hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
            tmp_16,
            tmp_17,
            tmp_18,
            tmp_19,
            tmp_20,
            tmp_21,
            tmp_22,
            tmp_23,
            tmp_24,
            tmp_25,
            tmp_26,
            tmp_27,
            tmp_28,
            tmp_29,
            tmp_30,
            tmp_31,
        };
    }));
}
// /usr/lib/zig/include/avx512bwintrin.h:1385:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1383:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi8_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m256i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1393:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1391:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi8_epi16(arg___U: __mmask32, arg___A: __m256i) __m512i;
pub inline fn _mm512_cvtepu8_epi16(arg___A: __m256i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(blk: {
        const tmp = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[0])));
        const tmp_1 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[1])));
        const tmp_2 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[2])));
        const tmp_3 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[3])));
        const tmp_4 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[4])));
        const tmp_5 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[5])));
        const tmp_6 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[6])));
        const tmp_7 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[7])));
        const tmp_8 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[8])));
        const tmp_9 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[9])));
        const tmp_10 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[10])));
        const tmp_11 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[11])));
        const tmp_12 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[12])));
        const tmp_13 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[13])));
        const tmp_14 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[14])));
        const tmp_15 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[15])));
        const tmp_16 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[16])));
        const tmp_17 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[17])));
        const tmp_18 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[18])));
        const tmp_19 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[19])));
        const tmp_20 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[20])));
        const tmp_21 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[21])));
        const tmp_22 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[22])));
        const tmp_23 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[23])));
        const tmp_24 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[24])));
        const tmp_25 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[25])));
        const tmp_26 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[26])));
        const tmp_27 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[27])));
        const tmp_28 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[28])));
        const tmp_29 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[29])));
        const tmp_30 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[30])));
        const tmp_31 = @as(c_short, @bitCast(@as(c_ushort, @as(__v32qu, @bitCast(__A))[31])));
        break :blk __v32hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
            tmp_16,
            tmp_17,
            tmp_18,
            tmp_19,
            tmp_20,
            tmp_21,
            tmp_22,
            tmp_23,
            tmp_24,
            tmp_25,
            tmp_26,
            tmp_27,
            tmp_28,
            tmp_29,
            tmp_30,
            tmp_31,
        };
    }));
}
// /usr/lib/zig/include/avx512bwintrin.h:1407:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1405:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepu8_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m256i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1415:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1413:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepu8_epi16(arg___U: __mmask32, arg___A: __m256i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1456:19: warning: TODO implement function '__builtin_ia32_psllv32hi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1454:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_sllv_epi16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1462:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1460:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sllv_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1470:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1468:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sllv_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1478:19: warning: TODO implement function '__builtin_ia32_psllw512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1476:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_sll_epi16(arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1484:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1482:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sll_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1492:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1490:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sll_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1500:19: warning: TODO implement function '__builtin_ia32_psllwi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1498:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_slli_epi16(arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1507:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1504:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_slli_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1515:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1513:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_slli_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1526:19: warning: TODO implement function '__builtin_ia32_psrlv32hi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1524:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_srlv_epi16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1532:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1530:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_srlv_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1540:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1538:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_srlv_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1548:19: warning: TODO implement function '__builtin_ia32_psrav32hi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1546:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_srav_epi16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1554:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1552:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_srav_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1562:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1560:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_srav_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1570:19: warning: TODO implement function '__builtin_ia32_psraw512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1568:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_sra_epi16(arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1576:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1574:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sra_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1584:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1582:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sra_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1592:19: warning: TODO implement function '__builtin_ia32_psrawi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1590:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_srai_epi16(arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1599:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1596:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_srai_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1607:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1605:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_srai_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1615:19: warning: TODO implement function '__builtin_ia32_psrlw512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1613:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_srl_epi16(arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1621:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1619:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_srl_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1629:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1627:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_srl_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m128i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1637:19: warning: TODO implement function '__builtin_ia32_psrlwi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1635:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_srli_epi16(arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1644:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1641:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_srli_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i, arg___B: c_uint) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1652:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1650:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_srli_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: c_int) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1663:20: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1661:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mov_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1671:20: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1669:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mov_epi16(arg___U: __mmask32, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1679:20: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1677:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mov_epi8(arg___W: __m512i, arg___U: __mmask64, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1687:20: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1685:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mov_epi8(arg___U: __mmask64, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1695:20: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1693:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_set1_epi8(arg___O: __m512i, arg___M: __mmask64, arg___A: u8) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1703:20: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1701:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_set1_epi8(arg___M: __mmask64, arg___A: u8) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1710:22: warning: TODO implement function '__builtin_ia32_kunpckdi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1708:48: warning: unable to translate function, demoted to extern
pub extern fn _mm512_kunpackd(arg___A: __mmask64, arg___B: __mmask64) __mmask64;
// /usr/lib/zig/include/avx512bwintrin.h:1717:22: warning: TODO implement function '__builtin_ia32_kunpcksi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1715:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_kunpackw(arg___A: __mmask32, arg___B: __mmask32) __mmask32;
pub inline fn _mm512_loadu_epi16(arg___P_1: ?*const anyopaque) __m512i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_epi16 = extern struct {
        __v: __m512i_u align(1) = @import("std").mem.zeroes(__m512i_u),
    };
    _ = &struct___loadu_epi16;
    return @as([*c]const struct___loadu_epi16, @ptrCast(@alignCast(__P_1))).*.__v;
}
// /usr/lib/zig/include/avx512bwintrin.h:1733:20: warning: TODO implement function '__builtin_ia32_loaddquhi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1731:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_loadu_epi16(arg___W: __m512i, arg___U: __mmask32, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1741:20: warning: TODO implement function '__builtin_ia32_loaddquhi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1739:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_loadu_epi16(arg___U: __mmask32, arg___P_1: ?*const anyopaque) __m512i;
pub inline fn _mm512_loadu_epi8(arg___P_1: ?*const anyopaque) __m512i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_epi8 = extern struct {
        __v: __m512i_u align(1) = @import("std").mem.zeroes(__m512i_u),
    };
    _ = &struct___loadu_epi8;
    return @as([*c]const struct___loadu_epi8, @ptrCast(@alignCast(__P_1))).*.__v;
}
// /usr/lib/zig/include/avx512bwintrin.h:1759:20: warning: TODO implement function '__builtin_ia32_loaddquqi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1757:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_loadu_epi8(arg___W: __m512i, arg___U: __mmask64, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1767:20: warning: TODO implement function '__builtin_ia32_loaddquqi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1765:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_loadu_epi8(arg___U: __mmask64, arg___P_1: ?*const anyopaque) __m512i;
pub inline fn _mm512_storeu_epi16(arg___P_1: ?*anyopaque, arg___A: __m512i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_epi16 = extern struct {
        __v: __m512i_u align(1) = @import("std").mem.zeroes(__m512i_u),
    };
    _ = &struct___storeu_epi16;
    @as([*c]struct___storeu_epi16, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
// /usr/lib/zig/include/avx512bwintrin.h:1785:3: warning: TODO implement function '__builtin_ia32_storedquhi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1783:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_storeu_epi16(arg___P_1: ?*anyopaque, arg___U: __mmask32, arg___A: __m512i) void;
pub inline fn _mm512_storeu_epi8(arg___P_1: ?*anyopaque, arg___A: __m512i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_epi8 = extern struct {
        __v: __m512i_u align(1) = @import("std").mem.zeroes(__m512i_u),
    };
    _ = &struct___storeu_epi8;
    @as([*c]struct___storeu_epi8, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
// /usr/lib/zig/include/avx512bwintrin.h:1802:3: warning: TODO implement function '__builtin_ia32_storedquqi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1800:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_storeu_epi8(arg___P_1: ?*anyopaque, arg___U: __mmask64, arg___A: __m512i) void;
// /usr/lib/zig/include/avx512bwintrin.h:226:15: warning: TODO implement function '__builtin_ia32_cmpb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1808:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_test_epi8_mask(arg___A: __m512i, arg___B: __m512i) __mmask64;
// /usr/lib/zig/include/avx512bwintrin.h:231:15: warning: TODO implement function '__builtin_ia32_cmpb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1815:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_test_epi8_mask(arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __mmask64;
// /usr/lib/zig/include/avx512bwintrin.h:246:15: warning: TODO implement function '__builtin_ia32_cmpw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1822:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_test_epi16_mask(arg___A: __m512i, arg___B: __m512i) __mmask32;
// /usr/lib/zig/include/avx512bwintrin.h:251:15: warning: TODO implement function '__builtin_ia32_cmpw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1829:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_test_epi16_mask(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __mmask32;
// /usr/lib/zig/include/avx512bwintrin.h:226:15: warning: TODO implement function '__builtin_ia32_cmpb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1836:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_testn_epi8_mask(arg___A: __m512i, arg___B: __m512i) __mmask64;
// /usr/lib/zig/include/avx512bwintrin.h:231:15: warning: TODO implement function '__builtin_ia32_cmpb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1842:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_testn_epi8_mask(arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __mmask64;
// /usr/lib/zig/include/avx512bwintrin.h:246:15: warning: TODO implement function '__builtin_ia32_cmpw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1849:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_testn_epi16_mask(arg___A: __m512i, arg___B: __m512i) __mmask32;
// /usr/lib/zig/include/avx512bwintrin.h:251:15: warning: TODO implement function '__builtin_ia32_cmpw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1856:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_testn_epi16_mask(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i) __mmask32;
// /usr/lib/zig/include/avx512bwintrin.h:1865:22: warning: TODO implement function '__builtin_ia32_cvtb2mask512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1863:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_movepi8_mask(arg___A: __m512i) __mmask64;
// /usr/lib/zig/include/avx512bwintrin.h:1871:22: warning: TODO implement function '__builtin_ia32_cvtw2mask512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1869:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_movepi16_mask(arg___A: __m512i) __mmask32;
// /usr/lib/zig/include/avx512bwintrin.h:1877:20: warning: TODO implement function '__builtin_ia32_cvtmask2b512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1875:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_movm_epi8(arg___A: __mmask64) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1883:20: warning: TODO implement function '__builtin_ia32_cvtmask2w512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1881:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_movm_epi16(arg___A: __mmask32) __m512i;
pub inline fn _mm512_broadcastb_epi8(arg___A: __m128i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.child, @as(__v16qi, @bitCast(__A)), @as(__v16qi, @bitCast(__A)), @Vector(64, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v16qi, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512bwintrin.h:1899:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1897:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcastb_epi8(arg___O: __m512i, arg___M: __mmask64, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1907:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1905:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcastb_epi8(arg___M: __mmask64, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1915:20: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1913:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_set1_epi16(arg___O: __m512i, arg___M: __mmask32, arg___A: c_short) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1923:20: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1921:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_set1_epi16(arg___M: __mmask32, arg___A: c_short) __m512i;
pub inline fn _mm512_broadcastw_epi16(arg___A: __m128i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.child, @as(__v8hi, @bitCast(__A)), @as(__v8hi, @bitCast(__A)), @Vector(32, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8hi, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512bwintrin.h:1939:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1937:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcastw_epi16(arg___O: __m512i, arg___M: __mmask32, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1947:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1945:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcastw_epi16(arg___M: __mmask32, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1955:19: warning: TODO implement function '__builtin_ia32_permvarhi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1953:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutexvar_epi16(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1962:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1959:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_permutexvar_epi16(arg___M: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:1971:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:1968:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_permutexvar_epi16(arg___W: __m512i, arg___M: __mmask32, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bwintrin.h:2007:19: warning: TODO implement function '__builtin_ia32_psadbw512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bwintrin.h:2005:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_sad_epu8(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512bitalgintrin.h:26:20: warning: TODO implement function '__builtin_ia32_vpopcntw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bitalgintrin.h:24:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_popcnt_epi16(arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512bitalgintrin.h:32:20: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bitalgintrin.h:30:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_popcnt_epi16(arg___A: __m512i, arg___U: __mmask32, arg___B: __m512i) __m512i;
pub inline fn _mm512_maskz_popcnt_epi16(arg___U: __mmask32, arg___B: __m512i) __m512i {
    var __U = arg___U;
    _ = &__U;
    var __B = arg___B;
    _ = &__B;
    return _mm512_mask_popcnt_epi16(_mm512_setzero_si512(), __U, __B);
}
// /usr/lib/zig/include/avx512bitalgintrin.h:48:20: warning: TODO implement function '__builtin_ia32_vpopcntb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bitalgintrin.h:46:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_popcnt_epi8(arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512bitalgintrin.h:54:20: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bitalgintrin.h:52:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_popcnt_epi8(arg___A: __m512i, arg___U: __mmask64, arg___B: __m512i) __m512i;
pub inline fn _mm512_maskz_popcnt_epi8(arg___U: __mmask64, arg___B: __m512i) __m512i {
    var __U = arg___U;
    _ = &__U;
    var __B = arg___B;
    _ = &__B;
    return _mm512_mask_popcnt_epi8(_mm512_setzero_si512(), __U, __B);
}
// /usr/lib/zig/include/avx512bitalgintrin.h:70:22: warning: TODO implement function '__builtin_ia32_vpshufbitqmb512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bitalgintrin.h:68:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_bitshuffle_epi64_mask(arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __mmask64;
pub inline fn _mm512_bitshuffle_epi64_mask(arg___A: __m512i, arg___B: __m512i) __mmask64 {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm512_mask_bitshuffle_epi64_mask(@as(__mmask64, @bitCast(@as(c_longlong, -@as(c_int, 1)))), __A, __B);
}
// /usr/lib/zig/include/avx512cdintrin.h:25:20: warning: TODO implement function '__builtin_ia32_vpconflictdi_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512cdintrin.h:23:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_conflict_epi64(arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512cdintrin.h:31:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512cdintrin.h:29:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_conflict_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512cdintrin.h:39:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512cdintrin.h:37:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_conflict_epi64(arg___U: __mmask8, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512cdintrin.h:47:20: warning: TODO implement function '__builtin_ia32_vpconflictsi_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512cdintrin.h:45:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_conflict_epi32(arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512cdintrin.h:53:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512cdintrin.h:51:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_conflict_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512cdintrin.h:61:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512cdintrin.h:59:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_conflict_epi32(arg___U: __mmask16, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512cdintrin.h:69:20: warning: TODO implement function '__builtin_ia32_vplzcntd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512cdintrin.h:67:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_lzcnt_epi32(arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512cdintrin.h:75:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512cdintrin.h:73:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_lzcnt_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512cdintrin.h:83:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512cdintrin.h:81:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_lzcnt_epi32(arg___U: __mmask16, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512cdintrin.h:91:20: warning: TODO implement function '__builtin_ia32_vplzcntq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512cdintrin.h:89:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_lzcnt_epi64(arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512cdintrin.h:97:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512cdintrin.h:95:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_lzcnt_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512cdintrin.h:105:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512cdintrin.h:103:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_lzcnt_epi64(arg___U: __mmask8, arg___A: __m512i) __m512i;
pub inline fn _mm512_broadcastmb_epi64(arg___A: __mmask8) __m512i {
    var __A = arg___A;
    _ = &__A;
    return _mm512_set1_epi64(@as(c_longlong, @bitCast(@as(c_ulonglong, __A))));
}
pub inline fn _mm512_broadcastmw_epi32(arg___A: __mmask16) __m512i {
    var __A = arg___A;
    _ = &__A;
    return _mm512_set1_epi32(@as(c_int, @bitCast(@as(c_uint, __A))));
}
// /usr/lib/zig/include/avx512vpopcntdqintrin.h:25:19: warning: TODO implement function '__builtin_ia32_vpopcntq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vpopcntdqintrin.h:24:46: warning: unable to translate function, demoted to extern
pub extern fn _mm512_popcnt_epi64(arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512vpopcntdqintrin.h:30:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vpopcntdqintrin.h:29:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_popcnt_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i) __m512i;
pub inline fn _mm512_maskz_popcnt_epi64(arg___U: __mmask8, arg___A: __m512i) __m512i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return _mm512_mask_popcnt_epi64(_mm512_setzero_si512(), __U, __A);
}
// /usr/lib/zig/include/avx512vpopcntdqintrin.h:40:19: warning: TODO implement function '__builtin_ia32_vpopcntd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vpopcntdqintrin.h:39:46: warning: unable to translate function, demoted to extern
pub extern fn _mm512_popcnt_epi32(arg___A: __m512i) __m512i;
// /usr/lib/zig/include/avx512vpopcntdqintrin.h:45:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vpopcntdqintrin.h:44:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_popcnt_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m512i) __m512i;
pub inline fn _mm512_maskz_popcnt_epi32(arg___U: __mmask16, arg___A: __m512i) __m512i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return _mm512_mask_popcnt_epi32(_mm512_setzero_si512(), __U, __A);
}
// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:30:19: warning: TODO implement function '__builtin_ia32_vpopcntq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:29:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_popcnt_epi64(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:35:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:34:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_popcnt_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
pub inline fn _mm_maskz_popcnt_epi64(arg___U: __mmask8, arg___A: __m128i) __m128i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return _mm_mask_popcnt_epi64(_mm_setzero_si128(), __U, __A);
}
// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:46:19: warning: TODO implement function '__builtin_ia32_vpopcntd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:45:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_popcnt_epi32(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:51:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:50:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_popcnt_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
pub inline fn _mm_maskz_popcnt_epi32(arg___U: __mmask8, arg___A: __m128i) __m128i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return _mm_mask_popcnt_epi32(_mm_setzero_si128(), __U, __A);
}
// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:62:19: warning: TODO implement function '__builtin_ia32_vpopcntq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:61:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_popcnt_epi64(arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:67:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:66:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_popcnt_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i) __m256i;
pub inline fn _mm256_maskz_popcnt_epi64(arg___U: __mmask8, arg___A: __m256i) __m256i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return _mm256_mask_popcnt_epi64(_mm256_setzero_si256(), __U, __A);
}
// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:78:19: warning: TODO implement function '__builtin_ia32_vpopcntd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:77:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_popcnt_epi32(arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:83:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vpopcntdqvlintrin.h:82:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_popcnt_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i) __m256i;
pub inline fn _mm256_maskz_popcnt_epi32(arg___U: __mmask8, arg___A: __m256i) __m256i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return _mm256_mask_popcnt_epi32(_mm256_setzero_si256(), __U, __A);
}
// /usr/lib/zig/include/avx512vnniintrin.h:25:19: warning: TODO implement function '__builtin_ia32_vpdpbusd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vnniintrin.h:23:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_dpbusd_epi32(arg___S: __m512i, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vnniintrin.h:32:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vnniintrin.h:30:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_dpbusd_epi32(arg___S: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vnniintrin.h:40:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vnniintrin.h:38:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_dpbusd_epi32(arg___U: __mmask16, arg___S: __m512i, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vnniintrin.h:48:19: warning: TODO implement function '__builtin_ia32_vpdpbusds512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vnniintrin.h:46:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_dpbusds_epi32(arg___S: __m512i, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vnniintrin.h:55:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vnniintrin.h:53:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_dpbusds_epi32(arg___S: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vnniintrin.h:63:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vnniintrin.h:61:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_dpbusds_epi32(arg___U: __mmask16, arg___S: __m512i, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vnniintrin.h:71:19: warning: TODO implement function '__builtin_ia32_vpdpwssd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vnniintrin.h:69:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_dpwssd_epi32(arg___S: __m512i, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vnniintrin.h:78:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vnniintrin.h:76:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_dpwssd_epi32(arg___S: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vnniintrin.h:86:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vnniintrin.h:84:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_dpwssd_epi32(arg___U: __mmask16, arg___S: __m512i, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vnniintrin.h:94:19: warning: TODO implement function '__builtin_ia32_vpdpwssds512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vnniintrin.h:92:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_dpwssds_epi32(arg___S: __m512i, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vnniintrin.h:101:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vnniintrin.h:99:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_dpwssds_epi32(arg___S: __m512i, arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vnniintrin.h:109:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vnniintrin.h:107:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_dpwssds_epi32(arg___U: __mmask16, arg___S: __m512i, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:182:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:180:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_dpbusd_epi32(arg___S: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:190:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:188:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_dpbusd_epi32(arg___U: __mmask8, arg___S: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:198:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:196:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_dpbusds_epi32(arg___S: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:206:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:204:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_dpbusds_epi32(arg___U: __mmask8, arg___S: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:214:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:212:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_dpwssd_epi32(arg___S: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:222:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:220:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_dpwssd_epi32(arg___U: __mmask8, arg___S: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:230:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:228:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_dpwssds_epi32(arg___S: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:238:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:236:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_dpwssds_epi32(arg___U: __mmask8, arg___S: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:246:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:244:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_dpbusd_epi32(arg___S: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:254:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:252:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_dpbusd_epi32(arg___U: __mmask8, arg___S: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:262:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:260:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_dpbusds_epi32(arg___S: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:270:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:268:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_dpbusds_epi32(arg___U: __mmask8, arg___S: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:278:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:276:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_dpwssd_epi32(arg___S: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:286:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:284:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_dpwssd_epi32(arg___U: __mmask8, arg___S: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:294:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:292:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_dpwssds_epi32(arg___S: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvnniintrin.h:302:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvnniintrin.h:300:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_dpwssds_epi32(arg___U: __mmask8, arg___S: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniintrin.h:66:19: warning: TODO implement function '__builtin_ia32_vpdpbusd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniintrin.h:64:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpbusd_avx_epi32(arg___S: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avxvnniintrin.h:89:19: warning: TODO implement function '__builtin_ia32_vpdpbusds256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniintrin.h:87:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpbusds_avx_epi32(arg___S: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avxvnniintrin.h:110:19: warning: TODO implement function '__builtin_ia32_vpdpwssd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniintrin.h:108:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpwssd_avx_epi32(arg___S: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avxvnniintrin.h:131:19: warning: TODO implement function '__builtin_ia32_vpdpwssds256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniintrin.h:129:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpwssds_avx_epi32(arg___S: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avxvnniintrin.h:154:19: warning: TODO implement function '__builtin_ia32_vpdpbusd128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniintrin.h:152:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpbusd_avx_epi32(arg___S: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniintrin.h:177:19: warning: TODO implement function '__builtin_ia32_vpdpbusds128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniintrin.h:175:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpbusds_avx_epi32(arg___S: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniintrin.h:198:19: warning: TODO implement function '__builtin_ia32_vpdpwssd128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniintrin.h:196:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpwssd_avx_epi32(arg___S: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniintrin.h:219:19: warning: TODO implement function '__builtin_ia32_vpdpwssds128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniintrin.h:217:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpwssds_avx_epi32(arg___S: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512dqintrin.h:26:10: warning: TODO implement function '__builtin_ia32_knotqi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:24:1: warning: unable to translate function, demoted to extern
pub extern fn _knot_mask8(arg___M: __mmask8) __mmask8;
// /usr/lib/zig/include/avx512dqintrin.h:32:20: warning: TODO implement function '__builtin_ia32_kandqi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:30:1: warning: unable to translate function, demoted to extern
pub extern fn _kand_mask8(arg___A: __mmask8, arg___B: __mmask8) __mmask8;
// /usr/lib/zig/include/avx512dqintrin.h:38:20: warning: TODO implement function '__builtin_ia32_kandnqi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:36:1: warning: unable to translate function, demoted to extern
pub extern fn _kandn_mask8(arg___A: __mmask8, arg___B: __mmask8) __mmask8;
// /usr/lib/zig/include/avx512dqintrin.h:44:20: warning: TODO implement function '__builtin_ia32_korqi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:42:1: warning: unable to translate function, demoted to extern
pub extern fn _kor_mask8(arg___A: __mmask8, arg___B: __mmask8) __mmask8;
// /usr/lib/zig/include/avx512dqintrin.h:50:20: warning: TODO implement function '__builtin_ia32_kxnorqi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:48:1: warning: unable to translate function, demoted to extern
pub extern fn _kxnor_mask8(arg___A: __mmask8, arg___B: __mmask8) __mmask8;
// /usr/lib/zig/include/avx512dqintrin.h:56:20: warning: TODO implement function '__builtin_ia32_kxorqi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:54:1: warning: unable to translate function, demoted to extern
pub extern fn _kxor_mask8(arg___A: __mmask8, arg___B: __mmask8) __mmask8;
// /usr/lib/zig/include/avx512dqintrin.h:62:25: warning: TODO implement function '__builtin_ia32_kortestcqi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:60:1: warning: unable to translate function, demoted to extern
pub extern fn _kortestc_mask8_u8(arg___A: __mmask8, arg___B: __mmask8) u8;
// /usr/lib/zig/include/avx512dqintrin.h:68:25: warning: TODO implement function '__builtin_ia32_kortestzqi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:66:1: warning: unable to translate function, demoted to extern
pub extern fn _kortestz_mask8_u8(arg___A: __mmask8, arg___B: __mmask8) u8;
// /usr/lib/zig/include/avx512dqintrin.h:73:25: warning: TODO implement function '__builtin_ia32_kortestcqi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:72:1: warning: unable to translate function, demoted to extern
pub extern fn _kortest_mask8_u8(arg___A: __mmask8, arg___B: __mmask8, arg___C: [*c]u8) u8;
// /usr/lib/zig/include/avx512dqintrin.h:80:25: warning: TODO implement function '__builtin_ia32_ktestcqi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:78:1: warning: unable to translate function, demoted to extern
pub extern fn _ktestc_mask8_u8(arg___A: __mmask8, arg___B: __mmask8) u8;
// /usr/lib/zig/include/avx512dqintrin.h:86:25: warning: TODO implement function '__builtin_ia32_ktestzqi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:84:1: warning: unable to translate function, demoted to extern
pub extern fn _ktestz_mask8_u8(arg___A: __mmask8, arg___B: __mmask8) u8;
// /usr/lib/zig/include/avx512dqintrin.h:91:25: warning: TODO implement function '__builtin_ia32_ktestcqi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:90:1: warning: unable to translate function, demoted to extern
pub extern fn _ktest_mask8_u8(arg___A: __mmask8, arg___B: __mmask8, arg___C: [*c]u8) u8;
// /usr/lib/zig/include/avx512dqintrin.h:98:25: warning: TODO implement function '__builtin_ia32_ktestchi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:96:1: warning: unable to translate function, demoted to extern
pub extern fn _ktestc_mask16_u8(arg___A: __mmask16, arg___B: __mmask16) u8;
// /usr/lib/zig/include/avx512dqintrin.h:104:25: warning: TODO implement function '__builtin_ia32_ktestzhi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:102:1: warning: unable to translate function, demoted to extern
pub extern fn _ktestz_mask16_u8(arg___A: __mmask16, arg___B: __mmask16) u8;
// /usr/lib/zig/include/avx512dqintrin.h:109:25: warning: TODO implement function '__builtin_ia32_ktestchi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:108:1: warning: unable to translate function, demoted to extern
pub extern fn _ktest_mask16_u8(arg___A: __mmask16, arg___B: __mmask16, arg___C: [*c]u8) u8;
// /usr/lib/zig/include/avx512dqintrin.h:116:20: warning: TODO implement function '__builtin_ia32_kaddqi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:114:1: warning: unable to translate function, demoted to extern
pub extern fn _kadd_mask8(arg___A: __mmask8, arg___B: __mmask8) __mmask8;
// /usr/lib/zig/include/avx512dqintrin.h:122:21: warning: TODO implement function '__builtin_ia32_kaddhi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:120:1: warning: unable to translate function, demoted to extern
pub extern fn _kadd_mask16(arg___A: __mmask16, arg___B: __mmask16) __mmask16;
// /usr/lib/zig/include/avx512dqintrin.h:133:24: warning: TODO implement function '__builtin_ia32_kmovb' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:132:1: warning: unable to translate function, demoted to extern
pub extern fn _cvtmask8_u32(arg___A: __mmask8) c_uint;
// /usr/lib/zig/include/avx512dqintrin.h:138:20: warning: TODO implement function '__builtin_ia32_kmovb' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:137:1: warning: unable to translate function, demoted to extern
pub extern fn _cvtu32_mask8(arg___A: c_uint) __mmask8;
// /usr/lib/zig/include/avx512dqintrin.h:143:20: warning: TODO implement function '__builtin_ia32_kmovb' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:142:1: warning: unable to translate function, demoted to extern
pub extern fn _load_mask8(arg___A: [*c]__mmask8) __mmask8;
// /usr/lib/zig/include/avx512dqintrin.h:148:22: warning: TODO implement function '__builtin_ia32_kmovb' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:147:1: warning: unable to translate function, demoted to extern
pub extern fn _store_mask8(arg___A: [*c]__mmask8, arg___B: __mmask8) void;
pub inline fn _mm512_mullo_epi64(arg___A: __m512i, arg___B: __m512i) __m512i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512i, @bitCast(@as(__v8du, @bitCast(__A)) * @as(__v8du, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512dqintrin.h:158:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:157:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mullo_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:165:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:164:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mullo_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_xor_pd(arg___A: __m512d, arg___B: __m512d) __m512d {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512d, @bitCast(@as(__v8du, @bitCast(__A)) ^ @as(__v8du, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512dqintrin.h:177:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:176:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_xor_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512dqintrin.h:184:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:183:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_xor_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
pub inline fn _mm512_xor_ps(arg___A: __m512, arg___B: __m512) __m512 {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512, @bitCast(@as(__v16su, @bitCast(__A)) ^ @as(__v16su, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512dqintrin.h:196:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:195:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_xor_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512dqintrin.h:203:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:202:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_xor_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
pub inline fn _mm512_or_pd(arg___A: __m512d, arg___B: __m512d) __m512d {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512d, @bitCast(@as(__v8du, @bitCast(__A)) | @as(__v8du, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512dqintrin.h:215:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:214:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_or_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512dqintrin.h:222:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:221:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_or_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
pub inline fn _mm512_or_ps(arg___A: __m512, arg___B: __m512) __m512 {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512, @bitCast(@as(__v16su, @bitCast(__A)) | @as(__v16su, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512dqintrin.h:234:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:233:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_or_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512dqintrin.h:241:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:240:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_or_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
pub inline fn _mm512_and_pd(arg___A: __m512d, arg___B: __m512d) __m512d {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512d, @bitCast(@as(__v8du, @bitCast(__A)) & @as(__v8du, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512dqintrin.h:253:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:252:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_and_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512dqintrin.h:260:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:259:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_and_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
pub inline fn _mm512_and_ps(arg___A: __m512, arg___B: __m512) __m512 {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512, @bitCast(@as(__v16su, @bitCast(__A)) & @as(__v16su, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512dqintrin.h:272:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:271:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_and_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512dqintrin.h:279:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:278:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_and_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
pub inline fn _mm512_andnot_pd(arg___A: __m512d, arg___B: __m512d) __m512d {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512d, @bitCast(~@as(__v8du, @bitCast(__A)) & @as(__v8du, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512dqintrin.h:291:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:290:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_andnot_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
// /usr/lib/zig/include/avx512dqintrin.h:298:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:297:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_andnot_pd(arg___U: __mmask8, arg___A: __m512d, arg___B: __m512d) __m512d;
pub inline fn _mm512_andnot_ps(arg___A: __m512, arg___B: __m512) __m512 {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512, @bitCast(~@as(__v16su, @bitCast(__A)) & @as(__v16su, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512dqintrin.h:310:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:309:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_andnot_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512dqintrin.h:317:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:316:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_andnot_ps(arg___U: __mmask16, arg___A: __m512, arg___B: __m512) __m512;
// /usr/lib/zig/include/avx512dqintrin.h:324:20: warning: TODO implement function '__builtin_ia32_cvtpd2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:323:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtpd_epi64(arg___A: __m512d) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:332:20: warning: TODO implement function '__builtin_ia32_cvtpd2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:331:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtpd_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512d) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:340:20: warning: TODO implement function '__builtin_ia32_cvtpd2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:339:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtpd_epi64(arg___U: __mmask8, arg___A: __m512d) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:363:20: warning: TODO implement function '__builtin_ia32_cvtpd2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:362:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtpd_epu64(arg___A: __m512d) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:371:20: warning: TODO implement function '__builtin_ia32_cvtpd2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:370:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtpd_epu64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512d) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:379:20: warning: TODO implement function '__builtin_ia32_cvtpd2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:378:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtpd_epu64(arg___U: __mmask8, arg___A: __m512d) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:402:20: warning: TODO implement function '__builtin_ia32_cvtps2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:401:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtps_epi64(arg___A: __m256) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:410:20: warning: TODO implement function '__builtin_ia32_cvtps2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:409:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtps_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m256) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:418:20: warning: TODO implement function '__builtin_ia32_cvtps2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:417:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtps_epi64(arg___U: __mmask8, arg___A: __m256) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:441:20: warning: TODO implement function '__builtin_ia32_cvtps2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:440:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtps_epu64(arg___A: __m256) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:449:20: warning: TODO implement function '__builtin_ia32_cvtps2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:448:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtps_epu64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m256) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:457:20: warning: TODO implement function '__builtin_ia32_cvtps2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:456:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtps_epu64(arg___U: __mmask8, arg___A: __m256) __m512i;
pub inline fn _mm512_cvtepi64_pd(arg___A: __m512i) __m512d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512d, @bitCast(blk: {
        const tmp = @as(f64, @floatFromInt(@as(__v8di, @bitCast(__A))[0]));
        const tmp_1 = @as(f64, @floatFromInt(@as(__v8di, @bitCast(__A))[1]));
        const tmp_2 = @as(f64, @floatFromInt(@as(__v8di, @bitCast(__A))[2]));
        const tmp_3 = @as(f64, @floatFromInt(@as(__v8di, @bitCast(__A))[3]));
        const tmp_4 = @as(f64, @floatFromInt(@as(__v8di, @bitCast(__A))[4]));
        const tmp_5 = @as(f64, @floatFromInt(@as(__v8di, @bitCast(__A))[5]));
        const tmp_6 = @as(f64, @floatFromInt(@as(__v8di, @bitCast(__A))[6]));
        const tmp_7 = @as(f64, @floatFromInt(@as(__v8di, @bitCast(__A))[7]));
        break :blk __v8df{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512dqintrin.h:486:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:485:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi64_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512i) __m512d;
// /usr/lib/zig/include/avx512dqintrin.h:493:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:492:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi64_pd(arg___U: __mmask8, arg___A: __m512i) __m512d;
// /usr/lib/zig/include/avx512dqintrin.h:515:19: warning: TODO implement function '__builtin_ia32_cvtqq2ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:514:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtepi64_ps(arg___A: __m512i) __m256;
// /usr/lib/zig/include/avx512dqintrin.h:523:19: warning: TODO implement function '__builtin_ia32_cvtqq2ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:522:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi64_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m512i) __m256;
// /usr/lib/zig/include/avx512dqintrin.h:531:19: warning: TODO implement function '__builtin_ia32_cvtqq2ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:530:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi64_ps(arg___U: __mmask8, arg___A: __m512i) __m256;
// /usr/lib/zig/include/avx512dqintrin.h:555:20: warning: TODO implement function '__builtin_ia32_cvttpd2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:554:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvttpd_epi64(arg___A: __m512d) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:563:20: warning: TODO implement function '__builtin_ia32_cvttpd2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:562:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvttpd_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512d) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:571:20: warning: TODO implement function '__builtin_ia32_cvttpd2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:570:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvttpd_epi64(arg___U: __mmask8, arg___A: __m512d) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:594:20: warning: TODO implement function '__builtin_ia32_cvttpd2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:593:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvttpd_epu64(arg___A: __m512d) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:602:20: warning: TODO implement function '__builtin_ia32_cvttpd2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:601:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvttpd_epu64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m512d) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:610:20: warning: TODO implement function '__builtin_ia32_cvttpd2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:609:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvttpd_epu64(arg___U: __mmask8, arg___A: __m512d) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:633:20: warning: TODO implement function '__builtin_ia32_cvttps2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:632:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvttps_epi64(arg___A: __m256) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:641:20: warning: TODO implement function '__builtin_ia32_cvttps2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:640:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvttps_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m256) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:649:20: warning: TODO implement function '__builtin_ia32_cvttps2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:648:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvttps_epi64(arg___U: __mmask8, arg___A: __m256) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:672:20: warning: TODO implement function '__builtin_ia32_cvttps2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:671:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvttps_epu64(arg___A: __m256) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:680:20: warning: TODO implement function '__builtin_ia32_cvttps2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:679:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvttps_epu64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m256) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:688:20: warning: TODO implement function '__builtin_ia32_cvttps2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:687:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvttps_epu64(arg___U: __mmask8, arg___A: __m256) __m512i;
pub inline fn _mm512_cvtepu64_pd(arg___A: __m512i) __m512d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512d, @bitCast(blk: {
        const tmp = @as(f64, @floatFromInt(@as(__v8du, @bitCast(__A))[0]));
        const tmp_1 = @as(f64, @floatFromInt(@as(__v8du, @bitCast(__A))[1]));
        const tmp_2 = @as(f64, @floatFromInt(@as(__v8du, @bitCast(__A))[2]));
        const tmp_3 = @as(f64, @floatFromInt(@as(__v8du, @bitCast(__A))[3]));
        const tmp_4 = @as(f64, @floatFromInt(@as(__v8du, @bitCast(__A))[4]));
        const tmp_5 = @as(f64, @floatFromInt(@as(__v8du, @bitCast(__A))[5]));
        const tmp_6 = @as(f64, @floatFromInt(@as(__v8du, @bitCast(__A))[6]));
        const tmp_7 = @as(f64, @floatFromInt(@as(__v8du, @bitCast(__A))[7]));
        break :blk __v8df{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512dqintrin.h:716:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:715:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepu64_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m512i) __m512d;
// /usr/lib/zig/include/avx512dqintrin.h:723:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:722:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepu64_pd(arg___U: __mmask8, arg___A: __m512i) __m512d;
// /usr/lib/zig/include/avx512dqintrin.h:747:19: warning: TODO implement function '__builtin_ia32_cvtuqq2ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:746:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtepu64_ps(arg___A: __m512i) __m256;
// /usr/lib/zig/include/avx512dqintrin.h:755:19: warning: TODO implement function '__builtin_ia32_cvtuqq2ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:754:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepu64_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m512i) __m256;
// /usr/lib/zig/include/avx512dqintrin.h:763:19: warning: TODO implement function '__builtin_ia32_cvtuqq2ps512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:762:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepu64_ps(arg___U: __mmask8, arg___A: __m512i) __m256;
// /usr/lib/zig/include/avx512dqintrin.h:1058:22: warning: TODO implement function '__builtin_ia32_cvtd2mask512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1056:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_movepi32_mask(arg___A: __m512i) __mmask16;
// /usr/lib/zig/include/avx512dqintrin.h:1064:20: warning: TODO implement function '__builtin_ia32_cvtmask2d512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1062:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_movm_epi32(arg___A: __mmask16) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:1070:20: warning: TODO implement function '__builtin_ia32_cvtmask2q512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1068:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_movm_epi64(arg___A: __mmask8) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:1076:21: warning: TODO implement function '__builtin_ia32_cvtq2mask512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1074:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_movepi64_mask(arg___A: __m512i) __mmask8;
pub inline fn _mm512_broadcast_f32x2(arg___A: __m128) __m512 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.child, @as(__v4sf, @bitCast(__A)), @as(__v4sf, @bitCast(__A)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512dqintrin.h:1091:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1089:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcast_f32x2(arg___O: __m512, arg___M: __mmask16, arg___A: __m128) __m512;
// /usr/lib/zig/include/avx512dqintrin.h:1099:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1097:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcast_f32x2(arg___M: __mmask16, arg___A: __m128) __m512;
pub inline fn _mm512_broadcast_f32x8(arg___A: __m256) __m512 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.child, @as(__v8sf, @bitCast(__A)), @as(__v8sf, @bitCast(__A)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v8sf, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512dqintrin.h:1115:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1113:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcast_f32x8(arg___O: __m512, arg___M: __mmask16, arg___A: __m256) __m512;
// /usr/lib/zig/include/avx512dqintrin.h:1123:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1121:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcast_f32x8(arg___M: __mmask16, arg___A: __m256) __m512;
pub inline fn _mm512_broadcast_f64x2(arg___A: __m128d) __m512d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512d, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.child, @as(__v2df, @bitCast(__A)), @as(__v2df, @bitCast(__A)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512dqintrin.h:1138:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1136:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcast_f64x2(arg___O: __m512d, arg___M: __mmask8, arg___A: __m128d) __m512d;
// /usr/lib/zig/include/avx512dqintrin.h:1146:19: warning: TODO implement function '__builtin_ia32_selectpd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1144:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcast_f64x2(arg___M: __mmask8, arg___A: __m128d) __m512d;
pub inline fn _mm512_broadcast_i32x2(arg___A: __m128i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.child, @as(__v4si, @bitCast(__A)), @as(__v4si, @bitCast(__A)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512dqintrin.h:1162:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1160:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcast_i32x2(arg___O: __m512i, arg___M: __mmask16, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:1170:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1168:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcast_i32x2(arg___M: __mmask16, arg___A: __m128i) __m512i;
pub inline fn _mm512_broadcast_i32x8(arg___A: __m256i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.child, @as(__v8si, @bitCast(__A)), @as(__v8si, @bitCast(__A)), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(@as(__v8si, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512dqintrin.h:1186:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1184:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcast_i32x8(arg___O: __m512i, arg___M: __mmask16, arg___A: __m256i) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:1194:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1192:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcast_i32x8(arg___M: __mmask16, arg___A: __m256i) __m512i;
pub inline fn _mm512_broadcast_i64x2(arg___A: __m128i) __m512i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.child, @as(__v2di, @bitCast(__A)), @as(__v2di, @bitCast(__A)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512dqintrin.h:1209:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1207:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_broadcast_i64x2(arg___O: __m512i, arg___M: __mmask8, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512dqintrin.h:1217:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512dqintrin.h:1215:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_broadcast_i64x2(arg___M: __mmask8, arg___A: __m128i) __m512i;
// /usr/lib/zig/include/avx512vlbitalgintrin.h:30:20: warning: TODO implement function '__builtin_ia32_vpopcntw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbitalgintrin.h:28:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_popcnt_epi16(arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbitalgintrin.h:36:20: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbitalgintrin.h:34:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_popcnt_epi16(arg___A: __m256i, arg___U: __mmask16, arg___B: __m256i) __m256i;
pub inline fn _mm256_maskz_popcnt_epi16(arg___U: __mmask16, arg___B: __m256i) __m256i {
    var __U = arg___U;
    _ = &__U;
    var __B = arg___B;
    _ = &__B;
    return _mm256_mask_popcnt_epi16(_mm256_setzero_si256(), __U, __B);
}
// /usr/lib/zig/include/avx512vlbitalgintrin.h:52:20: warning: TODO implement function '__builtin_ia32_vpopcntw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbitalgintrin.h:50:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_popcnt_epi16(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbitalgintrin.h:58:20: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbitalgintrin.h:56:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_popcnt_epi16(arg___A: __m128i, arg___U: __mmask8, arg___B: __m128i) __m128i;
pub inline fn _mm_maskz_popcnt_epi16(arg___U: __mmask8, arg___B: __m128i) __m128i {
    var __U = arg___U;
    _ = &__U;
    var __B = arg___B;
    _ = &__B;
    return _mm_mask_popcnt_epi16(_mm_setzero_si128(), __U, __B);
}
// /usr/lib/zig/include/avx512vlbitalgintrin.h:74:20: warning: TODO implement function '__builtin_ia32_vpopcntb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbitalgintrin.h:72:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_popcnt_epi8(arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbitalgintrin.h:80:20: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbitalgintrin.h:78:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_popcnt_epi8(arg___A: __m256i, arg___U: __mmask32, arg___B: __m256i) __m256i;
pub inline fn _mm256_maskz_popcnt_epi8(arg___U: __mmask32, arg___B: __m256i) __m256i {
    var __U = arg___U;
    _ = &__U;
    var __B = arg___B;
    _ = &__B;
    return _mm256_mask_popcnt_epi8(_mm256_setzero_si256(), __U, __B);
}
// /usr/lib/zig/include/avx512vlbitalgintrin.h:96:20: warning: TODO implement function '__builtin_ia32_vpopcntb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbitalgintrin.h:94:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_popcnt_epi8(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbitalgintrin.h:102:20: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbitalgintrin.h:100:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_popcnt_epi8(arg___A: __m128i, arg___U: __mmask16, arg___B: __m128i) __m128i;
pub inline fn _mm_maskz_popcnt_epi8(arg___U: __mmask16, arg___B: __m128i) __m128i {
    var __U = arg___U;
    _ = &__U;
    var __B = arg___B;
    _ = &__B;
    return _mm_mask_popcnt_epi8(_mm_setzero_si128(), __U, __B);
}
// /usr/lib/zig/include/avx512vlbitalgintrin.h:118:22: warning: TODO implement function '__builtin_ia32_vpshufbitqmb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbitalgintrin.h:116:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_bitshuffle_epi64_mask(arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __mmask32;
pub inline fn _mm256_bitshuffle_epi64_mask(arg___A: __m256i, arg___B: __m256i) __mmask32 {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm256_mask_bitshuffle_epi64_mask(@as(__mmask32, @bitCast(-@as(c_int, 1))), __A, __B);
}
// /usr/lib/zig/include/avx512vlbitalgintrin.h:134:22: warning: TODO implement function '__builtin_ia32_vpshufbitqmb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbitalgintrin.h:132:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_bitshuffle_epi64_mask(arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __mmask16;
pub inline fn _mm_bitshuffle_epi64_mask(arg___A: __m128i, arg___B: __m128i) __mmask16 {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm_mask_bitshuffle_epi64_mask(@as(__mmask16, @bitCast(@as(c_short, @truncate(-@as(c_int, 1))))), __A, __B);
}
// /usr/lib/zig/include/avx512vlbwintrin.h:311:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:310:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_add_epi8(arg___W: __m256i, arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:318:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:317:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_add_epi8(arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:325:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:324:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_add_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:332:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:331:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_add_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:339:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:338:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sub_epi8(arg___W: __m256i, arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:346:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:345:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sub_epi8(arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:353:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:352:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sub_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:360:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:359:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sub_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:367:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:366:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_add_epi8(arg___W: __m128i, arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:374:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:373:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_add_epi8(arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:381:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:380:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_add_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:388:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:387:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_add_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:395:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:394:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sub_epi8(arg___W: __m128i, arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:402:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:401:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sub_epi8(arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:409:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:408:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sub_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:416:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:415:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sub_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:423:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:422:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mullo_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:430:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:429:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mullo_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:437:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:436:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mullo_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:444:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:443:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mullo_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:452:20: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:450:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_blend_epi8(arg___U: __mmask16, arg___A: __m128i, arg___W: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:460:20: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:458:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_blend_epi8(arg___U: __mmask32, arg___A: __m256i, arg___W: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:468:20: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:466:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_blend_epi16(arg___U: __mmask8, arg___A: __m128i, arg___W: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:476:20: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:474:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_blend_epi16(arg___U: __mmask16, arg___A: __m256i, arg___W: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:484:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:482:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_abs_epi8(arg___W: __m128i, arg___U: __mmask16, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:492:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:490:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_abs_epi8(arg___U: __mmask16, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:500:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:498:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_abs_epi8(arg___W: __m256i, arg___U: __mmask32, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:508:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:506:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_abs_epi8(arg___U: __mmask32, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:516:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:514:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_abs_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:524:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:522:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_abs_epi16(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:532:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:530:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_abs_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:540:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:538:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_abs_epi16(arg___U: __mmask16, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:547:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:546:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_packs_epi32(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:555:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:553:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_packs_epi32(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:563:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:561:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_packs_epi32(arg___M: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:571:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:569:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_packs_epi32(arg___W: __m256i, arg___M: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:579:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:577:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_packs_epi16(arg___M: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:587:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:585:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_packs_epi16(arg___W: __m128i, arg___M: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:595:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:593:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_packs_epi16(arg___M: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:603:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:601:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_packs_epi16(arg___W: __m256i, arg___M: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:611:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:609:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_packus_epi32(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:619:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:617:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_packus_epi32(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:627:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:625:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_packus_epi32(arg___M: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:635:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:633:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_packus_epi32(arg___W: __m256i, arg___M: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:643:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:641:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_packus_epi16(arg___M: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:651:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:649:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_packus_epi16(arg___W: __m128i, arg___M: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:659:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:657:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_packus_epi16(arg___M: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:667:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:665:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_packus_epi16(arg___W: __m256i, arg___M: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:675:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:673:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_adds_epi8(arg___W: __m128i, arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:683:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:681:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_adds_epi8(arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:691:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:689:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_adds_epi8(arg___W: __m256i, arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:699:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:697:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_adds_epi8(arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:707:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:705:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_adds_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:715:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:713:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_adds_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:723:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:721:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_adds_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:731:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:729:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_adds_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:739:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:737:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_adds_epu8(arg___W: __m128i, arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:747:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:745:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_adds_epu8(arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:755:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:753:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_adds_epu8(arg___W: __m256i, arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:763:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:761:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_adds_epu8(arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:771:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:769:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_adds_epu16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:779:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:777:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_adds_epu16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:787:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:785:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_adds_epu16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:795:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:793:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_adds_epu16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:803:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:801:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_avg_epu8(arg___W: __m128i, arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:811:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:809:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_avg_epu8(arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:819:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:817:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_avg_epu8(arg___W: __m256i, arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:827:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:825:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_avg_epu8(arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:835:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:833:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_avg_epu16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:843:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:841:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_avg_epu16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:851:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:849:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_avg_epu16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:859:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:857:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_avg_epu16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:867:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:865:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_max_epi8(arg___M: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:875:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:873:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_max_epi8(arg___W: __m128i, arg___M: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:883:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:881:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_max_epi8(arg___M: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:891:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:889:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_max_epi8(arg___W: __m256i, arg___M: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:899:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:897:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_max_epi16(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:907:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:905:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_max_epi16(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:915:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:913:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_max_epi16(arg___M: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:923:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:921:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_max_epi16(arg___W: __m256i, arg___M: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:931:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:929:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_max_epu8(arg___M: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:939:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:937:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_max_epu8(arg___W: __m128i, arg___M: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:947:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:945:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_max_epu8(arg___M: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:955:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:953:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_max_epu8(arg___W: __m256i, arg___M: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:963:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:961:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_max_epu16(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:971:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:969:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_max_epu16(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:979:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:977:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_max_epu16(arg___M: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:987:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:985:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_max_epu16(arg___W: __m256i, arg___M: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:995:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:993:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_min_epi8(arg___M: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1003:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1001:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_min_epi8(arg___W: __m128i, arg___M: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1011:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1009:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_min_epi8(arg___M: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1019:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1017:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_min_epi8(arg___W: __m256i, arg___M: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1027:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1025:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_min_epi16(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1035:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1033:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_min_epi16(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1043:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1041:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_min_epi16(arg___M: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1051:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1049:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_min_epi16(arg___W: __m256i, arg___M: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1059:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1057:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_min_epu8(arg___M: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1067:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1065:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_min_epu8(arg___W: __m128i, arg___M: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1075:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1073:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_min_epu8(arg___M: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1083:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1081:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_min_epu8(arg___W: __m256i, arg___M: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1091:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1089:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_min_epu16(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1099:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1097:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_min_epu16(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1107:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1105:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_min_epu16(arg___M: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1115:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1113:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_min_epu16(arg___W: __m256i, arg___M: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1123:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1121:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_shuffle_epi8(arg___W: __m128i, arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1131:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1129:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_shuffle_epi8(arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1139:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1137:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_shuffle_epi8(arg___W: __m256i, arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1147:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1145:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_shuffle_epi8(arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1155:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1153:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_subs_epi8(arg___W: __m128i, arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1163:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1161:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_subs_epi8(arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1171:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1169:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_subs_epi8(arg___W: __m256i, arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1179:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1177:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_subs_epi8(arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1187:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1185:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_subs_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1195:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1193:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_subs_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1203:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1201:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_subs_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1211:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1209:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_subs_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1219:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1217:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_subs_epu8(arg___W: __m128i, arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1227:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1225:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_subs_epu8(arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1235:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1233:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_subs_epu8(arg___W: __m256i, arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1243:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1241:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_subs_epu8(arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1251:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1249:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_subs_epu16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1259:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1257:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_subs_epu16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1267:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1265:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_subs_epu16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1275:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1273:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_subs_epu16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1283:19: warning: TODO implement function '__builtin_ia32_vpermi2varhi128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1281:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_permutex2var_epi16(arg___A: __m128i, arg___I: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1291:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1288:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_permutex2var_epi16(arg___A: __m128i, arg___U: __mmask8, arg___I: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1300:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1297:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask2_permutex2var_epi16(arg___A: __m128i, arg___I: __m128i, arg___U: __mmask8, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1309:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1306:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_permutex2var_epi16(arg___U: __mmask8, arg___A: __m128i, arg___I: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1317:19: warning: TODO implement function '__builtin_ia32_vpermi2varhi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1315:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutex2var_epi16(arg___A: __m256i, arg___I: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1325:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1322:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_permutex2var_epi16(arg___A: __m256i, arg___U: __mmask16, arg___I: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1334:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1331:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask2_permutex2var_epi16(arg___A: __m256i, arg___I: __m256i, arg___U: __mmask16, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1343:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1340:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_permutex2var_epi16(arg___U: __mmask16, arg___A: __m256i, arg___I: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1350:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1349:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_maddubs_epi16(arg___W: __m128i, arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1357:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1356:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_maddubs_epi16(arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1365:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1363:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_maddubs_epi16(arg___W: __m256i, arg___U: __mmask16, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1372:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1371:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_maddubs_epi16(arg___U: __mmask16, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1379:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1378:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_madd_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1386:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1385:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_madd_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1393:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1392:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_madd_epi16(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1400:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1399:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_madd_epi16(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1407:20: warning: TODO implement function '__builtin_ia32_pmovswb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1406:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsepi16_epi8(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1414:20: warning: TODO implement function '__builtin_ia32_pmovswb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1413:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsepi16_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1421:20: warning: TODO implement function '__builtin_ia32_pmovswb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1420:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtsepi16_epi8(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1428:20: warning: TODO implement function '__builtin_ia32_pmovswb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1427:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtsepi16_epi8(arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1435:20: warning: TODO implement function '__builtin_ia32_pmovswb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1434:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtsepi16_epi8(arg___O: __m128i, arg___M: __mmask16, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1442:20: warning: TODO implement function '__builtin_ia32_pmovswb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1441:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtsepi16_epi8(arg___M: __mmask16, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1449:20: warning: TODO implement function '__builtin_ia32_pmovuswb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1448:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtusepi16_epi8(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1456:20: warning: TODO implement function '__builtin_ia32_pmovuswb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1455:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtusepi16_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1463:20: warning: TODO implement function '__builtin_ia32_pmovuswb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1462:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtusepi16_epi8(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1470:20: warning: TODO implement function '__builtin_ia32_pmovuswb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1469:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtusepi16_epi8(arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1477:20: warning: TODO implement function '__builtin_ia32_pmovuswb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1476:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtusepi16_epi8(arg___O: __m128i, arg___M: __mmask16, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1484:20: warning: TODO implement function '__builtin_ia32_pmovuswb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1483:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtusepi16_epi8(arg___M: __mmask16, arg___A: __m256i) __m128i;
pub inline fn _mm_cvtepi16_epi8(arg___A: __m128i) __m128i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
        const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
        const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
        const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
        const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
        const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
        const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
        break :blk __v8qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    })).Vector.child, blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
        const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
        const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
        const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
        const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
        const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
        const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
        break :blk __v8qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }, blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0)))));
        break :blk __v8qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }, @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(blk: {
            const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[0]))));
            const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[1]))));
            const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[2]))));
            const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[3]))));
            const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[4]))));
            const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[5]))));
            const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[6]))));
            const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v8hi, @bitCast(__A))[7]))));
            break :blk __v8qi{
                tmp,
                tmp_1,
                tmp_2,
                tmp_3,
                tmp_4,
                tmp_5,
                tmp_6,
                tmp_7,
            };
        })).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vlbwintrin.h:1499:20: warning: TODO implement function '__builtin_ia32_pmovwb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1498:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi16_epi8(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1506:20: warning: TODO implement function '__builtin_ia32_pmovwb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1505:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi16_epi8(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1514:3: warning: TODO implement function '__builtin_ia32_pmovwb128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1512:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi16_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
// /usr/lib/zig/include/avx512vlbwintrin.h:1521:3: warning: TODO implement function '__builtin_ia32_pmovswb128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1519:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsepi16_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
// /usr/lib/zig/include/avx512vlbwintrin.h:1527:3: warning: TODO implement function '__builtin_ia32_pmovuswb128mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1525:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtusepi16_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask8, arg___A: __m128i) void;
pub inline fn _mm256_cvtepi16_epi8(arg___A: __m256i) __m128i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128i, @bitCast(blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[0]))));
        const tmp_1 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[1]))));
        const tmp_2 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[2]))));
        const tmp_3 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[3]))));
        const tmp_4 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[4]))));
        const tmp_5 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[5]))));
        const tmp_6 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[6]))));
        const tmp_7 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[7]))));
        const tmp_8 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[8]))));
        const tmp_9 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[9]))));
        const tmp_10 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[10]))));
        const tmp_11 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[11]))));
        const tmp_12 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[12]))));
        const tmp_13 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[13]))));
        const tmp_14 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[14]))));
        const tmp_15 = @as(u8, @bitCast(@as(i8, @truncate(@as(__v16hi, @bitCast(__A))[15]))));
        break :blk __v16qi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
// /usr/lib/zig/include/avx512vlbwintrin.h:1537:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1536:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi16_epi8(arg___O: __m128i, arg___M: __mmask16, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1544:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1543:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi16_epi8(arg___M: __mmask16, arg___A: __m256i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1552:3: warning: TODO implement function '__builtin_ia32_pmovwb256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1550:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi16_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask16, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlbwintrin.h:1558:3: warning: TODO implement function '__builtin_ia32_pmovswb256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1556:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtsepi16_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask16, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlbwintrin.h:1564:3: warning: TODO implement function '__builtin_ia32_pmovuswb256mem_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1562:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtusepi16_storeu_epi8(arg___P_1: ?*anyopaque, arg___M: __mmask16, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlbwintrin.h:1569:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1568:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mulhrs_epi16(arg___W: __m128i, arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1576:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1575:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mulhrs_epi16(arg___U: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1583:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1582:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mulhrs_epi16(arg___W: __m256i, arg___U: __mmask16, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1590:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1589:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mulhrs_epi16(arg___U: __mmask16, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1597:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1596:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mulhi_epu16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1604:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1603:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mulhi_epu16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1611:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1610:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mulhi_epu16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1618:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1617:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mulhi_epu16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1625:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1624:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mulhi_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1632:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1631:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mulhi_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1639:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1638:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mulhi_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1646:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1645:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mulhi_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1653:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1652:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_unpackhi_epi8(arg___W: __m128i, arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1660:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1659:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_unpackhi_epi8(arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1667:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1666:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_unpackhi_epi8(arg___W: __m256i, arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1674:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1673:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_unpackhi_epi8(arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1681:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1680:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_unpackhi_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1688:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1687:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_unpackhi_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1695:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1694:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_unpackhi_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1702:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1701:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_unpackhi_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1709:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1708:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_unpacklo_epi8(arg___W: __m128i, arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1716:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1715:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_unpacklo_epi8(arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1723:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1722:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_unpacklo_epi8(arg___W: __m256i, arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1730:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1729:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_unpacklo_epi8(arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1737:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1736:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_unpacklo_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1744:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1743:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_unpacklo_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1751:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1750:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_unpacklo_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1758:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1757:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_unpacklo_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1766:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1764:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi8_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1774:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1772:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi8_epi16(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1782:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1780:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi8_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1790:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1788:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi8_epi16(arg___U: __mmask16, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1799:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1797:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepu8_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1807:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1805:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepu8_epi16(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1815:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1813:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepu8_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1823:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1821:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepu8_epi16(arg___U: __mmask16, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1874:19: warning: TODO implement function '__builtin_ia32_psllv16hi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1872:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sllv_epi16(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1880:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1878:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sllv_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1888:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1886:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sllv_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1896:19: warning: TODO implement function '__builtin_ia32_psllv8hi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1894:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sllv_epi16(arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1902:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1900:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sllv_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1910:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1908:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sllv_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1918:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1916:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sll_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1926:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1924:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sll_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1934:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1932:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sll_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1942:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1940:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sll_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1950:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1948:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_slli_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1958:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1956:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_slli_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1967:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1964:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_slli_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1975:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1973:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_slli_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1983:19: warning: TODO implement function '__builtin_ia32_psrlv16hi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1981:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_srlv_epi16(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1989:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1987:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_srlv_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:1997:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:1995:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_srlv_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2005:19: warning: TODO implement function '__builtin_ia32_psrlv8hi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2003:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_srlv_epi16(arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2011:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2009:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_srlv_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2019:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2017:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_srlv_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2027:19: warning: TODO implement function '__builtin_ia32_psrav16hi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2025:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_srav_epi16(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2033:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2031:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_srav_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2041:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2039:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_srav_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2049:19: warning: TODO implement function '__builtin_ia32_psrav8hi' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2047:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_srav_epi16(arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2055:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2053:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_srav_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2063:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2061:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_srav_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2071:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2069:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sra_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2079:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2077:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sra_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2087:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2085:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sra_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2095:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2093:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sra_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2103:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2101:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_srai_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2111:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2109:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_srai_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: c_uint) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2120:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2117:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_srai_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2128:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2126:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_srai_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: c_uint) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2136:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2134:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_srl_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2144:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2142:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_srl_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2152:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2150:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_srl_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2160:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2158:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_srl_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2168:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2166:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_srli_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: c_int) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2176:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2174:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_srli_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: c_int) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2184:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2182:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_srli_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i, arg___B: c_int) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2192:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2190:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_srli_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: c_int) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2200:20: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2198:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mov_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2208:20: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2206:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mov_epi16(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2216:20: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2214:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mov_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2224:20: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2222:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mov_epi16(arg___U: __mmask16, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2232:20: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2230:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mov_epi8(arg___W: __m128i, arg___U: __mmask16, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2240:20: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2238:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mov_epi8(arg___U: __mmask16, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2248:20: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2246:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mov_epi8(arg___W: __m256i, arg___U: __mmask32, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2256:20: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2254:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mov_epi8(arg___U: __mmask32, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2265:20: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2263:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_set1_epi8(arg___O: __m128i, arg___M: __mmask16, arg___A: u8) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2273:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2271:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_set1_epi8(arg___M: __mmask16, arg___A: u8) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2281:20: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2279:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_set1_epi8(arg___O: __m256i, arg___M: __mmask32, arg___A: u8) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2289:20: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2287:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_set1_epi8(arg___M: __mmask32, arg___A: u8) __m256i;
pub inline fn _mm_loadu_epi16(arg___P_1: ?*const anyopaque) __m128i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_epi16 = extern struct {
        __v: __m128i_u align(1) = @import("std").mem.zeroes(__m128i_u),
    };
    _ = &struct___loadu_epi16;
    return @as([*c]const struct___loadu_epi16, @ptrCast(@alignCast(__P_1))).*.__v;
}
// /usr/lib/zig/include/avx512vlbwintrin.h:2306:20: warning: TODO implement function '__builtin_ia32_loaddquhi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2304:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_loadu_epi16(arg___W: __m128i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2314:20: warning: TODO implement function '__builtin_ia32_loaddquhi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2312:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_loadu_epi16(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
pub inline fn _mm256_loadu_epi16(arg___P_1: ?*const anyopaque) __m256i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_epi16 = extern struct {
        __v: __m256i_u align(1) = @import("std").mem.zeroes(__m256i_u),
    };
    _ = &struct___loadu_epi16;
    return @as([*c]const struct___loadu_epi16, @ptrCast(@alignCast(__P_1))).*.__v;
}
// /usr/lib/zig/include/avx512vlbwintrin.h:2332:20: warning: TODO implement function '__builtin_ia32_loaddquhi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2330:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_loadu_epi16(arg___W: __m256i, arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2340:20: warning: TODO implement function '__builtin_ia32_loaddquhi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2338:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_loadu_epi16(arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m256i;
pub inline fn _mm_loadu_epi8(arg___P_1: ?*const anyopaque) __m128i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_epi8 = extern struct {
        __v: __m128i_u align(1) = @import("std").mem.zeroes(__m128i_u),
    };
    _ = &struct___loadu_epi8;
    return @as([*c]const struct___loadu_epi8, @ptrCast(@alignCast(__P_1))).*.__v;
}
// /usr/lib/zig/include/avx512vlbwintrin.h:2358:20: warning: TODO implement function '__builtin_ia32_loaddquqi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2356:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_loadu_epi8(arg___W: __m128i, arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2366:20: warning: TODO implement function '__builtin_ia32_loaddquqi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2364:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_loadu_epi8(arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m128i;
pub inline fn _mm256_loadu_epi8(arg___P_1: ?*const anyopaque) __m256i {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_epi8 = extern struct {
        __v: __m256i_u align(1) = @import("std").mem.zeroes(__m256i_u),
    };
    _ = &struct___loadu_epi8;
    return @as([*c]const struct___loadu_epi8, @ptrCast(@alignCast(__P_1))).*.__v;
}
// /usr/lib/zig/include/avx512vlbwintrin.h:2384:20: warning: TODO implement function '__builtin_ia32_loaddquqi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2382:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_loadu_epi8(arg___W: __m256i, arg___U: __mmask32, arg___P_1: ?*const anyopaque) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2392:20: warning: TODO implement function '__builtin_ia32_loaddquqi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2390:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_loadu_epi8(arg___U: __mmask32, arg___P_1: ?*const anyopaque) __m256i;
pub inline fn _mm_storeu_epi16(arg___P_1: ?*anyopaque, arg___A: __m128i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_epi16 = extern struct {
        __v: __m128i_u align(1) = @import("std").mem.zeroes(__m128i_u),
    };
    _ = &struct___storeu_epi16;
    @as([*c]struct___storeu_epi16, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
// /usr/lib/zig/include/avx512vlbwintrin.h:2410:3: warning: TODO implement function '__builtin_ia32_storedquhi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2408:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_storeu_epi16(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___A: __m128i) void;
pub inline fn _mm256_storeu_epi16(arg___P_1: ?*anyopaque, arg___A: __m256i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_epi16 = extern struct {
        __v: __m256i_u align(1) = @import("std").mem.zeroes(__m256i_u),
    };
    _ = &struct___storeu_epi16;
    @as([*c]struct___storeu_epi16, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
// /usr/lib/zig/include/avx512vlbwintrin.h:2427:3: warning: TODO implement function '__builtin_ia32_storedquhi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2425:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_storeu_epi16(arg___P_1: ?*anyopaque, arg___U: __mmask16, arg___A: __m256i) void;
pub inline fn _mm_storeu_epi8(arg___P_1: ?*anyopaque, arg___A: __m128i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_epi8 = extern struct {
        __v: __m128i_u align(1) = @import("std").mem.zeroes(__m128i_u),
    };
    _ = &struct___storeu_epi8;
    @as([*c]struct___storeu_epi8, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
// /usr/lib/zig/include/avx512vlbwintrin.h:2444:3: warning: TODO implement function '__builtin_ia32_storedquqi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2442:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_storeu_epi8(arg___P_1: ?*anyopaque, arg___U: __mmask16, arg___A: __m128i) void;
pub inline fn _mm256_storeu_epi8(arg___P_1: ?*anyopaque, arg___A: __m256i) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_epi8 = extern struct {
        __v: __m256i_u align(1) = @import("std").mem.zeroes(__m256i_u),
    };
    _ = &struct___storeu_epi8;
    @as([*c]struct___storeu_epi8, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
// /usr/lib/zig/include/avx512vlbwintrin.h:2461:3: warning: TODO implement function '__builtin_ia32_storedquqi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2459:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_storeu_epi8(arg___P_1: ?*anyopaque, arg___U: __mmask32, arg___A: __m256i) void;
// /usr/lib/zig/include/avx512vlbwintrin.h:30:15: warning: TODO implement function '__builtin_ia32_cmpb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2467:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_test_epi8_mask(arg___A: __m128i, arg___B: __m128i) __mmask16;
// /usr/lib/zig/include/avx512vlbwintrin.h:35:15: warning: TODO implement function '__builtin_ia32_cmpb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2473:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_test_epi8_mask(arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __mmask16;
// /usr/lib/zig/include/avx512vlbwintrin.h:50:15: warning: TODO implement function '__builtin_ia32_cmpb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2480:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_test_epi8_mask(arg___A: __m256i, arg___B: __m256i) __mmask32;
// /usr/lib/zig/include/avx512vlbwintrin.h:55:15: warning: TODO implement function '__builtin_ia32_cmpb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2487:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_test_epi8_mask(arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __mmask32;
// /usr/lib/zig/include/avx512vlbwintrin.h:70:14: warning: TODO implement function '__builtin_ia32_cmpw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2494:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_test_epi16_mask(arg___A: __m128i, arg___B: __m128i) __mmask8;
// /usr/lib/zig/include/avx512vlbwintrin.h:75:14: warning: TODO implement function '__builtin_ia32_cmpw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2500:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_test_epi16_mask(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __mmask8;
// /usr/lib/zig/include/avx512vlbwintrin.h:90:15: warning: TODO implement function '__builtin_ia32_cmpw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2507:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_test_epi16_mask(arg___A: __m256i, arg___B: __m256i) __mmask16;
// /usr/lib/zig/include/avx512vlbwintrin.h:95:15: warning: TODO implement function '__builtin_ia32_cmpw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2514:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_test_epi16_mask(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __mmask16;
// /usr/lib/zig/include/avx512vlbwintrin.h:30:15: warning: TODO implement function '__builtin_ia32_cmpb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2521:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_testn_epi8_mask(arg___A: __m128i, arg___B: __m128i) __mmask16;
// /usr/lib/zig/include/avx512vlbwintrin.h:35:15: warning: TODO implement function '__builtin_ia32_cmpb128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2527:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_testn_epi8_mask(arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __mmask16;
// /usr/lib/zig/include/avx512vlbwintrin.h:50:15: warning: TODO implement function '__builtin_ia32_cmpb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2534:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_testn_epi8_mask(arg___A: __m256i, arg___B: __m256i) __mmask32;
// /usr/lib/zig/include/avx512vlbwintrin.h:55:15: warning: TODO implement function '__builtin_ia32_cmpb256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2541:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_testn_epi8_mask(arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __mmask32;
// /usr/lib/zig/include/avx512vlbwintrin.h:70:14: warning: TODO implement function '__builtin_ia32_cmpw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2548:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_testn_epi16_mask(arg___A: __m128i, arg___B: __m128i) __mmask8;
// /usr/lib/zig/include/avx512vlbwintrin.h:75:14: warning: TODO implement function '__builtin_ia32_cmpw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2554:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_testn_epi16_mask(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __mmask8;
// /usr/lib/zig/include/avx512vlbwintrin.h:90:15: warning: TODO implement function '__builtin_ia32_cmpw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2560:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_testn_epi16_mask(arg___A: __m256i, arg___B: __m256i) __mmask16;
// /usr/lib/zig/include/avx512vlbwintrin.h:95:15: warning: TODO implement function '__builtin_ia32_cmpw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2567:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_testn_epi16_mask(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i) __mmask16;
// /usr/lib/zig/include/avx512vlbwintrin.h:2576:22: warning: TODO implement function '__builtin_ia32_cvtb2mask128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2574:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_movepi8_mask(arg___A: __m128i) __mmask16;
// /usr/lib/zig/include/avx512vlbwintrin.h:2582:22: warning: TODO implement function '__builtin_ia32_cvtb2mask256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2580:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_movepi8_mask(arg___A: __m256i) __mmask32;
// /usr/lib/zig/include/avx512vlbwintrin.h:2588:21: warning: TODO implement function '__builtin_ia32_cvtw2mask128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2586:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_movepi16_mask(arg___A: __m128i) __mmask8;
// /usr/lib/zig/include/avx512vlbwintrin.h:2594:22: warning: TODO implement function '__builtin_ia32_cvtw2mask256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2592:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_movepi16_mask(arg___A: __m256i) __mmask16;
// /usr/lib/zig/include/avx512vlbwintrin.h:2600:20: warning: TODO implement function '__builtin_ia32_cvtmask2b128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2598:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_movm_epi8(arg___A: __mmask16) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2606:20: warning: TODO implement function '__builtin_ia32_cvtmask2b256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2604:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_movm_epi8(arg___A: __mmask32) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2612:20: warning: TODO implement function '__builtin_ia32_cvtmask2w128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2610:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_movm_epi16(arg___A: __mmask8) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2618:20: warning: TODO implement function '__builtin_ia32_cvtmask2w256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2616:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_movm_epi16(arg___A: __mmask16) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2624:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2622:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_broadcastb_epi8(arg___O: __m128i, arg___M: __mmask16, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2632:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2630:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_broadcastb_epi8(arg___M: __mmask16, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2640:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2638:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_broadcastb_epi8(arg___O: __m256i, arg___M: __mmask32, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2648:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2646:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_broadcastb_epi8(arg___M: __mmask32, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2656:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2654:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_broadcastw_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2664:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2662:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_broadcastw_epi16(arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2672:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2670:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_broadcastw_epi16(arg___O: __m256i, arg___M: __mmask16, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2680:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2678:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_broadcastw_epi16(arg___M: __mmask16, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2688:20: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2686:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_set1_epi16(arg___O: __m256i, arg___M: __mmask16, arg___A: c_short) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2696:20: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2694:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_set1_epi16(arg___M: __mmask16, arg___A: c_short) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2704:20: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2702:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_set1_epi16(arg___O: __m128i, arg___M: __mmask8, arg___A: c_short) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2712:20: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2710:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_set1_epi16(arg___M: __mmask8, arg___A: c_short) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2720:19: warning: TODO implement function '__builtin_ia32_permvarhi128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2718:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_permutexvar_epi16(arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2726:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2724:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_permutexvar_epi16(arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2735:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2732:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_permutexvar_epi16(arg___W: __m128i, arg___M: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2743:19: warning: TODO implement function '__builtin_ia32_permvarhi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2741:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutexvar_epi16(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2750:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2747:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_permutexvar_epi16(arg___M: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2759:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2756:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_permutexvar_epi16(arg___W: __m256i, arg___M: __mmask16, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlbwintrin.h:2814:10: warning: TODO implement function '__builtin_reduce_add' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2813:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_add_epi16(arg___W: __m128i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2819:10: warning: TODO implement function '__builtin_reduce_mul' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2818:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_mul_epi16(arg___W: __m128i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2824:10: warning: TODO implement function '__builtin_reduce_and' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2823:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_and_epi16(arg___W: __m128i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2829:10: warning: TODO implement function '__builtin_reduce_or' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2828:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_or_epi16(arg___W: __m128i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2835:10: warning: TODO implement function '__builtin_reduce_add' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2833:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_add_epi16(arg___M: __mmask8, arg___W: __m128i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2841:10: warning: TODO implement function '__builtin_reduce_mul' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2839:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_mul_epi16(arg___M: __mmask8, arg___W: __m128i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2847:10: warning: TODO implement function '__builtin_reduce_and' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2845:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_and_epi16(arg___M: __mmask8, arg___W: __m128i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2853:10: warning: TODO implement function '__builtin_reduce_or' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2851:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_or_epi16(arg___M: __mmask8, arg___W: __m128i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2858:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2857:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_max_epi16(arg___V: __m128i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2863:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2862:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_max_epu16(arg___V: __m128i) c_ushort;
// /usr/lib/zig/include/avx512vlbwintrin.h:2868:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2867:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_min_epi16(arg___V: __m128i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2873:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2872:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_min_epu16(arg___V: __m128i) c_ushort;
// /usr/lib/zig/include/avx512vlbwintrin.h:2879:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2877:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_max_epi16(arg___M: __mmask16, arg___V: __m128i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2885:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2883:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_max_epu16(arg___M: __mmask16, arg___V: __m128i) c_ushort;
// /usr/lib/zig/include/avx512vlbwintrin.h:2891:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2889:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_min_epi16(arg___M: __mmask16, arg___V: __m128i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2897:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2895:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_min_epu16(arg___M: __mmask16, arg___V: __m128i) c_ushort;
// /usr/lib/zig/include/avx512vlbwintrin.h:2902:10: warning: TODO implement function '__builtin_reduce_add' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2901:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_add_epi16(arg___W: __m256i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2907:10: warning: TODO implement function '__builtin_reduce_mul' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2906:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_mul_epi16(arg___W: __m256i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2912:10: warning: TODO implement function '__builtin_reduce_and' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2911:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_and_epi16(arg___W: __m256i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2917:10: warning: TODO implement function '__builtin_reduce_or' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2916:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_or_epi16(arg___W: __m256i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2923:10: warning: TODO implement function '__builtin_reduce_add' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2921:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_add_epi16(arg___M: __mmask16, arg___W: __m256i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2929:10: warning: TODO implement function '__builtin_reduce_mul' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2927:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_mul_epi16(arg___M: __mmask16, arg___W: __m256i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2935:10: warning: TODO implement function '__builtin_reduce_and' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2933:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_and_epi16(arg___M: __mmask16, arg___W: __m256i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2941:10: warning: TODO implement function '__builtin_reduce_or' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2939:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_or_epi16(arg___M: __mmask16, arg___W: __m256i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2946:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2945:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_max_epi16(arg___V: __m256i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2951:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2950:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_max_epu16(arg___V: __m256i) c_ushort;
// /usr/lib/zig/include/avx512vlbwintrin.h:2956:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2955:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_min_epi16(arg___V: __m256i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2961:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2960:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_min_epu16(arg___V: __m256i) c_ushort;
// /usr/lib/zig/include/avx512vlbwintrin.h:2967:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2965:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_max_epi16(arg___M: __mmask16, arg___V: __m256i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2973:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2971:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_max_epu16(arg___M: __mmask16, arg___V: __m256i) c_ushort;
// /usr/lib/zig/include/avx512vlbwintrin.h:2979:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2977:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_min_epi16(arg___M: __mmask16, arg___V: __m256i) c_short;
// /usr/lib/zig/include/avx512vlbwintrin.h:2985:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2983:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_min_epu16(arg___M: __mmask16, arg___V: __m256i) c_ushort;
// /usr/lib/zig/include/avx512vlbwintrin.h:2990:10: warning: TODO implement function '__builtin_reduce_add' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2989:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_add_epi8(arg___W: __m128i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:2995:10: warning: TODO implement function '__builtin_reduce_mul' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2994:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_mul_epi8(arg___W: __m128i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3000:10: warning: TODO implement function '__builtin_reduce_and' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:2999:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_and_epi8(arg___W: __m128i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3005:10: warning: TODO implement function '__builtin_reduce_or' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3004:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_or_epi8(arg___W: __m128i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3011:10: warning: TODO implement function '__builtin_reduce_add' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3009:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_add_epi8(arg___M: __mmask16, arg___W: __m128i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3017:10: warning: TODO implement function '__builtin_reduce_mul' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3015:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_mul_epi8(arg___M: __mmask16, arg___W: __m128i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3023:10: warning: TODO implement function '__builtin_reduce_and' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3021:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_and_epi8(arg___M: __mmask16, arg___W: __m128i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3029:10: warning: TODO implement function '__builtin_reduce_or' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3027:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_or_epi8(arg___M: __mmask16, arg___W: __m128i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3034:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3033:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_max_epi8(arg___V: __m128i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3039:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3038:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_max_epu8(arg___V: __m128i) u8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3044:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3043:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_min_epi8(arg___V: __m128i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3049:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3048:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_min_epu8(arg___V: __m128i) u8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3055:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3053:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_max_epi8(arg___M: __mmask16, arg___V: __m128i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3061:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3059:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_max_epu8(arg___M: __mmask16, arg___V: __m128i) u8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3067:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3065:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_min_epi8(arg___M: __mmask16, arg___V: __m128i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3073:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3071:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_reduce_min_epu8(arg___M: __mmask16, arg___V: __m128i) u8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3078:10: warning: TODO implement function '__builtin_reduce_add' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3077:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_add_epi8(arg___W: __m256i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3083:10: warning: TODO implement function '__builtin_reduce_mul' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3082:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_mul_epi8(arg___W: __m256i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3088:10: warning: TODO implement function '__builtin_reduce_and' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3087:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_and_epi8(arg___W: __m256i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3093:10: warning: TODO implement function '__builtin_reduce_or' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3092:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_or_epi8(arg___W: __m256i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3099:10: warning: TODO implement function '__builtin_reduce_add' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3097:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_add_epi8(arg___M: __mmask32, arg___W: __m256i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3105:10: warning: TODO implement function '__builtin_reduce_mul' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3103:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_mul_epi8(arg___M: __mmask32, arg___W: __m256i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3111:10: warning: TODO implement function '__builtin_reduce_and' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3109:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_and_epi8(arg___M: __mmask32, arg___W: __m256i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3117:10: warning: TODO implement function '__builtin_reduce_or' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3115:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_or_epi8(arg___M: __mmask32, arg___W: __m256i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3122:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3121:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_max_epi8(arg___V: __m256i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3127:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3126:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_max_epu8(arg___V: __m256i) u8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3132:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3131:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_min_epi8(arg___V: __m256i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3137:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3136:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_min_epu8(arg___V: __m256i) u8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3143:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3141:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_max_epi8(arg___M: __mmask32, arg___V: __m256i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3149:10: warning: TODO implement function '__builtin_reduce_max' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3147:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_max_epu8(arg___M: __mmask32, arg___V: __m256i) u8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3155:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3153:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_min_epi8(arg___M: __mmask32, arg___V: __m256i) i8;
// /usr/lib/zig/include/avx512vlbwintrin.h:3161:10: warning: TODO implement function '__builtin_reduce_min' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbwintrin.h:3159:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_reduce_min_epu8(arg___M: __mmask32, arg___V: __m256i) u8;
pub inline fn _mm_broadcastmb_epi64(arg___A: __mmask8) __m128i {
    var __A = arg___A;
    _ = &__A;
    return _mm_set1_epi64x(@as(c_longlong, @bitCast(@as(c_ulonglong, __A))));
}
pub inline fn _mm256_broadcastmb_epi64(arg___A: __mmask8) __m256i {
    var __A = arg___A;
    _ = &__A;
    return _mm256_set1_epi64x(@as(c_longlong, @bitCast(@as(c_ulonglong, __A))));
}
pub inline fn _mm_broadcastmw_epi32(arg___A: __mmask16) __m128i {
    var __A = arg___A;
    _ = &__A;
    return _mm_set1_epi32(@as(c_int, @bitCast(@as(c_uint, __A))));
}
pub inline fn _mm256_broadcastmw_epi32(arg___A: __mmask16) __m256i {
    var __A = arg___A;
    _ = &__A;
    return _mm256_set1_epi32(@as(c_int, @bitCast(@as(c_uint, __A))));
}
// /usr/lib/zig/include/avx512vlcdintrin.h:54:20: warning: TODO implement function '__builtin_ia32_vpconflictdi_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:52:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_conflict_epi64(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlcdintrin.h:60:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:58:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_conflict_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlcdintrin.h:68:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:66:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_conflict_epi64(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlcdintrin.h:76:20: warning: TODO implement function '__builtin_ia32_vpconflictdi_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:74:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_conflict_epi64(arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlcdintrin.h:82:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:80:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_conflict_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlcdintrin.h:90:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:88:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_conflict_epi64(arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlcdintrin.h:98:20: warning: TODO implement function '__builtin_ia32_vpconflictsi_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:96:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_conflict_epi32(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlcdintrin.h:104:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:102:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_conflict_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlcdintrin.h:112:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:110:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_conflict_epi32(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlcdintrin.h:120:20: warning: TODO implement function '__builtin_ia32_vpconflictsi_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:118:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_conflict_epi32(arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlcdintrin.h:126:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:124:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_conflict_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlcdintrin.h:134:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:132:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_conflict_epi32(arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlcdintrin.h:142:20: warning: TODO implement function '__builtin_ia32_vplzcntd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:140:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_lzcnt_epi32(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlcdintrin.h:148:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:146:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_lzcnt_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlcdintrin.h:156:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:154:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_lzcnt_epi32(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlcdintrin.h:164:20: warning: TODO implement function '__builtin_ia32_vplzcntd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:162:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_lzcnt_epi32(arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlcdintrin.h:170:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:168:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_lzcnt_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlcdintrin.h:178:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:176:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_lzcnt_epi32(arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlcdintrin.h:186:20: warning: TODO implement function '__builtin_ia32_vplzcntq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:184:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_lzcnt_epi64(arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlcdintrin.h:192:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:190:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_lzcnt_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlcdintrin.h:200:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:198:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_lzcnt_epi64(arg___U: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlcdintrin.h:208:20: warning: TODO implement function '__builtin_ia32_vplzcntq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:206:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_lzcnt_epi64(arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlcdintrin.h:214:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:212:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_lzcnt_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlcdintrin.h:222:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlcdintrin.h:220:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_lzcnt_epi64(arg___U: __mmask8, arg___A: __m256i) __m256i;
pub inline fn _mm256_mullo_epi64(arg___A: __m256i, arg___B: __m256i) __m256i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m256i, @bitCast(@as(__v4du, @bitCast(__A)) * @as(__v4du, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512vldqintrin.h:34:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:33:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mullo_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:41:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:40:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mullo_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i) __m256i;
pub inline fn _mm_mullo_epi64(arg___A: __m128i, arg___B: __m128i) __m128i {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m128i, @bitCast(@as(__v2du, @bitCast(__A)) * @as(__v2du, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512vldqintrin.h:53:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:52:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mullo_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:60:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:59:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mullo_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:67:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:66:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_andnot_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vldqintrin.h:74:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:73:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_andnot_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vldqintrin.h:81:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:80:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_andnot_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vldqintrin.h:88:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:87:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_andnot_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vldqintrin.h:95:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:94:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_andnot_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vldqintrin.h:102:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:101:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_andnot_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vldqintrin.h:109:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:108:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_andnot_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:116:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:115:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_andnot_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:123:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:122:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_and_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vldqintrin.h:130:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:129:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_and_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vldqintrin.h:137:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:136:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_and_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vldqintrin.h:144:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:143:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_and_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vldqintrin.h:151:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:150:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_and_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vldqintrin.h:158:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:157:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_and_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vldqintrin.h:165:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:164:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_and_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:172:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:171:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_and_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:179:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:178:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_xor_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vldqintrin.h:186:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:185:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_xor_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vldqintrin.h:193:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:192:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_xor_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vldqintrin.h:200:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:199:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_xor_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vldqintrin.h:207:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:206:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_xor_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vldqintrin.h:214:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:213:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_xor_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vldqintrin.h:221:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:220:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_xor_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:228:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:227:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_xor_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:235:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:234:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_or_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vldqintrin.h:242:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:241:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_or_pd(arg___U: __mmask8, arg___A: __m256d, arg___B: __m256d) __m256d;
// /usr/lib/zig/include/avx512vldqintrin.h:249:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:248:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_or_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vldqintrin.h:256:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:255:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_or_pd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128d) __m128d;
// /usr/lib/zig/include/avx512vldqintrin.h:263:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:262:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_or_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vldqintrin.h:270:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:269:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_or_ps(arg___U: __mmask8, arg___A: __m256, arg___B: __m256) __m256;
// /usr/lib/zig/include/avx512vldqintrin.h:277:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:276:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_or_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:284:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:283:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_or_ps(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:291:20: warning: TODO implement function '__builtin_ia32_cvtpd2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:290:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtpd_epi64(arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:298:20: warning: TODO implement function '__builtin_ia32_cvtpd2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:297:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtpd_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:305:20: warning: TODO implement function '__builtin_ia32_cvtpd2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:304:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtpd_epi64(arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:312:20: warning: TODO implement function '__builtin_ia32_cvtpd2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:311:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtpd_epi64(arg___A: __m256d) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:319:20: warning: TODO implement function '__builtin_ia32_cvtpd2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:318:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtpd_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256d) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:326:20: warning: TODO implement function '__builtin_ia32_cvtpd2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:325:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtpd_epi64(arg___U: __mmask8, arg___A: __m256d) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:333:20: warning: TODO implement function '__builtin_ia32_cvtpd2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:332:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtpd_epu64(arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:340:20: warning: TODO implement function '__builtin_ia32_cvtpd2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:339:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtpd_epu64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:347:20: warning: TODO implement function '__builtin_ia32_cvtpd2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:346:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtpd_epu64(arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:354:20: warning: TODO implement function '__builtin_ia32_cvtpd2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:353:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtpd_epu64(arg___A: __m256d) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:361:20: warning: TODO implement function '__builtin_ia32_cvtpd2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:360:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtpd_epu64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256d) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:368:20: warning: TODO implement function '__builtin_ia32_cvtpd2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:367:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtpd_epu64(arg___U: __mmask8, arg___A: __m256d) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:375:20: warning: TODO implement function '__builtin_ia32_cvtps2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:374:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtps_epi64(arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:382:20: warning: TODO implement function '__builtin_ia32_cvtps2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:381:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtps_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:389:20: warning: TODO implement function '__builtin_ia32_cvtps2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:388:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtps_epi64(arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:396:20: warning: TODO implement function '__builtin_ia32_cvtps2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:395:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtps_epi64(arg___A: __m128) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:403:20: warning: TODO implement function '__builtin_ia32_cvtps2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:402:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtps_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:410:20: warning: TODO implement function '__builtin_ia32_cvtps2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:409:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtps_epi64(arg___U: __mmask8, arg___A: __m128) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:417:20: warning: TODO implement function '__builtin_ia32_cvtps2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:416:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtps_epu64(arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:424:20: warning: TODO implement function '__builtin_ia32_cvtps2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:423:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtps_epu64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:431:20: warning: TODO implement function '__builtin_ia32_cvtps2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:430:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtps_epu64(arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:438:20: warning: TODO implement function '__builtin_ia32_cvtps2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:437:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtps_epu64(arg___A: __m128) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:445:20: warning: TODO implement function '__builtin_ia32_cvtps2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:444:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtps_epu64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:452:20: warning: TODO implement function '__builtin_ia32_cvtps2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:451:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtps_epu64(arg___U: __mmask8, arg___A: __m128) __m256i;
pub inline fn _mm_cvtepi64_pd(arg___A: __m128i) __m128d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128d, @bitCast(blk: {
        const tmp = @as(f64, @floatFromInt(@as(__v2di, @bitCast(__A))[0]));
        const tmp_1 = @as(f64, @floatFromInt(@as(__v2di, @bitCast(__A))[1]));
        break :blk __v2df{
            tmp,
            tmp_1,
        };
    }));
}
// /usr/lib/zig/include/avx512vldqintrin.h:464:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:463:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi64_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128i) __m128d;
// /usr/lib/zig/include/avx512vldqintrin.h:471:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:470:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi64_pd(arg___U: __mmask8, arg___A: __m128i) __m128d;
pub inline fn _mm256_cvtepi64_pd(arg___A: __m256i) __m256d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m256d, @bitCast(blk: {
        const tmp = @as(f64, @floatFromInt(@as(__v4di, @bitCast(__A))[0]));
        const tmp_1 = @as(f64, @floatFromInt(@as(__v4di, @bitCast(__A))[1]));
        const tmp_2 = @as(f64, @floatFromInt(@as(__v4di, @bitCast(__A))[2]));
        const tmp_3 = @as(f64, @floatFromInt(@as(__v4di, @bitCast(__A))[3]));
        break :blk __v4df{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
// /usr/lib/zig/include/avx512vldqintrin.h:483:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:482:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi64_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256i) __m256d;
// /usr/lib/zig/include/avx512vldqintrin.h:490:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:489:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi64_pd(arg___U: __mmask8, arg___A: __m256i) __m256d;
// /usr/lib/zig/include/avx512vldqintrin.h:497:19: warning: TODO implement function '__builtin_ia32_cvtqq2ps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:496:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtepi64_ps(arg___A: __m128i) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:504:19: warning: TODO implement function '__builtin_ia32_cvtqq2ps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:503:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi64_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128i) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:511:19: warning: TODO implement function '__builtin_ia32_cvtqq2ps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:510:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi64_ps(arg___U: __mmask8, arg___A: __m128i) __m128;
pub inline fn _mm256_cvtepi64_ps(arg___A: __m256i) __m128 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128, @bitCast(blk: {
        const tmp = @as(f32, @floatFromInt(@as(__v4di, @bitCast(__A))[0]));
        const tmp_1 = @as(f32, @floatFromInt(@as(__v4di, @bitCast(__A))[1]));
        const tmp_2 = @as(f32, @floatFromInt(@as(__v4di, @bitCast(__A))[2]));
        const tmp_3 = @as(f32, @floatFromInt(@as(__v4di, @bitCast(__A))[3]));
        break :blk __v4sf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
// /usr/lib/zig/include/avx512vldqintrin.h:523:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:522:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi64_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m256i) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:530:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:529:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi64_ps(arg___U: __mmask8, arg___A: __m256i) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:537:20: warning: TODO implement function '__builtin_ia32_cvttpd2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:536:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttpd_epi64(arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:544:20: warning: TODO implement function '__builtin_ia32_cvttpd2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:543:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvttpd_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:551:20: warning: TODO implement function '__builtin_ia32_cvttpd2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:550:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvttpd_epi64(arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:558:20: warning: TODO implement function '__builtin_ia32_cvttpd2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:557:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvttpd_epi64(arg___A: __m256d) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:565:20: warning: TODO implement function '__builtin_ia32_cvttpd2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:564:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvttpd_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256d) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:572:20: warning: TODO implement function '__builtin_ia32_cvttpd2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:571:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvttpd_epi64(arg___U: __mmask8, arg___A: __m256d) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:579:20: warning: TODO implement function '__builtin_ia32_cvttpd2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:578:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttpd_epu64(arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:586:20: warning: TODO implement function '__builtin_ia32_cvttpd2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:585:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvttpd_epu64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:593:20: warning: TODO implement function '__builtin_ia32_cvttpd2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:592:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvttpd_epu64(arg___U: __mmask8, arg___A: __m128d) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:600:20: warning: TODO implement function '__builtin_ia32_cvttpd2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:599:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvttpd_epu64(arg___A: __m256d) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:607:20: warning: TODO implement function '__builtin_ia32_cvttpd2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:606:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvttpd_epu64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m256d) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:614:20: warning: TODO implement function '__builtin_ia32_cvttpd2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:613:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvttpd_epu64(arg___U: __mmask8, arg___A: __m256d) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:621:20: warning: TODO implement function '__builtin_ia32_cvttps2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:620:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttps_epi64(arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:628:20: warning: TODO implement function '__builtin_ia32_cvttps2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:627:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvttps_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:635:20: warning: TODO implement function '__builtin_ia32_cvttps2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:634:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvttps_epi64(arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:642:20: warning: TODO implement function '__builtin_ia32_cvttps2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:641:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvttps_epi64(arg___A: __m128) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:649:20: warning: TODO implement function '__builtin_ia32_cvttps2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:648:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvttps_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:656:20: warning: TODO implement function '__builtin_ia32_cvttps2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:655:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvttps_epi64(arg___U: __mmask8, arg___A: __m128) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:663:20: warning: TODO implement function '__builtin_ia32_cvttps2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:662:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttps_epu64(arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:670:20: warning: TODO implement function '__builtin_ia32_cvttps2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:669:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvttps_epu64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:677:20: warning: TODO implement function '__builtin_ia32_cvttps2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:676:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvttps_epu64(arg___U: __mmask8, arg___A: __m128) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:684:20: warning: TODO implement function '__builtin_ia32_cvttps2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:683:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvttps_epu64(arg___A: __m128) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:691:20: warning: TODO implement function '__builtin_ia32_cvttps2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:690:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvttps_epu64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:698:20: warning: TODO implement function '__builtin_ia32_cvttps2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:697:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvttps_epu64(arg___U: __mmask8, arg___A: __m128) __m256i;
pub inline fn _mm_cvtepu64_pd(arg___A: __m128i) __m128d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128d, @bitCast(blk: {
        const tmp = @as(f64, @floatFromInt(@as(__v2du, @bitCast(__A))[0]));
        const tmp_1 = @as(f64, @floatFromInt(@as(__v2du, @bitCast(__A))[1]));
        break :blk __v2df{
            tmp,
            tmp_1,
        };
    }));
}
// /usr/lib/zig/include/avx512vldqintrin.h:710:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:709:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepu64_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128i) __m128d;
// /usr/lib/zig/include/avx512vldqintrin.h:717:19: warning: TODO implement function '__builtin_ia32_selectpd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:716:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepu64_pd(arg___U: __mmask8, arg___A: __m128i) __m128d;
pub inline fn _mm256_cvtepu64_pd(arg___A: __m256i) __m256d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m256d, @bitCast(blk: {
        const tmp = @as(f64, @floatFromInt(@as(__v4du, @bitCast(__A))[0]));
        const tmp_1 = @as(f64, @floatFromInt(@as(__v4du, @bitCast(__A))[1]));
        const tmp_2 = @as(f64, @floatFromInt(@as(__v4du, @bitCast(__A))[2]));
        const tmp_3 = @as(f64, @floatFromInt(@as(__v4du, @bitCast(__A))[3]));
        break :blk __v4df{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
// /usr/lib/zig/include/avx512vldqintrin.h:729:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:728:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepu64_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m256i) __m256d;
// /usr/lib/zig/include/avx512vldqintrin.h:736:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:735:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepu64_pd(arg___U: __mmask8, arg___A: __m256i) __m256d;
// /usr/lib/zig/include/avx512vldqintrin.h:743:19: warning: TODO implement function '__builtin_ia32_cvtuqq2ps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:742:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtepu64_ps(arg___A: __m128i) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:750:19: warning: TODO implement function '__builtin_ia32_cvtuqq2ps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:749:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepu64_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128i) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:757:19: warning: TODO implement function '__builtin_ia32_cvtuqq2ps128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:756:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepu64_ps(arg___U: __mmask8, arg___A: __m128i) __m128;
pub inline fn _mm256_cvtepu64_ps(arg___A: __m256i) __m128 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128, @bitCast(blk: {
        const tmp = @as(f32, @floatFromInt(@as(__v4du, @bitCast(__A))[0]));
        const tmp_1 = @as(f32, @floatFromInt(@as(__v4du, @bitCast(__A))[1]));
        const tmp_2 = @as(f32, @floatFromInt(@as(__v4du, @bitCast(__A))[2]));
        const tmp_3 = @as(f32, @floatFromInt(@as(__v4du, @bitCast(__A))[3]));
        break :blk __v4sf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
        };
    }));
}
// /usr/lib/zig/include/avx512vldqintrin.h:769:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:768:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepu64_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m256i) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:776:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:775:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepu64_ps(arg___U: __mmask8, arg___A: __m256i) __m128;
// /usr/lib/zig/include/avx512vldqintrin.h:914:21: warning: TODO implement function '__builtin_ia32_cvtd2mask128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:912:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_movepi32_mask(arg___A: __m128i) __mmask8;
// /usr/lib/zig/include/avx512vldqintrin.h:920:21: warning: TODO implement function '__builtin_ia32_cvtd2mask256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:918:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_movepi32_mask(arg___A: __m256i) __mmask8;
// /usr/lib/zig/include/avx512vldqintrin.h:926:20: warning: TODO implement function '__builtin_ia32_cvtmask2d128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:924:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_movm_epi32(arg___A: __mmask8) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:932:20: warning: TODO implement function '__builtin_ia32_cvtmask2d256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:930:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_movm_epi32(arg___A: __mmask8) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:938:20: warning: TODO implement function '__builtin_ia32_cvtmask2q128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:936:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_movm_epi64(arg___A: __mmask8) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:944:20: warning: TODO implement function '__builtin_ia32_cvtmask2q256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:942:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_movm_epi64(arg___A: __mmask8) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:950:21: warning: TODO implement function '__builtin_ia32_cvtq2mask128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:948:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_movepi64_mask(arg___A: __m128i) __mmask8;
// /usr/lib/zig/include/avx512vldqintrin.h:956:21: warning: TODO implement function '__builtin_ia32_cvtq2mask256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:954:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_movepi64_mask(arg___A: __m256i) __mmask8;
pub inline fn _mm256_broadcast_f32x2(arg___A: __m128) __m256 {
    var __A = arg___A;
    _ = &__A;
    return @as(__m256, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.child, @as(__v4sf, @bitCast(__A)), @as(__v4sf, @bitCast(__A)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4sf, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vldqintrin.h:969:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:967:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_broadcast_f32x2(arg___O: __m256, arg___M: __mmask8, arg___A: __m128) __m256;
// /usr/lib/zig/include/avx512vldqintrin.h:977:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:975:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_broadcast_f32x2(arg___M: __mmask8, arg___A: __m128) __m256;
pub inline fn _mm256_broadcast_f64x2(arg___A: __m128d) __m256d {
    var __A = arg___A;
    _ = &__A;
    return @as(__m256d, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.child, @as(__v2df, @bitCast(__A)), @as(__v2df, @bitCast(__A)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2df, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vldqintrin.h:992:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:990:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_broadcast_f64x2(arg___O: __m256d, arg___M: __mmask8, arg___A: __m128d) __m256d;
// /usr/lib/zig/include/avx512vldqintrin.h:1000:19: warning: TODO implement function '__builtin_ia32_selectpd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:998:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_broadcast_f64x2(arg___M: __mmask8, arg___A: __m128d) __m256d;
pub inline fn _mm_broadcast_i32x2(arg___A: __m128i) __m128i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.child, @as(__v4si, @bitCast(__A)), @as(__v4si, @bitCast(__A)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vldqintrin.h:1015:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:1013:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_broadcast_i32x2(arg___O: __m128i, arg___M: __mmask8, arg___A: __m128i) __m128i;
// /usr/lib/zig/include/avx512vldqintrin.h:1023:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:1021:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_broadcast_i32x2(arg___M: __mmask8, arg___A: __m128i) __m128i;
pub inline fn _mm256_broadcast_i32x2(arg___A: __m128i) __m256i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.child, @as(__v4si, @bitCast(__A)), @as(__v4si, @bitCast(__A)), @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v4si, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vldqintrin.h:1038:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:1036:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_broadcast_i32x2(arg___O: __m256i, arg___M: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:1046:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:1044:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_broadcast_i32x2(arg___M: __mmask8, arg___A: __m128i) __m256i;
pub inline fn _mm256_broadcast_i64x2(arg___A: __m128i) __m256i {
    var __A = arg___A;
    _ = &__A;
    return @as(__m256i, @bitCast(@shuffle(@typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.child, @as(__v2di, @bitCast(__A)), @as(__v2di, @bitCast(__A)), @Vector(4, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(@as(__v2di, @bitCast(__A)))).Vector.len),
    })));
}
// /usr/lib/zig/include/avx512vldqintrin.h:1061:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:1059:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_broadcast_i64x2(arg___O: __m256i, arg___M: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512vldqintrin.h:1069:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vldqintrin.h:1067:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_broadcast_i64x2(arg___M: __mmask8, arg___A: __m128i) __m256i;
// /usr/lib/zig/include/avx512ifmaintrin.h:25:19: warning: TODO implement function '__builtin_ia32_vpmadd52huq512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512ifmaintrin.h:23:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_madd52hi_epu64(arg___X: __m512i, arg___Y: __m512i, arg___Z: __m512i) __m512i;
// /usr/lib/zig/include/avx512ifmaintrin.h:32:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512ifmaintrin.h:30:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_madd52hi_epu64(arg___W: __m512i, arg___M: __mmask8, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512ifmaintrin.h:40:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512ifmaintrin.h:38:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_madd52hi_epu64(arg___M: __mmask8, arg___X: __m512i, arg___Y: __m512i, arg___Z: __m512i) __m512i;
// /usr/lib/zig/include/avx512ifmaintrin.h:48:19: warning: TODO implement function '__builtin_ia32_vpmadd52luq512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512ifmaintrin.h:46:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_madd52lo_epu64(arg___X: __m512i, arg___Y: __m512i, arg___Z: __m512i) __m512i;
// /usr/lib/zig/include/avx512ifmaintrin.h:55:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512ifmaintrin.h:53:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_madd52lo_epu64(arg___W: __m512i, arg___M: __mmask8, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512ifmaintrin.h:63:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512ifmaintrin.h:61:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_madd52lo_epu64(arg___M: __mmask8, arg___X: __m512i, arg___Y: __m512i, arg___Z: __m512i) __m512i;
// /usr/lib/zig/include/avx512ifmavlintrin.h:46:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512ifmavlintrin.h:44:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_madd52hi_epu64(arg___W: __m128i, arg___M: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512ifmavlintrin.h:54:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512ifmavlintrin.h:52:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_madd52hi_epu64(arg___M: __mmask8, arg___X: __m128i, arg___Y: __m128i, arg___Z: __m128i) __m128i;
// /usr/lib/zig/include/avx512ifmavlintrin.h:62:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512ifmavlintrin.h:60:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_madd52hi_epu64(arg___W: __m256i, arg___M: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512ifmavlintrin.h:70:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512ifmavlintrin.h:68:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_madd52hi_epu64(arg___M: __mmask8, arg___X: __m256i, arg___Y: __m256i, arg___Z: __m256i) __m256i;
// /usr/lib/zig/include/avx512ifmavlintrin.h:78:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512ifmavlintrin.h:76:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_madd52lo_epu64(arg___W: __m128i, arg___M: __mmask8, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512ifmavlintrin.h:86:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512ifmavlintrin.h:84:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_madd52lo_epu64(arg___M: __mmask8, arg___X: __m128i, arg___Y: __m128i, arg___Z: __m128i) __m128i;
// /usr/lib/zig/include/avx512ifmavlintrin.h:94:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512ifmavlintrin.h:92:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_madd52lo_epu64(arg___W: __m256i, arg___M: __mmask8, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512ifmavlintrin.h:102:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512ifmavlintrin.h:100:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_madd52lo_epu64(arg___M: __mmask8, arg___X: __m256i, arg___Y: __m256i, arg___Z: __m256i) __m256i;
// /usr/lib/zig/include/avxifmaintrin.h:60:19: warning: TODO implement function '__builtin_ia32_vpmadd52huq128' in std.zig.c_builtins

// /usr/lib/zig/include/avxifmaintrin.h:59:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_madd52hi_avx_epu64(arg___X: __m128i, arg___Y: __m128i, arg___Z: __m128i) __m128i;
// /usr/lib/zig/include/avxifmaintrin.h:97:19: warning: TODO implement function '__builtin_ia32_vpmadd52huq256' in std.zig.c_builtins

// /usr/lib/zig/include/avxifmaintrin.h:96:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_madd52hi_avx_epu64(arg___X: __m256i, arg___Y: __m256i, arg___Z: __m256i) __m256i;
// /usr/lib/zig/include/avxifmaintrin.h:134:19: warning: TODO implement function '__builtin_ia32_vpmadd52luq128' in std.zig.c_builtins

// /usr/lib/zig/include/avxifmaintrin.h:133:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_madd52lo_avx_epu64(arg___X: __m128i, arg___Y: __m128i, arg___Z: __m128i) __m128i;
// /usr/lib/zig/include/avxifmaintrin.h:171:19: warning: TODO implement function '__builtin_ia32_vpmadd52luq256' in std.zig.c_builtins

// /usr/lib/zig/include/avxifmaintrin.h:170:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_madd52lo_avx_epu64(arg___X: __m256i, arg___Y: __m256i, arg___Z: __m256i) __m256i;
// /usr/lib/zig/include/avx512vbmiintrin.h:25:19: warning: TODO implement function '__builtin_ia32_vpermi2varqi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmiintrin.h:23:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutex2var_epi8(arg___A: __m512i, arg___I: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmiintrin.h:33:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmiintrin.h:30:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_permutex2var_epi8(arg___A: __m512i, arg___U: __mmask64, arg___I: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmiintrin.h:42:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmiintrin.h:39:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask2_permutex2var_epi8(arg___A: __m512i, arg___I: __m512i, arg___U: __mmask64, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmiintrin.h:51:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmiintrin.h:48:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_permutex2var_epi8(arg___U: __mmask64, arg___A: __m512i, arg___I: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmiintrin.h:59:19: warning: TODO implement function '__builtin_ia32_permvarqi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmiintrin.h:57:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutexvar_epi8(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmiintrin.h:66:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmiintrin.h:63:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_permutexvar_epi8(arg___M: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmiintrin.h:75:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmiintrin.h:72:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_permutexvar_epi8(arg___W: __m512i, arg___M: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmiintrin.h:83:19: warning: TODO implement function '__builtin_ia32_vpmultishiftqb512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmiintrin.h:81:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_multishift_epi64_epi8(arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmiintrin.h:90:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmiintrin.h:87:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_multishift_epi64_epi8(arg___W: __m512i, arg___M: __mmask64, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmiintrin.h:98:19: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmiintrin.h:96:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_multishift_epi64_epi8(arg___M: __mmask64, arg___X: __m512i, arg___Y: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:30:19: warning: TODO implement function '__builtin_ia32_vpermi2varqi128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:28:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_permutex2var_epi8(arg___A: __m128i, arg___I: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:39:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:36:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_permutex2var_epi8(arg___A: __m128i, arg___U: __mmask16, arg___I: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:48:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:45:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask2_permutex2var_epi8(arg___A: __m128i, arg___I: __m128i, arg___U: __mmask16, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:57:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:54:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_permutex2var_epi8(arg___U: __mmask16, arg___A: __m128i, arg___I: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:65:19: warning: TODO implement function '__builtin_ia32_vpermi2varqi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:63:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutex2var_epi8(arg___A: __m256i, arg___I: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:73:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:70:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_permutex2var_epi8(arg___A: __m256i, arg___U: __mmask32, arg___I: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:82:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:79:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask2_permutex2var_epi8(arg___A: __m256i, arg___I: __m256i, arg___U: __mmask32, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:91:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:88:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_permutex2var_epi8(arg___U: __mmask32, arg___A: __m256i, arg___I: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:99:19: warning: TODO implement function '__builtin_ia32_permvarqi128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:97:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_permutexvar_epi8(arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:105:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:103:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_permutexvar_epi8(arg___M: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:114:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:111:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_permutexvar_epi8(arg___W: __m128i, arg___M: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:122:19: warning: TODO implement function '__builtin_ia32_permvarqi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:120:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutexvar_epi8(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:129:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:126:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_permutexvar_epi8(arg___M: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:138:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:135:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_permutexvar_epi8(arg___W: __m256i, arg___M: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:146:19: warning: TODO implement function '__builtin_ia32_vpmultishiftqb128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:144:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_multishift_epi64_epi8(arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:153:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:150:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_multishift_epi64_epi8(arg___W: __m128i, arg___M: __mmask16, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:161:19: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:159:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_multishift_epi64_epi8(arg___M: __mmask16, arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:169:19: warning: TODO implement function '__builtin_ia32_vpmultishiftqb256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:167:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_multishift_epi64_epi8(arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:176:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:173:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_multishift_epi64_epi8(arg___W: __m256i, arg___M: __mmask32, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vbmivlintrin.h:184:19: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmivlintrin.h:182:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_multishift_epi64_epi8(arg___M: __mmask32, arg___X: __m256i, arg___Y: __m256i) __m256i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:24:20: warning: TODO implement function '__builtin_ia32_compresshi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:22:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_compress_epi16(arg___S: __m512i, arg___U: __mmask32, arg___D: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:32:20: warning: TODO implement function '__builtin_ia32_compresshi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:30:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_compress_epi16(arg___U: __mmask32, arg___D: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:40:20: warning: TODO implement function '__builtin_ia32_compressqi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:38:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_compress_epi8(arg___S: __m512i, arg___U: __mmask64, arg___D: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:48:20: warning: TODO implement function '__builtin_ia32_compressqi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:46:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_compress_epi8(arg___U: __mmask64, arg___D: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:56:3: warning: TODO implement function '__builtin_ia32_compressstorehi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:54:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_compressstoreu_epi16(arg___P_1: ?*anyopaque, arg___U: __mmask32, arg___D: __m512i) void;
// /usr/lib/zig/include/avx512vbmi2intrin.h:63:3: warning: TODO implement function '__builtin_ia32_compressstoreqi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:61:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_compressstoreu_epi8(arg___P_1: ?*anyopaque, arg___U: __mmask64, arg___D: __m512i) void;
// /usr/lib/zig/include/avx512vbmi2intrin.h:70:20: warning: TODO implement function '__builtin_ia32_expandhi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:68:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_expand_epi16(arg___S: __m512i, arg___U: __mmask32, arg___D: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:78:20: warning: TODO implement function '__builtin_ia32_expandhi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:76:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_expand_epi16(arg___U: __mmask32, arg___D: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:86:20: warning: TODO implement function '__builtin_ia32_expandqi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:84:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_expand_epi8(arg___S: __m512i, arg___U: __mmask64, arg___D: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:94:20: warning: TODO implement function '__builtin_ia32_expandqi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:92:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_expand_epi8(arg___U: __mmask64, arg___D: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:102:20: warning: TODO implement function '__builtin_ia32_expandloadhi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:100:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_expandloadu_epi16(arg___S: __m512i, arg___U: __mmask32, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:110:20: warning: TODO implement function '__builtin_ia32_expandloadhi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:108:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_expandloadu_epi16(arg___U: __mmask32, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:118:20: warning: TODO implement function '__builtin_ia32_expandloadqi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:116:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_expandloadu_epi8(arg___S: __m512i, arg___U: __mmask64, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:126:20: warning: TODO implement function '__builtin_ia32_expandloadqi512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:124:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_expandloadu_epi8(arg___U: __mmask64, arg___P_1: ?*const anyopaque) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:218:19: warning: TODO implement function '__builtin_ia32_vpshldvq512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:216:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_shldv_epi64(arg___A: __m512i, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:225:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:223:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_shldv_epi64(arg___A: __m512i, arg___U: __mmask8, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:233:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:231:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_shldv_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:241:19: warning: TODO implement function '__builtin_ia32_vpshldvd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:239:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_shldv_epi32(arg___A: __m512i, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:248:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:246:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_shldv_epi32(arg___A: __m512i, arg___U: __mmask16, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:256:19: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:254:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_shldv_epi32(arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:264:19: warning: TODO implement function '__builtin_ia32_vpshldvw512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:262:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_shldv_epi16(arg___A: __m512i, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:271:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:269:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_shldv_epi16(arg___A: __m512i, arg___U: __mmask32, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:279:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:277:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_shldv_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:287:19: warning: TODO implement function '__builtin_ia32_vpshrdvq512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:285:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_shrdv_epi64(arg___A: __m512i, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:294:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:292:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_shrdv_epi64(arg___A: __m512i, arg___U: __mmask8, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:302:19: warning: TODO implement function '__builtin_ia32_selectq_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:300:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_shrdv_epi64(arg___U: __mmask8, arg___A: __m512i, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:310:19: warning: TODO implement function '__builtin_ia32_vpshrdvd512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:308:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_shrdv_epi32(arg___A: __m512i, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:317:20: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:315:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_shrdv_epi32(arg___A: __m512i, arg___U: __mmask16, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:325:20: warning: TODO implement function '__builtin_ia32_selectd_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:323:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_shrdv_epi32(arg___U: __mmask16, arg___A: __m512i, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:333:19: warning: TODO implement function '__builtin_ia32_vpshrdvw512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:331:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_shrdv_epi16(arg___A: __m512i, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:340:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:338:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_shrdv_epi16(arg___A: __m512i, arg___U: __mmask32, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vbmi2intrin.h:348:19: warning: TODO implement function '__builtin_ia32_selectw_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vbmi2intrin.h:346:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_shrdv_epi16(arg___U: __mmask32, arg___A: __m512i, arg___B: __m512i, arg___C: __m512i) __m512i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:30:20: warning: TODO implement function '__builtin_ia32_compresshi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:28:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_compress_epi16(arg___S: __m128i, arg___U: __mmask8, arg___D: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:38:20: warning: TODO implement function '__builtin_ia32_compresshi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:36:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_compress_epi16(arg___U: __mmask8, arg___D: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:46:20: warning: TODO implement function '__builtin_ia32_compressqi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:44:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_compress_epi8(arg___S: __m128i, arg___U: __mmask16, arg___D: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:54:20: warning: TODO implement function '__builtin_ia32_compressqi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:52:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_compress_epi8(arg___U: __mmask16, arg___D: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:62:3: warning: TODO implement function '__builtin_ia32_compressstorehi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:60:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_compressstoreu_epi16(arg___P_1: ?*anyopaque, arg___U: __mmask8, arg___D: __m128i) void;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:69:3: warning: TODO implement function '__builtin_ia32_compressstoreqi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:67:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_compressstoreu_epi8(arg___P_1: ?*anyopaque, arg___U: __mmask16, arg___D: __m128i) void;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:76:20: warning: TODO implement function '__builtin_ia32_expandhi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:74:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_expand_epi16(arg___S: __m128i, arg___U: __mmask8, arg___D: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:84:20: warning: TODO implement function '__builtin_ia32_expandhi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:82:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_expand_epi16(arg___U: __mmask8, arg___D: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:92:20: warning: TODO implement function '__builtin_ia32_expandqi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:90:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_expand_epi8(arg___S: __m128i, arg___U: __mmask16, arg___D: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:100:20: warning: TODO implement function '__builtin_ia32_expandqi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:98:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_expand_epi8(arg___U: __mmask16, arg___D: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:108:20: warning: TODO implement function '__builtin_ia32_expandloadhi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:106:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_expandloadu_epi16(arg___S: __m128i, arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:116:20: warning: TODO implement function '__builtin_ia32_expandloadhi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:114:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_expandloadu_epi16(arg___U: __mmask8, arg___P_1: ?*const anyopaque) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:124:20: warning: TODO implement function '__builtin_ia32_expandloadqi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:122:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_expandloadu_epi8(arg___S: __m128i, arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:132:20: warning: TODO implement function '__builtin_ia32_expandloadqi128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:130:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_expandloadu_epi8(arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:140:20: warning: TODO implement function '__builtin_ia32_compresshi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:138:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_compress_epi16(arg___S: __m256i, arg___U: __mmask16, arg___D: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:148:20: warning: TODO implement function '__builtin_ia32_compresshi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:146:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_compress_epi16(arg___U: __mmask16, arg___D: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:156:20: warning: TODO implement function '__builtin_ia32_compressqi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:154:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_compress_epi8(arg___S: __m256i, arg___U: __mmask32, arg___D: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:164:20: warning: TODO implement function '__builtin_ia32_compressqi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:162:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_compress_epi8(arg___U: __mmask32, arg___D: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:172:3: warning: TODO implement function '__builtin_ia32_compressstorehi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:170:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_compressstoreu_epi16(arg___P_1: ?*anyopaque, arg___U: __mmask16, arg___D: __m256i) void;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:179:3: warning: TODO implement function '__builtin_ia32_compressstoreqi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:177:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_compressstoreu_epi8(arg___P_1: ?*anyopaque, arg___U: __mmask32, arg___D: __m256i) void;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:186:20: warning: TODO implement function '__builtin_ia32_expandhi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:184:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_expand_epi16(arg___S: __m256i, arg___U: __mmask16, arg___D: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:194:20: warning: TODO implement function '__builtin_ia32_expandhi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:192:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_expand_epi16(arg___U: __mmask16, arg___D: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:202:20: warning: TODO implement function '__builtin_ia32_expandqi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:200:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_expand_epi8(arg___S: __m256i, arg___U: __mmask32, arg___D: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:210:20: warning: TODO implement function '__builtin_ia32_expandqi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:208:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_expand_epi8(arg___U: __mmask32, arg___D: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:218:20: warning: TODO implement function '__builtin_ia32_expandloadhi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:216:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_expandloadu_epi16(arg___S: __m256i, arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:226:20: warning: TODO implement function '__builtin_ia32_expandloadhi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:224:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_expandloadu_epi16(arg___U: __mmask16, arg___P_1: ?*const anyopaque) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:234:20: warning: TODO implement function '__builtin_ia32_expandloadqi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:232:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_expandloadu_epi8(arg___S: __m256i, arg___U: __mmask32, arg___P_1: ?*const anyopaque) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:242:20: warning: TODO implement function '__builtin_ia32_expandloadqi256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:240:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_expandloadu_epi8(arg___U: __mmask32, arg___P_1: ?*const anyopaque) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:418:19: warning: TODO implement function '__builtin_ia32_vpshldvq256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:416:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_shldv_epi64(arg___A: __m256i, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:425:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:423:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_shldv_epi64(arg___A: __m256i, arg___U: __mmask8, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:433:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:431:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_shldv_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:441:19: warning: TODO implement function '__builtin_ia32_vpshldvq128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:439:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_shldv_epi64(arg___A: __m128i, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:448:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:446:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_shldv_epi64(arg___A: __m128i, arg___U: __mmask8, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:456:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:454:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_shldv_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:464:19: warning: TODO implement function '__builtin_ia32_vpshldvd256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:462:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_shldv_epi32(arg___A: __m256i, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:471:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:469:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_shldv_epi32(arg___A: __m256i, arg___U: __mmask8, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:479:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:477:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_shldv_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:487:19: warning: TODO implement function '__builtin_ia32_vpshldvd128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:485:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_shldv_epi32(arg___A: __m128i, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:494:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:492:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_shldv_epi32(arg___A: __m128i, arg___U: __mmask8, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:502:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:500:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_shldv_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:510:19: warning: TODO implement function '__builtin_ia32_vpshldvw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:508:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_shldv_epi16(arg___A: __m256i, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:517:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:515:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_shldv_epi16(arg___A: __m256i, arg___U: __mmask16, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:525:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:523:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_shldv_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:533:19: warning: TODO implement function '__builtin_ia32_vpshldvw128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:531:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_shldv_epi16(arg___A: __m128i, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:540:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:538:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_shldv_epi16(arg___A: __m128i, arg___U: __mmask8, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:548:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:546:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_shldv_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:556:19: warning: TODO implement function '__builtin_ia32_vpshrdvq256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:554:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_shrdv_epi64(arg___A: __m256i, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:563:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:561:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_shrdv_epi64(arg___A: __m256i, arg___U: __mmask8, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:571:19: warning: TODO implement function '__builtin_ia32_selectq_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:569:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_shrdv_epi64(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:579:19: warning: TODO implement function '__builtin_ia32_vpshrdvq128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:577:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_shrdv_epi64(arg___A: __m128i, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:586:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:584:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_shrdv_epi64(arg___A: __m128i, arg___U: __mmask8, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:594:19: warning: TODO implement function '__builtin_ia32_selectq_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:592:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_shrdv_epi64(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:602:19: warning: TODO implement function '__builtin_ia32_vpshrdvd256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:600:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_shrdv_epi32(arg___A: __m256i, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:609:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:607:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_shrdv_epi32(arg___A: __m256i, arg___U: __mmask8, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:617:19: warning: TODO implement function '__builtin_ia32_selectd_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:615:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_shrdv_epi32(arg___U: __mmask8, arg___A: __m256i, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:625:19: warning: TODO implement function '__builtin_ia32_vpshrdvd128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:623:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_shrdv_epi32(arg___A: __m128i, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:632:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:630:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_shrdv_epi32(arg___A: __m128i, arg___U: __mmask8, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:640:19: warning: TODO implement function '__builtin_ia32_selectd_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:638:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_shrdv_epi32(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:648:19: warning: TODO implement function '__builtin_ia32_vpshrdvw256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:646:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_shrdv_epi16(arg___A: __m256i, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:655:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:653:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_shrdv_epi16(arg___A: __m256i, arg___U: __mmask16, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:663:19: warning: TODO implement function '__builtin_ia32_selectw_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:661:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_shrdv_epi16(arg___U: __mmask16, arg___A: __m256i, arg___B: __m256i, arg___C: __m256i) __m256i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:671:19: warning: TODO implement function '__builtin_ia32_vpshrdvw128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:669:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_shrdv_epi16(arg___A: __m128i, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:678:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:676:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_shrdv_epi16(arg___A: __m128i, arg___U: __mmask8, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:686:19: warning: TODO implement function '__builtin_ia32_selectw_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvbmi2intrin.h:684:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_shrdv_epi16(arg___U: __mmask8, arg___A: __m128i, arg___B: __m128i, arg___C: __m128i) __m128i;
pub const __v32hf = @Vector(32, f16);
pub const __m512h = @Vector(32, f16);
pub const __m512h_u = @Vector(32, f16);
pub inline fn _mm512_cvtsh_h(arg___a: __m512h) f16 {
    var __a = arg___a;
    _ = &__a;
    return __a[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm_setzero_ph() __m128h {
    return blk: {
        const tmp = @as(f16, @intFromFloat(0.0));
        const tmp_1 = @as(f16, @intFromFloat(0.0));
        const tmp_2 = @as(f16, @intFromFloat(0.0));
        const tmp_3 = @as(f16, @intFromFloat(0.0));
        const tmp_4 = @as(f16, @intFromFloat(0.0));
        const tmp_5 = @as(f16, @intFromFloat(0.0));
        const tmp_6 = @as(f16, @intFromFloat(0.0));
        const tmp_7 = @as(f16, @intFromFloat(0.0));
        break :blk __m128h{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    };
}
pub inline fn _mm256_setzero_ph() __m256h {
    return blk: {
        const tmp = @as(f16, @intFromFloat(0.0));
        const tmp_1 = @as(f16, @intFromFloat(0.0));
        const tmp_2 = @as(f16, @intFromFloat(0.0));
        const tmp_3 = @as(f16, @intFromFloat(0.0));
        const tmp_4 = @as(f16, @intFromFloat(0.0));
        const tmp_5 = @as(f16, @intFromFloat(0.0));
        const tmp_6 = @as(f16, @intFromFloat(0.0));
        const tmp_7 = @as(f16, @intFromFloat(0.0));
        const tmp_8 = @as(f16, @intFromFloat(0.0));
        const tmp_9 = @as(f16, @intFromFloat(0.0));
        const tmp_10 = @as(f16, @intFromFloat(0.0));
        const tmp_11 = @as(f16, @intFromFloat(0.0));
        const tmp_12 = @as(f16, @intFromFloat(0.0));
        const tmp_13 = @as(f16, @intFromFloat(0.0));
        const tmp_14 = @as(f16, @intFromFloat(0.0));
        const tmp_15 = @as(f16, @intFromFloat(0.0));
        break :blk __m256h{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    };
}
// /usr/lib/zig/include/avx512fp16intrin.h:50:19: warning: TODO implement function '__builtin_ia32_undef256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:49:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_undefined_ph() __m256h;
pub inline fn _mm512_setzero_ph() __m512h {
    return blk: {
        const tmp = @as(f16, @intFromFloat(0.0));
        const tmp_1 = @as(f16, @intFromFloat(0.0));
        const tmp_2 = @as(f16, @intFromFloat(0.0));
        const tmp_3 = @as(f16, @intFromFloat(0.0));
        const tmp_4 = @as(f16, @intFromFloat(0.0));
        const tmp_5 = @as(f16, @intFromFloat(0.0));
        const tmp_6 = @as(f16, @intFromFloat(0.0));
        const tmp_7 = @as(f16, @intFromFloat(0.0));
        const tmp_8 = @as(f16, @intFromFloat(0.0));
        const tmp_9 = @as(f16, @intFromFloat(0.0));
        const tmp_10 = @as(f16, @intFromFloat(0.0));
        const tmp_11 = @as(f16, @intFromFloat(0.0));
        const tmp_12 = @as(f16, @intFromFloat(0.0));
        const tmp_13 = @as(f16, @intFromFloat(0.0));
        const tmp_14 = @as(f16, @intFromFloat(0.0));
        const tmp_15 = @as(f16, @intFromFloat(0.0));
        const tmp_16 = @as(f16, @intFromFloat(0.0));
        const tmp_17 = @as(f16, @intFromFloat(0.0));
        const tmp_18 = @as(f16, @intFromFloat(0.0));
        const tmp_19 = @as(f16, @intFromFloat(0.0));
        const tmp_20 = @as(f16, @intFromFloat(0.0));
        const tmp_21 = @as(f16, @intFromFloat(0.0));
        const tmp_22 = @as(f16, @intFromFloat(0.0));
        const tmp_23 = @as(f16, @intFromFloat(0.0));
        const tmp_24 = @as(f16, @intFromFloat(0.0));
        const tmp_25 = @as(f16, @intFromFloat(0.0));
        const tmp_26 = @as(f16, @intFromFloat(0.0));
        const tmp_27 = @as(f16, @intFromFloat(0.0));
        const tmp_28 = @as(f16, @intFromFloat(0.0));
        const tmp_29 = @as(f16, @intFromFloat(0.0));
        const tmp_30 = @as(f16, @intFromFloat(0.0));
        const tmp_31 = @as(f16, @intFromFloat(0.0));
        break :blk __m512h{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
            tmp_16,
            tmp_17,
            tmp_18,
            tmp_19,
            tmp_20,
            tmp_21,
            tmp_22,
            tmp_23,
            tmp_24,
            tmp_25,
            tmp_26,
            tmp_27,
            tmp_28,
            tmp_29,
            tmp_30,
            tmp_31,
        };
    };
}
// /usr/lib/zig/include/avx512fp16intrin.h:60:19: warning: TODO implement function '__builtin_ia32_undef128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:59:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_undefined_ph() __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:64:19: warning: TODO implement function '__builtin_ia32_undef512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:63:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_undefined_ph() __m512h;
pub inline fn _mm512_set1_ph(arg___h: f16) __m512h {
    var __h = arg___h;
    _ = &__h;
    return @as(__m512h, @bitCast(blk: {
        const tmp = __h;
        const tmp_1 = __h;
        const tmp_2 = __h;
        const tmp_3 = __h;
        const tmp_4 = __h;
        const tmp_5 = __h;
        const tmp_6 = __h;
        const tmp_7 = __h;
        const tmp_8 = __h;
        const tmp_9 = __h;
        const tmp_10 = __h;
        const tmp_11 = __h;
        const tmp_12 = __h;
        const tmp_13 = __h;
        const tmp_14 = __h;
        const tmp_15 = __h;
        const tmp_16 = __h;
        const tmp_17 = __h;
        const tmp_18 = __h;
        const tmp_19 = __h;
        const tmp_20 = __h;
        const tmp_21 = __h;
        const tmp_22 = __h;
        const tmp_23 = __h;
        const tmp_24 = __h;
        const tmp_25 = __h;
        const tmp_26 = __h;
        const tmp_27 = __h;
        const tmp_28 = __h;
        const tmp_29 = __h;
        const tmp_30 = __h;
        const tmp_31 = __h;
        break :blk __v32hf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
            tmp_16,
            tmp_17,
            tmp_18,
            tmp_19,
            tmp_20,
            tmp_21,
            tmp_22,
            tmp_23,
            tmp_24,
            tmp_25,
            tmp_26,
            tmp_27,
            tmp_28,
            tmp_29,
            tmp_30,
            tmp_31,
        };
    }));
}
pub inline fn _mm512_set_ph(arg___h1: f16, arg___h2: f16, arg___h3: f16, arg___h4: f16, arg___h5: f16, arg___h6: f16, arg___h7: f16, arg___h8: f16, arg___h9: f16, arg___h10: f16, arg___h11: f16, arg___h12: f16, arg___h13: f16, arg___h14: f16, arg___h15: f16, arg___h16: f16, arg___h17: f16, arg___h18: f16, arg___h19: f16, arg___h20: f16, arg___h21: f16, arg___h22: f16, arg___h23: f16, arg___h24: f16, arg___h25: f16, arg___h26: f16, arg___h27: f16, arg___h28: f16, arg___h29: f16, arg___h30: f16, arg___h31: f16, arg___h32: f16) __m512h {
    var __h1 = arg___h1;
    _ = &__h1;
    var __h2 = arg___h2;
    _ = &__h2;
    var __h3 = arg___h3;
    _ = &__h3;
    var __h4 = arg___h4;
    _ = &__h4;
    var __h5 = arg___h5;
    _ = &__h5;
    var __h6 = arg___h6;
    _ = &__h6;
    var __h7 = arg___h7;
    _ = &__h7;
    var __h8 = arg___h8;
    _ = &__h8;
    var __h9 = arg___h9;
    _ = &__h9;
    var __h10 = arg___h10;
    _ = &__h10;
    var __h11 = arg___h11;
    _ = &__h11;
    var __h12 = arg___h12;
    _ = &__h12;
    var __h13 = arg___h13;
    _ = &__h13;
    var __h14 = arg___h14;
    _ = &__h14;
    var __h15 = arg___h15;
    _ = &__h15;
    var __h16 = arg___h16;
    _ = &__h16;
    var __h17 = arg___h17;
    _ = &__h17;
    var __h18 = arg___h18;
    _ = &__h18;
    var __h19 = arg___h19;
    _ = &__h19;
    var __h20 = arg___h20;
    _ = &__h20;
    var __h21 = arg___h21;
    _ = &__h21;
    var __h22 = arg___h22;
    _ = &__h22;
    var __h23 = arg___h23;
    _ = &__h23;
    var __h24 = arg___h24;
    _ = &__h24;
    var __h25 = arg___h25;
    _ = &__h25;
    var __h26 = arg___h26;
    _ = &__h26;
    var __h27 = arg___h27;
    _ = &__h27;
    var __h28 = arg___h28;
    _ = &__h28;
    var __h29 = arg___h29;
    _ = &__h29;
    var __h30 = arg___h30;
    _ = &__h30;
    var __h31 = arg___h31;
    _ = &__h31;
    var __h32 = arg___h32;
    _ = &__h32;
    return @as(__m512h, @bitCast(blk: {
        const tmp = __h32;
        const tmp_1 = __h31;
        const tmp_2 = __h30;
        const tmp_3 = __h29;
        const tmp_4 = __h28;
        const tmp_5 = __h27;
        const tmp_6 = __h26;
        const tmp_7 = __h25;
        const tmp_8 = __h24;
        const tmp_9 = __h23;
        const tmp_10 = __h22;
        const tmp_11 = __h21;
        const tmp_12 = __h20;
        const tmp_13 = __h19;
        const tmp_14 = __h18;
        const tmp_15 = __h17;
        const tmp_16 = __h16;
        const tmp_17 = __h15;
        const tmp_18 = __h14;
        const tmp_19 = __h13;
        const tmp_20 = __h12;
        const tmp_21 = __h11;
        const tmp_22 = __h10;
        const tmp_23 = __h9;
        const tmp_24 = __h8;
        const tmp_25 = __h7;
        const tmp_26 = __h6;
        const tmp_27 = __h5;
        const tmp_28 = __h4;
        const tmp_29 = __h3;
        const tmp_30 = __h2;
        const tmp_31 = __h1;
        break :blk __v32hf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
            tmp_16,
            tmp_17,
            tmp_18,
            tmp_19,
            tmp_20,
            tmp_21,
            tmp_22,
            tmp_23,
            tmp_24,
            tmp_25,
            tmp_26,
            tmp_27,
            tmp_28,
            tmp_29,
            tmp_30,
            tmp_31,
        };
    }));
}
// /usr/lib/zig/include/avx512fp16intrin.h:99:1: warning: unsupported type: 'Complex'
pub const _mm512_set1_pch = @compileError("unable to resolve prototype of function");
// /usr/lib/zig/include/avx512fp16intrin.h:99:1
pub inline fn _mm_castph_ps(arg___a: __m128h) __m128 {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128, @bitCast(__a));
}
pub inline fn _mm256_castph_ps(arg___a: __m256h) __m256 {
    var __a = arg___a;
    _ = &__a;
    return @as(__m256, @bitCast(__a));
}
pub inline fn _mm512_castph_ps(arg___a: __m512h) __m512 {
    var __a = arg___a;
    _ = &__a;
    return @as(__m512, @bitCast(__a));
}
pub inline fn _mm_castph_pd(arg___a: __m128h) __m128d {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128d, @bitCast(__a));
}
pub inline fn _mm256_castph_pd(arg___a: __m256h) __m256d {
    var __a = arg___a;
    _ = &__a;
    return @as(__m256d, @bitCast(__a));
}
pub inline fn _mm512_castph_pd(arg___a: __m512h) __m512d {
    var __a = arg___a;
    _ = &__a;
    return @as(__m512d, @bitCast(__a));
}
pub inline fn _mm_castph_si128(arg___a: __m128h) __m128i {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128i, @bitCast(__a));
}
pub inline fn _mm256_castph_si256(arg___a: __m256h) __m256i {
    var __a = arg___a;
    _ = &__a;
    return @as(__m256i, @bitCast(__a));
}
pub inline fn _mm512_castph_si512(arg___a: __m512h) __m512i {
    var __a = arg___a;
    _ = &__a;
    return @as(__m512i, @bitCast(__a));
}
pub inline fn _mm_castps_ph(arg___a: __m128) __m128h {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128h, @bitCast(__a));
}
pub inline fn _mm256_castps_ph(arg___a: __m256) __m256h {
    var __a = arg___a;
    _ = &__a;
    return @as(__m256h, @bitCast(__a));
}
pub inline fn _mm512_castps_ph(arg___a: __m512) __m512h {
    var __a = arg___a;
    _ = &__a;
    return @as(__m512h, @bitCast(__a));
}
pub inline fn _mm_castpd_ph(arg___a: __m128d) __m128h {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128h, @bitCast(__a));
}
pub inline fn _mm256_castpd_ph(arg___a: __m256d) __m256h {
    var __a = arg___a;
    _ = &__a;
    return @as(__m256h, @bitCast(__a));
}
pub inline fn _mm512_castpd_ph(arg___a: __m512d) __m512h {
    var __a = arg___a;
    _ = &__a;
    return @as(__m512h, @bitCast(__a));
}
pub inline fn _mm_castsi128_ph(arg___a: __m128i) __m128h {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128h, @bitCast(__a));
}
pub inline fn _mm256_castsi256_ph(arg___a: __m256i) __m256h {
    var __a = arg___a;
    _ = &__a;
    return @as(__m256h, @bitCast(__a));
}
pub inline fn _mm512_castsi512_ph(arg___a: __m512i) __m512h {
    var __a = arg___a;
    _ = &__a;
    return @as(__m512h, @bitCast(__a));
}
pub inline fn _mm256_castph256_ph128(arg___a: __m256h) __m128h {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(__a)).Vector.child, __a, __a, @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(__a)).Vector.len),
    });
}
pub inline fn _mm512_castph512_ph128(arg___a: __m512h) __m128h {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(__a)).Vector.child, __a, __a, @Vector(8, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(__a)).Vector.len),
    });
}
pub inline fn _mm512_castph512_ph256(arg___a: __m512h) __m256h {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(__a)).Vector.child, __a, __a, @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(__a)).Vector.len),
    });
}
// /usr/lib/zig/include/avx512fp16intrin.h:197:39: warning: TODO implement function '__builtin_nondeterministic_value' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:196:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_castph128_ph256(arg___a: __m128h) __m256h;
// /usr/lib/zig/include/avx512fp16intrin.h:203:17: warning: TODO implement function '__builtin_nondeterministic_value' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:202:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_castph128_ph512(arg___a: __m128h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:213:39: warning: TODO implement function '__builtin_nondeterministic_value' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:212:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_castph256_ph512(arg___a: __m256h) __m512h;
pub inline fn _mm256_zextph128_ph256(arg___a: __m128h) __m256h {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(__a)).Vector.child, __a, @as(__v8hf, @bitCast(_mm_setzero_ph())), @Vector(16, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(__a)).Vector.len),
    });
}
pub inline fn _mm512_zextph128_ph512(arg___a: __m128h) __m512h {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(__a)).Vector.child, __a, @as(__v8hf, @bitCast(_mm_setzero_ph())), @Vector(32, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(__a)).Vector.len),
    });
}
pub inline fn _mm512_zextph256_ph512(arg___a: __m256h) __m512h {
    var __a = arg___a;
    _ = &__a;
    return @shuffle(@typeInfo(@TypeOf(__a)).Vector.child, __a, @as(__v16hf, @bitCast(_mm256_setzero_ph())), @Vector(32, i32){
        @import("std").zig.c_translation.shuffleVectorIndex(0, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(1, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(2, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(3, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(4, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(5, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(6, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(7, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(8, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(9, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(10, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(11, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(12, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(13, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(14, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(15, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(16, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(17, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(18, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(19, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(20, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(21, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(22, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(23, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(24, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(25, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(26, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(27, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(28, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(29, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(30, @typeInfo(@TypeOf(__a)).Vector.len),
        @import("std").zig.c_translation.shuffleVectorIndex(31, @typeInfo(@TypeOf(__a)).Vector.len),
    });
}
// /usr/lib/zig/include/avx512fp16intrin.h:287:10: warning: TODO implement function '__builtin_ia32_vcomish' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:285:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_comieq_sh(arg_A: __m128h, arg_B: __m128h) c_int;
// /usr/lib/zig/include/avx512fp16intrin.h:293:10: warning: TODO implement function '__builtin_ia32_vcomish' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:291:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_comilt_sh(arg_A: __m128h, arg_B: __m128h) c_int;
// /usr/lib/zig/include/avx512fp16intrin.h:299:10: warning: TODO implement function '__builtin_ia32_vcomish' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:297:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_comile_sh(arg_A: __m128h, arg_B: __m128h) c_int;
// /usr/lib/zig/include/avx512fp16intrin.h:305:10: warning: TODO implement function '__builtin_ia32_vcomish' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:303:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_comigt_sh(arg_A: __m128h, arg_B: __m128h) c_int;
// /usr/lib/zig/include/avx512fp16intrin.h:311:10: warning: TODO implement function '__builtin_ia32_vcomish' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:309:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_comige_sh(arg_A: __m128h, arg_B: __m128h) c_int;
// /usr/lib/zig/include/avx512fp16intrin.h:317:10: warning: TODO implement function '__builtin_ia32_vcomish' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:315:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_comineq_sh(arg_A: __m128h, arg_B: __m128h) c_int;
// /usr/lib/zig/include/avx512fp16intrin.h:323:10: warning: TODO implement function '__builtin_ia32_vcomish' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:321:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomieq_sh(arg_A: __m128h, arg_B: __m128h) c_int;
// /usr/lib/zig/include/avx512fp16intrin.h:329:10: warning: TODO implement function '__builtin_ia32_vcomish' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:327:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomilt_sh(arg_A: __m128h, arg_B: __m128h) c_int;
// /usr/lib/zig/include/avx512fp16intrin.h:335:10: warning: TODO implement function '__builtin_ia32_vcomish' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:333:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomile_sh(arg_A: __m128h, arg_B: __m128h) c_int;
// /usr/lib/zig/include/avx512fp16intrin.h:341:10: warning: TODO implement function '__builtin_ia32_vcomish' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:339:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomigt_sh(arg_A: __m128h, arg_B: __m128h) c_int;
// /usr/lib/zig/include/avx512fp16intrin.h:347:10: warning: TODO implement function '__builtin_ia32_vcomish' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:345:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomige_sh(arg_A: __m128h, arg_B: __m128h) c_int;
// /usr/lib/zig/include/avx512fp16intrin.h:353:10: warning: TODO implement function '__builtin_ia32_vcomish' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:351:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_ucomineq_sh(arg_A: __m128h, arg_B: __m128h) c_int;
pub inline fn _mm512_add_ph(arg___A: __m512h, arg___B: __m512h) __m512h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512h, @bitCast(@as(__v32hf, @bitCast(__A)) + @as(__v32hf, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512fp16intrin.h:364:19: warning: TODO implement function '__builtin_ia32_selectph_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:363:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_add_ph(arg___W: __m512h, arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:370:19: warning: TODO implement function '__builtin_ia32_selectph_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:369:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_add_ph(arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h) __m512h;
pub inline fn _mm512_sub_ph(arg___A: __m512h, arg___B: __m512h) __m512h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512h, @bitCast(@as(__v32hf, @bitCast(__A)) - @as(__v32hf, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512fp16intrin.h:396:19: warning: TODO implement function '__builtin_ia32_selectph_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:395:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sub_ph(arg___W: __m512h, arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:402:19: warning: TODO implement function '__builtin_ia32_selectph_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:401:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sub_ph(arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h) __m512h;
pub inline fn _mm512_mul_ph(arg___A: __m512h, arg___B: __m512h) __m512h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512h, @bitCast(@as(__v32hf, @bitCast(__A)) * @as(__v32hf, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512fp16intrin.h:428:19: warning: TODO implement function '__builtin_ia32_selectph_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:427:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_mul_ph(arg___W: __m512h, arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:434:19: warning: TODO implement function '__builtin_ia32_selectph_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:433:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_mul_ph(arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h) __m512h;
pub inline fn _mm512_div_ph(arg___A: __m512h, arg___B: __m512h) __m512h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m512h, @bitCast(@as(__v32hf, @bitCast(__A)) / @as(__v32hf, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512fp16intrin.h:460:19: warning: TODO implement function '__builtin_ia32_selectph_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:459:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_div_ph(arg___W: __m512h, arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:466:19: warning: TODO implement function '__builtin_ia32_selectph_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:465:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_div_ph(arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:487:19: warning: TODO implement function '__builtin_ia32_minph512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:485:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_min_ph(arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:493:19: warning: TODO implement function '__builtin_ia32_selectph_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:492:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_min_ph(arg___W: __m512h, arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:499:19: warning: TODO implement function '__builtin_ia32_selectph_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:498:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_min_ph(arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:520:19: warning: TODO implement function '__builtin_ia32_maxph512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:518:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_max_ph(arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:526:19: warning: TODO implement function '__builtin_ia32_selectph_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:525:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_max_ph(arg___W: __m512h, arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:532:19: warning: TODO implement function '__builtin_ia32_selectph_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:531:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_max_ph(arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h) __m512h;
pub inline fn _mm512_abs_ph(arg___A: __m512h) __m512h {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512h, @bitCast(_mm512_and_epi32(_mm512_set1_epi32(@as(c_int, 2147450879)), @as(__m512i, @bitCast(__A)))));
}
pub inline fn _mm512_conj_pch(arg___A: __m512h) __m512h {
    var __A = arg___A;
    _ = &__A;
    return @as(__m512h, @bitCast(_mm512_xor_ps(@as(__m512, @bitCast(__A)), _mm512_set1_ps(-0.0))));
}
// /usr/lib/zig/include/avx512fp16intrin.h:561:19: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:560:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_conj_pch(arg___W: __m512h, arg___U: __mmask16, arg___A: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:567:19: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:566:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_conj_pch(arg___U: __mmask16, arg___A: __m512h) __m512h;
pub inline fn _mm_add_sh(arg___A: __m128h, arg___B: __m128h) __m128h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    __A[@as(c_uint, @intCast(@as(c_int, 0)))] += __B[@as(c_uint, @intCast(@as(c_int, 0)))];
    return __A;
}
// /usr/lib/zig/include/avx512fp16intrin.h:583:10: warning: TODO implement function '__builtin_ia32_selectsh_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:578:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_add_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:590:10: warning: TODO implement function '__builtin_ia32_selectsh_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:586:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_add_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
pub inline fn _mm_sub_sh(arg___A: __m128h, arg___B: __m128h) __m128h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    __A[@as(c_uint, @intCast(@as(c_int, 0)))] -= __B[@as(c_uint, @intCast(@as(c_int, 0)))];
    return __A;
}
// /usr/lib/zig/include/avx512fp16intrin.h:619:10: warning: TODO implement function '__builtin_ia32_selectsh_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:614:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sub_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:626:10: warning: TODO implement function '__builtin_ia32_selectsh_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:622:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sub_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
pub inline fn _mm_mul_sh(arg___A: __m128h, arg___B: __m128h) __m128h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    __A[@as(c_uint, @intCast(@as(c_int, 0)))] *= __B[@as(c_uint, @intCast(@as(c_int, 0)))];
    return __A;
}
// /usr/lib/zig/include/avx512fp16intrin.h:655:10: warning: TODO implement function '__builtin_ia32_selectsh_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:650:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mul_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:662:10: warning: TODO implement function '__builtin_ia32_selectsh_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:658:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mul_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
pub inline fn _mm_div_sh(arg___A: __m128h, arg___B: __m128h) __m128h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    __A[@as(c_uint, @intCast(@as(c_int, 0)))] /= __B[@as(c_uint, @intCast(@as(c_int, 0)))];
    return __A;
}
// /usr/lib/zig/include/avx512fp16intrin.h:691:10: warning: TODO implement function '__builtin_ia32_selectsh_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:686:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_div_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:698:10: warning: TODO implement function '__builtin_ia32_selectsh_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:694:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_div_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:718:19: warning: TODO implement function '__builtin_ia32_minsh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:716:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_sh(arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:727:19: warning: TODO implement function '__builtin_ia32_minsh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:723:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_min_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:735:19: warning: TODO implement function '__builtin_ia32_minsh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:732:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_min_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:757:19: warning: TODO implement function '__builtin_ia32_maxsh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:755:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_sh(arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:766:19: warning: TODO implement function '__builtin_ia32_maxsh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:762:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_max_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:774:19: warning: TODO implement function '__builtin_ia32_maxsh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:771:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_max_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
pub inline fn _mm_load_sh(arg___dp: ?*const anyopaque) __m128h {
    var __dp = arg___dp;
    _ = &__dp;
    const struct___mm_load_sh_struct = extern struct {
        __u: f16 align(1) = @import("std").mem.zeroes(f16),
    };
    _ = &struct___mm_load_sh_struct;
    var __u: f16 = @as([*c]const struct___mm_load_sh_struct, @ptrCast(@alignCast(__dp))).*.__u;
    _ = &__u;
    return blk: {
        const tmp = __u;
        const tmp_1 = @as(f16, @as(c_int, 0));
        const tmp_2 = @as(f16, @as(c_int, 0));
        const tmp_3 = @as(f16, @as(c_int, 0));
        const tmp_4 = @as(f16, @as(c_int, 0));
        const tmp_5 = @as(f16, @as(c_int, 0));
        const tmp_6 = @as(f16, @as(c_int, 0));
        const tmp_7 = @as(f16, @as(c_int, 0));
        break :blk __m128h{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    };
}
// /usr/lib/zig/include/avx512fp16intrin.h:843:19: warning: TODO implement function '__builtin_ia32_loadsh128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:839:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_load_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: ?*const anyopaque) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:848:19: warning: TODO implement function '__builtin_ia32_loadsh128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:847:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_load_sh(arg___U: __mmask8, arg___A: ?*const anyopaque) __m128h;
pub inline fn _mm512_load_ph(arg___p: ?*const anyopaque) __m512h {
    var __p = arg___p;
    _ = &__p;
    return @as([*c]const __m512h, @ptrCast(@alignCast(__p))).*;
}
pub inline fn _mm256_load_ph(arg___p: ?*const anyopaque) __m256h {
    var __p = arg___p;
    _ = &__p;
    return @as([*c]const __m256h, @ptrCast(@alignCast(__p))).*;
}
pub inline fn _mm_load_ph(arg___p: ?*const anyopaque) __m128h {
    var __p = arg___p;
    _ = &__p;
    return @as([*c]const __m128h, @ptrCast(@alignCast(__p))).*;
}
pub inline fn _mm512_loadu_ph(arg___p: ?*const anyopaque) __m512h {
    var __p = arg___p;
    _ = &__p;
    const struct___loadu_ph = extern struct {
        __v: __m512h_u align(1) = @import("std").mem.zeroes(__m512h_u),
    };
    _ = &struct___loadu_ph;
    return @as([*c]const struct___loadu_ph, @ptrCast(@alignCast(__p))).*.__v;
}
pub inline fn _mm256_loadu_ph(arg___p: ?*const anyopaque) __m256h {
    var __p = arg___p;
    _ = &__p;
    const struct___loadu_ph = extern struct {
        __v: __m256h_u align(1) = @import("std").mem.zeroes(__m256h_u),
    };
    _ = &struct___loadu_ph;
    return @as([*c]const struct___loadu_ph, @ptrCast(@alignCast(__p))).*.__v;
}
pub inline fn _mm_loadu_ph(arg___p: ?*const anyopaque) __m128h {
    var __p = arg___p;
    _ = &__p;
    const struct___loadu_ph = extern struct {
        __v: __m128h_u align(1) = @import("std").mem.zeroes(__m128h_u),
    };
    _ = &struct___loadu_ph;
    return @as([*c]const struct___loadu_ph, @ptrCast(@alignCast(__p))).*.__v;
}
pub inline fn _mm_store_sh(arg___dp: ?*anyopaque, arg___a: __m128h) void {
    var __dp = arg___dp;
    _ = &__dp;
    var __a = arg___a;
    _ = &__a;
    const struct___mm_store_sh_struct = extern struct {
        __u: f16 align(1) = @import("std").mem.zeroes(f16),
    };
    _ = &struct___mm_store_sh_struct;
    @as([*c]struct___mm_store_sh_struct, @ptrCast(@alignCast(__dp))).*.__u = __a[@as(c_uint, @intCast(@as(c_int, 0)))];
}
// /usr/lib/zig/include/avx512fp16intrin.h:901:3: warning: TODO implement function '__builtin_ia32_storesh128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:898:46: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_store_sh(arg___W: ?*anyopaque, arg___U: __mmask8, arg___A: __m128h) void;
pub inline fn _mm512_store_ph(arg___P_1: ?*anyopaque, arg___A: __m512h) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    @as([*c]__m512h, @ptrCast(@alignCast(__P_1))).* = __A;
}
pub inline fn _mm256_store_ph(arg___P_1: ?*anyopaque, arg___A: __m256h) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    @as([*c]__m256h, @ptrCast(@alignCast(__P_1))).* = __A;
}
pub inline fn _mm_store_ph(arg___P_1: ?*anyopaque, arg___A: __m128h) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    @as([*c]__m128h, @ptrCast(@alignCast(__P_1))).* = __A;
}
pub inline fn _mm512_storeu_ph(arg___P_1: ?*anyopaque, arg___A: __m512h) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_ph = extern struct {
        __v: __m512h_u align(1) = @import("std").mem.zeroes(__m512h_u),
    };
    _ = &struct___storeu_ph;
    @as([*c]struct___storeu_ph, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
pub inline fn _mm256_storeu_ph(arg___P_1: ?*anyopaque, arg___A: __m256h) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_ph = extern struct {
        __v: __m256h_u align(1) = @import("std").mem.zeroes(__m256h_u),
    };
    _ = &struct___storeu_ph;
    @as([*c]struct___storeu_ph, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
pub inline fn _mm_storeu_ph(arg___P_1: ?*anyopaque, arg___A: __m128h) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __A = arg___A;
    _ = &__A;
    const struct___storeu_ph = extern struct {
        __v: __m128h_u align(1) = @import("std").mem.zeroes(__m128h_u),
    };
    _ = &struct___storeu_ph;
    @as([*c]struct___storeu_ph, @ptrCast(@alignCast(__P_1))).*.__v = __A;
}
pub inline fn _mm_move_sh(arg___a: __m128h, arg___b: __m128h) __m128h {
    var __a = arg___a;
    _ = &__a;
    var __b = arg___b;
    _ = &__b;
    __a[@as(c_uint, @intCast(@as(c_int, 0)))] = __b[@as(c_uint, @intCast(@as(c_int, 0)))];
    return __a;
}
// /usr/lib/zig/include/avx512fp16intrin.h:954:10: warning: TODO implement function '__builtin_ia32_selectsh_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:950:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_move_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:960:10: warning: TODO implement function '__builtin_ia32_selectsh_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:957:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_move_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
pub inline fn _mm_cvtsi16_si128(arg___a: c_short) __m128i {
    var __a = arg___a;
    _ = &__a;
    return @as(__m128i, @bitCast(blk: {
        const tmp = __a;
        const tmp_1 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_2 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_3 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_4 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_5 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_6 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        const tmp_7 = @as(c_short, @bitCast(@as(c_short, @truncate(@as(c_int, 0)))));
        break :blk __v8hi{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
pub inline fn _mm_cvtsi128_si16(arg___a: __m128i) c_short {
    var __a = arg___a;
    _ = &__a;
    var __b: __v8hi = @as(__v8hi, @bitCast(__a));
    _ = &__b;
    return __b[@as(c_uint, @intCast(@as(c_int, 0)))];
}
// /usr/lib/zig/include/avx512fp16intrin.h:975:19: warning: TODO implement function '__builtin_ia32_rcpph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:974:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_rcp_ph(arg___A: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:981:19: warning: TODO implement function '__builtin_ia32_rcpph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:980:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_rcp_ph(arg___W: __m512h, arg___U: __mmask32, arg___A: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:987:19: warning: TODO implement function '__builtin_ia32_rcpph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:986:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_rcp_ph(arg___U: __mmask32, arg___A: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:992:19: warning: TODO implement function '__builtin_ia32_rsqrtph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:991:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_rsqrt_ph(arg___A: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:998:19: warning: TODO implement function '__builtin_ia32_rsqrtph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:997:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_rsqrt_ph(arg___W: __m512h, arg___U: __mmask32, arg___A: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1004:19: warning: TODO implement function '__builtin_ia32_rsqrtph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1003:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_rsqrt_ph(arg___U: __mmask32, arg___A: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1040:19: warning: TODO implement function '__builtin_ia32_getexpph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1039:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_getexp_ph(arg___A: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1047:19: warning: TODO implement function '__builtin_ia32_getexpph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1046:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_getexp_ph(arg___W: __m512h, arg___U: __mmask32, arg___A: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1053:19: warning: TODO implement function '__builtin_ia32_getexpph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1052:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_getexp_ph(arg___U: __mmask32, arg___A: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1074:19: warning: TODO implement function '__builtin_ia32_scalefph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1072:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_scalef_ph(arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1081:19: warning: TODO implement function '__builtin_ia32_scalefph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1080:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_scalef_ph(arg___W: __m512h, arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1088:19: warning: TODO implement function '__builtin_ia32_scalefph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1087:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_scalef_ph(arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1170:19: warning: TODO implement function '__builtin_ia32_rcpsh_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1168:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_rcp_sh(arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1178:19: warning: TODO implement function '__builtin_ia32_rcpsh_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1174:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rcp_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1185:19: warning: TODO implement function '__builtin_ia32_rcpsh_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1182:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rcp_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1191:19: warning: TODO implement function '__builtin_ia32_rsqrtsh_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1189:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_rsqrt_sh(arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1199:19: warning: TODO implement function '__builtin_ia32_rsqrtsh_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1195:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rsqrt_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1205:19: warning: TODO implement function '__builtin_ia32_rsqrtsh_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1204:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rsqrt_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1246:19: warning: TODO implement function '__builtin_ia32_getexpsh128_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1244:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_getexp_sh(arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1253:19: warning: TODO implement function '__builtin_ia32_getexpsh128_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1252:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_getexp_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1265:19: warning: TODO implement function '__builtin_ia32_getexpsh128_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1264:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_getexp_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1282:19: warning: TODO implement function '__builtin_ia32_scalefsh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1280:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_scalef_sh(arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1289:19: warning: TODO implement function '__builtin_ia32_scalefsh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1288:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_scalef_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1301:19: warning: TODO implement function '__builtin_ia32_scalefsh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1300:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_scalef_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1385:19: warning: TODO implement function '__builtin_ia32_sqrtph512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1384:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_sqrt_ph(arg___A: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1391:19: warning: TODO implement function '__builtin_ia32_selectph_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1390:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_sqrt_ph(arg___W: __m512h, arg___U: __mmask32, arg___A: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1399:19: warning: TODO implement function '__builtin_ia32_selectph_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1398:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_sqrt_ph(arg___U: __mmask32, arg___A: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1422:19: warning: TODO implement function '__builtin_ia32_sqrtsh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1420:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_sqrt_sh(arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1431:19: warning: TODO implement function '__builtin_ia32_sqrtsh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1427:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sqrt_sh(arg___W: __m128h, arg___U: __mmask32, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1439:19: warning: TODO implement function '__builtin_ia32_sqrtsh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1436:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sqrt_sh(arg___U: __mmask32, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1473:19: warning: TODO implement function '__builtin_ia32_vcvtpd2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1472:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtpd_ph(arg___A: __m512d) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1480:19: warning: TODO implement function '__builtin_ia32_vcvtpd2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1479:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtpd_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m512d) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1486:19: warning: TODO implement function '__builtin_ia32_vcvtpd2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1485:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtpd_ph(arg___U: __mmask8, arg___A: __m512d) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1504:19: warning: TODO implement function '__builtin_ia32_vcvtph2pd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1503:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtph_pd(arg___A: __m128h) __m512d;
// /usr/lib/zig/include/avx512fp16intrin.h:1511:19: warning: TODO implement function '__builtin_ia32_vcvtph2pd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1510:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtph_pd(arg___W: __m512d, arg___U: __mmask8, arg___A: __m128h) __m512d;
// /usr/lib/zig/include/avx512fp16intrin.h:1517:19: warning: TODO implement function '__builtin_ia32_vcvtph2pd512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1516:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtph_pd(arg___U: __mmask8, arg___A: __m128h) __m512d;
// /usr/lib/zig/include/avx512fp16intrin.h:1538:18: warning: TODO implement function '__builtin_ia32_vcvtsh2ss_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1536:48: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsh_ss(arg___A: __m128, arg___B: __m128h) __m128;
// /usr/lib/zig/include/avx512fp16intrin.h:1547:18: warning: TODO implement function '__builtin_ia32_vcvtsh2ss_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1543:48: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsh_ss(arg___W: __m128, arg___U: __mmask8, arg___A: __m128, arg___B: __m128h) __m128;
// /usr/lib/zig/include/avx512fp16intrin.h:1555:18: warning: TODO implement function '__builtin_ia32_vcvtsh2ss_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1552:48: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtsh_ss(arg___U: __mmask8, arg___A: __m128, arg___B: __m128h) __m128;
// /usr/lib/zig/include/avx512fp16intrin.h:1576:19: warning: TODO implement function '__builtin_ia32_vcvtss2sh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1574:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtss_sh(arg___A: __m128h, arg___B: __m128) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1585:19: warning: TODO implement function '__builtin_ia32_vcvtss2sh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1581:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtss_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1593:19: warning: TODO implement function '__builtin_ia32_vcvtss2sh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1590:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtss_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1614:19: warning: TODO implement function '__builtin_ia32_vcvtsd2sh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1612:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsd_sh(arg___A: __m128h, arg___B: __m128d) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1623:19: warning: TODO implement function '__builtin_ia32_vcvtsd2sh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1619:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsd_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128d) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1630:19: warning: TODO implement function '__builtin_ia32_vcvtsd2sh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1629:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtsd_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128d) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:1651:19: warning: TODO implement function '__builtin_ia32_vcvtsh2sd_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1649:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsh_sd(arg___A: __m128d, arg___B: __m128h) __m128d;
// /usr/lib/zig/include/avx512fp16intrin.h:1660:19: warning: TODO implement function '__builtin_ia32_vcvtsh2sd_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1656:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtsh_sd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128d, arg___B: __m128h) __m128d;
// /usr/lib/zig/include/avx512fp16intrin.h:1667:19: warning: TODO implement function '__builtin_ia32_vcvtsh2sd_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1666:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtsh_sd(arg___U: __mmask8, arg___A: __m128d, arg___B: __m128h) __m128d;
// /usr/lib/zig/include/avx512fp16intrin.h:1688:19: warning: TODO implement function '__builtin_ia32_vcvtph2w512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1687:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtph_epi16(arg___A: __m512h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1695:19: warning: TODO implement function '__builtin_ia32_vcvtph2w512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1694:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtph_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1701:19: warning: TODO implement function '__builtin_ia32_vcvtph2w512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1700:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtph_epi16(arg___U: __mmask32, arg___A: __m512h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1722:19: warning: TODO implement function '__builtin_ia32_vcvttph2w512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1721:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvttph_epi16(arg___A: __m512h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1729:19: warning: TODO implement function '__builtin_ia32_vcvttph2w512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1728:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvttph_epi16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1735:19: warning: TODO implement function '__builtin_ia32_vcvttph2w512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1734:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvttph_epi16(arg___U: __mmask32, arg___A: __m512h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1755:19: warning: TODO implement function '__builtin_ia32_vcvtw2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1754:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtepi16_ph(arg___A: __m512i) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1762:19: warning: TODO implement function '__builtin_ia32_vcvtw2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1761:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi16_ph(arg___W: __m512h, arg___U: __mmask32, arg___A: __m512i) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1768:19: warning: TODO implement function '__builtin_ia32_vcvtw2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1767:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi16_ph(arg___U: __mmask32, arg___A: __m512i) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1789:19: warning: TODO implement function '__builtin_ia32_vcvtph2uw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1788:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtph_epu16(arg___A: __m512h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1796:19: warning: TODO implement function '__builtin_ia32_vcvtph2uw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1795:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtph_epu16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1802:19: warning: TODO implement function '__builtin_ia32_vcvtph2uw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1801:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtph_epu16(arg___U: __mmask32, arg___A: __m512h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1823:19: warning: TODO implement function '__builtin_ia32_vcvttph2uw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1822:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvttph_epu16(arg___A: __m512h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1830:19: warning: TODO implement function '__builtin_ia32_vcvttph2uw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1829:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvttph_epu16(arg___W: __m512i, arg___U: __mmask32, arg___A: __m512h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1836:19: warning: TODO implement function '__builtin_ia32_vcvttph2uw512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1835:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvttph_epu16(arg___U: __mmask32, arg___A: __m512h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1856:19: warning: TODO implement function '__builtin_ia32_vcvtuw2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1855:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtepu16_ph(arg___A: __m512i) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1863:19: warning: TODO implement function '__builtin_ia32_vcvtuw2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1862:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepu16_ph(arg___W: __m512h, arg___U: __mmask32, arg___A: __m512i) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1869:19: warning: TODO implement function '__builtin_ia32_vcvtuw2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1868:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepu16_ph(arg___U: __mmask32, arg___A: __m512i) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:1890:19: warning: TODO implement function '__builtin_ia32_vcvtph2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1889:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtph_epi32(arg___A: __m256h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1897:19: warning: TODO implement function '__builtin_ia32_vcvtph2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1896:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtph_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m256h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1903:19: warning: TODO implement function '__builtin_ia32_vcvtph2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1902:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtph_epi32(arg___U: __mmask16, arg___A: __m256h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1924:19: warning: TODO implement function '__builtin_ia32_vcvtph2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1923:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtph_epu32(arg___A: __m256h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1931:19: warning: TODO implement function '__builtin_ia32_vcvtph2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1930:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtph_epu32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m256h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1937:19: warning: TODO implement function '__builtin_ia32_vcvtph2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1936:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtph_epu32(arg___U: __mmask16, arg___A: __m256h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:1957:19: warning: TODO implement function '__builtin_ia32_vcvtdq2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1956:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtepi32_ph(arg___A: __m512i) __m256h;
// /usr/lib/zig/include/avx512fp16intrin.h:1964:19: warning: TODO implement function '__builtin_ia32_vcvtdq2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1963:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi32_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m512i) __m256h;
// /usr/lib/zig/include/avx512fp16intrin.h:1970:19: warning: TODO implement function '__builtin_ia32_vcvtdq2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1969:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi32_ph(arg___U: __mmask16, arg___A: __m512i) __m256h;
// /usr/lib/zig/include/avx512fp16intrin.h:1990:19: warning: TODO implement function '__builtin_ia32_vcvtudq2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1989:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtepu32_ph(arg___A: __m512i) __m256h;
// /usr/lib/zig/include/avx512fp16intrin.h:1997:19: warning: TODO implement function '__builtin_ia32_vcvtudq2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:1996:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepu32_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m512i) __m256h;
// /usr/lib/zig/include/avx512fp16intrin.h:2003:19: warning: TODO implement function '__builtin_ia32_vcvtudq2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2002:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepu32_ph(arg___U: __mmask16, arg___A: __m512i) __m256h;
// /usr/lib/zig/include/avx512fp16intrin.h:2024:19: warning: TODO implement function '__builtin_ia32_vcvttph2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2023:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvttph_epi32(arg___A: __m256h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2031:19: warning: TODO implement function '__builtin_ia32_vcvttph2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2030:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvttph_epi32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m256h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2037:19: warning: TODO implement function '__builtin_ia32_vcvttph2dq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2036:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvttph_epi32(arg___U: __mmask16, arg___A: __m256h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2058:19: warning: TODO implement function '__builtin_ia32_vcvttph2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2057:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvttph_epu32(arg___A: __m256h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2065:19: warning: TODO implement function '__builtin_ia32_vcvttph2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2064:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvttph_epu32(arg___W: __m512i, arg___U: __mmask16, arg___A: __m256h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2071:19: warning: TODO implement function '__builtin_ia32_vcvttph2udq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2070:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvttph_epu32(arg___U: __mmask16, arg___A: __m256h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2090:19: warning: TODO implement function '__builtin_ia32_vcvtqq2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2089:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtepi64_ph(arg___A: __m512i) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2097:19: warning: TODO implement function '__builtin_ia32_vcvtqq2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2096:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepi64_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m512i) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2103:19: warning: TODO implement function '__builtin_ia32_vcvtqq2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2102:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepi64_ph(arg___U: __mmask8, arg___A: __m512i) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2123:19: warning: TODO implement function '__builtin_ia32_vcvtph2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2122:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtph_epi64(arg___A: __m128h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2130:19: warning: TODO implement function '__builtin_ia32_vcvtph2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2129:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtph_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m128h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2136:19: warning: TODO implement function '__builtin_ia32_vcvtph2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2135:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtph_epi64(arg___U: __mmask8, arg___A: __m128h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2155:19: warning: TODO implement function '__builtin_ia32_vcvtuqq2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2154:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtepu64_ph(arg___A: __m512i) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2162:19: warning: TODO implement function '__builtin_ia32_vcvtuqq2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2161:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtepu64_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m512i) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2168:19: warning: TODO implement function '__builtin_ia32_vcvtuqq2ph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2167:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtepu64_ph(arg___U: __mmask8, arg___A: __m512i) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2188:19: warning: TODO implement function '__builtin_ia32_vcvtph2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2187:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtph_epu64(arg___A: __m128h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2195:19: warning: TODO implement function '__builtin_ia32_vcvtph2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2194:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtph_epu64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m128h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2201:19: warning: TODO implement function '__builtin_ia32_vcvtph2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2200:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtph_epu64(arg___U: __mmask8, arg___A: __m128h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2221:19: warning: TODO implement function '__builtin_ia32_vcvttph2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2220:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvttph_epi64(arg___A: __m128h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2228:19: warning: TODO implement function '__builtin_ia32_vcvttph2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2227:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvttph_epi64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m128h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2234:19: warning: TODO implement function '__builtin_ia32_vcvttph2qq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2233:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvttph_epi64(arg___U: __mmask8, arg___A: __m128h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2254:19: warning: TODO implement function '__builtin_ia32_vcvttph2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2253:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvttph_epu64(arg___A: __m128h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2261:19: warning: TODO implement function '__builtin_ia32_vcvttph2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2260:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvttph_epu64(arg___W: __m512i, arg___U: __mmask8, arg___A: __m128h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2267:19: warning: TODO implement function '__builtin_ia32_vcvttph2uqq512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2266:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvttph_epu64(arg___U: __mmask8, arg___A: __m128h) __m512i;
// /usr/lib/zig/include/avx512fp16intrin.h:2276:15: warning: TODO implement function '__builtin_ia32_vcvtsh2si32' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2275:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsh_i32(arg___A: __m128h) c_int;
// /usr/lib/zig/include/avx512fp16intrin.h:2284:24: warning: TODO implement function '__builtin_ia32_vcvtsh2usi32' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2283:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsh_u32(arg___A: __m128h) c_uint;
// /usr/lib/zig/include/avx512fp16intrin.h:2293:21: warning: TODO implement function '__builtin_ia32_vcvtsh2si64' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2292:51: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsh_i64(arg___A: __m128h) c_longlong;
// /usr/lib/zig/include/avx512fp16intrin.h:2302:30: warning: TODO implement function '__builtin_ia32_vcvtsh2usi64' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2301:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtsh_u64(arg___A: __m128h) c_ulonglong;
pub inline fn _mm_cvtu32_sh(arg___A: __m128h, arg___B: c_uint) __m128h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    __A[@as(c_uint, @intCast(@as(c_int, 0)))] = @as(f16, __B);
    return __A;
}
pub inline fn _mm_cvtu64_sh(arg___A: __m128h, arg___B: c_ulonglong) __m128h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    __A[@as(c_uint, @intCast(@as(c_int, 0)))] = @as(f16, __B);
    return __A;
}
pub inline fn _mm_cvti32_sh(arg___A: __m128h, arg___B: c_int) __m128h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    __A[@as(c_uint, @intCast(@as(c_int, 0)))] = @as(f16, __B);
    return __A;
}
pub inline fn _mm_cvti64_sh(arg___A: __m128h, arg___B: c_longlong) __m128h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    __A[@as(c_uint, @intCast(@as(c_int, 0)))] = @as(f16, __B);
    return __A;
}
// /usr/lib/zig/include/avx512fp16intrin.h:2352:15: warning: TODO implement function '__builtin_ia32_vcvttsh2si32' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2351:45: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttsh_i32(arg___A: __m128h) c_int;
// /usr/lib/zig/include/avx512fp16intrin.h:2361:21: warning: TODO implement function '__builtin_ia32_vcvttsh2si64' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2360:51: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttsh_i64(arg___A: __m128h) c_longlong;
// /usr/lib/zig/include/avx512fp16intrin.h:2371:24: warning: TODO implement function '__builtin_ia32_vcvttsh2usi32' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2370:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttsh_u32(arg___A: __m128h) c_uint;
// /usr/lib/zig/include/avx512fp16intrin.h:2381:30: warning: TODO implement function '__builtin_ia32_vcvttsh2usi64' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2380:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttsh_u64(arg___A: __m128h) c_ulonglong;
// /usr/lib/zig/include/avx512fp16intrin.h:2400:18: warning: TODO implement function '__builtin_ia32_vcvtph2psx512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2399:48: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtxph_ps(arg___A: __m256h) __m512;
// /usr/lib/zig/include/avx512fp16intrin.h:2407:18: warning: TODO implement function '__builtin_ia32_vcvtph2psx512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2406:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtxph_ps(arg___W: __m512, arg___U: __mmask16, arg___A: __m256h) __m512;
// /usr/lib/zig/include/avx512fp16intrin.h:2413:18: warning: TODO implement function '__builtin_ia32_vcvtph2psx512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2412:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtxph_ps(arg___U: __mmask16, arg___A: __m256h) __m512;
// /usr/lib/zig/include/avx512fp16intrin.h:2432:19: warning: TODO implement function '__builtin_ia32_vcvtps2phx512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2431:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtxps_ph(arg___A: __m512) __m256h;
// /usr/lib/zig/include/avx512fp16intrin.h:2439:19: warning: TODO implement function '__builtin_ia32_vcvtps2phx512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2438:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtxps_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m512) __m256h;
// /usr/lib/zig/include/avx512fp16intrin.h:2445:19: warning: TODO implement function '__builtin_ia32_vcvtps2phx512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2444:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtxps_ph(arg___U: __mmask16, arg___A: __m512) __m256h;
// /usr/lib/zig/include/avx512fp16intrin.h:2513:19: warning: TODO implement function '__builtin_ia32_vfmaddph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2510:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fmadd_ph(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2520:19: warning: TODO implement function '__builtin_ia32_vfmaddph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2519:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fmadd_ph(arg___A: __m512h, arg___U: __mmask32, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2527:19: warning: TODO implement function '__builtin_ia32_vfmaddph512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2526:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fmadd_ph(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h, arg___U: __mmask32) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2534:19: warning: TODO implement function '__builtin_ia32_vfmaddph512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2533:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fmadd_ph(arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2542:19: warning: TODO implement function '__builtin_ia32_vfmaddph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2539:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fmsub_ph(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2549:19: warning: TODO implement function '__builtin_ia32_vfmaddph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2548:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fmsub_ph(arg___A: __m512h, arg___U: __mmask32, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2556:19: warning: TODO implement function '__builtin_ia32_vfmaddph512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2555:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fmsub_ph(arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2564:19: warning: TODO implement function '__builtin_ia32_vfmaddph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2561:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fnmadd_ph(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2571:19: warning: TODO implement function '__builtin_ia32_vfmaddph512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2570:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fnmadd_ph(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h, arg___U: __mmask32) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2578:19: warning: TODO implement function '__builtin_ia32_vfmaddph512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2577:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fnmadd_ph(arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2586:19: warning: TODO implement function '__builtin_ia32_vfmaddph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2583:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fnmsub_ph(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2593:19: warning: TODO implement function '__builtin_ia32_vfmaddph512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2592:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fnmsub_ph(arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2635:19: warning: TODO implement function '__builtin_ia32_vfmaddsubph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2634:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fmaddsub_ph(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2642:19: warning: TODO implement function '__builtin_ia32_vfmaddsubph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2641:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fmaddsub_ph(arg___A: __m512h, arg___U: __mmask32, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2649:19: warning: TODO implement function '__builtin_ia32_vfmaddsubph512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2648:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fmaddsub_ph(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h, arg___U: __mmask32) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2656:19: warning: TODO implement function '__builtin_ia32_vfmaddsubph512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2655:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fmaddsub_ph(arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2663:19: warning: TODO implement function '__builtin_ia32_vfmaddsubph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2662:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fmsubadd_ph(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2670:19: warning: TODO implement function '__builtin_ia32_vfmaddsubph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2669:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fmsubadd_ph(arg___A: __m512h, arg___U: __mmask32, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2677:19: warning: TODO implement function '__builtin_ia32_vfmaddsubph512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2676:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fmsubadd_ph(arg___U: __mmask32, arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2689:19: warning: TODO implement function '__builtin_ia32_vfmsubph512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2688:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fmsub_ph(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h, arg___U: __mmask32) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2701:19: warning: TODO implement function '__builtin_ia32_vfmsubaddph512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2700:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fmsubadd_ph(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h, arg___U: __mmask32) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2713:19: warning: TODO implement function '__builtin_ia32_vfmaddph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2712:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fnmadd_ph(arg___A: __m512h, arg___U: __mmask32, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2730:19: warning: TODO implement function '__builtin_ia32_vfmaddph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2729:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fnmsub_ph(arg___A: __m512h, arg___U: __mmask32, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2737:19: warning: TODO implement function '__builtin_ia32_vfmsubph512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2736:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fnmsub_ph(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h, arg___U: __mmask32) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:2745:10: warning: TODO implement function '__builtin_ia32_vfmaddsh3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2742:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmadd_sh(arg___W: __m128h, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2753:10: warning: TODO implement function '__builtin_ia32_vfmaddsh3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2749:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmadd_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2769:10: warning: TODO implement function '__builtin_ia32_vfmaddsh3_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2768:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmadd_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2781:10: warning: TODO implement function '__builtin_ia32_vfmaddsh3_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2780:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmadd_sh(arg___W: __m128h, arg___X: __m128h, arg___Y: __m128h, arg___U: __mmask8) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2794:19: warning: TODO implement function '__builtin_ia32_vfmaddsh3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2791:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmsub_sh(arg___W: __m128h, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2803:19: warning: TODO implement function '__builtin_ia32_vfmaddsh3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2799:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmsub_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2820:19: warning: TODO implement function '__builtin_ia32_vfmaddsh3_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2819:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmsub_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2832:10: warning: TODO implement function '__builtin_ia32_vfmsubsh3_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2831:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmsub_sh(arg___W: __m128h, arg___X: __m128h, arg___Y: __m128h, arg___U: __mmask8) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2845:10: warning: TODO implement function '__builtin_ia32_vfmaddsh3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2842:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fnmadd_sh(arg___W: __m128h, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2851:10: warning: TODO implement function '__builtin_ia32_vfmaddsh3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2850:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fnmadd_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2867:10: warning: TODO implement function '__builtin_ia32_vfmaddsh3_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2866:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fnmadd_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2879:10: warning: TODO implement function '__builtin_ia32_vfmaddsh3_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2878:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fnmadd_sh(arg___W: __m128h, arg___X: __m128h, arg___Y: __m128h, arg___U: __mmask8) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2892:10: warning: TODO implement function '__builtin_ia32_vfmaddsh3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2889:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fnmsub_sh(arg___W: __m128h, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2898:10: warning: TODO implement function '__builtin_ia32_vfmaddsh3_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2897:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fnmsub_sh(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2914:10: warning: TODO implement function '__builtin_ia32_vfmaddsh3_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2913:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fnmsub_sh(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2926:10: warning: TODO implement function '__builtin_ia32_vfmsubsh3_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2925:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fnmsub_sh(arg___W: __m128h, arg___X: __m128h, arg___Y: __m128h, arg___U: __mmask8) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2939:19: warning: TODO implement function '__builtin_ia32_vfcmaddcsh_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2936:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fcmadd_sch(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2946:19: warning: TODO implement function '__builtin_ia32_vfcmaddcsh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2945:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fcmadd_sch(arg___A: __m128h, arg___U: __mmask8, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2952:19: warning: TODO implement function '__builtin_ia32_vfcmaddcsh_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2951:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fcmadd_sch(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2959:19: warning: TODO implement function '__builtin_ia32_vfcmaddcsh_round_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2958:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fcmadd_sch(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h, arg___U: __mmask8) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2986:19: warning: TODO implement function '__builtin_ia32_vfmaddcsh_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2983:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmadd_sch(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2993:19: warning: TODO implement function '__builtin_ia32_vfmaddcsh_round_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2992:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmadd_sch(arg___A: __m128h, arg___U: __mmask8, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:2999:19: warning: TODO implement function '__builtin_ia32_vfmaddcsh_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:2998:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmadd_sch(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:3006:19: warning: TODO implement function '__builtin_ia32_vfmaddcsh_round_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3005:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmadd_sch(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h, arg___U: __mmask8) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:3032:19: warning: TODO implement function '__builtin_ia32_vfcmulcsh_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3030:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fcmul_sch(arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:3039:19: warning: TODO implement function '__builtin_ia32_vfcmulcsh_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3038:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fcmul_sch(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:3046:19: warning: TODO implement function '__builtin_ia32_vfcmulcsh_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3045:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fcmul_sch(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:3068:19: warning: TODO implement function '__builtin_ia32_vfmulcsh_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3066:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmul_sch(arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:3077:19: warning: TODO implement function '__builtin_ia32_vfmulcsh_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3073:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmul_sch(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:3084:19: warning: TODO implement function '__builtin_ia32_vfmulcsh_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3083:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmul_sch(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512fp16intrin.h:3106:19: warning: TODO implement function '__builtin_ia32_vfcmulcph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3104:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fcmul_pch(arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3113:19: warning: TODO implement function '__builtin_ia32_vfcmulcph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3112:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fcmul_pch(arg___W: __m512h, arg___U: __mmask16, arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3120:19: warning: TODO implement function '__builtin_ia32_vfcmulcph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3119:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fcmul_pch(arg___U: __mmask16, arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3142:19: warning: TODO implement function '__builtin_ia32_vfmulcph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3140:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fmul_pch(arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3149:19: warning: TODO implement function '__builtin_ia32_vfmulcph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3148:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fmul_pch(arg___W: __m512h, arg___U: __mmask16, arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3156:19: warning: TODO implement function '__builtin_ia32_vfmulcph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3155:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fmul_pch(arg___U: __mmask16, arg___A: __m512h, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3179:19: warning: TODO implement function '__builtin_ia32_vfcmaddcph512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3176:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fcmadd_pch(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3186:19: warning: TODO implement function '__builtin_ia32_vfcmaddcph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3185:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fcmadd_pch(arg___A: __m512h, arg___U: __mmask16, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3193:19: warning: TODO implement function '__builtin_ia32_vfcmaddcph512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3192:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fcmadd_pch(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h, arg___U: __mmask16) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3200:19: warning: TODO implement function '__builtin_ia32_vfcmaddcph512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3199:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fcmadd_pch(arg___U: __mmask16, arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3228:19: warning: TODO implement function '__builtin_ia32_vfmaddcph512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3225:49: warning: unable to translate function, demoted to extern
pub extern fn _mm512_fmadd_pch(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3235:19: warning: TODO implement function '__builtin_ia32_vfmaddcph512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3234:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_fmadd_pch(arg___A: __m512h, arg___U: __mmask16, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3242:19: warning: TODO implement function '__builtin_ia32_vfmaddcph512_mask3' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3241:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask3_fmadd_pch(arg___A: __m512h, arg___B: __m512h, arg___C: __m512h, arg___U: __mmask16) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3249:19: warning: TODO implement function '__builtin_ia32_vfmaddcph512_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3248:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_fmadd_pch(arg___U: __mmask16, arg___A: __m512h, arg___B: __m512h, arg___C: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3276:10: warning: TODO implement function '__builtin_ia32_reduce_fadd_ph512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3275:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_add_ph(arg___W: __m512h) f16;
// /usr/lib/zig/include/avx512fp16intrin.h:3281:10: warning: TODO implement function '__builtin_ia32_reduce_fmul_ph512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3280:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_mul_ph(arg___W: __m512h) f16;
// /usr/lib/zig/include/avx512fp16intrin.h:3286:10: warning: TODO implement function '__builtin_ia32_reduce_fmax_ph512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3285:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_max_ph(arg___V: __m512h) f16;
// /usr/lib/zig/include/avx512fp16intrin.h:3291:10: warning: TODO implement function '__builtin_ia32_reduce_fmin_ph512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3290:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_reduce_min_ph(arg___V: __m512h) f16;
// /usr/lib/zig/include/avx512fp16intrin.h:3296:19: warning: TODO implement function '__builtin_ia32_selectph_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3295:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_blend_ph(arg___U: __mmask32, arg___A: __m512h, arg___W: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3302:19: warning: TODO implement function '__builtin_ia32_vpermi2varhi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3301:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutex2var_ph(arg___A: __m512h, arg___I: __m512i, arg___B: __m512h) __m512h;
// /usr/lib/zig/include/avx512fp16intrin.h:3308:19: warning: TODO implement function '__builtin_ia32_permvarhi512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512fp16intrin.h:3307:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_permutexvar_ph(arg___A: __m512i, arg___B: __m512h) __m512h;
pub inline fn _mm_cvtsh_h(arg___a: __m128h) f16 {
    var __a = arg___a;
    _ = &__a;
    return __a[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm256_cvtsh_h(arg___a: __m256h) f16 {
    var __a = arg___a;
    _ = &__a;
    return __a[@as(c_uint, @intCast(@as(c_int, 0)))];
}
pub inline fn _mm_set_sh(arg___h: f16) __m128h {
    var __h = arg___h;
    _ = &__h;
    return blk: {
        const tmp = __h;
        const tmp_1 = @as(f16, @as(c_int, 0));
        const tmp_2 = @as(f16, @as(c_int, 0));
        const tmp_3 = @as(f16, @as(c_int, 0));
        const tmp_4 = @as(f16, @as(c_int, 0));
        const tmp_5 = @as(f16, @as(c_int, 0));
        const tmp_6 = @as(f16, @as(c_int, 0));
        const tmp_7 = @as(f16, @as(c_int, 0));
        break :blk __m128h{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    };
}
pub inline fn _mm_set1_ph(arg___h: f16) __m128h {
    var __h = arg___h;
    _ = &__h;
    return @as(__m128h, @bitCast(blk: {
        const tmp = __h;
        const tmp_1 = __h;
        const tmp_2 = __h;
        const tmp_3 = __h;
        const tmp_4 = __h;
        const tmp_5 = __h;
        const tmp_6 = __h;
        const tmp_7 = __h;
        break :blk __v8hf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
pub inline fn _mm256_set1_ph(arg___h: f16) __m256h {
    var __h = arg___h;
    _ = &__h;
    return @as(__m256h, @bitCast(blk: {
        const tmp = __h;
        const tmp_1 = __h;
        const tmp_2 = __h;
        const tmp_3 = __h;
        const tmp_4 = __h;
        const tmp_5 = __h;
        const tmp_6 = __h;
        const tmp_7 = __h;
        const tmp_8 = __h;
        const tmp_9 = __h;
        const tmp_10 = __h;
        const tmp_11 = __h;
        const tmp_12 = __h;
        const tmp_13 = __h;
        const tmp_14 = __h;
        const tmp_15 = __h;
        break :blk __v16hf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
pub inline fn _mm_set_ph(arg___h1: f16, arg___h2: f16, arg___h3: f16, arg___h4: f16, arg___h5: f16, arg___h6: f16, arg___h7: f16, arg___h8: f16) __m128h {
    var __h1 = arg___h1;
    _ = &__h1;
    var __h2 = arg___h2;
    _ = &__h2;
    var __h3 = arg___h3;
    _ = &__h3;
    var __h4 = arg___h4;
    _ = &__h4;
    var __h5 = arg___h5;
    _ = &__h5;
    var __h6 = arg___h6;
    _ = &__h6;
    var __h7 = arg___h7;
    _ = &__h7;
    var __h8 = arg___h8;
    _ = &__h8;
    return @as(__m128h, @bitCast(blk: {
        const tmp = __h8;
        const tmp_1 = __h7;
        const tmp_2 = __h6;
        const tmp_3 = __h5;
        const tmp_4 = __h4;
        const tmp_5 = __h3;
        const tmp_6 = __h2;
        const tmp_7 = __h1;
        break :blk __v8hf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:57:1: warning: unsupported type: 'Complex'
pub const _mm256_set1_pch = @compileError("unable to resolve prototype of function");
// /usr/lib/zig/include/avx512vlfp16intrin.h:57:1

// /usr/lib/zig/include/avx512vlfp16intrin.h:62:1: warning: unsupported type: 'Complex'
pub const _mm_set1_pch = @compileError("unable to resolve prototype of function");
// /usr/lib/zig/include/avx512vlfp16intrin.h:62:1
pub inline fn _mm256_set_ph(arg___h1: f16, arg___h2: f16, arg___h3: f16, arg___h4: f16, arg___h5: f16, arg___h6: f16, arg___h7: f16, arg___h8: f16, arg___h9: f16, arg___h10: f16, arg___h11: f16, arg___h12: f16, arg___h13: f16, arg___h14: f16, arg___h15: f16, arg___h16: f16) __m256h {
    var __h1 = arg___h1;
    _ = &__h1;
    var __h2 = arg___h2;
    _ = &__h2;
    var __h3 = arg___h3;
    _ = &__h3;
    var __h4 = arg___h4;
    _ = &__h4;
    var __h5 = arg___h5;
    _ = &__h5;
    var __h6 = arg___h6;
    _ = &__h6;
    var __h7 = arg___h7;
    _ = &__h7;
    var __h8 = arg___h8;
    _ = &__h8;
    var __h9 = arg___h9;
    _ = &__h9;
    var __h10 = arg___h10;
    _ = &__h10;
    var __h11 = arg___h11;
    _ = &__h11;
    var __h12 = arg___h12;
    _ = &__h12;
    var __h13 = arg___h13;
    _ = &__h13;
    var __h14 = arg___h14;
    _ = &__h14;
    var __h15 = arg___h15;
    _ = &__h15;
    var __h16 = arg___h16;
    _ = &__h16;
    return @as(__m256h, @bitCast(blk: {
        const tmp = __h16;
        const tmp_1 = __h15;
        const tmp_2 = __h14;
        const tmp_3 = __h13;
        const tmp_4 = __h12;
        const tmp_5 = __h11;
        const tmp_6 = __h10;
        const tmp_7 = __h9;
        const tmp_8 = __h8;
        const tmp_9 = __h7;
        const tmp_10 = __h6;
        const tmp_11 = __h5;
        const tmp_12 = __h4;
        const tmp_13 = __h3;
        const tmp_14 = __h2;
        const tmp_15 = __h1;
        break :blk __v16hf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
pub inline fn _mm256_add_ph(arg___A: __m256h, arg___B: __m256h) __m256h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m256h, @bitCast(@as(__v16hf, @bitCast(__A)) + @as(__v16hf, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:91:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:90:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_add_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:97:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:96:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_add_ph(arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h) __m256h;
pub inline fn _mm_add_ph(arg___A: __m128h, arg___B: __m128h) __m128h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m128h, @bitCast(@as(__v8hf, @bitCast(__A)) + @as(__v8hf, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:110:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:106:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_add_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:117:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:114:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_add_ph(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
pub inline fn _mm256_sub_ph(arg___A: __m256h, arg___B: __m256h) __m256h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m256h, @bitCast(@as(__v16hf, @bitCast(__A)) - @as(__v16hf, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:128:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:127:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sub_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:134:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:133:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sub_ph(arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h) __m256h;
pub inline fn _mm_sub_ph(arg___A: __m128h, arg___B: __m128h) __m128h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m128h, @bitCast(@as(__v8hf, @bitCast(__A)) - @as(__v8hf, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:147:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:143:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sub_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:154:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:151:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sub_ph(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
pub inline fn _mm256_mul_ph(arg___A: __m256h, arg___B: __m256h) __m256h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m256h, @bitCast(@as(__v16hf, @bitCast(__A)) * @as(__v16hf, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:165:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:164:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_mul_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:171:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:170:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_mul_ph(arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h) __m256h;
pub inline fn _mm_mul_ph(arg___A: __m128h, arg___B: __m128h) __m128h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m128h, @bitCast(@as(__v8hf, @bitCast(__A)) * @as(__v8hf, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:184:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:180:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_mul_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:191:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:188:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_mul_ph(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
pub inline fn _mm256_div_ph(arg___A: __m256h, arg___B: __m256h) __m256h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m256h, @bitCast(@as(__v16hf, @bitCast(__A)) / @as(__v16hf, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:202:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:201:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_div_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:208:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:207:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_div_ph(arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h) __m256h;
pub inline fn _mm_div_ph(arg___A: __m128h, arg___B: __m128h) __m128h {
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return @as(__m128h, @bitCast(@as(__v8hf, @bitCast(__A)) / @as(__v8hf, @bitCast(__B))));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:221:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:217:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_div_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:228:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:225:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_div_ph(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:234:19: warning: TODO implement function '__builtin_ia32_minph256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:232:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_min_ph(arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:239:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:238:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_min_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:247:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:246:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_min_ph(arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:255:19: warning: TODO implement function '__builtin_ia32_minph128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:253:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_min_ph(arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:262:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:258:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_min_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:270:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:267:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_min_ph(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:277:19: warning: TODO implement function '__builtin_ia32_maxph256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:275:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_max_ph(arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:282:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:281:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_max_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:290:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:289:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_max_ph(arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:298:19: warning: TODO implement function '__builtin_ia32_maxph128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:296:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_max_ph(arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:305:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:301:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_max_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:313:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:310:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_max_ph(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
pub inline fn _mm256_abs_ph(arg___A: __m256h) __m256h {
    var __A = arg___A;
    _ = &__A;
    return @as(__m256h, @bitCast(_mm256_and_epi32(_mm256_set1_epi32(@as(c_int, 2147450879)), @as(__m256i, @bitCast(__A)))));
}
pub inline fn _mm_abs_ph(arg___A: __m128h) __m128h {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128h, @bitCast(_mm_and_epi32(_mm_set1_epi32(@as(c_int, 2147450879)), @as(__m128i, @bitCast(__A)))));
}
pub inline fn _mm256_conj_pch(arg___A: __m256h) __m256h {
    var __A = arg___A;
    _ = &__A;
    return @as(__m256h, @bitCast(_mm256_xor_ps(@as(__m256, @bitCast(__A)), _mm256_set1_ps(-0.0))));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:332:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:331:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_conj_pch(arg___W: __m256h, arg___U: __mmask8, arg___A: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:338:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:337:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_conj_pch(arg___U: __mmask8, arg___A: __m256h) __m256h;
pub inline fn _mm_conj_pch(arg___A: __m128h) __m128h {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128h, @bitCast(_mm_xor_ps(@as(__m128, @bitCast(__A)), _mm_set1_ps(-0.0))));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:349:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:346:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_conj_pch(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:355:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:354:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_conj_pch(arg___U: __mmask8, arg___A: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:376:19: warning: TODO implement function '__builtin_ia32_rcpph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:375:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_rcp_ph(arg___A: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:382:19: warning: TODO implement function '__builtin_ia32_rcpph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:381:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_rcp_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:388:19: warning: TODO implement function '__builtin_ia32_rcpph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:387:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_rcp_ph(arg___U: __mmask16, arg___A: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:393:19: warning: TODO implement function '__builtin_ia32_rcpph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:392:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_rcp_ph(arg___A: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:400:19: warning: TODO implement function '__builtin_ia32_rcpph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:397:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rcp_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:406:19: warning: TODO implement function '__builtin_ia32_rcpph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:404:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rcp_ph(arg___U: __mmask8, arg___A: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:411:19: warning: TODO implement function '__builtin_ia32_rsqrtph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:410:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_rsqrt_ph(arg___A: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:417:19: warning: TODO implement function '__builtin_ia32_rsqrtph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:416:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_rsqrt_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:423:19: warning: TODO implement function '__builtin_ia32_rsqrtph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:422:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_rsqrt_ph(arg___U: __mmask16, arg___A: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:428:19: warning: TODO implement function '__builtin_ia32_rsqrtph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:427:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_rsqrt_ph(arg___A: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:435:19: warning: TODO implement function '__builtin_ia32_rsqrtph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:432:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_rsqrt_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:441:19: warning: TODO implement function '__builtin_ia32_rsqrtph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:440:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_rsqrt_ph(arg___U: __mmask8, arg___A: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:446:19: warning: TODO implement function '__builtin_ia32_getexpph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:445:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_getexp_ph(arg___A: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:452:19: warning: TODO implement function '__builtin_ia32_getexpph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:451:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_getexp_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:458:19: warning: TODO implement function '__builtin_ia32_getexpph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:457:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_getexp_ph(arg___U: __mmask8, arg___A: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:463:19: warning: TODO implement function '__builtin_ia32_getexpph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:462:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_getexp_ph(arg___A: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:469:19: warning: TODO implement function '__builtin_ia32_getexpph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:468:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_getexp_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:475:19: warning: TODO implement function '__builtin_ia32_getexpph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:474:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_getexp_ph(arg___U: __mmask16, arg___A: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:511:19: warning: TODO implement function '__builtin_ia32_scalefph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:509:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_scalef_ph(arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:517:19: warning: TODO implement function '__builtin_ia32_scalefph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:516:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_scalef_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:523:19: warning: TODO implement function '__builtin_ia32_scalefph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:522:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_scalef_ph(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:529:19: warning: TODO implement function '__builtin_ia32_scalefph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:527:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_scalef_ph(arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:535:19: warning: TODO implement function '__builtin_ia32_scalefph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:534:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_scalef_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:541:19: warning: TODO implement function '__builtin_ia32_scalefph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:540:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_scalef_ph(arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:604:10: warning: TODO implement function '__builtin_ia32_sqrtph' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:603:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_sqrt_ph(arg___a: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:610:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:607:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_sqrt_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:616:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:614:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_sqrt_ph(arg___U: __mmask8, arg___A: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:621:19: warning: TODO implement function '__builtin_ia32_sqrtph256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:620:47: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sqrt_ph(arg___a: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:626:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:625:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_sqrt_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:632:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:631:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_sqrt_ph(arg___U: __mmask16, arg___A: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:654:19: warning: TODO implement function '__builtin_ia32_vcvtpd2ph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:653:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtpd_ph(arg___A: __m128d) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:661:19: warning: TODO implement function '__builtin_ia32_vcvtpd2ph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:658:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtpd_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128d) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:667:19: warning: TODO implement function '__builtin_ia32_vcvtpd2ph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:666:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtpd_ph(arg___U: __mmask8, arg___A: __m128d) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:672:19: warning: TODO implement function '__builtin_ia32_vcvtpd2ph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:671:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtpd_ph(arg___A: __m256d) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:678:19: warning: TODO implement function '__builtin_ia32_vcvtpd2ph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:677:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtpd_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m256d) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:684:19: warning: TODO implement function '__builtin_ia32_vcvtpd2ph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:683:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtpd_ph(arg___U: __mmask8, arg___A: __m256d) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:689:19: warning: TODO implement function '__builtin_ia32_vcvtph2pd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:688:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtph_pd(arg___A: __m128h) __m128d;
// /usr/lib/zig/include/avx512vlfp16intrin.h:696:19: warning: TODO implement function '__builtin_ia32_vcvtph2pd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:693:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtph_pd(arg___W: __m128d, arg___U: __mmask8, arg___A: __m128h) __m128d;
// /usr/lib/zig/include/avx512vlfp16intrin.h:702:19: warning: TODO implement function '__builtin_ia32_vcvtph2pd128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:701:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtph_pd(arg___U: __mmask8, arg___A: __m128h) __m128d;
// /usr/lib/zig/include/avx512vlfp16intrin.h:707:19: warning: TODO implement function '__builtin_ia32_vcvtph2pd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:706:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtph_pd(arg___A: __m128h) __m256d;
// /usr/lib/zig/include/avx512vlfp16intrin.h:713:19: warning: TODO implement function '__builtin_ia32_vcvtph2pd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:712:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtph_pd(arg___W: __m256d, arg___U: __mmask8, arg___A: __m128h) __m256d;
// /usr/lib/zig/include/avx512vlfp16intrin.h:719:19: warning: TODO implement function '__builtin_ia32_vcvtph2pd256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:718:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtph_pd(arg___U: __mmask8, arg___A: __m128h) __m256d;
// /usr/lib/zig/include/avx512vlfp16intrin.h:724:19: warning: TODO implement function '__builtin_ia32_vcvtph2w128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:723:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtph_epi16(arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:730:19: warning: TODO implement function '__builtin_ia32_vcvtph2w128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:729:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtph_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:736:19: warning: TODO implement function '__builtin_ia32_vcvtph2w128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:735:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtph_epi16(arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:742:19: warning: TODO implement function '__builtin_ia32_vcvtph2w256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:741:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtph_epi16(arg___A: __m256h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:748:19: warning: TODO implement function '__builtin_ia32_vcvtph2w256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:747:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtph_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:754:19: warning: TODO implement function '__builtin_ia32_vcvtph2w256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:753:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtph_epi16(arg___U: __mmask16, arg___A: __m256h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:759:19: warning: TODO implement function '__builtin_ia32_vcvttph2w128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:758:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttph_epi16(arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:765:19: warning: TODO implement function '__builtin_ia32_vcvttph2w128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:764:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvttph_epi16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:771:19: warning: TODO implement function '__builtin_ia32_vcvttph2w128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:770:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvttph_epi16(arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:777:19: warning: TODO implement function '__builtin_ia32_vcvttph2w256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:776:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvttph_epi16(arg___A: __m256h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:783:19: warning: TODO implement function '__builtin_ia32_vcvttph2w256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:782:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvttph_epi16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:789:19: warning: TODO implement function '__builtin_ia32_vcvttph2w256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:788:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvttph_epi16(arg___U: __mmask16, arg___A: __m256h) __m256i;
pub inline fn _mm_cvtepi16_ph(arg___A: __m128i) __m128h {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128h, @bitCast(blk: {
        const tmp = @as(f16, @as(__v8hi, @bitCast(__A))[0]);
        const tmp_1 = @as(f16, @as(__v8hi, @bitCast(__A))[1]);
        const tmp_2 = @as(f16, @as(__v8hi, @bitCast(__A))[2]);
        const tmp_3 = @as(f16, @as(__v8hi, @bitCast(__A))[3]);
        const tmp_4 = @as(f16, @as(__v8hi, @bitCast(__A))[4]);
        const tmp_5 = @as(f16, @as(__v8hi, @bitCast(__A))[5]);
        const tmp_6 = @as(f16, @as(__v8hi, @bitCast(__A))[6]);
        const tmp_7 = @as(f16, @as(__v8hi, @bitCast(__A))[7]);
        break :blk __v8hf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:799:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:798:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi16_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:805:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:804:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi16_ph(arg___U: __mmask8, arg___A: __m128i) __m128h;
pub inline fn _mm256_cvtepi16_ph(arg___A: __m256i) __m256h {
    var __A = arg___A;
    _ = &__A;
    return @as(__m256h, @bitCast(blk: {
        const tmp = @as(f16, @as(__v16hi, @bitCast(__A))[0]);
        const tmp_1 = @as(f16, @as(__v16hi, @bitCast(__A))[1]);
        const tmp_2 = @as(f16, @as(__v16hi, @bitCast(__A))[2]);
        const tmp_3 = @as(f16, @as(__v16hi, @bitCast(__A))[3]);
        const tmp_4 = @as(f16, @as(__v16hi, @bitCast(__A))[4]);
        const tmp_5 = @as(f16, @as(__v16hi, @bitCast(__A))[5]);
        const tmp_6 = @as(f16, @as(__v16hi, @bitCast(__A))[6]);
        const tmp_7 = @as(f16, @as(__v16hi, @bitCast(__A))[7]);
        const tmp_8 = @as(f16, @as(__v16hi, @bitCast(__A))[8]);
        const tmp_9 = @as(f16, @as(__v16hi, @bitCast(__A))[9]);
        const tmp_10 = @as(f16, @as(__v16hi, @bitCast(__A))[10]);
        const tmp_11 = @as(f16, @as(__v16hi, @bitCast(__A))[11]);
        const tmp_12 = @as(f16, @as(__v16hi, @bitCast(__A))[12]);
        const tmp_13 = @as(f16, @as(__v16hi, @bitCast(__A))[13]);
        const tmp_14 = @as(f16, @as(__v16hi, @bitCast(__A))[14]);
        const tmp_15 = @as(f16, @as(__v16hi, @bitCast(__A))[15]);
        break :blk __v16hf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:816:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:815:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi16_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m256i) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:822:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:821:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi16_ph(arg___U: __mmask16, arg___A: __m256i) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:828:19: warning: TODO implement function '__builtin_ia32_vcvtph2uw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:827:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtph_epu16(arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:834:19: warning: TODO implement function '__builtin_ia32_vcvtph2uw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:833:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtph_epu16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:840:19: warning: TODO implement function '__builtin_ia32_vcvtph2uw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:839:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtph_epu16(arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:846:19: warning: TODO implement function '__builtin_ia32_vcvtph2uw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:845:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtph_epu16(arg___A: __m256h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:852:19: warning: TODO implement function '__builtin_ia32_vcvtph2uw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:851:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtph_epu16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:858:19: warning: TODO implement function '__builtin_ia32_vcvtph2uw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:857:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtph_epu16(arg___U: __mmask16, arg___A: __m256h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:863:19: warning: TODO implement function '__builtin_ia32_vcvttph2uw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:862:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttph_epu16(arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:869:19: warning: TODO implement function '__builtin_ia32_vcvttph2uw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:868:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvttph_epu16(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:875:19: warning: TODO implement function '__builtin_ia32_vcvttph2uw128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:874:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvttph_epu16(arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:881:19: warning: TODO implement function '__builtin_ia32_vcvttph2uw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:880:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvttph_epu16(arg___A: __m256h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:887:19: warning: TODO implement function '__builtin_ia32_vcvttph2uw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:886:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvttph_epu16(arg___W: __m256i, arg___U: __mmask16, arg___A: __m256h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:893:19: warning: TODO implement function '__builtin_ia32_vcvttph2uw256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:892:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvttph_epu16(arg___U: __mmask16, arg___A: __m256h) __m256i;
pub inline fn _mm_cvtepu16_ph(arg___A: __m128i) __m128h {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128h, @bitCast(blk: {
        const tmp = @as(f16, @as(__v8hu, @bitCast(__A))[0]);
        const tmp_1 = @as(f16, @as(__v8hu, @bitCast(__A))[1]);
        const tmp_2 = @as(f16, @as(__v8hu, @bitCast(__A))[2]);
        const tmp_3 = @as(f16, @as(__v8hu, @bitCast(__A))[3]);
        const tmp_4 = @as(f16, @as(__v8hu, @bitCast(__A))[4]);
        const tmp_5 = @as(f16, @as(__v8hu, @bitCast(__A))[5]);
        const tmp_6 = @as(f16, @as(__v8hu, @bitCast(__A))[6]);
        const tmp_7 = @as(f16, @as(__v8hu, @bitCast(__A))[7]);
        break :blk __v8hf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:903:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:902:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepu16_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:909:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:908:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepu16_ph(arg___U: __mmask8, arg___A: __m128i) __m128h;
pub inline fn _mm256_cvtepu16_ph(arg___A: __m256i) __m256h {
    var __A = arg___A;
    _ = &__A;
    return @as(__m256h, @bitCast(blk: {
        const tmp = @as(f16, @as(__v16hu, @bitCast(__A))[0]);
        const tmp_1 = @as(f16, @as(__v16hu, @bitCast(__A))[1]);
        const tmp_2 = @as(f16, @as(__v16hu, @bitCast(__A))[2]);
        const tmp_3 = @as(f16, @as(__v16hu, @bitCast(__A))[3]);
        const tmp_4 = @as(f16, @as(__v16hu, @bitCast(__A))[4]);
        const tmp_5 = @as(f16, @as(__v16hu, @bitCast(__A))[5]);
        const tmp_6 = @as(f16, @as(__v16hu, @bitCast(__A))[6]);
        const tmp_7 = @as(f16, @as(__v16hu, @bitCast(__A))[7]);
        const tmp_8 = @as(f16, @as(__v16hu, @bitCast(__A))[8]);
        const tmp_9 = @as(f16, @as(__v16hu, @bitCast(__A))[9]);
        const tmp_10 = @as(f16, @as(__v16hu, @bitCast(__A))[10]);
        const tmp_11 = @as(f16, @as(__v16hu, @bitCast(__A))[11]);
        const tmp_12 = @as(f16, @as(__v16hu, @bitCast(__A))[12]);
        const tmp_13 = @as(f16, @as(__v16hu, @bitCast(__A))[13]);
        const tmp_14 = @as(f16, @as(__v16hu, @bitCast(__A))[14]);
        const tmp_15 = @as(f16, @as(__v16hu, @bitCast(__A))[15]);
        break :blk __v16hf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
            tmp_8,
            tmp_9,
            tmp_10,
            tmp_11,
            tmp_12,
            tmp_13,
            tmp_14,
            tmp_15,
        };
    }));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:920:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:919:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepu16_ph(arg___W: __m256h, arg___U: __mmask16, arg___A: __m256i) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:926:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:925:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepu16_ph(arg___U: __mmask16, arg___A: __m256i) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:932:19: warning: TODO implement function '__builtin_ia32_vcvtph2dq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:931:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtph_epi32(arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:938:19: warning: TODO implement function '__builtin_ia32_vcvtph2dq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:937:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtph_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:944:19: warning: TODO implement function '__builtin_ia32_vcvtph2dq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:943:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtph_epi32(arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:950:19: warning: TODO implement function '__builtin_ia32_vcvtph2dq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:949:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtph_epi32(arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:956:19: warning: TODO implement function '__builtin_ia32_vcvtph2dq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:955:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtph_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:962:19: warning: TODO implement function '__builtin_ia32_vcvtph2dq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:961:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtph_epi32(arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:967:19: warning: TODO implement function '__builtin_ia32_vcvtph2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:966:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtph_epu32(arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:973:19: warning: TODO implement function '__builtin_ia32_vcvtph2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:972:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtph_epu32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:979:19: warning: TODO implement function '__builtin_ia32_vcvtph2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:978:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtph_epu32(arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:985:19: warning: TODO implement function '__builtin_ia32_vcvtph2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:984:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtph_epu32(arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:991:19: warning: TODO implement function '__builtin_ia32_vcvtph2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:990:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtph_epu32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:997:19: warning: TODO implement function '__builtin_ia32_vcvtph2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:996:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtph_epu32(arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1002:19: warning: TODO implement function '__builtin_ia32_vcvtdq2ph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1001:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtepi32_ph(arg___A: __m128i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1008:19: warning: TODO implement function '__builtin_ia32_vcvtdq2ph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1007:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi32_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1014:19: warning: TODO implement function '__builtin_ia32_vcvtdq2ph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1013:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi32_ph(arg___U: __mmask8, arg___A: __m128i) __m128h;
pub inline fn _mm256_cvtepi32_ph(arg___A: __m256i) __m128h {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128h, @bitCast(blk: {
        const tmp = @as(f16, @as(__v8si, @bitCast(__A))[0]);
        const tmp_1 = @as(f16, @as(__v8si, @bitCast(__A))[1]);
        const tmp_2 = @as(f16, @as(__v8si, @bitCast(__A))[2]);
        const tmp_3 = @as(f16, @as(__v8si, @bitCast(__A))[3]);
        const tmp_4 = @as(f16, @as(__v8si, @bitCast(__A))[4]);
        const tmp_5 = @as(f16, @as(__v8si, @bitCast(__A))[5]);
        const tmp_6 = @as(f16, @as(__v8si, @bitCast(__A))[6]);
        const tmp_7 = @as(f16, @as(__v8si, @bitCast(__A))[7]);
        break :blk __v8hf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:1025:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1024:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi32_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m256i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1031:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1030:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi32_ph(arg___U: __mmask8, arg___A: __m256i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1036:19: warning: TODO implement function '__builtin_ia32_vcvtudq2ph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1035:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtepu32_ph(arg___A: __m128i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1042:19: warning: TODO implement function '__builtin_ia32_vcvtudq2ph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1041:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepu32_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1048:19: warning: TODO implement function '__builtin_ia32_vcvtudq2ph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1047:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepu32_ph(arg___U: __mmask8, arg___A: __m128i) __m128h;
pub inline fn _mm256_cvtepu32_ph(arg___A: __m256i) __m128h {
    var __A = arg___A;
    _ = &__A;
    return @as(__m128h, @bitCast(blk: {
        const tmp = @as(f16, @as(__v8su, @bitCast(__A))[0]);
        const tmp_1 = @as(f16, @as(__v8su, @bitCast(__A))[1]);
        const tmp_2 = @as(f16, @as(__v8su, @bitCast(__A))[2]);
        const tmp_3 = @as(f16, @as(__v8su, @bitCast(__A))[3]);
        const tmp_4 = @as(f16, @as(__v8su, @bitCast(__A))[4]);
        const tmp_5 = @as(f16, @as(__v8su, @bitCast(__A))[5]);
        const tmp_6 = @as(f16, @as(__v8su, @bitCast(__A))[6]);
        const tmp_7 = @as(f16, @as(__v8su, @bitCast(__A))[7]);
        break :blk __v8hf{
            tmp,
            tmp_1,
            tmp_2,
            tmp_3,
            tmp_4,
            tmp_5,
            tmp_6,
            tmp_7,
        };
    }));
}
// /usr/lib/zig/include/avx512vlfp16intrin.h:1059:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1058:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepu32_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m256i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1065:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1064:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepu32_ph(arg___U: __mmask8, arg___A: __m256i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1070:19: warning: TODO implement function '__builtin_ia32_vcvttph2dq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1069:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttph_epi32(arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1076:19: warning: TODO implement function '__builtin_ia32_vcvttph2dq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1075:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvttph_epi32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1082:19: warning: TODO implement function '__builtin_ia32_vcvttph2dq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1081:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvttph_epi32(arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1088:19: warning: TODO implement function '__builtin_ia32_vcvttph2dq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1087:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvttph_epi32(arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1094:19: warning: TODO implement function '__builtin_ia32_vcvttph2dq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1093:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvttph_epi32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1100:19: warning: TODO implement function '__builtin_ia32_vcvttph2dq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1099:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvttph_epi32(arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1105:19: warning: TODO implement function '__builtin_ia32_vcvttph2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1104:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttph_epu32(arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1111:19: warning: TODO implement function '__builtin_ia32_vcvttph2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1110:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvttph_epu32(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1117:19: warning: TODO implement function '__builtin_ia32_vcvttph2udq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1116:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvttph_epu32(arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1123:19: warning: TODO implement function '__builtin_ia32_vcvttph2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1122:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvttph_epu32(arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1129:19: warning: TODO implement function '__builtin_ia32_vcvttph2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1128:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvttph_epu32(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1135:19: warning: TODO implement function '__builtin_ia32_vcvttph2udq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1134:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvttph_epu32(arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1140:19: warning: TODO implement function '__builtin_ia32_vcvtqq2ph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1139:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtepi64_ph(arg___A: __m128i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1146:19: warning: TODO implement function '__builtin_ia32_vcvtqq2ph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1145:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepi64_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1152:19: warning: TODO implement function '__builtin_ia32_vcvtqq2ph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1151:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepi64_ph(arg___U: __mmask8, arg___A: __m128i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1158:19: warning: TODO implement function '__builtin_ia32_vcvtqq2ph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1157:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtepi64_ph(arg___A: __m256i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1164:19: warning: TODO implement function '__builtin_ia32_vcvtqq2ph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1163:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepi64_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m256i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1170:19: warning: TODO implement function '__builtin_ia32_vcvtqq2ph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1169:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepi64_ph(arg___U: __mmask8, arg___A: __m256i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1175:19: warning: TODO implement function '__builtin_ia32_vcvtph2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1174:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtph_epi64(arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1181:19: warning: TODO implement function '__builtin_ia32_vcvtph2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1180:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtph_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1187:19: warning: TODO implement function '__builtin_ia32_vcvtph2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1186:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtph_epi64(arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1193:19: warning: TODO implement function '__builtin_ia32_vcvtph2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1192:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtph_epi64(arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1199:19: warning: TODO implement function '__builtin_ia32_vcvtph2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1198:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtph_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1205:19: warning: TODO implement function '__builtin_ia32_vcvtph2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1204:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtph_epi64(arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1210:19: warning: TODO implement function '__builtin_ia32_vcvtuqq2ph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1209:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtepu64_ph(arg___A: __m128i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1216:19: warning: TODO implement function '__builtin_ia32_vcvtuqq2ph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1215:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtepu64_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1222:19: warning: TODO implement function '__builtin_ia32_vcvtuqq2ph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1221:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtepu64_ph(arg___U: __mmask8, arg___A: __m128i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1228:19: warning: TODO implement function '__builtin_ia32_vcvtuqq2ph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1227:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtepu64_ph(arg___A: __m256i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1234:19: warning: TODO implement function '__builtin_ia32_vcvtuqq2ph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1233:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtepu64_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m256i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1240:19: warning: TODO implement function '__builtin_ia32_vcvtuqq2ph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1239:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtepu64_ph(arg___U: __mmask8, arg___A: __m256i) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1245:19: warning: TODO implement function '__builtin_ia32_vcvtph2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1244:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtph_epu64(arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1251:19: warning: TODO implement function '__builtin_ia32_vcvtph2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1250:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtph_epu64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1257:19: warning: TODO implement function '__builtin_ia32_vcvtph2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1256:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtph_epu64(arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1263:19: warning: TODO implement function '__builtin_ia32_vcvtph2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1262:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtph_epu64(arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1269:19: warning: TODO implement function '__builtin_ia32_vcvtph2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1268:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtph_epu64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1275:19: warning: TODO implement function '__builtin_ia32_vcvtph2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1274:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtph_epu64(arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1280:19: warning: TODO implement function '__builtin_ia32_vcvttph2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1279:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttph_epi64(arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1286:19: warning: TODO implement function '__builtin_ia32_vcvttph2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1285:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvttph_epi64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1292:19: warning: TODO implement function '__builtin_ia32_vcvttph2qq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1291:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvttph_epi64(arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1298:19: warning: TODO implement function '__builtin_ia32_vcvttph2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1297:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvttph_epi64(arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1304:19: warning: TODO implement function '__builtin_ia32_vcvttph2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1303:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvttph_epi64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1310:19: warning: TODO implement function '__builtin_ia32_vcvttph2qq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1309:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvttph_epi64(arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1315:19: warning: TODO implement function '__builtin_ia32_vcvttph2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1314:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvttph_epu64(arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1321:19: warning: TODO implement function '__builtin_ia32_vcvttph2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1320:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvttph_epu64(arg___W: __m128i, arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1327:19: warning: TODO implement function '__builtin_ia32_vcvttph2uqq128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1326:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvttph_epu64(arg___U: __mmask8, arg___A: __m128h) __m128i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1333:19: warning: TODO implement function '__builtin_ia32_vcvttph2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1332:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvttph_epu64(arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1339:19: warning: TODO implement function '__builtin_ia32_vcvttph2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1338:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvttph_epu64(arg___W: __m256i, arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1345:19: warning: TODO implement function '__builtin_ia32_vcvttph2uqq256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1344:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvttph_epu64(arg___U: __mmask8, arg___A: __m128h) __m256i;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1350:18: warning: TODO implement function '__builtin_ia32_vcvtph2psx128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1349:48: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtxph_ps(arg___A: __m128h) __m128;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1357:18: warning: TODO implement function '__builtin_ia32_vcvtph2psx128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1354:48: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtxph_ps(arg___W: __m128, arg___U: __mmask8, arg___A: __m128h) __m128;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1363:18: warning: TODO implement function '__builtin_ia32_vcvtph2psx128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1362:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtxph_ps(arg___U: __mmask8, arg___A: __m128h) __m128;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1368:18: warning: TODO implement function '__builtin_ia32_vcvtph2psx256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1367:48: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtxph_ps(arg___A: __m128h) __m256;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1374:18: warning: TODO implement function '__builtin_ia32_vcvtph2psx256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1373:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtxph_ps(arg___W: __m256, arg___U: __mmask8, arg___A: __m128h) __m256;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1380:18: warning: TODO implement function '__builtin_ia32_vcvtph2psx256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1379:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtxph_ps(arg___U: __mmask8, arg___A: __m128h) __m256;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1385:19: warning: TODO implement function '__builtin_ia32_vcvtps2phx128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1384:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtxps_ph(arg___A: __m128) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1392:19: warning: TODO implement function '__builtin_ia32_vcvtps2phx128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1389:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtxps_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1398:19: warning: TODO implement function '__builtin_ia32_vcvtps2phx128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1397:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtxps_ph(arg___U: __mmask8, arg___A: __m128) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1403:19: warning: TODO implement function '__builtin_ia32_vcvtps2phx256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1402:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtxps_ph(arg___A: __m256) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1409:19: warning: TODO implement function '__builtin_ia32_vcvtps2phx256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1408:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtxps_ph(arg___W: __m128h, arg___U: __mmask8, arg___A: __m256) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1415:19: warning: TODO implement function '__builtin_ia32_vcvtps2phx256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1414:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtxps_ph(arg___U: __mmask8, arg___A: __m256) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1422:19: warning: TODO implement function '__builtin_ia32_vfmaddph' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1419:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmadd_ph(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1430:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1426:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmadd_ph(arg___A: __m128h, arg___U: __mmask8, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1438:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1437:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmadd_ph(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h, arg___U: __mmask8) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1446:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1445:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmadd_ph(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1455:19: warning: TODO implement function '__builtin_ia32_vfmaddph' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1452:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmsub_ph(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1463:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1459:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmsub_ph(arg___A: __m128h, arg___U: __mmask8, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1470:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1469:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmsub_ph(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1477:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1476:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fnmadd_ph(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h, arg___U: __mmask8) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1485:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1484:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fnmadd_ph(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1493:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1492:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fnmsub_ph(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1502:19: warning: TODO implement function '__builtin_ia32_vfmaddph256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1499:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fmadd_ph(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1508:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1507:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fmadd_ph(arg___A: __m256h, arg___U: __mmask16, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1516:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1515:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fmadd_ph(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h, arg___U: __mmask16) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1524:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1523:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fmadd_ph(arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1533:19: warning: TODO implement function '__builtin_ia32_vfmaddph256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1530:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fmsub_ph(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1539:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1538:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fmsub_ph(arg___A: __m256h, arg___U: __mmask16, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1547:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1546:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fmsub_ph(arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1555:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1554:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fnmadd_ph(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h, arg___U: __mmask16) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1563:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1562:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fnmadd_ph(arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1571:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1570:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fnmsub_ph(arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1580:19: warning: TODO implement function '__builtin_ia32_vfmaddsubph' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1577:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmaddsub_ph(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1586:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1585:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmaddsub_ph(arg___A: __m128h, arg___U: __mmask8, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1594:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1593:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmaddsub_ph(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h, arg___U: __mmask8) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1602:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1601:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmaddsub_ph(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1611:19: warning: TODO implement function '__builtin_ia32_vfmaddsubph' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1608:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmsubadd_ph(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1617:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1616:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmsubadd_ph(arg___A: __m128h, arg___U: __mmask8, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1625:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1624:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmsubadd_ph(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1633:19: warning: TODO implement function '__builtin_ia32_vfmaddsubph256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1632:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fmaddsub_ph(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1639:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1638:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fmaddsub_ph(arg___A: __m256h, arg___U: __mmask16, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1647:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1646:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fmaddsub_ph(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h, arg___U: __mmask16) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1655:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1654:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fmaddsub_ph(arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1663:19: warning: TODO implement function '__builtin_ia32_vfmaddsubph256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1662:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fmsubadd_ph(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1669:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1668:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fmsubadd_ph(arg___A: __m256h, arg___U: __mmask16, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1677:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1676:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fmsubadd_ph(arg___U: __mmask16, arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1685:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1684:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmsub_ph(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h, arg___U: __mmask8) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1693:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1692:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fmsub_ph(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h, arg___U: __mmask16) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1701:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1700:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmsubadd_ph(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h, arg___U: __mmask8) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1709:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1708:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fmsubadd_ph(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h, arg___U: __mmask16) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1718:19: warning: TODO implement function '__builtin_ia32_vfmaddph' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1715:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fnmadd_ph(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1724:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1723:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fnmadd_ph(arg___A: __m128h, arg___U: __mmask8, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1733:19: warning: TODO implement function '__builtin_ia32_vfmaddph256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1730:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fnmadd_ph(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1739:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1738:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fnmadd_ph(arg___A: __m256h, arg___U: __mmask16, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1748:19: warning: TODO implement function '__builtin_ia32_vfmaddph' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1745:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fnmsub_ph(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1754:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1753:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fnmsub_ph(arg___A: __m128h, arg___U: __mmask8, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1762:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1761:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fnmsub_ph(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h, arg___U: __mmask8) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1771:19: warning: TODO implement function '__builtin_ia32_vfmaddph256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1768:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fnmsub_ph(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1777:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1776:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fnmsub_ph(arg___A: __m256h, arg___U: __mmask16, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1785:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1784:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fnmsub_ph(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h, arg___U: __mmask16) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1793:19: warning: TODO implement function '__builtin_ia32_vfcmulcph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1791:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fcmul_pch(arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1799:19: warning: TODO implement function '__builtin_ia32_vfcmulcph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1798:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fcmul_pch(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1805:19: warning: TODO implement function '__builtin_ia32_vfcmulcph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1804:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fcmul_pch(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1811:19: warning: TODO implement function '__builtin_ia32_vfcmulcph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1809:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fcmul_pch(arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1817:19: warning: TODO implement function '__builtin_ia32_vfcmulcph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1816:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fcmul_pch(arg___W: __m256h, arg___U: __mmask8, arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1823:19: warning: TODO implement function '__builtin_ia32_vfcmulcph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1822:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fcmul_pch(arg___U: __mmask8, arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1830:19: warning: TODO implement function '__builtin_ia32_vfcmaddcph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1827:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fcmadd_pch(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1836:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1835:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fcmadd_pch(arg___A: __m128h, arg___U: __mmask8, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1845:19: warning: TODO implement function '__builtin_ia32_vfcmaddcph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1844:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fcmadd_pch(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h, arg___U: __mmask8) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1851:19: warning: TODO implement function '__builtin_ia32_vfcmaddcph128_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1850:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fcmadd_pch(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1858:19: warning: TODO implement function '__builtin_ia32_vfcmaddcph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1855:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fcmadd_pch(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1864:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1863:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fcmadd_pch(arg___A: __m256h, arg___U: __mmask8, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1873:19: warning: TODO implement function '__builtin_ia32_vfcmaddcph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1872:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fcmadd_pch(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h, arg___U: __mmask8) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1879:19: warning: TODO implement function '__builtin_ia32_vfcmaddcph256_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1878:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fcmadd_pch(arg___U: __mmask8, arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1885:19: warning: TODO implement function '__builtin_ia32_vfmulcph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1883:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmul_pch(arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1893:19: warning: TODO implement function '__builtin_ia32_vfmulcph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1889:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmul_pch(arg___W: __m128h, arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1899:19: warning: TODO implement function '__builtin_ia32_vfmulcph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1898:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmul_pch(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1905:19: warning: TODO implement function '__builtin_ia32_vfmulcph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1903:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fmul_pch(arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1911:19: warning: TODO implement function '__builtin_ia32_vfmulcph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1910:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fmul_pch(arg___W: __m256h, arg___U: __mmask8, arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1917:19: warning: TODO implement function '__builtin_ia32_vfmulcph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1916:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fmul_pch(arg___U: __mmask8, arg___A: __m256h, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1924:19: warning: TODO implement function '__builtin_ia32_vfmaddcph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1921:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_fmadd_pch(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1930:19: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1929:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_fmadd_pch(arg___A: __m128h, arg___U: __mmask8, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1939:19: warning: TODO implement function '__builtin_ia32_vfmaddcph128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1938:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask3_fmadd_pch(arg___A: __m128h, arg___B: __m128h, arg___C: __m128h, arg___U: __mmask8) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1945:19: warning: TODO implement function '__builtin_ia32_vfmaddcph128_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1944:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_fmadd_pch(arg___U: __mmask8, arg___A: __m128h, arg___B: __m128h, arg___C: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1952:19: warning: TODO implement function '__builtin_ia32_vfmaddcph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1949:49: warning: unable to translate function, demoted to extern
pub extern fn _mm256_fmadd_pch(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1958:19: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1957:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_fmadd_pch(arg___A: __m256h, arg___U: __mmask8, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1967:19: warning: TODO implement function '__builtin_ia32_vfmaddcph256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1966:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask3_fmadd_pch(arg___A: __m256h, arg___B: __m256h, arg___C: __m256h, arg___U: __mmask8) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1973:19: warning: TODO implement function '__builtin_ia32_vfmaddcph256_maskz' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1972:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_fmadd_pch(arg___U: __mmask8, arg___A: __m256h, arg___B: __m256h, arg___C: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1980:19: warning: TODO implement function '__builtin_ia32_selectph_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1977:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_blend_ph(arg___U: __mmask8, arg___A: __m128h, arg___W: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1986:19: warning: TODO implement function '__builtin_ia32_selectph_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1985:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_blend_ph(arg___U: __mmask16, arg___A: __m256h, arg___W: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1992:19: warning: TODO implement function '__builtin_ia32_vpermi2varhi128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1991:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_permutex2var_ph(arg___A: __m128h, arg___I: __m128i, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:1998:19: warning: TODO implement function '__builtin_ia32_vpermi2varhi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:1997:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutex2var_ph(arg___A: __m256h, arg___I: __m256i, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:2004:19: warning: TODO implement function '__builtin_ia32_permvarhi128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:2003:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_permutexvar_ph(arg___A: __m128i, arg___B: __m128h) __m128h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:2009:19: warning: TODO implement function '__builtin_ia32_permvarhi256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:2008:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_permutexvar_ph(arg___A: __m256i, arg___B: __m256h) __m256h;
// /usr/lib/zig/include/avx512vlfp16intrin.h:2014:10: warning: TODO implement function '__builtin_ia32_reduce_fadd_ph256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:2013:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_add_ph(arg___W: __m256h) f16;
// /usr/lib/zig/include/avx512vlfp16intrin.h:2019:10: warning: TODO implement function '__builtin_ia32_reduce_fmul_ph256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:2018:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_mul_ph(arg___W: __m256h) f16;
// /usr/lib/zig/include/avx512vlfp16intrin.h:2024:10: warning: TODO implement function '__builtin_ia32_reduce_fmax_ph256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:2023:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_max_ph(arg___V: __m256h) f16;
// /usr/lib/zig/include/avx512vlfp16intrin.h:2029:10: warning: TODO implement function '__builtin_ia32_reduce_fmin_ph256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:2028:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_reduce_min_ph(arg___V: __m256h) f16;
// /usr/lib/zig/include/avx512vlfp16intrin.h:2034:10: warning: TODO implement function '__builtin_ia32_reduce_fadd_ph128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:2033:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_add_ph(arg___W: __m128h) f16;
// /usr/lib/zig/include/avx512vlfp16intrin.h:2039:10: warning: TODO implement function '__builtin_ia32_reduce_fmul_ph128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:2038:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_mul_ph(arg___W: __m128h) f16;
// /usr/lib/zig/include/avx512vlfp16intrin.h:2044:10: warning: TODO implement function '__builtin_ia32_reduce_fmax_ph128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:2043:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_max_ph(arg___V: __m128h) f16;
// /usr/lib/zig/include/avx512vlfp16intrin.h:2049:10: warning: TODO implement function '__builtin_ia32_reduce_fmin_ph128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlfp16intrin.h:2048:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_reduce_min_ph(arg___V: __m128h) f16;
// /usr/lib/zig/include/avx512bf16intrin.h:18:16: warning: unsupported builtin type
pub const __v32bf = @compileError("unable to resolve typedef child type");
// /usr/lib/zig/include/avx512bf16intrin.h:18:16

// /usr/lib/zig/include/avx512bf16intrin.h:19:16: warning: unsupported builtin type
pub const __m512bh = @compileError("unable to resolve typedef child type");
// /usr/lib/zig/include/avx512bf16intrin.h:19:16

// /usr/lib/zig/include/avx512bf16intrin.h:20:16: warning: unsupported builtin type
pub const __bfloat16 = @compileError("unable to resolve typedef child type");
// /usr/lib/zig/include/avx512bf16intrin.h:20:16

// /usr/lib/zig/include/avx512bf16intrin.h:39:44: warning: unsupported builtin type
pub const _mm_cvtsbh_ss = @compileError("unable to resolve prototype of function");
// /usr/lib/zig/include/avx512bf16intrin.h:39:44

// /usr/lib/zig/include/avx512bf16intrin.h:57:20: warning: TODO implement function '__builtin_ia32_cvtne2ps2bf16_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bf16intrin.h:56:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtne2ps_pbh(arg___A: __m512, arg___B: __m512) __m512bh;
// /usr/lib/zig/include/avx512bf16intrin.h:80:20: warning: TODO implement function '__builtin_ia32_selectpbf_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bf16intrin.h:79:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtne2ps_pbh(arg___W: __m512bh, arg___U: __mmask32, arg___A: __m512, arg___B: __m512) __m512bh;
// /usr/lib/zig/include/avx512bf16intrin.h:102:20: warning: TODO implement function '__builtin_ia32_selectpbf_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bf16intrin.h:101:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtne2ps_pbh(arg___U: __mmask32, arg___A: __m512, arg___B: __m512) __m512bh;
// /usr/lib/zig/include/avx512bf16intrin.h:118:20: warning: TODO implement function '__builtin_ia32_cvtneps2bf16_512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bf16intrin.h:117:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_cvtneps_pbh(arg___A: __m512) __m256bh;
// /usr/lib/zig/include/avx512bf16intrin.h:139:20: warning: TODO implement function '__builtin_ia32_cvtneps2bf16_512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bf16intrin.h:138:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_cvtneps_pbh(arg___W: __m256bh, arg___U: __mmask16, arg___A: __m512) __m256bh;
// /usr/lib/zig/include/avx512bf16intrin.h:158:20: warning: TODO implement function '__builtin_ia32_cvtneps2bf16_512_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bf16intrin.h:157:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_cvtneps_pbh(arg___U: __mmask16, arg___A: __m512) __m256bh;
// /usr/lib/zig/include/avx512bf16intrin.h:179:18: warning: TODO implement function '__builtin_ia32_dpbf16ps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bf16intrin.h:178:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_dpbf16_ps(arg___D: __m512, arg___A: __m512bh, arg___B: __m512bh) __m512;
// /usr/lib/zig/include/avx512bf16intrin.h:203:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bf16intrin.h:202:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_dpbf16_ps(arg___D: __m512, arg___U: __mmask16, arg___A: __m512bh, arg___B: __m512bh) __m512;
// /usr/lib/zig/include/avx512bf16intrin.h:227:18: warning: TODO implement function '__builtin_ia32_selectps_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512bf16intrin.h:226:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_maskz_dpbf16_ps(arg___U: __mmask16, arg___D: __m512, arg___A: __m512bh, arg___B: __m512bh) __m512;
pub inline fn _mm512_cvtpbh_ps(arg___A: __m256bh) __m512 {
    var __A = arg___A;
    _ = &__A;
    return _mm512_castsi512_ps(_mm512_slli_epi32(_mm512_cvtepi16_epi32(@as(__m256i, @bitCast(__A))), @as(c_uint, @bitCast(@as(c_int, 16)))));
}
pub inline fn _mm512_maskz_cvtpbh_ps(arg___U: __mmask16, arg___A: __m256bh) __m512 {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return _mm512_castsi512_ps(_mm512_slli_epi32(_mm512_maskz_cvtepi16_epi32(__U, @as(__m256i, @bitCast(__A))), @as(c_uint, @bitCast(@as(c_int, 16)))));
}
pub inline fn _mm512_mask_cvtpbh_ps(arg___S: __m512, arg___U: __mmask16, arg___A: __m256bh) __m512 {
    var __S = arg___S;
    _ = &__S;
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return _mm512_castsi512_ps(_mm512_mask_slli_epi32(@as(__m512i, @bitCast(__S)), __U, _mm512_cvtepi16_epi32(@as(__m256i, @bitCast(__A))), @as(c_uint, @bitCast(@as(c_int, 16)))));
}
// /usr/lib/zig/include/avx512vlbf16intrin.h:41:20: warning: TODO implement function '__builtin_ia32_cvtne2ps2bf16_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:40:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtne2ps_pbh(arg___A: __m128, arg___B: __m128) __m128bh;
// /usr/lib/zig/include/avx512vlbf16intrin.h:64:20: warning: TODO implement function '__builtin_ia32_selectpbf_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:63:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtne2ps_pbh(arg___W: __m128bh, arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128bh;
// /usr/lib/zig/include/avx512vlbf16intrin.h:86:20: warning: TODO implement function '__builtin_ia32_selectpbf_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:85:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtne2ps_pbh(arg___U: __mmask8, arg___A: __m128, arg___B: __m128) __m128bh;
// /usr/lib/zig/include/avx512vlbf16intrin.h:105:20: warning: TODO implement function '__builtin_ia32_cvtne2ps2bf16_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:104:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtne2ps_pbh(arg___A: __m256, arg___B: __m256) __m256bh;
// /usr/lib/zig/include/avx512vlbf16intrin.h:128:20: warning: TODO implement function '__builtin_ia32_selectpbf_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:127:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtne2ps_pbh(arg___W: __m256bh, arg___U: __mmask16, arg___A: __m256, arg___B: __m256) __m256bh;
// /usr/lib/zig/include/avx512vlbf16intrin.h:150:20: warning: TODO implement function '__builtin_ia32_selectpbf_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:149:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtne2ps_pbh(arg___U: __mmask16, arg___A: __m256, arg___B: __m256) __m256bh;
// /usr/lib/zig/include/avx512vlbf16intrin.h:185:20: warning: TODO implement function '__builtin_ia32_cvtneps2bf16_128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:184:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_cvtneps_pbh(arg___W: __m128bh, arg___U: __mmask8, arg___A: __m128) __m128bh;
// /usr/lib/zig/include/avx512vlbf16intrin.h:205:20: warning: TODO implement function '__builtin_ia32_cvtneps2bf16_128_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:204:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_cvtneps_pbh(arg___U: __mmask8, arg___A: __m128) __m128bh;
// /usr/lib/zig/include/avx512vlbf16intrin.h:238:20: warning: TODO implement function '__builtin_ia32_cvtneps2bf16_256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:237:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_cvtneps_pbh(arg___W: __m128bh, arg___U: __mmask8, arg___A: __m256) __m128bh;
// /usr/lib/zig/include/avx512vlbf16intrin.h:257:20: warning: TODO implement function '__builtin_ia32_cvtneps2bf16_256_mask' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:256:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_cvtneps_pbh(arg___U: __mmask8, arg___A: __m256) __m128bh;
// /usr/lib/zig/include/avx512vlbf16intrin.h:278:18: warning: TODO implement function '__builtin_ia32_dpbf16ps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:277:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpbf16_ps(arg___D: __m128, arg___A: __m128bh, arg___B: __m128bh) __m128;
// /usr/lib/zig/include/avx512vlbf16intrin.h:302:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:301:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_dpbf16_ps(arg___D: __m128, arg___U: __mmask8, arg___A: __m128bh, arg___B: __m128bh) __m128;
// /usr/lib/zig/include/avx512vlbf16intrin.h:326:18: warning: TODO implement function '__builtin_ia32_selectps_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:325:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_maskz_dpbf16_ps(arg___U: __mmask8, arg___D: __m128, arg___A: __m128bh, arg___B: __m128bh) __m128;
// /usr/lib/zig/include/avx512vlbf16intrin.h:347:18: warning: TODO implement function '__builtin_ia32_dpbf16ps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:346:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpbf16_ps(arg___D: __m256, arg___A: __m256bh, arg___B: __m256bh) __m256;
// /usr/lib/zig/include/avx512vlbf16intrin.h:371:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:370:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_dpbf16_ps(arg___D: __m256, arg___U: __mmask8, arg___A: __m256bh, arg___B: __m256bh) __m256;
// /usr/lib/zig/include/avx512vlbf16intrin.h:395:18: warning: TODO implement function '__builtin_ia32_selectps_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlbf16intrin.h:394:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_maskz_dpbf16_ps(arg___U: __mmask8, arg___D: __m256, arg___A: __m256bh, arg___B: __m256bh) __m256;
// /usr/lib/zig/include/avx512vlbf16intrin.h:410:48: warning: unsupported builtin type

// /usr/lib/zig/include/avx512vlbf16intrin.h:410:48: warning: unsupported function proto return type
pub const _mm_cvtness_sbh = @compileError("unable to resolve prototype of function");
// /usr/lib/zig/include/avx512vlbf16intrin.h:410:48
pub inline fn _mm_cvtpbh_ps(arg___A: __m128bh) __m128 {
    var __A = arg___A;
    _ = &__A;
    return _mm_castsi128_ps(_mm_slli_epi32(_mm_cvtepi16_epi32(@as(__m128i, @bitCast(__A))), @as(c_int, 16)));
}
pub inline fn _mm256_cvtpbh_ps(arg___A: __m128bh) __m256 {
    var __A = arg___A;
    _ = &__A;
    return _mm256_castsi256_ps(_mm256_slli_epi32(_mm256_cvtepi16_epi32(@as(__m128i, @bitCast(__A))), @as(c_int, 16)));
}
pub inline fn _mm_maskz_cvtpbh_ps(arg___U: __mmask8, arg___A: __m128bh) __m128 {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return _mm_castsi128_ps(_mm_slli_epi32(_mm_maskz_cvtepi16_epi32(__U, @as(__m128i, @bitCast(__A))), @as(c_int, 16)));
}
pub inline fn _mm256_maskz_cvtpbh_ps(arg___U: __mmask8, arg___A: __m128bh) __m256 {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return _mm256_castsi256_ps(_mm256_slli_epi32(_mm256_maskz_cvtepi16_epi32(__U, @as(__m128i, @bitCast(__A))), @as(c_int, 16)));
}
pub inline fn _mm_mask_cvtpbh_ps(arg___S: __m128, arg___U: __mmask8, arg___A: __m128bh) __m128 {
    var __S = arg___S;
    _ = &__S;
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return _mm_castsi128_ps(_mm_mask_slli_epi32(@as(__m128i, @bitCast(__S)), __U, _mm_cvtepi16_epi32(@as(__m128i, @bitCast(__A))), @as(c_uint, @bitCast(@as(c_int, 16)))));
}
pub inline fn _mm256_mask_cvtpbh_ps(arg___S: __m256, arg___U: __mmask8, arg___A: __m128bh) __m256 {
    var __S = arg___S;
    _ = &__S;
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    return _mm256_castsi256_ps(_mm256_mask_slli_epi32(@as(__m256i, @bitCast(__S)), __U, _mm256_cvtepi16_epi32(@as(__m128i, @bitCast(__A))), @as(c_uint, @bitCast(@as(c_int, 16)))));
}
// /usr/lib/zig/include/pkuintrin.h:23:10: warning: TODO implement function '__builtin_ia32_rdpkru' in std.zig.c_builtins

// /usr/lib/zig/include/pkuintrin.h:21:1: warning: unable to translate function, demoted to extern
pub extern fn _rdpkru_u32() c_uint;
// /usr/lib/zig/include/pkuintrin.h:29:3: warning: TODO implement function '__builtin_ia32_wrpkru' in std.zig.c_builtins

// /usr/lib/zig/include/pkuintrin.h:27:1: warning: unable to translate function, demoted to extern
pub extern fn _wrpkru(arg___val: c_uint) void;
// /usr/lib/zig/include/vaesintrin.h:29:20: warning: TODO implement function '__builtin_ia32_aesenc256' in std.zig.c_builtins

// /usr/lib/zig/include/vaesintrin.h:27:2: warning: unable to translate function, demoted to extern
pub extern fn _mm256_aesenc_epi128(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/vaesintrin.h:36:20: warning: TODO implement function '__builtin_ia32_aesdec256' in std.zig.c_builtins

// /usr/lib/zig/include/vaesintrin.h:34:2: warning: unable to translate function, demoted to extern
pub extern fn _mm256_aesdec_epi128(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/vaesintrin.h:43:20: warning: TODO implement function '__builtin_ia32_aesenclast256' in std.zig.c_builtins

// /usr/lib/zig/include/vaesintrin.h:41:2: warning: unable to translate function, demoted to extern
pub extern fn _mm256_aesenclast_epi128(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/vaesintrin.h:50:20: warning: TODO implement function '__builtin_ia32_aesdeclast256' in std.zig.c_builtins

// /usr/lib/zig/include/vaesintrin.h:48:2: warning: unable to translate function, demoted to extern
pub extern fn _mm256_aesdeclast_epi128(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/vaesintrin.h:58:20: warning: TODO implement function '__builtin_ia32_aesenc512' in std.zig.c_builtins

// /usr/lib/zig/include/vaesintrin.h:56:2: warning: unable to translate function, demoted to extern
pub extern fn _mm512_aesenc_epi128(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/vaesintrin.h:65:20: warning: TODO implement function '__builtin_ia32_aesdec512' in std.zig.c_builtins

// /usr/lib/zig/include/vaesintrin.h:63:2: warning: unable to translate function, demoted to extern
pub extern fn _mm512_aesdec_epi128(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/vaesintrin.h:72:20: warning: TODO implement function '__builtin_ia32_aesenclast512' in std.zig.c_builtins

// /usr/lib/zig/include/vaesintrin.h:70:2: warning: unable to translate function, demoted to extern
pub extern fn _mm512_aesenclast_epi128(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/vaesintrin.h:79:20: warning: TODO implement function '__builtin_ia32_aesdeclast512' in std.zig.c_builtins

// /usr/lib/zig/include/vaesintrin.h:77:2: warning: unable to translate function, demoted to extern
pub extern fn _mm512_aesdeclast_epi128(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/gfniintrin.h:62:20: warning: TODO implement function '__builtin_ia32_vgf2p8mulb_v16qi' in std.zig.c_builtins

// /usr/lib/zig/include/gfniintrin.h:60:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_gf2p8mul_epi8(arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/gfniintrin.h:80:20: warning: TODO implement function '__builtin_ia32_vgf2p8mulb_v32qi' in std.zig.c_builtins

// /usr/lib/zig/include/gfniintrin.h:78:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_gf2p8mul_epi8(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/gfniintrin.h:117:20: warning: TODO implement function '__builtin_ia32_vgf2p8mulb_v64qi' in std.zig.c_builtins

// /usr/lib/zig/include/gfniintrin.h:115:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_gf2p8mul_epi8(arg___A: __m512i, arg___B: __m512i) __m512i;
// /usr/lib/zig/include/gfniintrin.h:124:20: warning: TODO implement function '__builtin_ia32_selectb_512' in std.zig.c_builtins

// /usr/lib/zig/include/gfniintrin.h:122:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_mask_gf2p8mul_epi8(arg___S: __m512i, arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i;
pub inline fn _mm512_maskz_gf2p8mul_epi8(arg___U: __mmask64, arg___A: __m512i, arg___B: __m512i) __m512i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm512_mask_gf2p8mul_epi8(_mm512_setzero_si512(), __U, __A, __B);
}
// /usr/lib/zig/include/gfniintrin.h:176:20: warning: TODO implement function '__builtin_ia32_selectb_128' in std.zig.c_builtins

// /usr/lib/zig/include/gfniintrin.h:174:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_mask_gf2p8mul_epi8(arg___S: __m128i, arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i;
pub inline fn _mm_maskz_gf2p8mul_epi8(arg___U: __mmask16, arg___A: __m128i, arg___B: __m128i) __m128i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm_mask_gf2p8mul_epi8(_mm_setzero_si128(), __U, __A, __B);
}
// /usr/lib/zig/include/gfniintrin.h:191:20: warning: TODO implement function '__builtin_ia32_selectb_256' in std.zig.c_builtins

// /usr/lib/zig/include/gfniintrin.h:189:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_mask_gf2p8mul_epi8(arg___S: __m256i, arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i;
pub inline fn _mm256_maskz_gf2p8mul_epi8(arg___U: __mmask32, arg___A: __m256i, arg___B: __m256i) __m256i {
    var __U = arg___U;
    _ = &__U;
    var __A = arg___A;
    _ = &__A;
    var __B = arg___B;
    _ = &__B;
    return _mm256_mask_gf2p8mul_epi8(_mm256_setzero_si256(), __U, __A, __B);
}
// /usr/lib/zig/include/avxvnniint8intrin.h:58:19: warning: TODO implement function '__builtin_ia32_vpdpbssd128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint8intrin.h:55:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpbssd_epi32(arg___W: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniint8intrin.h:94:19: warning: TODO implement function '__builtin_ia32_vpdpbssd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint8intrin.h:93:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpbssd_epi32(arg___W: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avxvnniint8intrin.h:132:19: warning: TODO implement function '__builtin_ia32_vpdpbssds128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint8intrin.h:129:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpbssds_epi32(arg___W: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniint8intrin.h:169:19: warning: TODO implement function '__builtin_ia32_vpdpbssds256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint8intrin.h:168:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpbssds_epi32(arg___W: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avxvnniint8intrin.h:206:19: warning: TODO implement function '__builtin_ia32_vpdpbsud128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint8intrin.h:203:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpbsud_epi32(arg___W: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniint8intrin.h:242:19: warning: TODO implement function '__builtin_ia32_vpdpbsud256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint8intrin.h:241:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpbsud_epi32(arg___W: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avxvnniint8intrin.h:280:19: warning: TODO implement function '__builtin_ia32_vpdpbsuds128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint8intrin.h:277:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpbsuds_epi32(arg___W: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniint8intrin.h:317:19: warning: TODO implement function '__builtin_ia32_vpdpbsuds256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint8intrin.h:316:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpbsuds_epi32(arg___W: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avxvnniint8intrin.h:354:19: warning: TODO implement function '__builtin_ia32_vpdpbuud128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint8intrin.h:351:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpbuud_epi32(arg___W: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniint8intrin.h:390:19: warning: TODO implement function '__builtin_ia32_vpdpbuud256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint8intrin.h:389:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpbuud_epi32(arg___W: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avxvnniint8intrin.h:428:19: warning: TODO implement function '__builtin_ia32_vpdpbuuds128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint8intrin.h:425:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpbuuds_epi32(arg___W: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniint8intrin.h:465:19: warning: TODO implement function '__builtin_ia32_vpdpbuuds256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint8intrin.h:464:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpbuuds_epi32(arg___W: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avxneconvertintrin.h:58:18: warning: TODO implement function '__builtin_ia32_vbcstnebf162ps128' in std.zig.c_builtins

// /usr/lib/zig/include/avxneconvertintrin.h:57:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_bcstnebf16_ps(arg___A: ?*const anyopaque) __m128;
// /usr/lib/zig/include/avxneconvertintrin.h:91:18: warning: TODO implement function '__builtin_ia32_vbcstnebf162ps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxneconvertintrin.h:90:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_bcstnebf16_ps(arg___A: ?*const anyopaque) __m256;
// /usr/lib/zig/include/avxneconvertintrin.h:124:18: warning: TODO implement function '__builtin_ia32_vbcstnesh2ps128' in std.zig.c_builtins

// /usr/lib/zig/include/avxneconvertintrin.h:123:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_bcstnesh_ps(arg___A: ?*const anyopaque) __m128;
// /usr/lib/zig/include/avxneconvertintrin.h:157:18: warning: TODO implement function '__builtin_ia32_vbcstnesh2ps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxneconvertintrin.h:156:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_bcstnesh_ps(arg___A: ?*const anyopaque) __m256;
// /usr/lib/zig/include/avxneconvertintrin.h:190:18: warning: TODO implement function '__builtin_ia32_vcvtneebf162ps128' in std.zig.c_builtins

// /usr/lib/zig/include/avxneconvertintrin.h:189:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtneebf16_ps(arg___A: [*c]const __m128bh) __m128;
// /usr/lib/zig/include/avxneconvertintrin.h:223:18: warning: TODO implement function '__builtin_ia32_vcvtneebf162ps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxneconvertintrin.h:222:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtneebf16_ps(arg___A: [*c]const __m256bh) __m256;
// /usr/lib/zig/include/avxneconvertintrin.h:256:18: warning: TODO implement function '__builtin_ia32_vcvtneeph2ps128' in std.zig.c_builtins

// /usr/lib/zig/include/avxneconvertintrin.h:255:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtneeph_ps(arg___A: [*c]const __m128h) __m128;
// /usr/lib/zig/include/avxneconvertintrin.h:289:18: warning: TODO implement function '__builtin_ia32_vcvtneeph2ps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxneconvertintrin.h:288:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtneeph_ps(arg___A: [*c]const __m256h) __m256;
// /usr/lib/zig/include/avxneconvertintrin.h:322:18: warning: TODO implement function '__builtin_ia32_vcvtneobf162ps128' in std.zig.c_builtins

// /usr/lib/zig/include/avxneconvertintrin.h:321:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtneobf16_ps(arg___A: [*c]const __m128bh) __m128;
// /usr/lib/zig/include/avxneconvertintrin.h:355:18: warning: TODO implement function '__builtin_ia32_vcvtneobf162ps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxneconvertintrin.h:354:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtneobf16_ps(arg___A: [*c]const __m256bh) __m256;
// /usr/lib/zig/include/avxneconvertintrin.h:388:18: warning: TODO implement function '__builtin_ia32_vcvtneoph2ps128' in std.zig.c_builtins

// /usr/lib/zig/include/avxneconvertintrin.h:387:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtneoph_ps(arg___A: [*c]const __m128h) __m128;
// /usr/lib/zig/include/avxneconvertintrin.h:421:18: warning: TODO implement function '__builtin_ia32_vcvtneoph2ps256' in std.zig.c_builtins

// /usr/lib/zig/include/avxneconvertintrin.h:420:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtneoph_ps(arg___A: [*c]const __m256h) __m256;
// /usr/lib/zig/include/avxneconvertintrin.h:449:20: warning: TODO implement function '__builtin_ia32_vcvtneps2bf16128' in std.zig.c_builtins

// /usr/lib/zig/include/avxneconvertintrin.h:448:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_cvtneps_avx_pbh(arg___A: __m128) __m128bh;
// /usr/lib/zig/include/avxneconvertintrin.h:477:20: warning: TODO implement function '__builtin_ia32_vcvtneps2bf16256' in std.zig.c_builtins

// /usr/lib/zig/include/avxneconvertintrin.h:476:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_cvtneps_avx_pbh(arg___A: __m256) __m128bh;
// /usr/lib/zig/include/sha512intrin.h:65:19: warning: TODO implement function '__builtin_ia32_vsha512msg1' in std.zig.c_builtins

// /usr/lib/zig/include/sha512intrin.h:64:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sha512msg1_epi64(arg___A: __m256i, arg___B: __m128i) __m256i;
// /usr/lib/zig/include/sha512intrin.h:113:19: warning: TODO implement function '__builtin_ia32_vsha512msg2' in std.zig.c_builtins

// /usr/lib/zig/include/sha512intrin.h:112:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sha512msg2_epi64(arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/sha512intrin.h:194:19: warning: TODO implement function '__builtin_ia32_vsha512rnds2' in std.zig.c_builtins

// /usr/lib/zig/include/sha512intrin.h:193:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_sha512rnds2_epi64(arg___A: __m256i, arg___B: __m256i, arg___C: __m128i) __m256i;
// /usr/lib/zig/include/sm3intrin.h:75:19: warning: TODO implement function '__builtin_ia32_vsm3msg1' in std.zig.c_builtins

// /usr/lib/zig/include/sm3intrin.h:72:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_sm3msg1_epi32(arg___A: __m128i, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/sm3intrin.h:132:19: warning: TODO implement function '__builtin_ia32_vsm3msg2' in std.zig.c_builtins

// /usr/lib/zig/include/sm3intrin.h:129:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_sm3msg2_epi32(arg___A: __m128i, arg___B: __m128i, arg___C: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniint16intrin.h:59:19: warning: TODO implement function '__builtin_ia32_vpdpwsud128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint16intrin.h:56:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpwsud_epi32(arg___W: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniint16intrin.h:95:19: warning: TODO implement function '__builtin_ia32_vpdpwsud256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint16intrin.h:94:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpwsud_epi32(arg___W: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avxvnniint16intrin.h:133:19: warning: TODO implement function '__builtin_ia32_vpdpwsuds128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint16intrin.h:130:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpwsuds_epi32(arg___W: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniint16intrin.h:170:19: warning: TODO implement function '__builtin_ia32_vpdpwsuds256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint16intrin.h:169:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpwsuds_epi32(arg___W: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avxvnniint16intrin.h:207:19: warning: TODO implement function '__builtin_ia32_vpdpwusd128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint16intrin.h:204:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpwusd_epi32(arg___W: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniint16intrin.h:243:19: warning: TODO implement function '__builtin_ia32_vpdpwusd256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint16intrin.h:242:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpwusd_epi32(arg___W: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avxvnniint16intrin.h:281:19: warning: TODO implement function '__builtin_ia32_vpdpwusds128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint16intrin.h:278:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpwusds_epi32(arg___W: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniint16intrin.h:318:19: warning: TODO implement function '__builtin_ia32_vpdpwusds256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint16intrin.h:317:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpwusds_epi32(arg___W: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avxvnniint16intrin.h:355:19: warning: TODO implement function '__builtin_ia32_vpdpwuud128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint16intrin.h:352:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpwuud_epi32(arg___W: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniint16intrin.h:391:19: warning: TODO implement function '__builtin_ia32_vpdpwuud256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint16intrin.h:390:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpwuud_epi32(arg___W: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/avxvnniint16intrin.h:429:19: warning: TODO implement function '__builtin_ia32_vpdpwuuds128' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint16intrin.h:426:49: warning: unable to translate function, demoted to extern
pub extern fn _mm_dpwuuds_epi32(arg___W: __m128i, arg___A: __m128i, arg___B: __m128i) __m128i;
// /usr/lib/zig/include/avxvnniint16intrin.h:466:19: warning: TODO implement function '__builtin_ia32_vpdpwuuds256' in std.zig.c_builtins

// /usr/lib/zig/include/avxvnniint16intrin.h:465:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_dpwuuds_epi32(arg___W: __m256i, arg___A: __m256i, arg___B: __m256i) __m256i;
// /usr/lib/zig/include/immintrin.h:303:10: warning: TODO implement function '__builtin_ia32_rdpid' in std.zig.c_builtins

// /usr/lib/zig/include/immintrin.h:302:1: warning: unable to translate function, demoted to extern
pub extern fn _rdpid_u32() c_uint;
// /usr/lib/zig/include/immintrin.h:321:15: warning: TODO implement function '__builtin_ia32_rdrand16_step' in std.zig.c_builtins

// /usr/lib/zig/include/immintrin.h:319:1: warning: unable to translate function, demoted to extern
pub extern fn _rdrand16_step(arg___p: [*c]c_ushort) c_int;
// /usr/lib/zig/include/immintrin.h:336:15: warning: TODO implement function '__builtin_ia32_rdrand32_step' in std.zig.c_builtins

// /usr/lib/zig/include/immintrin.h:334:1: warning: unable to translate function, demoted to extern
pub extern fn _rdrand32_step(arg___p: [*c]c_uint) c_int;
// /usr/lib/zig/include/immintrin.h:352:15: warning: TODO implement function '__builtin_ia32_rdrand64_step' in std.zig.c_builtins

// /usr/lib/zig/include/immintrin.h:349:1: warning: unable to translate function, demoted to extern
pub extern fn _rdrand64_step(arg___p: [*c]c_ulonglong) c_int;
// /usr/lib/zig/include/immintrin.h:383:10: warning: TODO implement function '__builtin_ia32_rdfsbase32' in std.zig.c_builtins

// /usr/lib/zig/include/immintrin.h:381:1: warning: unable to translate function, demoted to extern
pub extern fn _readfsbase_u32() c_uint;
// /usr/lib/zig/include/immintrin.h:396:10: warning: TODO implement function '__builtin_ia32_rdfsbase64' in std.zig.c_builtins

// /usr/lib/zig/include/immintrin.h:394:1: warning: unable to translate function, demoted to extern
pub extern fn _readfsbase_u64() c_ulonglong;
// /usr/lib/zig/include/immintrin.h:409:10: warning: TODO implement function '__builtin_ia32_rdgsbase32' in std.zig.c_builtins

// /usr/lib/zig/include/immintrin.h:407:1: warning: unable to translate function, demoted to extern
pub extern fn _readgsbase_u32() c_uint;
// /usr/lib/zig/include/immintrin.h:422:10: warning: TODO implement function '__builtin_ia32_rdgsbase64' in std.zig.c_builtins

// /usr/lib/zig/include/immintrin.h:420:1: warning: unable to translate function, demoted to extern
pub extern fn _readgsbase_u64() c_ulonglong;
// /usr/lib/zig/include/immintrin.h:436:3: warning: TODO implement function '__builtin_ia32_wrfsbase32' in std.zig.c_builtins

// /usr/lib/zig/include/immintrin.h:434:1: warning: unable to translate function, demoted to extern
pub extern fn _writefsbase_u32(arg___V: c_uint) void;
// /usr/lib/zig/include/immintrin.h:450:3: warning: TODO implement function '__builtin_ia32_wrfsbase64' in std.zig.c_builtins

// /usr/lib/zig/include/immintrin.h:448:1: warning: unable to translate function, demoted to extern
pub extern fn _writefsbase_u64(arg___V: c_ulonglong) void;
// /usr/lib/zig/include/immintrin.h:464:3: warning: TODO implement function '__builtin_ia32_wrgsbase32' in std.zig.c_builtins

// /usr/lib/zig/include/immintrin.h:462:1: warning: unable to translate function, demoted to extern
pub extern fn _writegsbase_u32(arg___V: c_uint) void;
// /usr/lib/zig/include/immintrin.h:478:3: warning: TODO implement function '__builtin_ia32_wrgsbase64' in std.zig.c_builtins

// /usr/lib/zig/include/immintrin.h:476:1: warning: unable to translate function, demoted to extern
pub extern fn _writegsbase_u64(arg___V: c_ulonglong) void;
pub inline fn _loadbe_i16(arg___P_1: ?*const anyopaque) c_short {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_i16 = extern struct {
        __v: c_ushort align(1) = @import("std").mem.zeroes(c_ushort),
    };
    _ = &struct___loadu_i16;
    return @as(c_short, @bitCast(__builtin_bswap16(@as([*c]const struct___loadu_i16, @ptrCast(@alignCast(__P_1))).*.__v)));
}
pub inline fn _storebe_i16(arg___P_1: ?*anyopaque, arg___D: c_short) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __D = arg___D;
    _ = &__D;
    const struct___storeu_i16 = extern struct {
        __v: c_ushort align(1) = @import("std").mem.zeroes(c_ushort),
    };
    _ = &struct___storeu_i16;
    @as([*c]struct___storeu_i16, @ptrCast(@alignCast(__P_1))).*.__v = __builtin_bswap16(@as(c_ushort, @bitCast(__D)));
}
pub inline fn _loadbe_i32(arg___P_1: ?*const anyopaque) c_int {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_i32 = extern struct {
        __v: c_uint align(1) = @import("std").mem.zeroes(c_uint),
    };
    _ = &struct___loadu_i32;
    return @as(c_int, @bitCast(__builtin_bswap32(@as([*c]const struct___loadu_i32, @ptrCast(@alignCast(__P_1))).*.__v)));
}
pub inline fn _storebe_i32(arg___P_1: ?*anyopaque, arg___D: c_int) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __D = arg___D;
    _ = &__D;
    const struct___storeu_i32 = extern struct {
        __v: c_uint align(1) = @import("std").mem.zeroes(c_uint),
    };
    _ = &struct___storeu_i32;
    @as([*c]struct___storeu_i32, @ptrCast(@alignCast(__P_1))).*.__v = __builtin_bswap32(@as(c_uint, @bitCast(__D)));
}
pub inline fn _loadbe_i64(arg___P_1: ?*const anyopaque) c_longlong {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    const struct___loadu_i64 = extern struct {
        __v: c_ulonglong align(1) = @import("std").mem.zeroes(c_ulonglong),
    };
    _ = &struct___loadu_i64;
    return @as(c_longlong, @bitCast(@as(c_ulonglong, __builtin_bswap64(@as(c_ulong, @bitCast(@as(c_ulong, @truncate(@as([*c]const struct___loadu_i64, @ptrCast(@alignCast(__P_1))).*.__v))))))));
}
pub inline fn _storebe_i64(arg___P_1: ?*anyopaque, arg___D: c_longlong) void {
    var __P_1 = arg___P_1;
    _ = &__P_1;
    var __D = arg___D;
    _ = &__D;
    const struct___storeu_i64 = extern struct {
        __v: c_ulonglong align(1) = @import("std").mem.zeroes(c_ulonglong),
    };
    _ = &struct___storeu_i64;
    @as([*c]struct___storeu_i64, @ptrCast(@alignCast(__P_1))).*.__v = @as(c_ulonglong, @bitCast(@as(c_ulonglong, __builtin_bswap64(@as(c_ulong, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, @bitCast(__D))))))))));
}
// /usr/lib/zig/include/rtmintrin.h:32:24: warning: TODO implement function '__builtin_ia32_xbegin' in std.zig.c_builtins

// /usr/lib/zig/include/rtmintrin.h:30:1: warning: unable to translate function, demoted to extern
pub extern fn _xbegin() c_uint;
// /usr/lib/zig/include/rtmintrin.h:38:3: warning: TODO implement function '__builtin_ia32_xend' in std.zig.c_builtins

// /usr/lib/zig/include/rtmintrin.h:36:1: warning: unable to translate function, demoted to extern
pub extern fn _xend() void;
// /usr/lib/zig/include/xtestintrin.h:24:10: warning: TODO implement function '__builtin_ia32_xtest' in std.zig.c_builtins

// /usr/lib/zig/include/xtestintrin.h:23:5: warning: unable to translate function, demoted to extern
pub extern fn _xtest() c_int;
// /usr/lib/zig/include/shaintrin.h:72:19: warning: TODO implement function '__builtin_ia32_sha1nexte' in std.zig.c_builtins

// /usr/lib/zig/include/shaintrin.h:70:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sha1nexte_epu32(arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/shaintrin.h:92:19: warning: TODO implement function '__builtin_ia32_sha1msg1' in std.zig.c_builtins

// /usr/lib/zig/include/shaintrin.h:90:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sha1msg1_epu32(arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/shaintrin.h:112:19: warning: TODO implement function '__builtin_ia32_sha1msg2' in std.zig.c_builtins

// /usr/lib/zig/include/shaintrin.h:110:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sha1msg2_epu32(arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/shaintrin.h:144:19: warning: TODO implement function '__builtin_ia32_sha256rnds2' in std.zig.c_builtins

// /usr/lib/zig/include/shaintrin.h:142:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sha256rnds2_epu32(arg___X: __m128i, arg___Y: __m128i, arg___Z: __m128i) __m128i;
// /usr/lib/zig/include/shaintrin.h:164:19: warning: TODO implement function '__builtin_ia32_sha256msg1' in std.zig.c_builtins

// /usr/lib/zig/include/shaintrin.h:162:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sha256msg1_epu32(arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/shaintrin.h:184:19: warning: TODO implement function '__builtin_ia32_sha256msg2' in std.zig.c_builtins

// /usr/lib/zig/include/shaintrin.h:182:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_sha256msg2_epu32(arg___X: __m128i, arg___Y: __m128i) __m128i;
// /usr/lib/zig/include/fxsrintrin.h:32:3: warning: TODO implement function '__builtin_ia32_fxsave' in std.zig.c_builtins

// /usr/lib/zig/include/fxsrintrin.h:30:1: warning: unable to translate function, demoted to extern
pub extern fn _fxsave(arg___p: ?*anyopaque) void;
// /usr/lib/zig/include/fxsrintrin.h:50:3: warning: TODO implement function '__builtin_ia32_fxrstor' in std.zig.c_builtins

// /usr/lib/zig/include/fxsrintrin.h:48:1: warning: unable to translate function, demoted to extern
pub extern fn _fxrstor(arg___p: ?*anyopaque) void;
// /usr/lib/zig/include/fxsrintrin.h:67:3: warning: TODO implement function '__builtin_ia32_fxsave64' in std.zig.c_builtins

// /usr/lib/zig/include/fxsrintrin.h:65:1: warning: unable to translate function, demoted to extern
pub extern fn _fxsave64(arg___p: ?*anyopaque) void;
// /usr/lib/zig/include/fxsrintrin.h:85:3: warning: TODO implement function '__builtin_ia32_fxrstor64' in std.zig.c_builtins

// /usr/lib/zig/include/fxsrintrin.h:83:1: warning: unable to translate function, demoted to extern
pub extern fn _fxrstor64(arg___p: ?*anyopaque) void;
// /usr/lib/zig/include/xsaveintrin.h:26:3: warning: TODO implement function '__builtin_ia32_xsave' in std.zig.c_builtins

// /usr/lib/zig/include/xsaveintrin.h:25:1: warning: unable to translate function, demoted to extern
pub extern fn _xsave(arg___p: ?*anyopaque, arg___m: c_ulonglong) void;
// /usr/lib/zig/include/xsaveintrin.h:31:3: warning: TODO implement function '__builtin_ia32_xrstor' in std.zig.c_builtins

// /usr/lib/zig/include/xsaveintrin.h:30:1: warning: unable to translate function, demoted to extern
pub extern fn _xrstor(arg___p: ?*anyopaque, arg___m: c_ulonglong) void;
// /usr/lib/zig/include/xsaveintrin.h:51:3: warning: TODO implement function '__builtin_ia32_xsave64' in std.zig.c_builtins

// /usr/lib/zig/include/xsaveintrin.h:50:1: warning: unable to translate function, demoted to extern
pub extern fn _xsave64(arg___p: ?*anyopaque, arg___m: c_ulonglong) void;
// /usr/lib/zig/include/xsaveintrin.h:56:3: warning: TODO implement function '__builtin_ia32_xrstor64' in std.zig.c_builtins

// /usr/lib/zig/include/xsaveintrin.h:55:1: warning: unable to translate function, demoted to extern
pub extern fn _xrstor64(arg___p: ?*anyopaque, arg___m: c_ulonglong) void;
// /usr/lib/zig/include/xsaveoptintrin.h:22:3: warning: TODO implement function '__builtin_ia32_xsaveopt' in std.zig.c_builtins

// /usr/lib/zig/include/xsaveoptintrin.h:21:1: warning: unable to translate function, demoted to extern
pub extern fn _xsaveopt(arg___p: ?*anyopaque, arg___m: c_ulonglong) void;
// /usr/lib/zig/include/xsaveoptintrin.h:28:3: warning: TODO implement function '__builtin_ia32_xsaveopt64' in std.zig.c_builtins

// /usr/lib/zig/include/xsaveoptintrin.h:27:1: warning: unable to translate function, demoted to extern
pub extern fn _xsaveopt64(arg___p: ?*anyopaque, arg___m: c_ulonglong) void;
// /usr/lib/zig/include/xsavecintrin.h:47:3: warning: TODO implement function '__builtin_ia32_xsavec' in std.zig.c_builtins

// /usr/lib/zig/include/xsavecintrin.h:46:1: warning: unable to translate function, demoted to extern
pub extern fn _xsavec(arg___p: ?*anyopaque, arg___m: c_ulonglong) void;
// /usr/lib/zig/include/xsavecintrin.h:78:3: warning: TODO implement function '__builtin_ia32_xsavec64' in std.zig.c_builtins

// /usr/lib/zig/include/xsavecintrin.h:77:1: warning: unable to translate function, demoted to extern
pub extern fn _xsavec64(arg___p: ?*anyopaque, arg___m: c_ulonglong) void;
// /usr/lib/zig/include/xsavesintrin.h:22:3: warning: TODO implement function '__builtin_ia32_xsaves' in std.zig.c_builtins

// /usr/lib/zig/include/xsavesintrin.h:21:1: warning: unable to translate function, demoted to extern
pub extern fn _xsaves(arg___p: ?*anyopaque, arg___m: c_ulonglong) void;
// /usr/lib/zig/include/xsavesintrin.h:27:3: warning: TODO implement function '__builtin_ia32_xrstors' in std.zig.c_builtins

// /usr/lib/zig/include/xsavesintrin.h:26:1: warning: unable to translate function, demoted to extern
pub extern fn _xrstors(arg___p: ?*anyopaque, arg___m: c_ulonglong) void;
// /usr/lib/zig/include/xsavesintrin.h:33:3: warning: TODO implement function '__builtin_ia32_xrstors64' in std.zig.c_builtins

// /usr/lib/zig/include/xsavesintrin.h:32:1: warning: unable to translate function, demoted to extern
pub extern fn _xrstors64(arg___p: ?*anyopaque, arg___m: c_ulonglong) void;
// /usr/lib/zig/include/xsavesintrin.h:38:3: warning: TODO implement function '__builtin_ia32_xsaves64' in std.zig.c_builtins

// /usr/lib/zig/include/xsavesintrin.h:37:1: warning: unable to translate function, demoted to extern
pub extern fn _xsaves64(arg___p: ?*anyopaque, arg___m: c_ulonglong) void;
// /usr/lib/zig/include/cetintrin.h:22:3: warning: TODO implement function '__builtin_ia32_incsspd' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:21:43: warning: unable to translate function, demoted to extern
pub extern fn _incsspd(arg___a: c_int) void;
// /usr/lib/zig/include/cetintrin.h:27:3: warning: TODO implement function '__builtin_ia32_incsspq' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:26:43: warning: unable to translate function, demoted to extern
pub extern fn _incsspq(arg___a: c_ulonglong) void;
// /usr/lib/zig/include/cetintrin.h:33:3: warning: TODO implement function '__builtin_ia32_incsspq' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:32:43: warning: unable to translate function, demoted to extern
pub extern fn _inc_ssp(arg___a: c_uint) void;
// /usr/lib/zig/include/cetintrin.h:42:10: warning: TODO implement function '__builtin_ia32_rdsspd' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:41:51: warning: unable to translate function, demoted to extern
pub extern fn _rdsspd(arg___a: c_uint) c_uint;
// /usr/lib/zig/include/cetintrin.h:49:10: warning: TODO implement function '__builtin_ia32_rdsspd' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:45:51: warning: unable to translate function, demoted to extern
pub extern fn _rdsspd_i32() c_uint;
// /usr/lib/zig/include/cetintrin.h:55:10: warning: TODO implement function '__builtin_ia32_rdsspq' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:54:57: warning: unable to translate function, demoted to extern
pub extern fn _rdsspq(arg___a: c_ulonglong) c_ulonglong;
// /usr/lib/zig/include/cetintrin.h:62:10: warning: TODO implement function '__builtin_ia32_rdsspq' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:58:57: warning: unable to translate function, demoted to extern
pub extern fn _rdsspq_i64() c_ulonglong;
// /usr/lib/zig/include/cetintrin.h:69:10: warning: TODO implement function '__builtin_ia32_rdsspq' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:68:57: warning: unable to translate function, demoted to extern
pub extern fn _get_ssp() c_ulonglong;
// /usr/lib/zig/include/cetintrin.h:78:3: warning: TODO implement function '__builtin_ia32_saveprevssp' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:77:43: warning: unable to translate function, demoted to extern
pub extern fn _saveprevssp() void;
// /usr/lib/zig/include/cetintrin.h:82:3: warning: TODO implement function '__builtin_ia32_rstorssp' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:81:43: warning: unable to translate function, demoted to extern
pub extern fn _rstorssp(arg___p: ?*anyopaque) void;
// /usr/lib/zig/include/cetintrin.h:86:3: warning: TODO implement function '__builtin_ia32_wrssd' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:85:43: warning: unable to translate function, demoted to extern
pub extern fn _wrssd(arg___a: c_uint, arg___p: ?*anyopaque) void;
// /usr/lib/zig/include/cetintrin.h:91:3: warning: TODO implement function '__builtin_ia32_wrssq' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:90:43: warning: unable to translate function, demoted to extern
pub extern fn _wrssq(arg___a: c_ulonglong, arg___p: ?*anyopaque) void;
// /usr/lib/zig/include/cetintrin.h:96:3: warning: TODO implement function '__builtin_ia32_wrussd' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:95:43: warning: unable to translate function, demoted to extern
pub extern fn _wrussd(arg___a: c_uint, arg___p: ?*anyopaque) void;
// /usr/lib/zig/include/cetintrin.h:101:3: warning: TODO implement function '__builtin_ia32_wrussq' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:100:43: warning: unable to translate function, demoted to extern
pub extern fn _wrussq(arg___a: c_ulonglong, arg___p: ?*anyopaque) void;
// /usr/lib/zig/include/cetintrin.h:106:3: warning: TODO implement function '__builtin_ia32_setssbsy' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:105:43: warning: unable to translate function, demoted to extern
pub extern fn _setssbsy() void;
// /usr/lib/zig/include/cetintrin.h:110:3: warning: TODO implement function '__builtin_ia32_clrssbsy' in std.zig.c_builtins

// /usr/lib/zig/include/cetintrin.h:109:43: warning: unable to translate function, demoted to extern
pub extern fn _clrssbsy(arg___p: ?*anyopaque) void;
// /usr/lib/zig/include/adcintrin.h:58:10: warning: TODO implement function '__builtin_ia32_addcarryx_u32' in std.zig.c_builtins

// /usr/lib/zig/include/adcintrin.h:54:43: warning: unable to translate function, demoted to extern
pub extern fn _addcarry_u32(arg___cf: u8, arg___x: c_uint, arg___y: c_uint, arg___p: [*c]c_uint) u8;
// /usr/lib/zig/include/adcintrin.h:89:10: warning: TODO implement function '__builtin_ia32_subborrow_u32' in std.zig.c_builtins

// /usr/lib/zig/include/adcintrin.h:85:43: warning: unable to translate function, demoted to extern
pub extern fn _subborrow_u32(arg___cf: u8, arg___x: c_uint, arg___y: c_uint, arg___p: [*c]c_uint) u8;
// /usr/lib/zig/include/adcintrin.h:119:10: warning: TODO implement function '__builtin_ia32_addcarryx_u64' in std.zig.c_builtins

// /usr/lib/zig/include/adcintrin.h:117:1: warning: unable to translate function, demoted to extern
pub extern fn _addcarry_u64(arg___cf: u8, arg___x: c_ulonglong, arg___y: c_ulonglong, arg___p: [*c]c_ulonglong) u8;
// /usr/lib/zig/include/adcintrin.h:149:10: warning: TODO implement function '__builtin_ia32_subborrow_u64' in std.zig.c_builtins

// /usr/lib/zig/include/adcintrin.h:147:1: warning: unable to translate function, demoted to extern
pub extern fn _subborrow_u64(arg___cf: u8, arg___x: c_ulonglong, arg___y: c_ulonglong, arg___p: [*c]c_ulonglong) u8;
// /usr/lib/zig/include/adxintrin.h:61:10: warning: TODO implement function '__builtin_ia32_addcarryx_u32' in std.zig.c_builtins

// /usr/lib/zig/include/adxintrin.h:57:43: warning: unable to translate function, demoted to extern
pub extern fn _addcarryx_u32(arg___cf: u8, arg___x: c_uint, arg___y: c_uint, arg___p: [*c]c_uint) u8;
// /usr/lib/zig/include/adxintrin.h:91:10: warning: TODO implement function '__builtin_ia32_addcarryx_u64' in std.zig.c_builtins

// /usr/lib/zig/include/adxintrin.h:89:1: warning: unable to translate function, demoted to extern
pub extern fn _addcarryx_u64(arg___cf: u8, arg___x: c_ulonglong, arg___y: c_ulonglong, arg___p: [*c]c_ulonglong) u8;
// /usr/lib/zig/include/rdseedintrin.h:44:16: warning: TODO implement function '__builtin_ia32_rdseed16_step' in std.zig.c_builtins

// /usr/lib/zig/include/rdseedintrin.h:42:1: warning: unable to translate function, demoted to extern
pub extern fn _rdseed16_step(arg___p: [*c]c_ushort) c_int;
// /usr/lib/zig/include/rdseedintrin.h:71:16: warning: TODO implement function '__builtin_ia32_rdseed32_step' in std.zig.c_builtins

// /usr/lib/zig/include/rdseedintrin.h:69:1: warning: unable to translate function, demoted to extern
pub extern fn _rdseed32_step(arg___p: [*c]c_uint) c_int;
// /usr/lib/zig/include/rdseedintrin.h:99:16: warning: TODO implement function '__builtin_ia32_rdseed64_step' in std.zig.c_builtins

// /usr/lib/zig/include/rdseedintrin.h:97:1: warning: unable to translate function, demoted to extern
pub extern fn _rdseed64_step(arg___p: [*c]c_ulonglong) c_int;
// /usr/lib/zig/include/wbnoinvdintrin.h:21:3: warning: TODO implement function '__builtin_ia32_wbnoinvd' in std.zig.c_builtins

// /usr/lib/zig/include/wbnoinvdintrin.h:19:1: warning: unable to translate function, demoted to extern
pub extern fn _wbnoinvd() void;
// /usr/lib/zig/include/cldemoteintrin.h:30:3: warning: TODO implement function '__builtin_ia32_cldemote' in std.zig.c_builtins

// /usr/lib/zig/include/cldemoteintrin.h:29:1: warning: unable to translate function, demoted to extern
pub extern fn _cldemote(arg___P_1: ?*const anyopaque) void;
// /usr/lib/zig/include/waitpkgintrin.h:23:3: warning: TODO implement function '__builtin_ia32_umonitor' in std.zig.c_builtins

// /usr/lib/zig/include/waitpkgintrin.h:21:1: warning: unable to translate function, demoted to extern
pub extern fn _umonitor(arg___address: ?*anyopaque) void;
// /usr/lib/zig/include/waitpkgintrin.h:29:10: warning: TODO implement function '__builtin_ia32_umwait' in std.zig.c_builtins

// /usr/lib/zig/include/waitpkgintrin.h:27:1: warning: unable to translate function, demoted to extern
pub extern fn _umwait(arg___control: c_uint, arg___counter: c_ulonglong) u8;
// /usr/lib/zig/include/waitpkgintrin.h:36:10: warning: TODO implement function '__builtin_ia32_tpause' in std.zig.c_builtins

// /usr/lib/zig/include/waitpkgintrin.h:34:1: warning: unable to translate function, demoted to extern
pub extern fn _tpause(arg___control: c_uint, arg___counter: c_ulonglong) u8;
// /usr/lib/zig/include/movdirintrin.h:21:3: warning: TODO implement function '__builtin_ia32_directstore_u32' in std.zig.c_builtins

// /usr/lib/zig/include/movdirintrin.h:19:1: warning: unable to translate function, demoted to extern
pub extern fn _directstoreu_u32(arg___dst: ?*anyopaque, arg___value: c_uint) void;
// /usr/lib/zig/include/movdirintrin.h:31:3: warning: TODO implement function '__builtin_ia32_directstore_u64' in std.zig.c_builtins

// /usr/lib/zig/include/movdirintrin.h:29:1: warning: unable to translate function, demoted to extern
pub extern fn _directstoreu_u64(arg___dst: ?*anyopaque, arg___value: c_ulong) void;
// /usr/lib/zig/include/movdirintrin.h:46:3: warning: TODO implement function '__builtin_ia32_movdir64b' in std.zig.c_builtins

// /usr/lib/zig/include/movdirintrin.h:44:1: warning: unable to translate function, demoted to extern
pub extern fn _movdir64b(arg___dst: ?*anyopaque, arg___src: ?*const anyopaque) void;
// /usr/lib/zig/include/pconfigintrin.h:29:3: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /usr/lib/zig/include/pconfigintrin.h:26:1: warning: unable to translate function, demoted to extern
pub extern fn _pconfig_u32(arg___leaf: c_uint, arg___d: [*c]c_ulong) c_uint;
// /usr/lib/zig/include/sgxintrin.h:27:3: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /usr/lib/zig/include/sgxintrin.h:24:1: warning: unable to translate function, demoted to extern
pub extern fn _enclu_u32(arg___leaf: c_uint, arg___d: [*c]c_ulong) c_uint;
// /usr/lib/zig/include/sgxintrin.h:38:3: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /usr/lib/zig/include/sgxintrin.h:35:1: warning: unable to translate function, demoted to extern
pub extern fn _encls_u32(arg___leaf: c_uint, arg___d: [*c]c_ulong) c_uint;
// /usr/lib/zig/include/sgxintrin.h:49:3: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /usr/lib/zig/include/sgxintrin.h:46:1: warning: unable to translate function, demoted to extern
pub extern fn _enclv_u32(arg___leaf: c_uint, arg___d: [*c]c_ulong) c_uint;
// /usr/lib/zig/include/ptwriteintrin.h:23:3: warning: TODO implement function '__builtin_ia32_ptwrite32' in std.zig.c_builtins

// /usr/lib/zig/include/ptwriteintrin.h:22:1: warning: unable to translate function, demoted to extern
pub extern fn _ptwrite32(arg___value: c_uint) void;
// /usr/lib/zig/include/ptwriteintrin.h:30:3: warning: TODO implement function '__builtin_ia32_ptwrite64' in std.zig.c_builtins

// /usr/lib/zig/include/ptwriteintrin.h:29:1: warning: unable to translate function, demoted to extern
pub extern fn _ptwrite64(arg___value: c_ulonglong) void;
// /usr/lib/zig/include/invpcidintrin.h:20:3: warning: TODO implement function '__builtin_ia32_invpcid' in std.zig.c_builtins

// /usr/lib/zig/include/invpcidintrin.h:19:1: warning: unable to translate function, demoted to extern
pub extern fn _invpcid(arg___type: c_uint, arg___descriptor: ?*anyopaque) void;
// /usr/lib/zig/include/keylockerintrin.h:98:3: warning: TODO implement function '__builtin_ia32_loadiwkey' in std.zig.c_builtins

// /usr/lib/zig/include/keylockerintrin.h:96:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_loadiwkey(arg___ctl: c_uint, arg___intkey: __m128i, arg___enkey_lo: __m128i, arg___enkey_hi: __m128i) void;
// /usr/lib/zig/include/keylockerintrin.h:132:10: warning: TODO implement function '__builtin_ia32_encodekey128_u32' in std.zig.c_builtins

// /usr/lib/zig/include/keylockerintrin.h:131:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_encodekey128_u32(arg___htype: c_uint, arg___key: __m128i, arg___h: ?*anyopaque) c_uint;
// /usr/lib/zig/include/keylockerintrin.h:170:10: warning: TODO implement function '__builtin_ia32_encodekey256_u32' in std.zig.c_builtins

// /usr/lib/zig/include/keylockerintrin.h:168:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_encodekey256_u32(arg___htype: c_uint, arg___key_lo: __m128i, arg___key_hi: __m128i, arg___h: ?*anyopaque) c_uint;
// /usr/lib/zig/include/keylockerintrin.h:208:10: warning: TODO implement function '__builtin_ia32_aesenc128kl_u8' in std.zig.c_builtins

// /usr/lib/zig/include/keylockerintrin.h:207:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_aesenc128kl_u8(arg___odata: [*c]__m128i, arg___idata: __m128i, arg___h: ?*const anyopaque) u8;
// /usr/lib/zig/include/keylockerintrin.h:247:10: warning: TODO implement function '__builtin_ia32_aesenc256kl_u8' in std.zig.c_builtins

// /usr/lib/zig/include/keylockerintrin.h:246:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_aesenc256kl_u8(arg___odata: [*c]__m128i, arg___idata: __m128i, arg___h: ?*const anyopaque) u8;
// /usr/lib/zig/include/keylockerintrin.h:286:10: warning: TODO implement function '__builtin_ia32_aesdec128kl_u8' in std.zig.c_builtins

// /usr/lib/zig/include/keylockerintrin.h:285:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_aesdec128kl_u8(arg___odata: [*c]__m128i, arg___idata: __m128i, arg___h: ?*const anyopaque) u8;
// /usr/lib/zig/include/keylockerintrin.h:325:10: warning: TODO implement function '__builtin_ia32_aesdec256kl_u8' in std.zig.c_builtins

// /usr/lib/zig/include/keylockerintrin.h:324:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_aesdec256kl_u8(arg___odata: [*c]__m128i, arg___idata: __m128i, arg___h: ?*const anyopaque) u8;
// /usr/lib/zig/include/keylockerintrin.h:383:10: warning: TODO implement function '__builtin_ia32_aesencwide128kl_u8' in std.zig.c_builtins

// /usr/lib/zig/include/keylockerintrin.h:382:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_aesencwide128kl_u8(arg___odata: [*c]__m128i, __idata: [*c]const __m128i, arg___h: ?*const anyopaque) u8;
// /usr/lib/zig/include/keylockerintrin.h:429:10: warning: TODO implement function '__builtin_ia32_aesencwide256kl_u8' in std.zig.c_builtins

// /usr/lib/zig/include/keylockerintrin.h:428:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_aesencwide256kl_u8(arg___odata: [*c]__m128i, __idata: [*c]const __m128i, arg___h: ?*const anyopaque) u8;
// /usr/lib/zig/include/keylockerintrin.h:475:10: warning: TODO implement function '__builtin_ia32_aesdecwide128kl_u8' in std.zig.c_builtins

// /usr/lib/zig/include/keylockerintrin.h:474:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_aesdecwide128kl_u8(arg___odata: [*c]__m128i, __idata: [*c]const __m128i, arg___h: ?*const anyopaque) u8;
// /usr/lib/zig/include/keylockerintrin.h:521:10: warning: TODO implement function '__builtin_ia32_aesdecwide256kl_u8' in std.zig.c_builtins

// /usr/lib/zig/include/keylockerintrin.h:520:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_aesdecwide256kl_u8(arg___odata: [*c]__m128i, __idata: [*c]const __m128i, arg___h: ?*const anyopaque) u8;
// /usr/lib/zig/include/amxintrin.h:43:3: warning: TODO implement function '__builtin_ia32_tile_loadconfig' in std.zig.c_builtins

// /usr/lib/zig/include/amxintrin.h:42:1: warning: unable to translate function, demoted to extern
pub extern fn _tile_loadconfig(arg___config: ?*const anyopaque) void;
// /usr/lib/zig/include/amxintrin.h:59:3: warning: TODO implement function '__builtin_ia32_tile_storeconfig' in std.zig.c_builtins

// /usr/lib/zig/include/amxintrin.h:58:1: warning: unable to translate function, demoted to extern
pub extern fn _tile_storeconfig(arg___config: ?*anyopaque) void;
// /usr/lib/zig/include/amxintrin.h:69:3: warning: TODO implement function '__builtin_ia32_tilerelease' in std.zig.c_builtins

// /usr/lib/zig/include/amxintrin.h:68:48: warning: unable to translate function, demoted to extern
pub extern fn _tile_release() void;
pub const _tile1024i = @Vector(256, c_int);
// /usr/lib/zig/include/amxintrin.h:240:10: warning: TODO implement function '__builtin_ia32_tileloadd64_internal' in std.zig.c_builtins

// /usr/lib/zig/include/amxintrin.h:238:1: warning: unable to translate function, demoted to extern
pub extern fn _tile_loadd_internal(arg_m: c_ushort, arg_n: c_ushort, arg_base: ?*const anyopaque, arg_stride: c_ulong) _tile1024i;
// /usr/lib/zig/include/amxintrin.h:248:10: warning: TODO implement function '__builtin_ia32_tileloaddt164_internal' in std.zig.c_builtins

// /usr/lib/zig/include/amxintrin.h:246:1: warning: unable to translate function, demoted to extern
pub extern fn _tile_loaddt1_internal(arg_m: c_ushort, arg_n: c_ushort, arg_base: ?*const anyopaque, arg_stride: c_ulong) _tile1024i;
// /usr/lib/zig/include/amxintrin.h:256:10: warning: TODO implement function '__builtin_ia32_tdpbssd_internal' in std.zig.c_builtins

// /usr/lib/zig/include/amxintrin.h:254:1: warning: unable to translate function, demoted to extern
pub extern fn _tile_dpbssd_internal(arg_m: c_ushort, arg_n: c_ushort, arg_k: c_ushort, arg_dst: _tile1024i, arg_src1: _tile1024i, arg_src2: _tile1024i) _tile1024i;
// /usr/lib/zig/include/amxintrin.h:263:10: warning: TODO implement function '__builtin_ia32_tdpbsud_internal' in std.zig.c_builtins

// /usr/lib/zig/include/amxintrin.h:261:1: warning: unable to translate function, demoted to extern
pub extern fn _tile_dpbsud_internal(arg_m: c_ushort, arg_n: c_ushort, arg_k: c_ushort, arg_dst: _tile1024i, arg_src1: _tile1024i, arg_src2: _tile1024i) _tile1024i;
// /usr/lib/zig/include/amxintrin.h:270:10: warning: TODO implement function '__builtin_ia32_tdpbusd_internal' in std.zig.c_builtins

// /usr/lib/zig/include/amxintrin.h:268:1: warning: unable to translate function, demoted to extern
pub extern fn _tile_dpbusd_internal(arg_m: c_ushort, arg_n: c_ushort, arg_k: c_ushort, arg_dst: _tile1024i, arg_src1: _tile1024i, arg_src2: _tile1024i) _tile1024i;
// /usr/lib/zig/include/amxintrin.h:277:10: warning: TODO implement function '__builtin_ia32_tdpbuud_internal' in std.zig.c_builtins

// /usr/lib/zig/include/amxintrin.h:275:1: warning: unable to translate function, demoted to extern
pub extern fn _tile_dpbuud_internal(arg_m: c_ushort, arg_n: c_ushort, arg_k: c_ushort, arg_dst: _tile1024i, arg_src1: _tile1024i, arg_src2: _tile1024i) _tile1024i;
// /usr/lib/zig/include/amxintrin.h:284:10: warning: TODO implement function '__builtin_ia32_tilestored64_internal' in std.zig.c_builtins

// /usr/lib/zig/include/amxintrin.h:282:1: warning: unable to translate function, demoted to extern
pub extern fn _tile_stored_internal(arg_m: c_ushort, arg_n: c_ushort, arg_base: ?*anyopaque, arg_stride: c_ulong, arg_tile: _tile1024i) void;
// /usr/lib/zig/include/amxintrin.h:292:10: warning: TODO implement function '__builtin_ia32_tdpbf16ps_internal' in std.zig.c_builtins

// /usr/lib/zig/include/amxintrin.h:290:1: warning: unable to translate function, demoted to extern
pub extern fn _tile_dpbf16ps_internal(arg_m: c_ushort, arg_n: c_ushort, arg_k: c_ushort, arg_dst: _tile1024i, arg_src1: _tile1024i, arg_src2: _tile1024i) _tile1024i;
// /usr/lib/zig/include/amxintrin.h:299:10: warning: TODO implement function '__builtin_ia32_tdpfp16ps_internal' in std.zig.c_builtins

// /usr/lib/zig/include/amxintrin.h:297:1: warning: unable to translate function, demoted to extern
pub extern fn _tile_dpfp16ps_internal(arg_m: c_ushort, arg_n: c_ushort, arg_k: c_ushort, arg_dst: _tile1024i, arg_src1: _tile1024i, arg_src2: _tile1024i) _tile1024i;
pub const struct___tile1024i_str = extern struct {
    row: c_ushort = @import("std").mem.zeroes(c_ushort),
    col: c_ushort = @import("std").mem.zeroes(c_ushort),
    tile: _tile1024i = @import("std").mem.zeroes(_tile1024i),
};
pub const __tile1024i = struct___tile1024i_str;
pub inline fn __tile_loadd(arg_dst: [*c]__tile1024i, arg_base: ?*const anyopaque, arg_stride: c_ulong) void {
    var dst = arg_dst;
    _ = &dst;
    var base = arg_base;
    _ = &base;
    var stride = arg_stride;
    _ = &stride;
    dst.*.tile = _tile_loadd_internal(dst.*.row, dst.*.col, base, stride);
}
pub inline fn __tile_stream_loadd(arg_dst: [*c]__tile1024i, arg_base: ?*const anyopaque, arg_stride: c_ulong) void {
    var dst = arg_dst;
    _ = &dst;
    var base = arg_base;
    _ = &base;
    var stride = arg_stride;
    _ = &stride;
    dst.*.tile = _tile_loaddt1_internal(dst.*.row, dst.*.col, base, stride);
}
pub inline fn __tile_dpbssd(arg_dst: [*c]__tile1024i, arg_src0: __tile1024i, arg_src1: __tile1024i) void {
    var dst = arg_dst;
    _ = &dst;
    var src0 = arg_src0;
    _ = &src0;
    var src1 = arg_src1;
    _ = &src1;
    dst.*.tile = _tile_dpbssd_internal(src0.row, src1.col, src0.col, dst.*.tile, src0.tile, src1.tile);
}
pub inline fn __tile_dpbsud(arg_dst: [*c]__tile1024i, arg_src0: __tile1024i, arg_src1: __tile1024i) void {
    var dst = arg_dst;
    _ = &dst;
    var src0 = arg_src0;
    _ = &src0;
    var src1 = arg_src1;
    _ = &src1;
    dst.*.tile = _tile_dpbsud_internal(src0.row, src1.col, src0.col, dst.*.tile, src0.tile, src1.tile);
}
pub inline fn __tile_dpbusd(arg_dst: [*c]__tile1024i, arg_src0: __tile1024i, arg_src1: __tile1024i) void {
    var dst = arg_dst;
    _ = &dst;
    var src0 = arg_src0;
    _ = &src0;
    var src1 = arg_src1;
    _ = &src1;
    dst.*.tile = _tile_dpbusd_internal(src0.row, src1.col, src0.col, dst.*.tile, src0.tile, src1.tile);
}
pub inline fn __tile_dpbuud(arg_dst: [*c]__tile1024i, arg_src0: __tile1024i, arg_src1: __tile1024i) void {
    var dst = arg_dst;
    _ = &dst;
    var src0 = arg_src0;
    _ = &src0;
    var src1 = arg_src1;
    _ = &src1;
    dst.*.tile = _tile_dpbuud_internal(src0.row, src1.col, src0.col, dst.*.tile, src0.tile, src1.tile);
}
pub inline fn __tile_stored(arg_base: ?*anyopaque, arg_stride: c_ulong, arg_src: __tile1024i) void {
    var base = arg_base;
    _ = &base;
    var stride = arg_stride;
    _ = &stride;
    var src = arg_src;
    _ = &src;
    _tile_stored_internal(src.row, src.col, base, stride, src.tile);
}
// /usr/lib/zig/include/amxintrin.h:471:15: warning: TODO implement function '__builtin_ia32_tilezero_internal' in std.zig.c_builtins

// /usr/lib/zig/include/amxintrin.h:470:24: warning: unable to translate function, demoted to extern
pub extern fn __tile_zero(arg_dst: [*c]__tile1024i) void;
pub inline fn __tile_dpbf16ps(arg_dst: [*c]__tile1024i, arg_src0: __tile1024i, arg_src1: __tile1024i) void {
    var dst = arg_dst;
    _ = &dst;
    var src0 = arg_src0;
    _ = &src0;
    var src1 = arg_src1;
    _ = &src1;
    dst.*.tile = _tile_dpbf16ps_internal(src0.row, src1.col, src0.col, dst.*.tile, src0.tile, src1.tile);
}
pub inline fn __tile_dpfp16ps(arg_dst: [*c]__tile1024i, arg_src0: __tile1024i, arg_src1: __tile1024i) void {
    var dst = arg_dst;
    _ = &dst;
    var src0 = arg_src0;
    _ = &src0;
    var src1 = arg_src1;
    _ = &src1;
    dst.*.tile = _tile_dpfp16ps_internal(src0.row, src1.col, src0.col, dst.*.tile, src0.tile, src1.tile);
}
// /usr/lib/zig/include/amxcomplexintrin.h:113:10: warning: TODO implement function '__builtin_ia32_tcmmimfp16ps_internal' in std.zig.c_builtins

// /usr/lib/zig/include/amxcomplexintrin.h:111:1: warning: unable to translate function, demoted to extern
pub extern fn _tile_cmmimfp16ps_internal(arg_m: c_ushort, arg_n: c_ushort, arg_k: c_ushort, arg_dst: _tile1024i, arg_src1: _tile1024i, arg_src2: _tile1024i) _tile1024i;
// /usr/lib/zig/include/amxcomplexintrin.h:119:10: warning: TODO implement function '__builtin_ia32_tcmmrlfp16ps_internal' in std.zig.c_builtins

// /usr/lib/zig/include/amxcomplexintrin.h:117:1: warning: unable to translate function, demoted to extern
pub extern fn _tile_cmmrlfp16ps_internal(arg_m: c_ushort, arg_n: c_ushort, arg_k: c_ushort, arg_dst: _tile1024i, arg_src1: _tile1024i, arg_src2: _tile1024i) _tile1024i;
pub inline fn __tile_cmmimfp16ps(arg_dst: [*c]__tile1024i, arg_src0: __tile1024i, arg_src1: __tile1024i) void {
    var dst = arg_dst;
    _ = &dst;
    var src0 = arg_src0;
    _ = &src0;
    var src1 = arg_src1;
    _ = &src1;
    dst.*.tile = _tile_cmmimfp16ps_internal(src0.row, src1.col, src0.col, dst.*.tile, src0.tile, src1.tile);
}
pub inline fn __tile_cmmrlfp16ps(arg_dst: [*c]__tile1024i, arg_src0: __tile1024i, arg_src1: __tile1024i) void {
    var dst = arg_dst;
    _ = &dst;
    var src0 = arg_src0;
    _ = &src0;
    var src1 = arg_src1;
    _ = &src1;
    dst.*.tile = _tile_cmmrlfp16ps_internal(src0.row, src1.col, src0.col, dst.*.tile, src0.tile, src1.tile);
}
// /usr/lib/zig/include/avx512vp2intersectintrin.h:53:3: warning: TODO implement function '__builtin_ia32_vp2intersect_d_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vp2intersectintrin.h:52:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_2intersect_epi32(arg___a: __m512i, arg___b: __m512i, arg___m0: [*c]__mmask16, arg___m1: [*c]__mmask16) void;
// /usr/lib/zig/include/avx512vp2intersectintrin.h:73:3: warning: TODO implement function '__builtin_ia32_vp2intersect_q_512' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vp2intersectintrin.h:72:1: warning: unable to translate function, demoted to extern
pub extern fn _mm512_2intersect_epi64(arg___a: __m512i, arg___b: __m512i, arg___m0: [*c]__mmask8, arg___m1: [*c]__mmask8) void;
// /usr/lib/zig/include/avx512vlvp2intersectintrin.h:57:3: warning: TODO implement function '__builtin_ia32_vp2intersect_d_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvp2intersectintrin.h:56:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_2intersect_epi32(arg___a: __m256i, arg___b: __m256i, arg___m0: [*c]__mmask8, arg___m1: [*c]__mmask8) void;
// /usr/lib/zig/include/avx512vlvp2intersectintrin.h:77:3: warning: TODO implement function '__builtin_ia32_vp2intersect_q_256' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvp2intersectintrin.h:76:1: warning: unable to translate function, demoted to extern
pub extern fn _mm256_2intersect_epi64(arg___a: __m256i, arg___b: __m256i, arg___m0: [*c]__mmask8, arg___m1: [*c]__mmask8) void;
// /usr/lib/zig/include/avx512vlvp2intersectintrin.h:97:3: warning: TODO implement function '__builtin_ia32_vp2intersect_d_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvp2intersectintrin.h:96:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_2intersect_epi32(arg___a: __m128i, arg___b: __m128i, arg___m0: [*c]__mmask8, arg___m1: [*c]__mmask8) void;
// /usr/lib/zig/include/avx512vlvp2intersectintrin.h:117:3: warning: TODO implement function '__builtin_ia32_vp2intersect_q_128' in std.zig.c_builtins

// /usr/lib/zig/include/avx512vlvp2intersectintrin.h:116:1: warning: unable to translate function, demoted to extern
pub extern fn _mm_2intersect_epi64(arg___a: __m128i, arg___b: __m128i, arg___m0: [*c]__mmask8, arg___m1: [*c]__mmask8) void;
// /usr/lib/zig/include/enqcmdintrin.h:38:10: warning: TODO implement function '__builtin_ia32_enqcmd' in std.zig.c_builtins

// /usr/lib/zig/include/enqcmdintrin.h:36:1: warning: unable to translate function, demoted to extern
pub extern fn _enqcmd(arg___dst: ?*anyopaque, arg___src: ?*const anyopaque) c_int;
// /usr/lib/zig/include/enqcmdintrin.h:58:10: warning: TODO implement function '__builtin_ia32_enqcmds' in std.zig.c_builtins

// /usr/lib/zig/include/enqcmdintrin.h:56:1: warning: unable to translate function, demoted to extern
pub extern fn _enqcmds(arg___dst: ?*anyopaque, arg___src: ?*const anyopaque) c_int;
// /usr/lib/zig/include/serializeintrin.h:27:3: warning: TODO implement function '__builtin_ia32_serialize' in std.zig.c_builtins

// /usr/lib/zig/include/serializeintrin.h:25:1: warning: unable to translate function, demoted to extern
pub extern fn _serialize() void;
// /usr/lib/zig/include/tsxldtrkintrin.h:34:5: warning: TODO implement function '__builtin_ia32_xsusldtrk' in std.zig.c_builtins

// /usr/lib/zig/include/tsxldtrkintrin.h:32:1: warning: unable to translate function, demoted to extern
pub extern fn _xsusldtrk() void;
// /usr/lib/zig/include/tsxldtrkintrin.h:51:5: warning: TODO implement function '__builtin_ia32_xresldtrk' in std.zig.c_builtins

// /usr/lib/zig/include/tsxldtrkintrin.h:49:1: warning: unable to translate function, demoted to extern
pub extern fn _xresldtrk() void;
pub extern fn SDL_GetCPUCount() c_int;
pub extern fn SDL_GetCPUCacheLineSize() c_int;
pub extern fn SDL_HasRDTSC() SDL_bool;
pub extern fn SDL_HasAltiVec() SDL_bool;
pub extern fn SDL_HasMMX() SDL_bool;
pub extern fn SDL_Has3DNow() SDL_bool;
pub extern fn SDL_HasSSE() SDL_bool;
pub extern fn SDL_HasSSE2() SDL_bool;
pub extern fn SDL_HasSSE3() SDL_bool;
pub extern fn SDL_HasSSE41() SDL_bool;
pub extern fn SDL_HasSSE42() SDL_bool;
pub extern fn SDL_HasAVX() SDL_bool;
pub extern fn SDL_HasAVX2() SDL_bool;
pub extern fn SDL_HasAVX512F() SDL_bool;
pub extern fn SDL_HasARMSIMD() SDL_bool;
pub extern fn SDL_HasNEON() SDL_bool;
pub extern fn SDL_HasLSX() SDL_bool;
pub extern fn SDL_HasLASX() SDL_bool;
pub extern fn SDL_GetSystemRAM() c_int;
pub extern fn SDL_SIMDGetAlignment() usize;
pub extern fn SDL_SIMDAlloc(len: usize) ?*anyopaque;
pub extern fn SDL_SIMDRealloc(mem: ?*anyopaque, len: usize) ?*anyopaque;
pub extern fn SDL_SIMDFree(ptr: ?*anyopaque) void;
pub const SDL_PIXELTYPE_UNKNOWN: c_int = 0;
pub const SDL_PIXELTYPE_INDEX1: c_int = 1;
pub const SDL_PIXELTYPE_INDEX4: c_int = 2;
pub const SDL_PIXELTYPE_INDEX8: c_int = 3;
pub const SDL_PIXELTYPE_PACKED8: c_int = 4;
pub const SDL_PIXELTYPE_PACKED16: c_int = 5;
pub const SDL_PIXELTYPE_PACKED32: c_int = 6;
pub const SDL_PIXELTYPE_ARRAYU8: c_int = 7;
pub const SDL_PIXELTYPE_ARRAYU16: c_int = 8;
pub const SDL_PIXELTYPE_ARRAYU32: c_int = 9;
pub const SDL_PIXELTYPE_ARRAYF16: c_int = 10;
pub const SDL_PIXELTYPE_ARRAYF32: c_int = 11;
pub const SDL_PIXELTYPE_INDEX2: c_int = 12;
pub const SDL_PixelType = c_uint;
pub const SDL_BITMAPORDER_NONE: c_int = 0;
pub const SDL_BITMAPORDER_4321: c_int = 1;
pub const SDL_BITMAPORDER_1234: c_int = 2;
pub const SDL_BitmapOrder = c_uint;
pub const SDL_PACKEDORDER_NONE: c_int = 0;
pub const SDL_PACKEDORDER_XRGB: c_int = 1;
pub const SDL_PACKEDORDER_RGBX: c_int = 2;
pub const SDL_PACKEDORDER_ARGB: c_int = 3;
pub const SDL_PACKEDORDER_RGBA: c_int = 4;
pub const SDL_PACKEDORDER_XBGR: c_int = 5;
pub const SDL_PACKEDORDER_BGRX: c_int = 6;
pub const SDL_PACKEDORDER_ABGR: c_int = 7;
pub const SDL_PACKEDORDER_BGRA: c_int = 8;
pub const SDL_PackedOrder = c_uint;
pub const SDL_ARRAYORDER_NONE: c_int = 0;
pub const SDL_ARRAYORDER_RGB: c_int = 1;
pub const SDL_ARRAYORDER_RGBA: c_int = 2;
pub const SDL_ARRAYORDER_ARGB: c_int = 3;
pub const SDL_ARRAYORDER_BGR: c_int = 4;
pub const SDL_ARRAYORDER_BGRA: c_int = 5;
pub const SDL_ARRAYORDER_ABGR: c_int = 6;
pub const SDL_ArrayOrder = c_uint;
pub const SDL_PACKEDLAYOUT_NONE: c_int = 0;
pub const SDL_PACKEDLAYOUT_332: c_int = 1;
pub const SDL_PACKEDLAYOUT_4444: c_int = 2;
pub const SDL_PACKEDLAYOUT_1555: c_int = 3;
pub const SDL_PACKEDLAYOUT_5551: c_int = 4;
pub const SDL_PACKEDLAYOUT_565: c_int = 5;
pub const SDL_PACKEDLAYOUT_8888: c_int = 6;
pub const SDL_PACKEDLAYOUT_2101010: c_int = 7;
pub const SDL_PACKEDLAYOUT_1010102: c_int = 8;
pub const SDL_PackedLayout = c_uint;
pub const SDL_PIXELFORMAT_UNKNOWN: c_int = 0;
pub const SDL_PIXELFORMAT_INDEX1LSB: c_int = 286261504;
pub const SDL_PIXELFORMAT_INDEX1MSB: c_int = 287310080;
pub const SDL_PIXELFORMAT_INDEX2LSB: c_int = 470811136;
pub const SDL_PIXELFORMAT_INDEX2MSB: c_int = 471859712;
pub const SDL_PIXELFORMAT_INDEX4LSB: c_int = 303039488;
pub const SDL_PIXELFORMAT_INDEX4MSB: c_int = 304088064;
pub const SDL_PIXELFORMAT_INDEX8: c_int = 318769153;
pub const SDL_PIXELFORMAT_RGB332: c_int = 336660481;
pub const SDL_PIXELFORMAT_XRGB4444: c_int = 353504258;
pub const SDL_PIXELFORMAT_RGB444: c_int = 353504258;
pub const SDL_PIXELFORMAT_XBGR4444: c_int = 357698562;
pub const SDL_PIXELFORMAT_BGR444: c_int = 357698562;
pub const SDL_PIXELFORMAT_XRGB1555: c_int = 353570562;
pub const SDL_PIXELFORMAT_RGB555: c_int = 353570562;
pub const SDL_PIXELFORMAT_XBGR1555: c_int = 357764866;
pub const SDL_PIXELFORMAT_BGR555: c_int = 357764866;
pub const SDL_PIXELFORMAT_ARGB4444: c_int = 355602434;
pub const SDL_PIXELFORMAT_RGBA4444: c_int = 356651010;
pub const SDL_PIXELFORMAT_ABGR4444: c_int = 359796738;
pub const SDL_PIXELFORMAT_BGRA4444: c_int = 360845314;
pub const SDL_PIXELFORMAT_ARGB1555: c_int = 355667970;
pub const SDL_PIXELFORMAT_RGBA5551: c_int = 356782082;
pub const SDL_PIXELFORMAT_ABGR1555: c_int = 359862274;
pub const SDL_PIXELFORMAT_BGRA5551: c_int = 360976386;
pub const SDL_PIXELFORMAT_RGB565: c_int = 353701890;
pub const SDL_PIXELFORMAT_BGR565: c_int = 357896194;
pub const SDL_PIXELFORMAT_RGB24: c_int = 386930691;
pub const SDL_PIXELFORMAT_BGR24: c_int = 390076419;
pub const SDL_PIXELFORMAT_XRGB8888: c_int = 370546692;
pub const SDL_PIXELFORMAT_RGB888: c_int = 370546692;
pub const SDL_PIXELFORMAT_RGBX8888: c_int = 371595268;
pub const SDL_PIXELFORMAT_XBGR8888: c_int = 374740996;
pub const SDL_PIXELFORMAT_BGR888: c_int = 374740996;
pub const SDL_PIXELFORMAT_BGRX8888: c_int = 375789572;
pub const SDL_PIXELFORMAT_ARGB8888: c_int = 372645892;
pub const SDL_PIXELFORMAT_RGBA8888: c_int = 373694468;
pub const SDL_PIXELFORMAT_ABGR8888: c_int = 376840196;
pub const SDL_PIXELFORMAT_BGRA8888: c_int = 377888772;
pub const SDL_PIXELFORMAT_ARGB2101010: c_int = 372711428;
pub const SDL_PIXELFORMAT_RGBA32: c_int = 376840196;
pub const SDL_PIXELFORMAT_ARGB32: c_int = 377888772;
pub const SDL_PIXELFORMAT_BGRA32: c_int = 372645892;
pub const SDL_PIXELFORMAT_ABGR32: c_int = 373694468;
pub const SDL_PIXELFORMAT_RGBX32: c_int = 374740996;
pub const SDL_PIXELFORMAT_XRGB32: c_int = 375789572;
pub const SDL_PIXELFORMAT_BGRX32: c_int = 370546692;
pub const SDL_PIXELFORMAT_XBGR32: c_int = 371595268;
pub const SDL_PIXELFORMAT_YV12: c_int = 842094169;
pub const SDL_PIXELFORMAT_IYUV: c_int = 1448433993;
pub const SDL_PIXELFORMAT_YUY2: c_int = 844715353;
pub const SDL_PIXELFORMAT_UYVY: c_int = 1498831189;
pub const SDL_PIXELFORMAT_YVYU: c_int = 1431918169;
pub const SDL_PIXELFORMAT_NV12: c_int = 842094158;
pub const SDL_PIXELFORMAT_NV21: c_int = 825382478;
pub const SDL_PIXELFORMAT_EXTERNAL_OES: c_int = 542328143;
pub const SDL_PixelFormatEnum = c_uint;
pub const struct_SDL_Color = extern struct {
    r: Uint8 = @import("std").mem.zeroes(Uint8),
    g: Uint8 = @import("std").mem.zeroes(Uint8),
    b: Uint8 = @import("std").mem.zeroes(Uint8),
    a: Uint8 = @import("std").mem.zeroes(Uint8),
};
pub const SDL_Color = struct_SDL_Color;
pub const struct_SDL_Palette = extern struct {
    ncolors: c_int = @import("std").mem.zeroes(c_int),
    colors: [*c]SDL_Color = @import("std").mem.zeroes([*c]SDL_Color),
    version: Uint32 = @import("std").mem.zeroes(Uint32),
    refcount: c_int = @import("std").mem.zeroes(c_int),
};
pub const SDL_Palette = struct_SDL_Palette;
pub const struct_SDL_PixelFormat = extern struct {
    format: Uint32 = @import("std").mem.zeroes(Uint32),
    palette: [*c]SDL_Palette = @import("std").mem.zeroes([*c]SDL_Palette),
    BitsPerPixel: Uint8 = @import("std").mem.zeroes(Uint8),
    BytesPerPixel: Uint8 = @import("std").mem.zeroes(Uint8),
    padding: [2]Uint8 = @import("std").mem.zeroes([2]Uint8),
    Rmask: Uint32 = @import("std").mem.zeroes(Uint32),
    Gmask: Uint32 = @import("std").mem.zeroes(Uint32),
    Bmask: Uint32 = @import("std").mem.zeroes(Uint32),
    Amask: Uint32 = @import("std").mem.zeroes(Uint32),
    Rloss: Uint8 = @import("std").mem.zeroes(Uint8),
    Gloss: Uint8 = @import("std").mem.zeroes(Uint8),
    Bloss: Uint8 = @import("std").mem.zeroes(Uint8),
    Aloss: Uint8 = @import("std").mem.zeroes(Uint8),
    Rshift: Uint8 = @import("std").mem.zeroes(Uint8),
    Gshift: Uint8 = @import("std").mem.zeroes(Uint8),
    Bshift: Uint8 = @import("std").mem.zeroes(Uint8),
    Ashift: Uint8 = @import("std").mem.zeroes(Uint8),
    refcount: c_int = @import("std").mem.zeroes(c_int),
    next: [*c]struct_SDL_PixelFormat = @import("std").mem.zeroes([*c]struct_SDL_PixelFormat),
};
pub const SDL_PixelFormat = struct_SDL_PixelFormat;
pub extern fn SDL_GetPixelFormatName(format: Uint32) [*c]const u8;
pub extern fn SDL_PixelFormatEnumToMasks(format: Uint32, bpp: [*c]c_int, Rmask: [*c]Uint32, Gmask: [*c]Uint32, Bmask: [*c]Uint32, Amask: [*c]Uint32) SDL_bool;
pub extern fn SDL_MasksToPixelFormatEnum(bpp: c_int, Rmask: Uint32, Gmask: Uint32, Bmask: Uint32, Amask: Uint32) Uint32;
pub extern fn SDL_AllocFormat(pixel_format: Uint32) [*c]SDL_PixelFormat;
pub extern fn SDL_FreeFormat(format: [*c]SDL_PixelFormat) void;
pub extern fn SDL_AllocPalette(ncolors: c_int) [*c]SDL_Palette;
pub extern fn SDL_SetPixelFormatPalette(format: [*c]SDL_PixelFormat, palette: [*c]SDL_Palette) c_int;
pub extern fn SDL_SetPaletteColors(palette: [*c]SDL_Palette, colors: [*c]const SDL_Color, firstcolor: c_int, ncolors: c_int) c_int;
pub extern fn SDL_FreePalette(palette: [*c]SDL_Palette) void;
pub extern fn SDL_MapRGB(format: [*c]const SDL_PixelFormat, r: Uint8, g: Uint8, b: Uint8) Uint32;
pub extern fn SDL_MapRGBA(format: [*c]const SDL_PixelFormat, r: Uint8, g: Uint8, b: Uint8, a: Uint8) Uint32;
pub extern fn SDL_GetRGB(pixel: Uint32, format: [*c]const SDL_PixelFormat, r: [*c]Uint8, g: [*c]Uint8, b: [*c]Uint8) void;
pub extern fn SDL_GetRGBA(pixel: Uint32, format: [*c]const SDL_PixelFormat, r: [*c]Uint8, g: [*c]Uint8, b: [*c]Uint8, a: [*c]Uint8) void;
pub extern fn SDL_CalculateGammaRamp(gamma: f32, ramp: [*c]Uint16) void;
pub const struct_SDL_Point = extern struct {
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
};
pub const SDL_Point = struct_SDL_Point;
pub const struct_SDL_FPoint = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
};
pub const SDL_FPoint = struct_SDL_FPoint;
pub const struct_SDL_Rect = extern struct {
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
    w: c_int = @import("std").mem.zeroes(c_int),
    h: c_int = @import("std").mem.zeroes(c_int),
};
pub const SDL_Rect = struct_SDL_Rect;
pub const struct_SDL_FRect = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    w: f32 = @import("std").mem.zeroes(f32),
    h: f32 = @import("std").mem.zeroes(f32),
};
pub const SDL_FRect = struct_SDL_FRect;
pub inline fn SDL_PointInRect(arg_p: [*c]const SDL_Point, arg_r: [*c]const SDL_Rect) SDL_bool {
    var p = arg_p;
    _ = &p;
    var r = arg_r;
    _ = &r;
    return @as(c_uint, @bitCast(if ((((p.*.x >= r.*.x) and (p.*.x < (r.*.x + r.*.w))) and (p.*.y >= r.*.y)) and (p.*.y < (r.*.y + r.*.h))) SDL_TRUE else SDL_FALSE));
}
pub inline fn SDL_RectEmpty(arg_r: [*c]const SDL_Rect) SDL_bool {
    var r = arg_r;
    _ = &r;
    return @as(c_uint, @bitCast(if ((!(r != null) or (r.*.w <= @as(c_int, 0))) or (r.*.h <= @as(c_int, 0))) SDL_TRUE else SDL_FALSE));
}
pub inline fn SDL_RectEquals(arg_a: [*c]const SDL_Rect, arg_b: [*c]const SDL_Rect) SDL_bool {
    var a = arg_a;
    _ = &a;
    var b = arg_b;
    _ = &b;
    return @as(c_uint, @bitCast(if ((((((a != null) and (b != null)) and (a.*.x == b.*.x)) and (a.*.y == b.*.y)) and (a.*.w == b.*.w)) and (a.*.h == b.*.h)) SDL_TRUE else SDL_FALSE));
}
pub extern fn SDL_HasIntersection(A: [*c]const SDL_Rect, B: [*c]const SDL_Rect) SDL_bool;
pub extern fn SDL_IntersectRect(A: [*c]const SDL_Rect, B: [*c]const SDL_Rect, result: [*c]SDL_Rect) SDL_bool;
pub extern fn SDL_UnionRect(A: [*c]const SDL_Rect, B: [*c]const SDL_Rect, result: [*c]SDL_Rect) void;
pub extern fn SDL_EnclosePoints(points: [*c]const SDL_Point, count: c_int, clip: [*c]const SDL_Rect, result: [*c]SDL_Rect) SDL_bool;
pub extern fn SDL_IntersectRectAndLine(rect: [*c]const SDL_Rect, X1: [*c]c_int, Y1: [*c]c_int, X2: [*c]c_int, Y2: [*c]c_int) SDL_bool;
pub inline fn SDL_PointInFRect(arg_p: [*c]const SDL_FPoint, arg_r: [*c]const SDL_FRect) SDL_bool {
    var p = arg_p;
    _ = &p;
    var r = arg_r;
    _ = &r;
    return @as(c_uint, @bitCast(if ((((p.*.x >= r.*.x) and (p.*.x < (r.*.x + r.*.w))) and (p.*.y >= r.*.y)) and (p.*.y < (r.*.y + r.*.h))) SDL_TRUE else SDL_FALSE));
}
pub inline fn SDL_FRectEmpty(arg_r: [*c]const SDL_FRect) SDL_bool {
    var r = arg_r;
    _ = &r;
    return @as(c_uint, @bitCast(if ((!(r != null) or (r.*.w <= 0.0)) or (r.*.h <= 0.0)) SDL_TRUE else SDL_FALSE));
}
pub inline fn SDL_FRectEqualsEpsilon(arg_a: [*c]const SDL_FRect, arg_b: [*c]const SDL_FRect, epsilon: f32) SDL_bool {
    var a = arg_a;
    _ = &a;
    var b = arg_b;
    _ = &b;
    _ = &epsilon;
    return @as(c_uint, @bitCast(if (((a != null) and (b != null)) and ((a == b) or ((((SDL_fabsf(a.*.x - b.*.x) <= epsilon) and (SDL_fabsf(a.*.y - b.*.y) <= epsilon)) and (SDL_fabsf(a.*.w - b.*.w) <= epsilon)) and (SDL_fabsf(a.*.h - b.*.h) <= epsilon)))) SDL_TRUE else SDL_FALSE));
}
pub inline fn SDL_FRectEquals(arg_a: [*c]const SDL_FRect, arg_b: [*c]const SDL_FRect) SDL_bool {
    var a = arg_a;
    _ = &a;
    var b = arg_b;
    _ = &b;
    return SDL_FRectEqualsEpsilon(a, b, 0.00000011920928955078125);
}
pub extern fn SDL_HasIntersectionF(A: [*c]const SDL_FRect, B: [*c]const SDL_FRect) SDL_bool;
pub extern fn SDL_IntersectFRect(A: [*c]const SDL_FRect, B: [*c]const SDL_FRect, result: [*c]SDL_FRect) SDL_bool;
pub extern fn SDL_UnionFRect(A: [*c]const SDL_FRect, B: [*c]const SDL_FRect, result: [*c]SDL_FRect) void;
pub extern fn SDL_EncloseFPoints(points: [*c]const SDL_FPoint, count: c_int, clip: [*c]const SDL_FRect, result: [*c]SDL_FRect) SDL_bool;
pub extern fn SDL_IntersectFRectAndLine(rect: [*c]const SDL_FRect, X1: [*c]f32, Y1: [*c]f32, X2: [*c]f32, Y2: [*c]f32) SDL_bool;
pub const SDL_BLENDMODE_NONE: c_int = 0;
pub const SDL_BLENDMODE_BLEND: c_int = 1;
pub const SDL_BLENDMODE_ADD: c_int = 2;
pub const SDL_BLENDMODE_MOD: c_int = 4;
pub const SDL_BLENDMODE_MUL: c_int = 8;
pub const SDL_BLENDMODE_INVALID: c_int = 2147483647;
pub const SDL_BlendMode = c_uint;
pub const SDL_BLENDOPERATION_ADD: c_int = 1;
pub const SDL_BLENDOPERATION_SUBTRACT: c_int = 2;
pub const SDL_BLENDOPERATION_REV_SUBTRACT: c_int = 3;
pub const SDL_BLENDOPERATION_MINIMUM: c_int = 4;
pub const SDL_BLENDOPERATION_MAXIMUM: c_int = 5;
pub const SDL_BlendOperation = c_uint;
pub const SDL_BLENDFACTOR_ZERO: c_int = 1;
pub const SDL_BLENDFACTOR_ONE: c_int = 2;
pub const SDL_BLENDFACTOR_SRC_COLOR: c_int = 3;
pub const SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR: c_int = 4;
pub const SDL_BLENDFACTOR_SRC_ALPHA: c_int = 5;
pub const SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA: c_int = 6;
pub const SDL_BLENDFACTOR_DST_COLOR: c_int = 7;
pub const SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR: c_int = 8;
pub const SDL_BLENDFACTOR_DST_ALPHA: c_int = 9;
pub const SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA: c_int = 10;
pub const SDL_BlendFactor = c_uint;
pub extern fn SDL_ComposeCustomBlendMode(srcColorFactor: SDL_BlendFactor, dstColorFactor: SDL_BlendFactor, colorOperation: SDL_BlendOperation, srcAlphaFactor: SDL_BlendFactor, dstAlphaFactor: SDL_BlendFactor, alphaOperation: SDL_BlendOperation) SDL_BlendMode;
pub const struct_SDL_BlitMap = opaque {};
pub const SDL_BlitMap = struct_SDL_BlitMap;
pub const struct_SDL_Surface = extern struct {
    flags: Uint32 = @import("std").mem.zeroes(Uint32),
    format: [*c]SDL_PixelFormat = @import("std").mem.zeroes([*c]SDL_PixelFormat),
    w: c_int = @import("std").mem.zeroes(c_int),
    h: c_int = @import("std").mem.zeroes(c_int),
    pitch: c_int = @import("std").mem.zeroes(c_int),
    pixels: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    userdata: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    locked: c_int = @import("std").mem.zeroes(c_int),
    list_blitmap: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    clip_rect: SDL_Rect = @import("std").mem.zeroes(SDL_Rect),
    map: ?*SDL_BlitMap = @import("std").mem.zeroes(?*SDL_BlitMap),
    refcount: c_int = @import("std").mem.zeroes(c_int),
};
pub const SDL_Surface = struct_SDL_Surface;
pub const SDL_blit = ?*const fn ([*c]struct_SDL_Surface, [*c]SDL_Rect, [*c]struct_SDL_Surface, [*c]SDL_Rect) callconv(.C) c_int;
pub const SDL_YUV_CONVERSION_JPEG: c_int = 0;
pub const SDL_YUV_CONVERSION_BT601: c_int = 1;
pub const SDL_YUV_CONVERSION_BT709: c_int = 2;
pub const SDL_YUV_CONVERSION_AUTOMATIC: c_int = 3;
pub const SDL_YUV_CONVERSION_MODE = c_uint;
pub extern fn SDL_CreateRGBSurface(flags: Uint32, width: c_int, height: c_int, depth: c_int, Rmask: Uint32, Gmask: Uint32, Bmask: Uint32, Amask: Uint32) [*c]SDL_Surface;
pub extern fn SDL_CreateRGBSurfaceWithFormat(flags: Uint32, width: c_int, height: c_int, depth: c_int, format: Uint32) [*c]SDL_Surface;
pub extern fn SDL_CreateRGBSurfaceFrom(pixels: ?*anyopaque, width: c_int, height: c_int, depth: c_int, pitch: c_int, Rmask: Uint32, Gmask: Uint32, Bmask: Uint32, Amask: Uint32) [*c]SDL_Surface;
pub extern fn SDL_CreateRGBSurfaceWithFormatFrom(pixels: ?*anyopaque, width: c_int, height: c_int, depth: c_int, pitch: c_int, format: Uint32) [*c]SDL_Surface;
pub extern fn SDL_FreeSurface(surface: [*c]SDL_Surface) void;
pub extern fn SDL_SetSurfacePalette(surface: [*c]SDL_Surface, palette: [*c]SDL_Palette) c_int;
pub extern fn SDL_LockSurface(surface: [*c]SDL_Surface) c_int;
pub extern fn SDL_UnlockSurface(surface: [*c]SDL_Surface) void;
pub extern fn SDL_LoadBMP_RW(src: [*c]SDL_RWops, freesrc: c_int) [*c]SDL_Surface;
pub extern fn SDL_SaveBMP_RW(surface: [*c]SDL_Surface, dst: [*c]SDL_RWops, freedst: c_int) c_int;
pub extern fn SDL_SetSurfaceRLE(surface: [*c]SDL_Surface, flag: c_int) c_int;
pub extern fn SDL_HasSurfaceRLE(surface: [*c]SDL_Surface) SDL_bool;
pub extern fn SDL_SetColorKey(surface: [*c]SDL_Surface, flag: c_int, key: Uint32) c_int;
pub extern fn SDL_HasColorKey(surface: [*c]SDL_Surface) SDL_bool;
pub extern fn SDL_GetColorKey(surface: [*c]SDL_Surface, key: [*c]Uint32) c_int;
pub extern fn SDL_SetSurfaceColorMod(surface: [*c]SDL_Surface, r: Uint8, g: Uint8, b: Uint8) c_int;
pub extern fn SDL_GetSurfaceColorMod(surface: [*c]SDL_Surface, r: [*c]Uint8, g: [*c]Uint8, b: [*c]Uint8) c_int;
pub extern fn SDL_SetSurfaceAlphaMod(surface: [*c]SDL_Surface, alpha: Uint8) c_int;
pub extern fn SDL_GetSurfaceAlphaMod(surface: [*c]SDL_Surface, alpha: [*c]Uint8) c_int;
pub extern fn SDL_SetSurfaceBlendMode(surface: [*c]SDL_Surface, blendMode: SDL_BlendMode) c_int;
pub extern fn SDL_GetSurfaceBlendMode(surface: [*c]SDL_Surface, blendMode: [*c]SDL_BlendMode) c_int;
pub extern fn SDL_SetClipRect(surface: [*c]SDL_Surface, rect: [*c]const SDL_Rect) SDL_bool;
pub extern fn SDL_GetClipRect(surface: [*c]SDL_Surface, rect: [*c]SDL_Rect) void;
pub extern fn SDL_DuplicateSurface(surface: [*c]SDL_Surface) [*c]SDL_Surface;
pub extern fn SDL_ConvertSurface(src: [*c]SDL_Surface, fmt: [*c]const SDL_PixelFormat, flags: Uint32) [*c]SDL_Surface;
pub extern fn SDL_ConvertSurfaceFormat(src: [*c]SDL_Surface, pixel_format: Uint32, flags: Uint32) [*c]SDL_Surface;
pub extern fn SDL_ConvertPixels(width: c_int, height: c_int, src_format: Uint32, src: ?*const anyopaque, src_pitch: c_int, dst_format: Uint32, dst: ?*anyopaque, dst_pitch: c_int) c_int;
pub extern fn SDL_PremultiplyAlpha(width: c_int, height: c_int, src_format: Uint32, src: ?*const anyopaque, src_pitch: c_int, dst_format: Uint32, dst: ?*anyopaque, dst_pitch: c_int) c_int;
pub extern fn SDL_FillRect(dst: [*c]SDL_Surface, rect: [*c]const SDL_Rect, color: Uint32) c_int;
pub extern fn SDL_FillRects(dst: [*c]SDL_Surface, rects: [*c]const SDL_Rect, count: c_int, color: Uint32) c_int;
pub extern fn SDL_UpperBlit(src: [*c]SDL_Surface, srcrect: [*c]const SDL_Rect, dst: [*c]SDL_Surface, dstrect: [*c]SDL_Rect) c_int;
pub extern fn SDL_LowerBlit(src: [*c]SDL_Surface, srcrect: [*c]SDL_Rect, dst: [*c]SDL_Surface, dstrect: [*c]SDL_Rect) c_int;
pub extern fn SDL_SoftStretch(src: [*c]SDL_Surface, srcrect: [*c]const SDL_Rect, dst: [*c]SDL_Surface, dstrect: [*c]const SDL_Rect) c_int;
pub extern fn SDL_SoftStretchLinear(src: [*c]SDL_Surface, srcrect: [*c]const SDL_Rect, dst: [*c]SDL_Surface, dstrect: [*c]const SDL_Rect) c_int;
pub extern fn SDL_UpperBlitScaled(src: [*c]SDL_Surface, srcrect: [*c]const SDL_Rect, dst: [*c]SDL_Surface, dstrect: [*c]SDL_Rect) c_int;
pub extern fn SDL_LowerBlitScaled(src: [*c]SDL_Surface, srcrect: [*c]SDL_Rect, dst: [*c]SDL_Surface, dstrect: [*c]SDL_Rect) c_int;
pub extern fn SDL_SetYUVConversionMode(mode: SDL_YUV_CONVERSION_MODE) void;
pub extern fn SDL_GetYUVConversionMode() SDL_YUV_CONVERSION_MODE;
pub extern fn SDL_GetYUVConversionModeForResolution(width: c_int, height: c_int) SDL_YUV_CONVERSION_MODE;
pub const SDL_DisplayMode = extern struct {
    format: Uint32 = @import("std").mem.zeroes(Uint32),
    w: c_int = @import("std").mem.zeroes(c_int),
    h: c_int = @import("std").mem.zeroes(c_int),
    refresh_rate: c_int = @import("std").mem.zeroes(c_int),
    driverdata: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const struct_SDL_Window = opaque {};
pub const SDL_Window = struct_SDL_Window;
pub const SDL_WINDOW_FULLSCREEN: c_int = 1;
pub const SDL_WINDOW_OPENGL: c_int = 2;
pub const SDL_WINDOW_SHOWN: c_int = 4;
pub const SDL_WINDOW_HIDDEN: c_int = 8;
pub const SDL_WINDOW_BORDERLESS: c_int = 16;
pub const SDL_WINDOW_RESIZABLE: c_int = 32;
pub const SDL_WINDOW_MINIMIZED: c_int = 64;
pub const SDL_WINDOW_MAXIMIZED: c_int = 128;
pub const SDL_WINDOW_MOUSE_GRABBED: c_int = 256;
pub const SDL_WINDOW_INPUT_FOCUS: c_int = 512;
pub const SDL_WINDOW_MOUSE_FOCUS: c_int = 1024;
pub const SDL_WINDOW_FULLSCREEN_DESKTOP: c_int = 4097;
pub const SDL_WINDOW_FOREIGN: c_int = 2048;
pub const SDL_WINDOW_ALLOW_HIGHDPI: c_int = 8192;
pub const SDL_WINDOW_MOUSE_CAPTURE: c_int = 16384;
pub const SDL_WINDOW_ALWAYS_ON_TOP: c_int = 32768;
pub const SDL_WINDOW_SKIP_TASKBAR: c_int = 65536;
pub const SDL_WINDOW_UTILITY: c_int = 131072;
pub const SDL_WINDOW_TOOLTIP: c_int = 262144;
pub const SDL_WINDOW_POPUP_MENU: c_int = 524288;
pub const SDL_WINDOW_KEYBOARD_GRABBED: c_int = 1048576;
pub const SDL_WINDOW_VULKAN: c_int = 268435456;
pub const SDL_WINDOW_METAL: c_int = 536870912;
pub const SDL_WINDOW_INPUT_GRABBED: c_int = 256;
pub const SDL_WindowFlags = c_uint;
pub const SDL_WINDOWEVENT_NONE: c_int = 0;
pub const SDL_WINDOWEVENT_SHOWN: c_int = 1;
pub const SDL_WINDOWEVENT_HIDDEN: c_int = 2;
pub const SDL_WINDOWEVENT_EXPOSED: c_int = 3;
pub const SDL_WINDOWEVENT_MOVED: c_int = 4;
pub const SDL_WINDOWEVENT_RESIZED: c_int = 5;
pub const SDL_WINDOWEVENT_SIZE_CHANGED: c_int = 6;
pub const SDL_WINDOWEVENT_MINIMIZED: c_int = 7;
pub const SDL_WINDOWEVENT_MAXIMIZED: c_int = 8;
pub const SDL_WINDOWEVENT_RESTORED: c_int = 9;
pub const SDL_WINDOWEVENT_ENTER: c_int = 10;
pub const SDL_WINDOWEVENT_LEAVE: c_int = 11;
pub const SDL_WINDOWEVENT_FOCUS_GAINED: c_int = 12;
pub const SDL_WINDOWEVENT_FOCUS_LOST: c_int = 13;
pub const SDL_WINDOWEVENT_CLOSE: c_int = 14;
pub const SDL_WINDOWEVENT_TAKE_FOCUS: c_int = 15;
pub const SDL_WINDOWEVENT_HIT_TEST: c_int = 16;
pub const SDL_WINDOWEVENT_ICCPROF_CHANGED: c_int = 17;
pub const SDL_WINDOWEVENT_DISPLAY_CHANGED: c_int = 18;
pub const SDL_WindowEventID = c_uint;
pub const SDL_DISPLAYEVENT_NONE: c_int = 0;
pub const SDL_DISPLAYEVENT_ORIENTATION: c_int = 1;
pub const SDL_DISPLAYEVENT_CONNECTED: c_int = 2;
pub const SDL_DISPLAYEVENT_DISCONNECTED: c_int = 3;
pub const SDL_DISPLAYEVENT_MOVED: c_int = 4;
pub const SDL_DisplayEventID = c_uint;
pub const SDL_ORIENTATION_UNKNOWN: c_int = 0;
pub const SDL_ORIENTATION_LANDSCAPE: c_int = 1;
pub const SDL_ORIENTATION_LANDSCAPE_FLIPPED: c_int = 2;
pub const SDL_ORIENTATION_PORTRAIT: c_int = 3;
pub const SDL_ORIENTATION_PORTRAIT_FLIPPED: c_int = 4;
pub const SDL_DisplayOrientation = c_uint;
pub const SDL_FLASH_CANCEL: c_int = 0;
pub const SDL_FLASH_BRIEFLY: c_int = 1;
pub const SDL_FLASH_UNTIL_FOCUSED: c_int = 2;
pub const SDL_FlashOperation = c_uint;
pub const SDL_GLContext = ?*anyopaque;
pub const SDL_GL_RED_SIZE: c_int = 0;
pub const SDL_GL_GREEN_SIZE: c_int = 1;
pub const SDL_GL_BLUE_SIZE: c_int = 2;
pub const SDL_GL_ALPHA_SIZE: c_int = 3;
pub const SDL_GL_BUFFER_SIZE: c_int = 4;
pub const SDL_GL_DOUBLEBUFFER: c_int = 5;
pub const SDL_GL_DEPTH_SIZE: c_int = 6;
pub const SDL_GL_STENCIL_SIZE: c_int = 7;
pub const SDL_GL_ACCUM_RED_SIZE: c_int = 8;
pub const SDL_GL_ACCUM_GREEN_SIZE: c_int = 9;
pub const SDL_GL_ACCUM_BLUE_SIZE: c_int = 10;
pub const SDL_GL_ACCUM_ALPHA_SIZE: c_int = 11;
pub const SDL_GL_STEREO: c_int = 12;
pub const SDL_GL_MULTISAMPLEBUFFERS: c_int = 13;
pub const SDL_GL_MULTISAMPLESAMPLES: c_int = 14;
pub const SDL_GL_ACCELERATED_VISUAL: c_int = 15;
pub const SDL_GL_RETAINED_BACKING: c_int = 16;
pub const SDL_GL_CONTEXT_MAJOR_VERSION: c_int = 17;
pub const SDL_GL_CONTEXT_MINOR_VERSION: c_int = 18;
pub const SDL_GL_CONTEXT_EGL: c_int = 19;
pub const SDL_GL_CONTEXT_FLAGS: c_int = 20;
pub const SDL_GL_CONTEXT_PROFILE_MASK: c_int = 21;
pub const SDL_GL_SHARE_WITH_CURRENT_CONTEXT: c_int = 22;
pub const SDL_GL_FRAMEBUFFER_SRGB_CAPABLE: c_int = 23;
pub const SDL_GL_CONTEXT_RELEASE_BEHAVIOR: c_int = 24;
pub const SDL_GL_CONTEXT_RESET_NOTIFICATION: c_int = 25;
pub const SDL_GL_CONTEXT_NO_ERROR: c_int = 26;
pub const SDL_GL_FLOATBUFFERS: c_int = 27;
pub const SDL_GLattr = c_uint;
pub const SDL_GL_CONTEXT_PROFILE_CORE: c_int = 1;
pub const SDL_GL_CONTEXT_PROFILE_COMPATIBILITY: c_int = 2;
pub const SDL_GL_CONTEXT_PROFILE_ES: c_int = 4;
pub const SDL_GLprofile = c_uint;
pub const SDL_GL_CONTEXT_DEBUG_FLAG: c_int = 1;
pub const SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG: c_int = 2;
pub const SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG: c_int = 4;
pub const SDL_GL_CONTEXT_RESET_ISOLATION_FLAG: c_int = 8;
pub const SDL_GLcontextFlag = c_uint;
pub const SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE: c_int = 0;
pub const SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH: c_int = 1;
pub const SDL_GLcontextReleaseFlag = c_uint;
pub const SDL_GL_CONTEXT_RESET_NO_NOTIFICATION: c_int = 0;
pub const SDL_GL_CONTEXT_RESET_LOSE_CONTEXT: c_int = 1;
pub const SDL_GLContextResetNotification = c_uint;
pub extern fn SDL_GetNumVideoDrivers() c_int;
pub extern fn SDL_GetVideoDriver(index: c_int) [*c]const u8;
pub extern fn SDL_VideoInit(driver_name: [*c]const u8) c_int;
pub extern fn SDL_VideoQuit() void;
pub extern fn SDL_GetCurrentVideoDriver() [*c]const u8;
pub extern fn SDL_GetNumVideoDisplays() c_int;
pub extern fn SDL_GetDisplayName(displayIndex: c_int) [*c]const u8;
pub extern fn SDL_GetDisplayBounds(displayIndex: c_int, rect: [*c]SDL_Rect) c_int;
pub extern fn SDL_GetDisplayUsableBounds(displayIndex: c_int, rect: [*c]SDL_Rect) c_int;
pub extern fn SDL_GetDisplayDPI(displayIndex: c_int, ddpi: [*c]f32, hdpi: [*c]f32, vdpi: [*c]f32) c_int;
pub extern fn SDL_GetDisplayOrientation(displayIndex: c_int) SDL_DisplayOrientation;
pub extern fn SDL_GetNumDisplayModes(displayIndex: c_int) c_int;
pub extern fn SDL_GetDisplayMode(displayIndex: c_int, modeIndex: c_int, mode: [*c]SDL_DisplayMode) c_int;
pub extern fn SDL_GetDesktopDisplayMode(displayIndex: c_int, mode: [*c]SDL_DisplayMode) c_int;
pub extern fn SDL_GetCurrentDisplayMode(displayIndex: c_int, mode: [*c]SDL_DisplayMode) c_int;
pub extern fn SDL_GetClosestDisplayMode(displayIndex: c_int, mode: [*c]const SDL_DisplayMode, closest: [*c]SDL_DisplayMode) [*c]SDL_DisplayMode;
pub extern fn SDL_GetPointDisplayIndex(point: [*c]const SDL_Point) c_int;
pub extern fn SDL_GetRectDisplayIndex(rect: [*c]const SDL_Rect) c_int;
pub extern fn SDL_GetWindowDisplayIndex(window: ?*SDL_Window) c_int;
pub extern fn SDL_SetWindowDisplayMode(window: ?*SDL_Window, mode: [*c]const SDL_DisplayMode) c_int;
pub extern fn SDL_GetWindowDisplayMode(window: ?*SDL_Window, mode: [*c]SDL_DisplayMode) c_int;
pub extern fn SDL_GetWindowICCProfile(window: ?*SDL_Window, size: [*c]usize) ?*anyopaque;
pub extern fn SDL_GetWindowPixelFormat(window: ?*SDL_Window) Uint32;
pub extern fn SDL_CreateWindow(title: [*c]const u8, x: c_int, y: c_int, w: c_int, h: c_int, flags: Uint32) ?*SDL_Window;
pub extern fn SDL_CreateWindowFrom(data: ?*const anyopaque) ?*SDL_Window;
pub extern fn SDL_GetWindowID(window: ?*SDL_Window) Uint32;
pub extern fn SDL_GetWindowFromID(id: Uint32) ?*SDL_Window;
pub extern fn SDL_GetWindowFlags(window: ?*SDL_Window) Uint32;
pub extern fn SDL_SetWindowTitle(window: ?*SDL_Window, title: [*c]const u8) void;
pub extern fn SDL_GetWindowTitle(window: ?*SDL_Window) [*c]const u8;
pub extern fn SDL_SetWindowIcon(window: ?*SDL_Window, icon: [*c]SDL_Surface) void;
pub extern fn SDL_SetWindowData(window: ?*SDL_Window, name: [*c]const u8, userdata: ?*anyopaque) ?*anyopaque;
pub extern fn SDL_GetWindowData(window: ?*SDL_Window, name: [*c]const u8) ?*anyopaque;
pub extern fn SDL_SetWindowPosition(window: ?*SDL_Window, x: c_int, y: c_int) void;
pub extern fn SDL_GetWindowPosition(window: ?*SDL_Window, x: [*c]c_int, y: [*c]c_int) void;
pub extern fn SDL_SetWindowSize(window: ?*SDL_Window, w: c_int, h: c_int) void;
pub extern fn SDL_GetWindowSize(window: ?*SDL_Window, w: [*c]c_int, h: [*c]c_int) void;
pub extern fn SDL_GetWindowBordersSize(window: ?*SDL_Window, top: [*c]c_int, left: [*c]c_int, bottom: [*c]c_int, right: [*c]c_int) c_int;
pub extern fn SDL_GetWindowSizeInPixels(window: ?*SDL_Window, w: [*c]c_int, h: [*c]c_int) void;
pub extern fn SDL_SetWindowMinimumSize(window: ?*SDL_Window, min_w: c_int, min_h: c_int) void;
pub extern fn SDL_GetWindowMinimumSize(window: ?*SDL_Window, w: [*c]c_int, h: [*c]c_int) void;
pub extern fn SDL_SetWindowMaximumSize(window: ?*SDL_Window, max_w: c_int, max_h: c_int) void;
pub extern fn SDL_GetWindowMaximumSize(window: ?*SDL_Window, w: [*c]c_int, h: [*c]c_int) void;
pub extern fn SDL_SetWindowBordered(window: ?*SDL_Window, bordered: SDL_bool) void;
pub extern fn SDL_SetWindowResizable(window: ?*SDL_Window, resizable: SDL_bool) void;
pub extern fn SDL_SetWindowAlwaysOnTop(window: ?*SDL_Window, on_top: SDL_bool) void;
pub extern fn SDL_ShowWindow(window: ?*SDL_Window) void;
pub extern fn SDL_HideWindow(window: ?*SDL_Window) void;
pub extern fn SDL_RaiseWindow(window: ?*SDL_Window) void;
pub extern fn SDL_MaximizeWindow(window: ?*SDL_Window) void;
pub extern fn SDL_MinimizeWindow(window: ?*SDL_Window) void;
pub extern fn SDL_RestoreWindow(window: ?*SDL_Window) void;
pub extern fn SDL_SetWindowFullscreen(window: ?*SDL_Window, flags: Uint32) c_int;
pub extern fn SDL_HasWindowSurface(window: ?*SDL_Window) SDL_bool;
pub extern fn SDL_GetWindowSurface(window: ?*SDL_Window) [*c]SDL_Surface;
pub extern fn SDL_UpdateWindowSurface(window: ?*SDL_Window) c_int;
pub extern fn SDL_UpdateWindowSurfaceRects(window: ?*SDL_Window, rects: [*c]const SDL_Rect, numrects: c_int) c_int;
pub extern fn SDL_DestroyWindowSurface(window: ?*SDL_Window) c_int;
pub extern fn SDL_SetWindowGrab(window: ?*SDL_Window, grabbed: SDL_bool) void;
pub extern fn SDL_SetWindowKeyboardGrab(window: ?*SDL_Window, grabbed: SDL_bool) void;
pub extern fn SDL_SetWindowMouseGrab(window: ?*SDL_Window, grabbed: SDL_bool) void;
pub extern fn SDL_GetWindowGrab(window: ?*SDL_Window) SDL_bool;
pub extern fn SDL_GetWindowKeyboardGrab(window: ?*SDL_Window) SDL_bool;
pub extern fn SDL_GetWindowMouseGrab(window: ?*SDL_Window) SDL_bool;
pub extern fn SDL_GetGrabbedWindow() ?*SDL_Window;
pub extern fn SDL_SetWindowMouseRect(window: ?*SDL_Window, rect: [*c]const SDL_Rect) c_int;
pub extern fn SDL_GetWindowMouseRect(window: ?*SDL_Window) [*c]const SDL_Rect;
pub extern fn SDL_SetWindowBrightness(window: ?*SDL_Window, brightness: f32) c_int;
pub extern fn SDL_GetWindowBrightness(window: ?*SDL_Window) f32;
pub extern fn SDL_SetWindowOpacity(window: ?*SDL_Window, opacity: f32) c_int;
pub extern fn SDL_GetWindowOpacity(window: ?*SDL_Window, out_opacity: [*c]f32) c_int;
pub extern fn SDL_SetWindowModalFor(modal_window: ?*SDL_Window, parent_window: ?*SDL_Window) c_int;
pub extern fn SDL_SetWindowInputFocus(window: ?*SDL_Window) c_int;
pub extern fn SDL_SetWindowGammaRamp(window: ?*SDL_Window, red: [*c]const Uint16, green: [*c]const Uint16, blue: [*c]const Uint16) c_int;
pub extern fn SDL_GetWindowGammaRamp(window: ?*SDL_Window, red: [*c]Uint16, green: [*c]Uint16, blue: [*c]Uint16) c_int;
pub const SDL_HITTEST_NORMAL: c_int = 0;
pub const SDL_HITTEST_DRAGGABLE: c_int = 1;
pub const SDL_HITTEST_RESIZE_TOPLEFT: c_int = 2;
pub const SDL_HITTEST_RESIZE_TOP: c_int = 3;
pub const SDL_HITTEST_RESIZE_TOPRIGHT: c_int = 4;
pub const SDL_HITTEST_RESIZE_RIGHT: c_int = 5;
pub const SDL_HITTEST_RESIZE_BOTTOMRIGHT: c_int = 6;
pub const SDL_HITTEST_RESIZE_BOTTOM: c_int = 7;
pub const SDL_HITTEST_RESIZE_BOTTOMLEFT: c_int = 8;
pub const SDL_HITTEST_RESIZE_LEFT: c_int = 9;
pub const SDL_HitTestResult = c_uint;
pub const SDL_HitTest = ?*const fn (?*SDL_Window, [*c]const SDL_Point, ?*anyopaque) callconv(.C) SDL_HitTestResult;
pub extern fn SDL_SetWindowHitTest(window: ?*SDL_Window, callback: SDL_HitTest, callback_data: ?*anyopaque) c_int;
pub extern fn SDL_FlashWindow(window: ?*SDL_Window, operation: SDL_FlashOperation) c_int;
pub extern fn SDL_DestroyWindow(window: ?*SDL_Window) void;
pub extern fn SDL_IsScreenSaverEnabled() SDL_bool;
pub extern fn SDL_EnableScreenSaver() void;
pub extern fn SDL_DisableScreenSaver() void;
pub extern fn SDL_GL_LoadLibrary(path: [*c]const u8) c_int;
pub extern fn SDL_GL_GetProcAddress(proc: [*c]const u8) ?*anyopaque;
pub extern fn SDL_GL_UnloadLibrary() void;
pub extern fn SDL_GL_ExtensionSupported(extension: [*c]const u8) SDL_bool;
pub extern fn SDL_GL_ResetAttributes() void;
pub extern fn SDL_GL_SetAttribute(attr: SDL_GLattr, value: c_int) c_int;
pub extern fn SDL_GL_GetAttribute(attr: SDL_GLattr, value: [*c]c_int) c_int;
pub extern fn SDL_GL_CreateContext(window: ?*SDL_Window) SDL_GLContext;
pub extern fn SDL_GL_MakeCurrent(window: ?*SDL_Window, context: SDL_GLContext) c_int;
pub extern fn SDL_GL_GetCurrentWindow() ?*SDL_Window;
pub extern fn SDL_GL_GetCurrentContext() SDL_GLContext;
pub extern fn SDL_GL_GetDrawableSize(window: ?*SDL_Window, w: [*c]c_int, h: [*c]c_int) void;
pub extern fn SDL_GL_SetSwapInterval(interval: c_int) c_int;
pub extern fn SDL_GL_GetSwapInterval() c_int;
pub extern fn SDL_GL_SwapWindow(window: ?*SDL_Window) void;
pub extern fn SDL_GL_DeleteContext(context: SDL_GLContext) void;
pub const SDL_SCANCODE_UNKNOWN: c_int = 0;
pub const SDL_SCANCODE_A: c_int = 4;
pub const SDL_SCANCODE_B: c_int = 5;
pub const SDL_SCANCODE_C: c_int = 6;
pub const SDL_SCANCODE_D: c_int = 7;
pub const SDL_SCANCODE_E: c_int = 8;
pub const SDL_SCANCODE_F: c_int = 9;
pub const SDL_SCANCODE_G: c_int = 10;
pub const SDL_SCANCODE_H: c_int = 11;
pub const SDL_SCANCODE_I: c_int = 12;
pub const SDL_SCANCODE_J: c_int = 13;
pub const SDL_SCANCODE_K: c_int = 14;
pub const SDL_SCANCODE_L: c_int = 15;
pub const SDL_SCANCODE_M: c_int = 16;
pub const SDL_SCANCODE_N: c_int = 17;
pub const SDL_SCANCODE_O: c_int = 18;
pub const SDL_SCANCODE_P: c_int = 19;
pub const SDL_SCANCODE_Q: c_int = 20;
pub const SDL_SCANCODE_R: c_int = 21;
pub const SDL_SCANCODE_S: c_int = 22;
pub const SDL_SCANCODE_T: c_int = 23;
pub const SDL_SCANCODE_U: c_int = 24;
pub const SDL_SCANCODE_V: c_int = 25;
pub const SDL_SCANCODE_W: c_int = 26;
pub const SDL_SCANCODE_X: c_int = 27;
pub const SDL_SCANCODE_Y: c_int = 28;
pub const SDL_SCANCODE_Z: c_int = 29;
pub const SDL_SCANCODE_1: c_int = 30;
pub const SDL_SCANCODE_2: c_int = 31;
pub const SDL_SCANCODE_3: c_int = 32;
pub const SDL_SCANCODE_4: c_int = 33;
pub const SDL_SCANCODE_5: c_int = 34;
pub const SDL_SCANCODE_6: c_int = 35;
pub const SDL_SCANCODE_7: c_int = 36;
pub const SDL_SCANCODE_8: c_int = 37;
pub const SDL_SCANCODE_9: c_int = 38;
pub const SDL_SCANCODE_0: c_int = 39;
pub const SDL_SCANCODE_RETURN: c_int = 40;
pub const SDL_SCANCODE_ESCAPE: c_int = 41;
pub const SDL_SCANCODE_BACKSPACE: c_int = 42;
pub const SDL_SCANCODE_TAB: c_int = 43;
pub const SDL_SCANCODE_SPACE: c_int = 44;
pub const SDL_SCANCODE_MINUS: c_int = 45;
pub const SDL_SCANCODE_EQUALS: c_int = 46;
pub const SDL_SCANCODE_LEFTBRACKET: c_int = 47;
pub const SDL_SCANCODE_RIGHTBRACKET: c_int = 48;
pub const SDL_SCANCODE_BACKSLASH: c_int = 49;
pub const SDL_SCANCODE_NONUSHASH: c_int = 50;
pub const SDL_SCANCODE_SEMICOLON: c_int = 51;
pub const SDL_SCANCODE_APOSTROPHE: c_int = 52;
pub const SDL_SCANCODE_GRAVE: c_int = 53;
pub const SDL_SCANCODE_COMMA: c_int = 54;
pub const SDL_SCANCODE_PERIOD: c_int = 55;
pub const SDL_SCANCODE_SLASH: c_int = 56;
pub const SDL_SCANCODE_CAPSLOCK: c_int = 57;
pub const SDL_SCANCODE_F1: c_int = 58;
pub const SDL_SCANCODE_F2: c_int = 59;
pub const SDL_SCANCODE_F3: c_int = 60;
pub const SDL_SCANCODE_F4: c_int = 61;
pub const SDL_SCANCODE_F5: c_int = 62;
pub const SDL_SCANCODE_F6: c_int = 63;
pub const SDL_SCANCODE_F7: c_int = 64;
pub const SDL_SCANCODE_F8: c_int = 65;
pub const SDL_SCANCODE_F9: c_int = 66;
pub const SDL_SCANCODE_F10: c_int = 67;
pub const SDL_SCANCODE_F11: c_int = 68;
pub const SDL_SCANCODE_F12: c_int = 69;
pub const SDL_SCANCODE_PRINTSCREEN: c_int = 70;
pub const SDL_SCANCODE_SCROLLLOCK: c_int = 71;
pub const SDL_SCANCODE_PAUSE: c_int = 72;
pub const SDL_SCANCODE_INSERT: c_int = 73;
pub const SDL_SCANCODE_HOME: c_int = 74;
pub const SDL_SCANCODE_PAGEUP: c_int = 75;
pub const SDL_SCANCODE_DELETE: c_int = 76;
pub const SDL_SCANCODE_END: c_int = 77;
pub const SDL_SCANCODE_PAGEDOWN: c_int = 78;
pub const SDL_SCANCODE_RIGHT: c_int = 79;
pub const SDL_SCANCODE_LEFT: c_int = 80;
pub const SDL_SCANCODE_DOWN: c_int = 81;
pub const SDL_SCANCODE_UP: c_int = 82;
pub const SDL_SCANCODE_NUMLOCKCLEAR: c_int = 83;
pub const SDL_SCANCODE_KP_DIVIDE: c_int = 84;
pub const SDL_SCANCODE_KP_MULTIPLY: c_int = 85;
pub const SDL_SCANCODE_KP_MINUS: c_int = 86;
pub const SDL_SCANCODE_KP_PLUS: c_int = 87;
pub const SDL_SCANCODE_KP_ENTER: c_int = 88;
pub const SDL_SCANCODE_KP_1: c_int = 89;
pub const SDL_SCANCODE_KP_2: c_int = 90;
pub const SDL_SCANCODE_KP_3: c_int = 91;
pub const SDL_SCANCODE_KP_4: c_int = 92;
pub const SDL_SCANCODE_KP_5: c_int = 93;
pub const SDL_SCANCODE_KP_6: c_int = 94;
pub const SDL_SCANCODE_KP_7: c_int = 95;
pub const SDL_SCANCODE_KP_8: c_int = 96;
pub const SDL_SCANCODE_KP_9: c_int = 97;
pub const SDL_SCANCODE_KP_0: c_int = 98;
pub const SDL_SCANCODE_KP_PERIOD: c_int = 99;
pub const SDL_SCANCODE_NONUSBACKSLASH: c_int = 100;
pub const SDL_SCANCODE_APPLICATION: c_int = 101;
pub const SDL_SCANCODE_POWER: c_int = 102;
pub const SDL_SCANCODE_KP_EQUALS: c_int = 103;
pub const SDL_SCANCODE_F13: c_int = 104;
pub const SDL_SCANCODE_F14: c_int = 105;
pub const SDL_SCANCODE_F15: c_int = 106;
pub const SDL_SCANCODE_F16: c_int = 107;
pub const SDL_SCANCODE_F17: c_int = 108;
pub const SDL_SCANCODE_F18: c_int = 109;
pub const SDL_SCANCODE_F19: c_int = 110;
pub const SDL_SCANCODE_F20: c_int = 111;
pub const SDL_SCANCODE_F21: c_int = 112;
pub const SDL_SCANCODE_F22: c_int = 113;
pub const SDL_SCANCODE_F23: c_int = 114;
pub const SDL_SCANCODE_F24: c_int = 115;
pub const SDL_SCANCODE_EXECUTE: c_int = 116;
pub const SDL_SCANCODE_HELP: c_int = 117;
pub const SDL_SCANCODE_MENU: c_int = 118;
pub const SDL_SCANCODE_SELECT: c_int = 119;
pub const SDL_SCANCODE_STOP: c_int = 120;
pub const SDL_SCANCODE_AGAIN: c_int = 121;
pub const SDL_SCANCODE_UNDO: c_int = 122;
pub const SDL_SCANCODE_CUT: c_int = 123;
pub const SDL_SCANCODE_COPY: c_int = 124;
pub const SDL_SCANCODE_PASTE: c_int = 125;
pub const SDL_SCANCODE_FIND: c_int = 126;
pub const SDL_SCANCODE_MUTE: c_int = 127;
pub const SDL_SCANCODE_VOLUMEUP: c_int = 128;
pub const SDL_SCANCODE_VOLUMEDOWN: c_int = 129;
pub const SDL_SCANCODE_KP_COMMA: c_int = 133;
pub const SDL_SCANCODE_KP_EQUALSAS400: c_int = 134;
pub const SDL_SCANCODE_INTERNATIONAL1: c_int = 135;
pub const SDL_SCANCODE_INTERNATIONAL2: c_int = 136;
pub const SDL_SCANCODE_INTERNATIONAL3: c_int = 137;
pub const SDL_SCANCODE_INTERNATIONAL4: c_int = 138;
pub const SDL_SCANCODE_INTERNATIONAL5: c_int = 139;
pub const SDL_SCANCODE_INTERNATIONAL6: c_int = 140;
pub const SDL_SCANCODE_INTERNATIONAL7: c_int = 141;
pub const SDL_SCANCODE_INTERNATIONAL8: c_int = 142;
pub const SDL_SCANCODE_INTERNATIONAL9: c_int = 143;
pub const SDL_SCANCODE_LANG1: c_int = 144;
pub const SDL_SCANCODE_LANG2: c_int = 145;
pub const SDL_SCANCODE_LANG3: c_int = 146;
pub const SDL_SCANCODE_LANG4: c_int = 147;
pub const SDL_SCANCODE_LANG5: c_int = 148;
pub const SDL_SCANCODE_LANG6: c_int = 149;
pub const SDL_SCANCODE_LANG7: c_int = 150;
pub const SDL_SCANCODE_LANG8: c_int = 151;
pub const SDL_SCANCODE_LANG9: c_int = 152;
pub const SDL_SCANCODE_ALTERASE: c_int = 153;
pub const SDL_SCANCODE_SYSREQ: c_int = 154;
pub const SDL_SCANCODE_CANCEL: c_int = 155;
pub const SDL_SCANCODE_CLEAR: c_int = 156;
pub const SDL_SCANCODE_PRIOR: c_int = 157;
pub const SDL_SCANCODE_RETURN2: c_int = 158;
pub const SDL_SCANCODE_SEPARATOR: c_int = 159;
pub const SDL_SCANCODE_OUT: c_int = 160;
pub const SDL_SCANCODE_OPER: c_int = 161;
pub const SDL_SCANCODE_CLEARAGAIN: c_int = 162;
pub const SDL_SCANCODE_CRSEL: c_int = 163;
pub const SDL_SCANCODE_EXSEL: c_int = 164;
pub const SDL_SCANCODE_KP_00: c_int = 176;
pub const SDL_SCANCODE_KP_000: c_int = 177;
pub const SDL_SCANCODE_THOUSANDSSEPARATOR: c_int = 178;
pub const SDL_SCANCODE_DECIMALSEPARATOR: c_int = 179;
pub const SDL_SCANCODE_CURRENCYUNIT: c_int = 180;
pub const SDL_SCANCODE_CURRENCYSUBUNIT: c_int = 181;
pub const SDL_SCANCODE_KP_LEFTPAREN: c_int = 182;
pub const SDL_SCANCODE_KP_RIGHTPAREN: c_int = 183;
pub const SDL_SCANCODE_KP_LEFTBRACE: c_int = 184;
pub const SDL_SCANCODE_KP_RIGHTBRACE: c_int = 185;
pub const SDL_SCANCODE_KP_TAB: c_int = 186;
pub const SDL_SCANCODE_KP_BACKSPACE: c_int = 187;
pub const SDL_SCANCODE_KP_A: c_int = 188;
pub const SDL_SCANCODE_KP_B: c_int = 189;
pub const SDL_SCANCODE_KP_C: c_int = 190;
pub const SDL_SCANCODE_KP_D: c_int = 191;
pub const SDL_SCANCODE_KP_E: c_int = 192;
pub const SDL_SCANCODE_KP_F: c_int = 193;
pub const SDL_SCANCODE_KP_XOR: c_int = 194;
pub const SDL_SCANCODE_KP_POWER: c_int = 195;
pub const SDL_SCANCODE_KP_PERCENT: c_int = 196;
pub const SDL_SCANCODE_KP_LESS: c_int = 197;
pub const SDL_SCANCODE_KP_GREATER: c_int = 198;
pub const SDL_SCANCODE_KP_AMPERSAND: c_int = 199;
pub const SDL_SCANCODE_KP_DBLAMPERSAND: c_int = 200;
pub const SDL_SCANCODE_KP_VERTICALBAR: c_int = 201;
pub const SDL_SCANCODE_KP_DBLVERTICALBAR: c_int = 202;
pub const SDL_SCANCODE_KP_COLON: c_int = 203;
pub const SDL_SCANCODE_KP_HASH: c_int = 204;
pub const SDL_SCANCODE_KP_SPACE: c_int = 205;
pub const SDL_SCANCODE_KP_AT: c_int = 206;
pub const SDL_SCANCODE_KP_EXCLAM: c_int = 207;
pub const SDL_SCANCODE_KP_MEMSTORE: c_int = 208;
pub const SDL_SCANCODE_KP_MEMRECALL: c_int = 209;
pub const SDL_SCANCODE_KP_MEMCLEAR: c_int = 210;
pub const SDL_SCANCODE_KP_MEMADD: c_int = 211;
pub const SDL_SCANCODE_KP_MEMSUBTRACT: c_int = 212;
pub const SDL_SCANCODE_KP_MEMMULTIPLY: c_int = 213;
pub const SDL_SCANCODE_KP_MEMDIVIDE: c_int = 214;
pub const SDL_SCANCODE_KP_PLUSMINUS: c_int = 215;
pub const SDL_SCANCODE_KP_CLEAR: c_int = 216;
pub const SDL_SCANCODE_KP_CLEARENTRY: c_int = 217;
pub const SDL_SCANCODE_KP_BINARY: c_int = 218;
pub const SDL_SCANCODE_KP_OCTAL: c_int = 219;
pub const SDL_SCANCODE_KP_DECIMAL: c_int = 220;
pub const SDL_SCANCODE_KP_HEXADECIMAL: c_int = 221;
pub const SDL_SCANCODE_LCTRL: c_int = 224;
pub const SDL_SCANCODE_LSHIFT: c_int = 225;
pub const SDL_SCANCODE_LALT: c_int = 226;
pub const SDL_SCANCODE_LGUI: c_int = 227;
pub const SDL_SCANCODE_RCTRL: c_int = 228;
pub const SDL_SCANCODE_RSHIFT: c_int = 229;
pub const SDL_SCANCODE_RALT: c_int = 230;
pub const SDL_SCANCODE_RGUI: c_int = 231;
pub const SDL_SCANCODE_MODE: c_int = 257;
pub const SDL_SCANCODE_AUDIONEXT: c_int = 258;
pub const SDL_SCANCODE_AUDIOPREV: c_int = 259;
pub const SDL_SCANCODE_AUDIOSTOP: c_int = 260;
pub const SDL_SCANCODE_AUDIOPLAY: c_int = 261;
pub const SDL_SCANCODE_AUDIOMUTE: c_int = 262;
pub const SDL_SCANCODE_MEDIASELECT: c_int = 263;
pub const SDL_SCANCODE_WWW: c_int = 264;
pub const SDL_SCANCODE_MAIL: c_int = 265;
pub const SDL_SCANCODE_CALCULATOR: c_int = 266;
pub const SDL_SCANCODE_COMPUTER: c_int = 267;
pub const SDL_SCANCODE_AC_SEARCH: c_int = 268;
pub const SDL_SCANCODE_AC_HOME: c_int = 269;
pub const SDL_SCANCODE_AC_BACK: c_int = 270;
pub const SDL_SCANCODE_AC_FORWARD: c_int = 271;
pub const SDL_SCANCODE_AC_STOP: c_int = 272;
pub const SDL_SCANCODE_AC_REFRESH: c_int = 273;
pub const SDL_SCANCODE_AC_BOOKMARKS: c_int = 274;
pub const SDL_SCANCODE_BRIGHTNESSDOWN: c_int = 275;
pub const SDL_SCANCODE_BRIGHTNESSUP: c_int = 276;
pub const SDL_SCANCODE_DISPLAYSWITCH: c_int = 277;
pub const SDL_SCANCODE_KBDILLUMTOGGLE: c_int = 278;
pub const SDL_SCANCODE_KBDILLUMDOWN: c_int = 279;
pub const SDL_SCANCODE_KBDILLUMUP: c_int = 280;
pub const SDL_SCANCODE_EJECT: c_int = 281;
pub const SDL_SCANCODE_SLEEP: c_int = 282;
pub const SDL_SCANCODE_APP1: c_int = 283;
pub const SDL_SCANCODE_APP2: c_int = 284;
pub const SDL_SCANCODE_AUDIOREWIND: c_int = 285;
pub const SDL_SCANCODE_AUDIOFASTFORWARD: c_int = 286;
pub const SDL_SCANCODE_SOFTLEFT: c_int = 287;
pub const SDL_SCANCODE_SOFTRIGHT: c_int = 288;
pub const SDL_SCANCODE_CALL: c_int = 289;
pub const SDL_SCANCODE_ENDCALL: c_int = 290;
pub const SDL_NUM_SCANCODES: c_int = 512;
pub const SDL_Scancode = c_uint;
pub const SDL_Keycode = Sint32;
pub const SDLK_UNKNOWN: c_int = 0;
pub const SDLK_RETURN: c_int = 13;
pub const SDLK_ESCAPE: c_int = 27;
pub const SDLK_BACKSPACE: c_int = 8;
pub const SDLK_TAB: c_int = 9;
pub const SDLK_SPACE: c_int = 32;
pub const SDLK_EXCLAIM: c_int = 33;
pub const SDLK_QUOTEDBL: c_int = 34;
pub const SDLK_HASH: c_int = 35;
pub const SDLK_PERCENT: c_int = 37;
pub const SDLK_DOLLAR: c_int = 36;
pub const SDLK_AMPERSAND: c_int = 38;
pub const SDLK_QUOTE: c_int = 39;
pub const SDLK_LEFTPAREN: c_int = 40;
pub const SDLK_RIGHTPAREN: c_int = 41;
pub const SDLK_ASTERISK: c_int = 42;
pub const SDLK_PLUS: c_int = 43;
pub const SDLK_COMMA: c_int = 44;
pub const SDLK_MINUS: c_int = 45;
pub const SDLK_PERIOD: c_int = 46;
pub const SDLK_SLASH: c_int = 47;
pub const SDLK_0: c_int = 48;
pub const SDLK_1: c_int = 49;
pub const SDLK_2: c_int = 50;
pub const SDLK_3: c_int = 51;
pub const SDLK_4: c_int = 52;
pub const SDLK_5: c_int = 53;
pub const SDLK_6: c_int = 54;
pub const SDLK_7: c_int = 55;
pub const SDLK_8: c_int = 56;
pub const SDLK_9: c_int = 57;
pub const SDLK_COLON: c_int = 58;
pub const SDLK_SEMICOLON: c_int = 59;
pub const SDLK_LESS: c_int = 60;
pub const SDLK_EQUALS: c_int = 61;
pub const SDLK_GREATER: c_int = 62;
pub const SDLK_QUESTION: c_int = 63;
pub const SDLK_AT: c_int = 64;
pub const SDLK_LEFTBRACKET: c_int = 91;
pub const SDLK_BACKSLASH: c_int = 92;
pub const SDLK_RIGHTBRACKET: c_int = 93;
pub const SDLK_CARET: c_int = 94;
pub const SDLK_UNDERSCORE: c_int = 95;
pub const SDLK_BACKQUOTE: c_int = 96;
pub const SDLK_a: c_int = 97;
pub const SDLK_b: c_int = 98;
pub const SDLK_c: c_int = 99;
pub const SDLK_d: c_int = 100;
pub const SDLK_e: c_int = 101;
pub const SDLK_f: c_int = 102;
pub const SDLK_g: c_int = 103;
pub const SDLK_h: c_int = 104;
pub const SDLK_i: c_int = 105;
pub const SDLK_j: c_int = 106;
pub const SDLK_k: c_int = 107;
pub const SDLK_l: c_int = 108;
pub const SDLK_m: c_int = 109;
pub const SDLK_n: c_int = 110;
pub const SDLK_o: c_int = 111;
pub const SDLK_p: c_int = 112;
pub const SDLK_q: c_int = 113;
pub const SDLK_r: c_int = 114;
pub const SDLK_s: c_int = 115;
pub const SDLK_t: c_int = 116;
pub const SDLK_u: c_int = 117;
pub const SDLK_v: c_int = 118;
pub const SDLK_w: c_int = 119;
pub const SDLK_x: c_int = 120;
pub const SDLK_y: c_int = 121;
pub const SDLK_z: c_int = 122;
pub const SDLK_CAPSLOCK: c_int = 1073741881;
pub const SDLK_F1: c_int = 1073741882;
pub const SDLK_F2: c_int = 1073741883;
pub const SDLK_F3: c_int = 1073741884;
pub const SDLK_F4: c_int = 1073741885;
pub const SDLK_F5: c_int = 1073741886;
pub const SDLK_F6: c_int = 1073741887;
pub const SDLK_F7: c_int = 1073741888;
pub const SDLK_F8: c_int = 1073741889;
pub const SDLK_F9: c_int = 1073741890;
pub const SDLK_F10: c_int = 1073741891;
pub const SDLK_F11: c_int = 1073741892;
pub const SDLK_F12: c_int = 1073741893;
pub const SDLK_PRINTSCREEN: c_int = 1073741894;
pub const SDLK_SCROLLLOCK: c_int = 1073741895;
pub const SDLK_PAUSE: c_int = 1073741896;
pub const SDLK_INSERT: c_int = 1073741897;
pub const SDLK_HOME: c_int = 1073741898;
pub const SDLK_PAGEUP: c_int = 1073741899;
pub const SDLK_DELETE: c_int = 127;
pub const SDLK_END: c_int = 1073741901;
pub const SDLK_PAGEDOWN: c_int = 1073741902;
pub const SDLK_RIGHT: c_int = 1073741903;
pub const SDLK_LEFT: c_int = 1073741904;
pub const SDLK_DOWN: c_int = 1073741905;
pub const SDLK_UP: c_int = 1073741906;
pub const SDLK_NUMLOCKCLEAR: c_int = 1073741907;
pub const SDLK_KP_DIVIDE: c_int = 1073741908;
pub const SDLK_KP_MULTIPLY: c_int = 1073741909;
pub const SDLK_KP_MINUS: c_int = 1073741910;
pub const SDLK_KP_PLUS: c_int = 1073741911;
pub const SDLK_KP_ENTER: c_int = 1073741912;
pub const SDLK_KP_1: c_int = 1073741913;
pub const SDLK_KP_2: c_int = 1073741914;
pub const SDLK_KP_3: c_int = 1073741915;
pub const SDLK_KP_4: c_int = 1073741916;
pub const SDLK_KP_5: c_int = 1073741917;
pub const SDLK_KP_6: c_int = 1073741918;
pub const SDLK_KP_7: c_int = 1073741919;
pub const SDLK_KP_8: c_int = 1073741920;
pub const SDLK_KP_9: c_int = 1073741921;
pub const SDLK_KP_0: c_int = 1073741922;
pub const SDLK_KP_PERIOD: c_int = 1073741923;
pub const SDLK_APPLICATION: c_int = 1073741925;
pub const SDLK_POWER: c_int = 1073741926;
pub const SDLK_KP_EQUALS: c_int = 1073741927;
pub const SDLK_F13: c_int = 1073741928;
pub const SDLK_F14: c_int = 1073741929;
pub const SDLK_F15: c_int = 1073741930;
pub const SDLK_F16: c_int = 1073741931;
pub const SDLK_F17: c_int = 1073741932;
pub const SDLK_F18: c_int = 1073741933;
pub const SDLK_F19: c_int = 1073741934;
pub const SDLK_F20: c_int = 1073741935;
pub const SDLK_F21: c_int = 1073741936;
pub const SDLK_F22: c_int = 1073741937;
pub const SDLK_F23: c_int = 1073741938;
pub const SDLK_F24: c_int = 1073741939;
pub const SDLK_EXECUTE: c_int = 1073741940;
pub const SDLK_HELP: c_int = 1073741941;
pub const SDLK_MENU: c_int = 1073741942;
pub const SDLK_SELECT: c_int = 1073741943;
pub const SDLK_STOP: c_int = 1073741944;
pub const SDLK_AGAIN: c_int = 1073741945;
pub const SDLK_UNDO: c_int = 1073741946;
pub const SDLK_CUT: c_int = 1073741947;
pub const SDLK_COPY: c_int = 1073741948;
pub const SDLK_PASTE: c_int = 1073741949;
pub const SDLK_FIND: c_int = 1073741950;
pub const SDLK_MUTE: c_int = 1073741951;
pub const SDLK_VOLUMEUP: c_int = 1073741952;
pub const SDLK_VOLUMEDOWN: c_int = 1073741953;
pub const SDLK_KP_COMMA: c_int = 1073741957;
pub const SDLK_KP_EQUALSAS400: c_int = 1073741958;
pub const SDLK_ALTERASE: c_int = 1073741977;
pub const SDLK_SYSREQ: c_int = 1073741978;
pub const SDLK_CANCEL: c_int = 1073741979;
pub const SDLK_CLEAR: c_int = 1073741980;
pub const SDLK_PRIOR: c_int = 1073741981;
pub const SDLK_RETURN2: c_int = 1073741982;
pub const SDLK_SEPARATOR: c_int = 1073741983;
pub const SDLK_OUT: c_int = 1073741984;
pub const SDLK_OPER: c_int = 1073741985;
pub const SDLK_CLEARAGAIN: c_int = 1073741986;
pub const SDLK_CRSEL: c_int = 1073741987;
pub const SDLK_EXSEL: c_int = 1073741988;
pub const SDLK_KP_00: c_int = 1073742000;
pub const SDLK_KP_000: c_int = 1073742001;
pub const SDLK_THOUSANDSSEPARATOR: c_int = 1073742002;
pub const SDLK_DECIMALSEPARATOR: c_int = 1073742003;
pub const SDLK_CURRENCYUNIT: c_int = 1073742004;
pub const SDLK_CURRENCYSUBUNIT: c_int = 1073742005;
pub const SDLK_KP_LEFTPAREN: c_int = 1073742006;
pub const SDLK_KP_RIGHTPAREN: c_int = 1073742007;
pub const SDLK_KP_LEFTBRACE: c_int = 1073742008;
pub const SDLK_KP_RIGHTBRACE: c_int = 1073742009;
pub const SDLK_KP_TAB: c_int = 1073742010;
pub const SDLK_KP_BACKSPACE: c_int = 1073742011;
pub const SDLK_KP_A: c_int = 1073742012;
pub const SDLK_KP_B: c_int = 1073742013;
pub const SDLK_KP_C: c_int = 1073742014;
pub const SDLK_KP_D: c_int = 1073742015;
pub const SDLK_KP_E: c_int = 1073742016;
pub const SDLK_KP_F: c_int = 1073742017;
pub const SDLK_KP_XOR: c_int = 1073742018;
pub const SDLK_KP_POWER: c_int = 1073742019;
pub const SDLK_KP_PERCENT: c_int = 1073742020;
pub const SDLK_KP_LESS: c_int = 1073742021;
pub const SDLK_KP_GREATER: c_int = 1073742022;
pub const SDLK_KP_AMPERSAND: c_int = 1073742023;
pub const SDLK_KP_DBLAMPERSAND: c_int = 1073742024;
pub const SDLK_KP_VERTICALBAR: c_int = 1073742025;
pub const SDLK_KP_DBLVERTICALBAR: c_int = 1073742026;
pub const SDLK_KP_COLON: c_int = 1073742027;
pub const SDLK_KP_HASH: c_int = 1073742028;
pub const SDLK_KP_SPACE: c_int = 1073742029;
pub const SDLK_KP_AT: c_int = 1073742030;
pub const SDLK_KP_EXCLAM: c_int = 1073742031;
pub const SDLK_KP_MEMSTORE: c_int = 1073742032;
pub const SDLK_KP_MEMRECALL: c_int = 1073742033;
pub const SDLK_KP_MEMCLEAR: c_int = 1073742034;
pub const SDLK_KP_MEMADD: c_int = 1073742035;
pub const SDLK_KP_MEMSUBTRACT: c_int = 1073742036;
pub const SDLK_KP_MEMMULTIPLY: c_int = 1073742037;
pub const SDLK_KP_MEMDIVIDE: c_int = 1073742038;
pub const SDLK_KP_PLUSMINUS: c_int = 1073742039;
pub const SDLK_KP_CLEAR: c_int = 1073742040;
pub const SDLK_KP_CLEARENTRY: c_int = 1073742041;
pub const SDLK_KP_BINARY: c_int = 1073742042;
pub const SDLK_KP_OCTAL: c_int = 1073742043;
pub const SDLK_KP_DECIMAL: c_int = 1073742044;
pub const SDLK_KP_HEXADECIMAL: c_int = 1073742045;
pub const SDLK_LCTRL: c_int = 1073742048;
pub const SDLK_LSHIFT: c_int = 1073742049;
pub const SDLK_LALT: c_int = 1073742050;
pub const SDLK_LGUI: c_int = 1073742051;
pub const SDLK_RCTRL: c_int = 1073742052;
pub const SDLK_RSHIFT: c_int = 1073742053;
pub const SDLK_RALT: c_int = 1073742054;
pub const SDLK_RGUI: c_int = 1073742055;
pub const SDLK_MODE: c_int = 1073742081;
pub const SDLK_AUDIONEXT: c_int = 1073742082;
pub const SDLK_AUDIOPREV: c_int = 1073742083;
pub const SDLK_AUDIOSTOP: c_int = 1073742084;
pub const SDLK_AUDIOPLAY: c_int = 1073742085;
pub const SDLK_AUDIOMUTE: c_int = 1073742086;
pub const SDLK_MEDIASELECT: c_int = 1073742087;
pub const SDLK_WWW: c_int = 1073742088;
pub const SDLK_MAIL: c_int = 1073742089;
pub const SDLK_CALCULATOR: c_int = 1073742090;
pub const SDLK_COMPUTER: c_int = 1073742091;
pub const SDLK_AC_SEARCH: c_int = 1073742092;
pub const SDLK_AC_HOME: c_int = 1073742093;
pub const SDLK_AC_BACK: c_int = 1073742094;
pub const SDLK_AC_FORWARD: c_int = 1073742095;
pub const SDLK_AC_STOP: c_int = 1073742096;
pub const SDLK_AC_REFRESH: c_int = 1073742097;
pub const SDLK_AC_BOOKMARKS: c_int = 1073742098;
pub const SDLK_BRIGHTNESSDOWN: c_int = 1073742099;
pub const SDLK_BRIGHTNESSUP: c_int = 1073742100;
pub const SDLK_DISPLAYSWITCH: c_int = 1073742101;
pub const SDLK_KBDILLUMTOGGLE: c_int = 1073742102;
pub const SDLK_KBDILLUMDOWN: c_int = 1073742103;
pub const SDLK_KBDILLUMUP: c_int = 1073742104;
pub const SDLK_EJECT: c_int = 1073742105;
pub const SDLK_SLEEP: c_int = 1073742106;
pub const SDLK_APP1: c_int = 1073742107;
pub const SDLK_APP2: c_int = 1073742108;
pub const SDLK_AUDIOREWIND: c_int = 1073742109;
pub const SDLK_AUDIOFASTFORWARD: c_int = 1073742110;
pub const SDLK_SOFTLEFT: c_int = 1073742111;
pub const SDLK_SOFTRIGHT: c_int = 1073742112;
pub const SDLK_CALL: c_int = 1073742113;
pub const SDLK_ENDCALL: c_int = 1073742114;
pub const SDL_KeyCode = c_uint;
pub const KMOD_NONE: c_int = 0;
pub const KMOD_LSHIFT: c_int = 1;
pub const KMOD_RSHIFT: c_int = 2;
pub const KMOD_LCTRL: c_int = 64;
pub const KMOD_RCTRL: c_int = 128;
pub const KMOD_LALT: c_int = 256;
pub const KMOD_RALT: c_int = 512;
pub const KMOD_LGUI: c_int = 1024;
pub const KMOD_RGUI: c_int = 2048;
pub const KMOD_NUM: c_int = 4096;
pub const KMOD_CAPS: c_int = 8192;
pub const KMOD_MODE: c_int = 16384;
pub const KMOD_SCROLL: c_int = 32768;
pub const KMOD_CTRL: c_int = 192;
pub const KMOD_SHIFT: c_int = 3;
pub const KMOD_ALT: c_int = 768;
pub const KMOD_GUI: c_int = 3072;
pub const KMOD_RESERVED: c_int = 32768;
pub const SDL_Keymod = c_uint;
pub const struct_SDL_Keysym = extern struct {
    scancode: SDL_Scancode = @import("std").mem.zeroes(SDL_Scancode),
    sym: SDL_Keycode = @import("std").mem.zeroes(SDL_Keycode),
    mod: Uint16 = @import("std").mem.zeroes(Uint16),
    unused: Uint32 = @import("std").mem.zeroes(Uint32),
};
pub const SDL_Keysym = struct_SDL_Keysym;
pub extern fn SDL_GetKeyboardFocus() ?*SDL_Window;
pub extern fn SDL_GetKeyboardState(numkeys: [*c]c_int) [*c]const Uint8;
pub extern fn SDL_ResetKeyboard() void;
pub extern fn SDL_GetModState() SDL_Keymod;
pub extern fn SDL_SetModState(modstate: SDL_Keymod) void;
pub extern fn SDL_GetKeyFromScancode(scancode: SDL_Scancode) SDL_Keycode;
pub extern fn SDL_GetScancodeFromKey(key: SDL_Keycode) SDL_Scancode;
pub extern fn SDL_GetScancodeName(scancode: SDL_Scancode) [*c]const u8;
pub extern fn SDL_GetScancodeFromName(name: [*c]const u8) SDL_Scancode;
pub extern fn SDL_GetKeyName(key: SDL_Keycode) [*c]const u8;
pub extern fn SDL_GetKeyFromName(name: [*c]const u8) SDL_Keycode;
pub extern fn SDL_StartTextInput() void;
pub extern fn SDL_IsTextInputActive() SDL_bool;
pub extern fn SDL_StopTextInput() void;
pub extern fn SDL_ClearComposition() void;
pub extern fn SDL_IsTextInputShown() SDL_bool;
pub extern fn SDL_SetTextInputRect(rect: [*c]const SDL_Rect) void;
pub extern fn SDL_HasScreenKeyboardSupport() SDL_bool;
pub extern fn SDL_IsScreenKeyboardShown(window: ?*SDL_Window) SDL_bool;
pub const struct_SDL_Cursor = opaque {};
pub const SDL_Cursor = struct_SDL_Cursor;
pub const SDL_SYSTEM_CURSOR_ARROW: c_int = 0;
pub const SDL_SYSTEM_CURSOR_IBEAM: c_int = 1;
pub const SDL_SYSTEM_CURSOR_WAIT: c_int = 2;
pub const SDL_SYSTEM_CURSOR_CROSSHAIR: c_int = 3;
pub const SDL_SYSTEM_CURSOR_WAITARROW: c_int = 4;
pub const SDL_SYSTEM_CURSOR_SIZENWSE: c_int = 5;
pub const SDL_SYSTEM_CURSOR_SIZENESW: c_int = 6;
pub const SDL_SYSTEM_CURSOR_SIZEWE: c_int = 7;
pub const SDL_SYSTEM_CURSOR_SIZENS: c_int = 8;
pub const SDL_SYSTEM_CURSOR_SIZEALL: c_int = 9;
pub const SDL_SYSTEM_CURSOR_NO: c_int = 10;
pub const SDL_SYSTEM_CURSOR_HAND: c_int = 11;
pub const SDL_NUM_SYSTEM_CURSORS: c_int = 12;
pub const SDL_SystemCursor = c_uint;
pub const SDL_MOUSEWHEEL_NORMAL: c_int = 0;
pub const SDL_MOUSEWHEEL_FLIPPED: c_int = 1;
pub const SDL_MouseWheelDirection = c_uint;
pub extern fn SDL_GetMouseFocus() ?*SDL_Window;
pub extern fn SDL_GetMouseState(x: [*c]c_int, y: [*c]c_int) Uint32;
pub extern fn SDL_GetGlobalMouseState(x: [*c]c_int, y: [*c]c_int) Uint32;
pub extern fn SDL_GetRelativeMouseState(x: [*c]c_int, y: [*c]c_int) Uint32;
pub extern fn SDL_WarpMouseInWindow(window: ?*SDL_Window, x: c_int, y: c_int) void;
pub extern fn SDL_WarpMouseGlobal(x: c_int, y: c_int) c_int;
pub extern fn SDL_SetRelativeMouseMode(enabled: SDL_bool) c_int;
pub extern fn SDL_CaptureMouse(enabled: SDL_bool) c_int;
pub extern fn SDL_GetRelativeMouseMode() SDL_bool;
pub extern fn SDL_CreateCursor(data: [*c]const Uint8, mask: [*c]const Uint8, w: c_int, h: c_int, hot_x: c_int, hot_y: c_int) ?*SDL_Cursor;
pub extern fn SDL_CreateColorCursor(surface: [*c]SDL_Surface, hot_x: c_int, hot_y: c_int) ?*SDL_Cursor;
pub extern fn SDL_CreateSystemCursor(id: SDL_SystemCursor) ?*SDL_Cursor;
pub extern fn SDL_SetCursor(cursor: ?*SDL_Cursor) void;
pub extern fn SDL_GetCursor() ?*SDL_Cursor;
pub extern fn SDL_GetDefaultCursor() ?*SDL_Cursor;
pub extern fn SDL_FreeCursor(cursor: ?*SDL_Cursor) void;
pub extern fn SDL_ShowCursor(toggle: c_int) c_int;
pub const SDL_GUID = extern struct {
    data: [16]Uint8 = @import("std").mem.zeroes([16]Uint8),
};
pub extern fn SDL_GUIDToString(guid: SDL_GUID, pszGUID: [*c]u8, cbGUID: c_int) void;
pub extern fn SDL_GUIDFromString(pchGUID: [*c]const u8) SDL_GUID;
pub const struct__SDL_Joystick = opaque {};
pub const SDL_Joystick = struct__SDL_Joystick;
pub const SDL_JoystickGUID = SDL_GUID;
pub const SDL_JoystickID = Sint32;
pub const SDL_JOYSTICK_TYPE_UNKNOWN: c_int = 0;
pub const SDL_JOYSTICK_TYPE_GAMECONTROLLER: c_int = 1;
pub const SDL_JOYSTICK_TYPE_WHEEL: c_int = 2;
pub const SDL_JOYSTICK_TYPE_ARCADE_STICK: c_int = 3;
pub const SDL_JOYSTICK_TYPE_FLIGHT_STICK: c_int = 4;
pub const SDL_JOYSTICK_TYPE_DANCE_PAD: c_int = 5;
pub const SDL_JOYSTICK_TYPE_GUITAR: c_int = 6;
pub const SDL_JOYSTICK_TYPE_DRUM_KIT: c_int = 7;
pub const SDL_JOYSTICK_TYPE_ARCADE_PAD: c_int = 8;
pub const SDL_JOYSTICK_TYPE_THROTTLE: c_int = 9;
pub const SDL_JoystickType = c_uint;
pub const SDL_JOYSTICK_POWER_UNKNOWN: c_int = -1;
pub const SDL_JOYSTICK_POWER_EMPTY: c_int = 0;
pub const SDL_JOYSTICK_POWER_LOW: c_int = 1;
pub const SDL_JOYSTICK_POWER_MEDIUM: c_int = 2;
pub const SDL_JOYSTICK_POWER_FULL: c_int = 3;
pub const SDL_JOYSTICK_POWER_WIRED: c_int = 4;
pub const SDL_JOYSTICK_POWER_MAX: c_int = 5;
pub const SDL_JoystickPowerLevel = c_int;
pub extern fn SDL_LockJoysticks() void;
pub extern fn SDL_UnlockJoysticks() void;
pub extern fn SDL_NumJoysticks() c_int;
pub extern fn SDL_JoystickNameForIndex(device_index: c_int) [*c]const u8;
pub extern fn SDL_JoystickPathForIndex(device_index: c_int) [*c]const u8;
pub extern fn SDL_JoystickGetDevicePlayerIndex(device_index: c_int) c_int;
pub extern fn SDL_JoystickGetDeviceGUID(device_index: c_int) SDL_JoystickGUID;
pub extern fn SDL_JoystickGetDeviceVendor(device_index: c_int) Uint16;
pub extern fn SDL_JoystickGetDeviceProduct(device_index: c_int) Uint16;
pub extern fn SDL_JoystickGetDeviceProductVersion(device_index: c_int) Uint16;
pub extern fn SDL_JoystickGetDeviceType(device_index: c_int) SDL_JoystickType;
pub extern fn SDL_JoystickGetDeviceInstanceID(device_index: c_int) SDL_JoystickID;
pub extern fn SDL_JoystickOpen(device_index: c_int) ?*SDL_Joystick;
pub extern fn SDL_JoystickFromInstanceID(instance_id: SDL_JoystickID) ?*SDL_Joystick;
pub extern fn SDL_JoystickFromPlayerIndex(player_index: c_int) ?*SDL_Joystick;
pub extern fn SDL_JoystickAttachVirtual(@"type": SDL_JoystickType, naxes: c_int, nbuttons: c_int, nhats: c_int) c_int;
pub const struct_SDL_VirtualJoystickDesc = extern struct {
    version: Uint16 = @import("std").mem.zeroes(Uint16),
    type: Uint16 = @import("std").mem.zeroes(Uint16),
    naxes: Uint16 = @import("std").mem.zeroes(Uint16),
    nbuttons: Uint16 = @import("std").mem.zeroes(Uint16),
    nhats: Uint16 = @import("std").mem.zeroes(Uint16),
    vendor_id: Uint16 = @import("std").mem.zeroes(Uint16),
    product_id: Uint16 = @import("std").mem.zeroes(Uint16),
    padding: Uint16 = @import("std").mem.zeroes(Uint16),
    button_mask: Uint32 = @import("std").mem.zeroes(Uint32),
    axis_mask: Uint32 = @import("std").mem.zeroes(Uint32),
    name: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    userdata: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    Update: ?*const fn (?*anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) void),
    SetPlayerIndex: ?*const fn (?*anyopaque, c_int) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*anyopaque, c_int) callconv(.C) void),
    Rumble: ?*const fn (?*anyopaque, Uint16, Uint16) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, Uint16, Uint16) callconv(.C) c_int),
    RumbleTriggers: ?*const fn (?*anyopaque, Uint16, Uint16) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, Uint16, Uint16) callconv(.C) c_int),
    SetLED: ?*const fn (?*anyopaque, Uint8, Uint8, Uint8) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, Uint8, Uint8, Uint8) callconv(.C) c_int),
    SendEffect: ?*const fn (?*anyopaque, ?*const anyopaque, c_int) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, ?*const anyopaque, c_int) callconv(.C) c_int),
};
pub const SDL_VirtualJoystickDesc = struct_SDL_VirtualJoystickDesc;
pub extern fn SDL_JoystickAttachVirtualEx(desc: [*c]const SDL_VirtualJoystickDesc) c_int;
pub extern fn SDL_JoystickDetachVirtual(device_index: c_int) c_int;
pub extern fn SDL_JoystickIsVirtual(device_index: c_int) SDL_bool;
pub extern fn SDL_JoystickSetVirtualAxis(joystick: ?*SDL_Joystick, axis: c_int, value: Sint16) c_int;
pub extern fn SDL_JoystickSetVirtualButton(joystick: ?*SDL_Joystick, button: c_int, value: Uint8) c_int;
pub extern fn SDL_JoystickSetVirtualHat(joystick: ?*SDL_Joystick, hat: c_int, value: Uint8) c_int;
pub extern fn SDL_JoystickName(joystick: ?*SDL_Joystick) [*c]const u8;
pub extern fn SDL_JoystickPath(joystick: ?*SDL_Joystick) [*c]const u8;
pub extern fn SDL_JoystickGetPlayerIndex(joystick: ?*SDL_Joystick) c_int;
pub extern fn SDL_JoystickSetPlayerIndex(joystick: ?*SDL_Joystick, player_index: c_int) void;
pub extern fn SDL_JoystickGetGUID(joystick: ?*SDL_Joystick) SDL_JoystickGUID;
pub extern fn SDL_JoystickGetVendor(joystick: ?*SDL_Joystick) Uint16;
pub extern fn SDL_JoystickGetProduct(joystick: ?*SDL_Joystick) Uint16;
pub extern fn SDL_JoystickGetProductVersion(joystick: ?*SDL_Joystick) Uint16;
pub extern fn SDL_JoystickGetFirmwareVersion(joystick: ?*SDL_Joystick) Uint16;
pub extern fn SDL_JoystickGetSerial(joystick: ?*SDL_Joystick) [*c]const u8;
pub extern fn SDL_JoystickGetType(joystick: ?*SDL_Joystick) SDL_JoystickType;
pub extern fn SDL_JoystickGetGUIDString(guid: SDL_JoystickGUID, pszGUID: [*c]u8, cbGUID: c_int) void;
pub extern fn SDL_JoystickGetGUIDFromString(pchGUID: [*c]const u8) SDL_JoystickGUID;
pub extern fn SDL_GetJoystickGUIDInfo(guid: SDL_JoystickGUID, vendor: [*c]Uint16, product: [*c]Uint16, version: [*c]Uint16, crc16: [*c]Uint16) void;
pub extern fn SDL_JoystickGetAttached(joystick: ?*SDL_Joystick) SDL_bool;
pub extern fn SDL_JoystickInstanceID(joystick: ?*SDL_Joystick) SDL_JoystickID;
pub extern fn SDL_JoystickNumAxes(joystick: ?*SDL_Joystick) c_int;
pub extern fn SDL_JoystickNumBalls(joystick: ?*SDL_Joystick) c_int;
pub extern fn SDL_JoystickNumHats(joystick: ?*SDL_Joystick) c_int;
pub extern fn SDL_JoystickNumButtons(joystick: ?*SDL_Joystick) c_int;
pub extern fn SDL_JoystickUpdate() void;
pub extern fn SDL_JoystickEventState(state: c_int) c_int;
pub extern fn SDL_JoystickGetAxis(joystick: ?*SDL_Joystick, axis: c_int) Sint16;
pub extern fn SDL_JoystickGetAxisInitialState(joystick: ?*SDL_Joystick, axis: c_int, state: [*c]Sint16) SDL_bool;
pub extern fn SDL_JoystickGetHat(joystick: ?*SDL_Joystick, hat: c_int) Uint8;
pub extern fn SDL_JoystickGetBall(joystick: ?*SDL_Joystick, ball: c_int, dx: [*c]c_int, dy: [*c]c_int) c_int;
pub extern fn SDL_JoystickGetButton(joystick: ?*SDL_Joystick, button: c_int) Uint8;
pub extern fn SDL_JoystickRumble(joystick: ?*SDL_Joystick, low_frequency_rumble: Uint16, high_frequency_rumble: Uint16, duration_ms: Uint32) c_int;
pub extern fn SDL_JoystickRumbleTriggers(joystick: ?*SDL_Joystick, left_rumble: Uint16, right_rumble: Uint16, duration_ms: Uint32) c_int;
pub extern fn SDL_JoystickHasLED(joystick: ?*SDL_Joystick) SDL_bool;
pub extern fn SDL_JoystickHasRumble(joystick: ?*SDL_Joystick) SDL_bool;
pub extern fn SDL_JoystickHasRumbleTriggers(joystick: ?*SDL_Joystick) SDL_bool;
pub extern fn SDL_JoystickSetLED(joystick: ?*SDL_Joystick, red: Uint8, green: Uint8, blue: Uint8) c_int;
pub extern fn SDL_JoystickSendEffect(joystick: ?*SDL_Joystick, data: ?*const anyopaque, size: c_int) c_int;
pub extern fn SDL_JoystickClose(joystick: ?*SDL_Joystick) void;
pub extern fn SDL_JoystickCurrentPowerLevel(joystick: ?*SDL_Joystick) SDL_JoystickPowerLevel;
pub const struct__SDL_Sensor = opaque {};
pub const SDL_Sensor = struct__SDL_Sensor;
pub const SDL_SensorID = Sint32;
pub const SDL_SENSOR_INVALID: c_int = -1;
pub const SDL_SENSOR_UNKNOWN: c_int = 0;
pub const SDL_SENSOR_ACCEL: c_int = 1;
pub const SDL_SENSOR_GYRO: c_int = 2;
pub const SDL_SENSOR_ACCEL_L: c_int = 3;
pub const SDL_SENSOR_GYRO_L: c_int = 4;
pub const SDL_SENSOR_ACCEL_R: c_int = 5;
pub const SDL_SENSOR_GYRO_R: c_int = 6;
pub const SDL_SensorType = c_int;
pub extern fn SDL_LockSensors() void;
pub extern fn SDL_UnlockSensors() void;
pub extern fn SDL_NumSensors() c_int;
pub extern fn SDL_SensorGetDeviceName(device_index: c_int) [*c]const u8;
pub extern fn SDL_SensorGetDeviceType(device_index: c_int) SDL_SensorType;
pub extern fn SDL_SensorGetDeviceNonPortableType(device_index: c_int) c_int;
pub extern fn SDL_SensorGetDeviceInstanceID(device_index: c_int) SDL_SensorID;
pub extern fn SDL_SensorOpen(device_index: c_int) ?*SDL_Sensor;
pub extern fn SDL_SensorFromInstanceID(instance_id: SDL_SensorID) ?*SDL_Sensor;
pub extern fn SDL_SensorGetName(sensor: ?*SDL_Sensor) [*c]const u8;
pub extern fn SDL_SensorGetType(sensor: ?*SDL_Sensor) SDL_SensorType;
pub extern fn SDL_SensorGetNonPortableType(sensor: ?*SDL_Sensor) c_int;
pub extern fn SDL_SensorGetInstanceID(sensor: ?*SDL_Sensor) SDL_SensorID;
pub extern fn SDL_SensorGetData(sensor: ?*SDL_Sensor, data: [*c]f32, num_values: c_int) c_int;
pub extern fn SDL_SensorGetDataWithTimestamp(sensor: ?*SDL_Sensor, timestamp: [*c]Uint64, data: [*c]f32, num_values: c_int) c_int;
pub extern fn SDL_SensorClose(sensor: ?*SDL_Sensor) void;
pub extern fn SDL_SensorUpdate() void;
pub const struct__SDL_GameController = opaque {};
pub const SDL_GameController = struct__SDL_GameController;
pub const SDL_CONTROLLER_TYPE_UNKNOWN: c_int = 0;
pub const SDL_CONTROLLER_TYPE_XBOX360: c_int = 1;
pub const SDL_CONTROLLER_TYPE_XBOXONE: c_int = 2;
pub const SDL_CONTROLLER_TYPE_PS3: c_int = 3;
pub const SDL_CONTROLLER_TYPE_PS4: c_int = 4;
pub const SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO: c_int = 5;
pub const SDL_CONTROLLER_TYPE_VIRTUAL: c_int = 6;
pub const SDL_CONTROLLER_TYPE_PS5: c_int = 7;
pub const SDL_CONTROLLER_TYPE_AMAZON_LUNA: c_int = 8;
pub const SDL_CONTROLLER_TYPE_GOOGLE_STADIA: c_int = 9;
pub const SDL_CONTROLLER_TYPE_NVIDIA_SHIELD: c_int = 10;
pub const SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT: c_int = 11;
pub const SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT: c_int = 12;
pub const SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR: c_int = 13;
pub const SDL_CONTROLLER_TYPE_MAX: c_int = 14;
pub const SDL_GameControllerType = c_uint;
pub const SDL_CONTROLLER_BINDTYPE_NONE: c_int = 0;
pub const SDL_CONTROLLER_BINDTYPE_BUTTON: c_int = 1;
pub const SDL_CONTROLLER_BINDTYPE_AXIS: c_int = 2;
pub const SDL_CONTROLLER_BINDTYPE_HAT: c_int = 3;
pub const SDL_GameControllerBindType = c_uint;
const struct_unnamed_13 = extern struct {
    hat: c_int = @import("std").mem.zeroes(c_int),
    hat_mask: c_int = @import("std").mem.zeroes(c_int),
};
const union_unnamed_12 = extern union {
    button: c_int,
    axis: c_int,
    hat: struct_unnamed_13,
};
pub const struct_SDL_GameControllerButtonBind = extern struct {
    bindType: SDL_GameControllerBindType = @import("std").mem.zeroes(SDL_GameControllerBindType),
    value: union_unnamed_12 = @import("std").mem.zeroes(union_unnamed_12),
};
pub const SDL_GameControllerButtonBind = struct_SDL_GameControllerButtonBind;
pub extern fn SDL_GameControllerAddMappingsFromRW(rw: [*c]SDL_RWops, freerw: c_int) c_int;
pub extern fn SDL_GameControllerAddMapping(mappingString: [*c]const u8) c_int;
pub extern fn SDL_GameControllerNumMappings() c_int;
pub extern fn SDL_GameControllerMappingForIndex(mapping_index: c_int) [*c]u8;
pub extern fn SDL_GameControllerMappingForGUID(guid: SDL_JoystickGUID) [*c]u8;
pub extern fn SDL_GameControllerMapping(gamecontroller: ?*SDL_GameController) [*c]u8;
pub extern fn SDL_IsGameController(joystick_index: c_int) SDL_bool;
pub extern fn SDL_GameControllerNameForIndex(joystick_index: c_int) [*c]const u8;
pub extern fn SDL_GameControllerPathForIndex(joystick_index: c_int) [*c]const u8;
pub extern fn SDL_GameControllerTypeForIndex(joystick_index: c_int) SDL_GameControllerType;
pub extern fn SDL_GameControllerMappingForDeviceIndex(joystick_index: c_int) [*c]u8;
pub extern fn SDL_GameControllerOpen(joystick_index: c_int) ?*SDL_GameController;
pub extern fn SDL_GameControllerFromInstanceID(joyid: SDL_JoystickID) ?*SDL_GameController;
pub extern fn SDL_GameControllerFromPlayerIndex(player_index: c_int) ?*SDL_GameController;
pub extern fn SDL_GameControllerName(gamecontroller: ?*SDL_GameController) [*c]const u8;
pub extern fn SDL_GameControllerPath(gamecontroller: ?*SDL_GameController) [*c]const u8;
pub extern fn SDL_GameControllerGetType(gamecontroller: ?*SDL_GameController) SDL_GameControllerType;
pub extern fn SDL_GameControllerGetPlayerIndex(gamecontroller: ?*SDL_GameController) c_int;
pub extern fn SDL_GameControllerSetPlayerIndex(gamecontroller: ?*SDL_GameController, player_index: c_int) void;
pub extern fn SDL_GameControllerGetVendor(gamecontroller: ?*SDL_GameController) Uint16;
pub extern fn SDL_GameControllerGetProduct(gamecontroller: ?*SDL_GameController) Uint16;
pub extern fn SDL_GameControllerGetProductVersion(gamecontroller: ?*SDL_GameController) Uint16;
pub extern fn SDL_GameControllerGetFirmwareVersion(gamecontroller: ?*SDL_GameController) Uint16;
pub extern fn SDL_GameControllerGetSerial(gamecontroller: ?*SDL_GameController) [*c]const u8;
pub extern fn SDL_GameControllerGetSteamHandle(gamecontroller: ?*SDL_GameController) Uint64;
pub extern fn SDL_GameControllerGetAttached(gamecontroller: ?*SDL_GameController) SDL_bool;
pub extern fn SDL_GameControllerGetJoystick(gamecontroller: ?*SDL_GameController) ?*SDL_Joystick;
pub extern fn SDL_GameControllerEventState(state: c_int) c_int;
pub extern fn SDL_GameControllerUpdate() void;
pub const SDL_CONTROLLER_AXIS_INVALID: c_int = -1;
pub const SDL_CONTROLLER_AXIS_LEFTX: c_int = 0;
pub const SDL_CONTROLLER_AXIS_LEFTY: c_int = 1;
pub const SDL_CONTROLLER_AXIS_RIGHTX: c_int = 2;
pub const SDL_CONTROLLER_AXIS_RIGHTY: c_int = 3;
pub const SDL_CONTROLLER_AXIS_TRIGGERLEFT: c_int = 4;
pub const SDL_CONTROLLER_AXIS_TRIGGERRIGHT: c_int = 5;
pub const SDL_CONTROLLER_AXIS_MAX: c_int = 6;
pub const SDL_GameControllerAxis = c_int;
pub extern fn SDL_GameControllerGetAxisFromString(str: [*c]const u8) SDL_GameControllerAxis;
pub extern fn SDL_GameControllerGetStringForAxis(axis: SDL_GameControllerAxis) [*c]const u8;
pub extern fn SDL_GameControllerGetBindForAxis(gamecontroller: ?*SDL_GameController, axis: SDL_GameControllerAxis) SDL_GameControllerButtonBind;
pub extern fn SDL_GameControllerHasAxis(gamecontroller: ?*SDL_GameController, axis: SDL_GameControllerAxis) SDL_bool;
pub extern fn SDL_GameControllerGetAxis(gamecontroller: ?*SDL_GameController, axis: SDL_GameControllerAxis) Sint16;
pub const SDL_CONTROLLER_BUTTON_INVALID: c_int = -1;
pub const SDL_CONTROLLER_BUTTON_A: c_int = 0;
pub const SDL_CONTROLLER_BUTTON_B: c_int = 1;
pub const SDL_CONTROLLER_BUTTON_X: c_int = 2;
pub const SDL_CONTROLLER_BUTTON_Y: c_int = 3;
pub const SDL_CONTROLLER_BUTTON_BACK: c_int = 4;
pub const SDL_CONTROLLER_BUTTON_GUIDE: c_int = 5;
pub const SDL_CONTROLLER_BUTTON_START: c_int = 6;
pub const SDL_CONTROLLER_BUTTON_LEFTSTICK: c_int = 7;
pub const SDL_CONTROLLER_BUTTON_RIGHTSTICK: c_int = 8;
pub const SDL_CONTROLLER_BUTTON_LEFTSHOULDER: c_int = 9;
pub const SDL_CONTROLLER_BUTTON_RIGHTSHOULDER: c_int = 10;
pub const SDL_CONTROLLER_BUTTON_DPAD_UP: c_int = 11;
pub const SDL_CONTROLLER_BUTTON_DPAD_DOWN: c_int = 12;
pub const SDL_CONTROLLER_BUTTON_DPAD_LEFT: c_int = 13;
pub const SDL_CONTROLLER_BUTTON_DPAD_RIGHT: c_int = 14;
pub const SDL_CONTROLLER_BUTTON_MISC1: c_int = 15;
pub const SDL_CONTROLLER_BUTTON_PADDLE1: c_int = 16;
pub const SDL_CONTROLLER_BUTTON_PADDLE2: c_int = 17;
pub const SDL_CONTROLLER_BUTTON_PADDLE3: c_int = 18;
pub const SDL_CONTROLLER_BUTTON_PADDLE4: c_int = 19;
pub const SDL_CONTROLLER_BUTTON_TOUCHPAD: c_int = 20;
pub const SDL_CONTROLLER_BUTTON_MAX: c_int = 21;
pub const SDL_GameControllerButton = c_int;
pub extern fn SDL_GameControllerGetButtonFromString(str: [*c]const u8) SDL_GameControllerButton;
pub extern fn SDL_GameControllerGetStringForButton(button: SDL_GameControllerButton) [*c]const u8;
pub extern fn SDL_GameControllerGetBindForButton(gamecontroller: ?*SDL_GameController, button: SDL_GameControllerButton) SDL_GameControllerButtonBind;
pub extern fn SDL_GameControllerHasButton(gamecontroller: ?*SDL_GameController, button: SDL_GameControllerButton) SDL_bool;
pub extern fn SDL_GameControllerGetButton(gamecontroller: ?*SDL_GameController, button: SDL_GameControllerButton) Uint8;
pub extern fn SDL_GameControllerGetNumTouchpads(gamecontroller: ?*SDL_GameController) c_int;
pub extern fn SDL_GameControllerGetNumTouchpadFingers(gamecontroller: ?*SDL_GameController, touchpad: c_int) c_int;
pub extern fn SDL_GameControllerGetTouchpadFinger(gamecontroller: ?*SDL_GameController, touchpad: c_int, finger: c_int, state: [*c]Uint8, x: [*c]f32, y: [*c]f32, pressure: [*c]f32) c_int;
pub extern fn SDL_GameControllerHasSensor(gamecontroller: ?*SDL_GameController, @"type": SDL_SensorType) SDL_bool;
pub extern fn SDL_GameControllerSetSensorEnabled(gamecontroller: ?*SDL_GameController, @"type": SDL_SensorType, enabled: SDL_bool) c_int;
pub extern fn SDL_GameControllerIsSensorEnabled(gamecontroller: ?*SDL_GameController, @"type": SDL_SensorType) SDL_bool;
pub extern fn SDL_GameControllerGetSensorDataRate(gamecontroller: ?*SDL_GameController, @"type": SDL_SensorType) f32;
pub extern fn SDL_GameControllerGetSensorData(gamecontroller: ?*SDL_GameController, @"type": SDL_SensorType, data: [*c]f32, num_values: c_int) c_int;
pub extern fn SDL_GameControllerGetSensorDataWithTimestamp(gamecontroller: ?*SDL_GameController, @"type": SDL_SensorType, timestamp: [*c]Uint64, data: [*c]f32, num_values: c_int) c_int;
pub extern fn SDL_GameControllerRumble(gamecontroller: ?*SDL_GameController, low_frequency_rumble: Uint16, high_frequency_rumble: Uint16, duration_ms: Uint32) c_int;
pub extern fn SDL_GameControllerRumbleTriggers(gamecontroller: ?*SDL_GameController, left_rumble: Uint16, right_rumble: Uint16, duration_ms: Uint32) c_int;
pub extern fn SDL_GameControllerHasLED(gamecontroller: ?*SDL_GameController) SDL_bool;
pub extern fn SDL_GameControllerHasRumble(gamecontroller: ?*SDL_GameController) SDL_bool;
pub extern fn SDL_GameControllerHasRumbleTriggers(gamecontroller: ?*SDL_GameController) SDL_bool;
pub extern fn SDL_GameControllerSetLED(gamecontroller: ?*SDL_GameController, red: Uint8, green: Uint8, blue: Uint8) c_int;
pub extern fn SDL_GameControllerSendEffect(gamecontroller: ?*SDL_GameController, data: ?*const anyopaque, size: c_int) c_int;
pub extern fn SDL_GameControllerClose(gamecontroller: ?*SDL_GameController) void;
pub extern fn SDL_GameControllerGetAppleSFSymbolsNameForButton(gamecontroller: ?*SDL_GameController, button: SDL_GameControllerButton) [*c]const u8;
pub extern fn SDL_GameControllerGetAppleSFSymbolsNameForAxis(gamecontroller: ?*SDL_GameController, axis: SDL_GameControllerAxis) [*c]const u8;
pub const SDL_TouchID = Sint64;
pub const SDL_FingerID = Sint64;
pub const SDL_TOUCH_DEVICE_INVALID: c_int = -1;
pub const SDL_TOUCH_DEVICE_DIRECT: c_int = 0;
pub const SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE: c_int = 1;
pub const SDL_TOUCH_DEVICE_INDIRECT_RELATIVE: c_int = 2;
pub const SDL_TouchDeviceType = c_int;
pub const struct_SDL_Finger = extern struct {
    id: SDL_FingerID = @import("std").mem.zeroes(SDL_FingerID),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    pressure: f32 = @import("std").mem.zeroes(f32),
};
pub const SDL_Finger = struct_SDL_Finger;
pub extern fn SDL_GetNumTouchDevices() c_int;
pub extern fn SDL_GetTouchDevice(index: c_int) SDL_TouchID;
pub extern fn SDL_GetTouchName(index: c_int) [*c]const u8;
pub extern fn SDL_GetTouchDeviceType(touchID: SDL_TouchID) SDL_TouchDeviceType;
pub extern fn SDL_GetNumTouchFingers(touchID: SDL_TouchID) c_int;
pub extern fn SDL_GetTouchFinger(touchID: SDL_TouchID, index: c_int) [*c]SDL_Finger;
pub const SDL_GestureID = Sint64;
pub extern fn SDL_RecordGesture(touchId: SDL_TouchID) c_int;
pub extern fn SDL_SaveAllDollarTemplates(dst: [*c]SDL_RWops) c_int;
pub extern fn SDL_SaveDollarTemplate(gestureId: SDL_GestureID, dst: [*c]SDL_RWops) c_int;
pub extern fn SDL_LoadDollarTemplates(touchId: SDL_TouchID, src: [*c]SDL_RWops) c_int;
pub const SDL_FIRSTEVENT: c_int = 0;
pub const SDL_QUIT: c_int = 256;
pub const SDL_APP_TERMINATING: c_int = 257;
pub const SDL_APP_LOWMEMORY: c_int = 258;
pub const SDL_APP_WILLENTERBACKGROUND: c_int = 259;
pub const SDL_APP_DIDENTERBACKGROUND: c_int = 260;
pub const SDL_APP_WILLENTERFOREGROUND: c_int = 261;
pub const SDL_APP_DIDENTERFOREGROUND: c_int = 262;
pub const SDL_LOCALECHANGED: c_int = 263;
pub const SDL_DISPLAYEVENT: c_int = 336;
pub const SDL_WINDOWEVENT: c_int = 512;
pub const SDL_SYSWMEVENT: c_int = 513;
pub const SDL_KEYDOWN: c_int = 768;
pub const SDL_KEYUP: c_int = 769;
pub const SDL_TEXTEDITING: c_int = 770;
pub const SDL_TEXTINPUT: c_int = 771;
pub const SDL_KEYMAPCHANGED: c_int = 772;
pub const SDL_TEXTEDITING_EXT: c_int = 773;
pub const SDL_MOUSEMOTION: c_int = 1024;
pub const SDL_MOUSEBUTTONDOWN: c_int = 1025;
pub const SDL_MOUSEBUTTONUP: c_int = 1026;
pub const SDL_MOUSEWHEEL: c_int = 1027;
pub const SDL_JOYAXISMOTION: c_int = 1536;
pub const SDL_JOYBALLMOTION: c_int = 1537;
pub const SDL_JOYHATMOTION: c_int = 1538;
pub const SDL_JOYBUTTONDOWN: c_int = 1539;
pub const SDL_JOYBUTTONUP: c_int = 1540;
pub const SDL_JOYDEVICEADDED: c_int = 1541;
pub const SDL_JOYDEVICEREMOVED: c_int = 1542;
pub const SDL_JOYBATTERYUPDATED: c_int = 1543;
pub const SDL_CONTROLLERAXISMOTION: c_int = 1616;
pub const SDL_CONTROLLERBUTTONDOWN: c_int = 1617;
pub const SDL_CONTROLLERBUTTONUP: c_int = 1618;
pub const SDL_CONTROLLERDEVICEADDED: c_int = 1619;
pub const SDL_CONTROLLERDEVICEREMOVED: c_int = 1620;
pub const SDL_CONTROLLERDEVICEREMAPPED: c_int = 1621;
pub const SDL_CONTROLLERTOUCHPADDOWN: c_int = 1622;
pub const SDL_CONTROLLERTOUCHPADMOTION: c_int = 1623;
pub const SDL_CONTROLLERTOUCHPADUP: c_int = 1624;
pub const SDL_CONTROLLERSENSORUPDATE: c_int = 1625;
pub const SDL_CONTROLLERUPDATECOMPLETE_RESERVED_FOR_SDL3: c_int = 1626;
pub const SDL_CONTROLLERSTEAMHANDLEUPDATED: c_int = 1627;
pub const SDL_FINGERDOWN: c_int = 1792;
pub const SDL_FINGERUP: c_int = 1793;
pub const SDL_FINGERMOTION: c_int = 1794;
pub const SDL_DOLLARGESTURE: c_int = 2048;
pub const SDL_DOLLARRECORD: c_int = 2049;
pub const SDL_MULTIGESTURE: c_int = 2050;
pub const SDL_CLIPBOARDUPDATE: c_int = 2304;
pub const SDL_DROPFILE: c_int = 4096;
pub const SDL_DROPTEXT: c_int = 4097;
pub const SDL_DROPBEGIN: c_int = 4098;
pub const SDL_DROPCOMPLETE: c_int = 4099;
pub const SDL_AUDIODEVICEADDED: c_int = 4352;
pub const SDL_AUDIODEVICEREMOVED: c_int = 4353;
pub const SDL_SENSORUPDATE: c_int = 4608;
pub const SDL_RENDER_TARGETS_RESET: c_int = 8192;
pub const SDL_RENDER_DEVICE_RESET: c_int = 8193;
pub const SDL_POLLSENTINEL: c_int = 32512;
pub const SDL_USEREVENT: c_int = 32768;
pub const SDL_LASTEVENT: c_int = 65535;
pub const SDL_EventType = c_uint;
pub const struct_SDL_CommonEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
};
pub const SDL_CommonEvent = struct_SDL_CommonEvent;
pub const struct_SDL_DisplayEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    display: Uint32 = @import("std").mem.zeroes(Uint32),
    event: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
    padding3: Uint8 = @import("std").mem.zeroes(Uint8),
    data1: Sint32 = @import("std").mem.zeroes(Sint32),
};
pub const SDL_DisplayEvent = struct_SDL_DisplayEvent;
pub const struct_SDL_WindowEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    windowID: Uint32 = @import("std").mem.zeroes(Uint32),
    event: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
    padding3: Uint8 = @import("std").mem.zeroes(Uint8),
    data1: Sint32 = @import("std").mem.zeroes(Sint32),
    data2: Sint32 = @import("std").mem.zeroes(Sint32),
};
pub const SDL_WindowEvent = struct_SDL_WindowEvent;
pub const struct_SDL_KeyboardEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    windowID: Uint32 = @import("std").mem.zeroes(Uint32),
    state: Uint8 = @import("std").mem.zeroes(Uint8),
    repeat: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
    padding3: Uint8 = @import("std").mem.zeroes(Uint8),
    keysym: SDL_Keysym = @import("std").mem.zeroes(SDL_Keysym),
};
pub const SDL_KeyboardEvent = struct_SDL_KeyboardEvent;
pub const struct_SDL_TextEditingEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    windowID: Uint32 = @import("std").mem.zeroes(Uint32),
    text: [32]u8 = @import("std").mem.zeroes([32]u8),
    start: Sint32 = @import("std").mem.zeroes(Sint32),
    length: Sint32 = @import("std").mem.zeroes(Sint32),
};
pub const SDL_TextEditingEvent = struct_SDL_TextEditingEvent;
pub const struct_SDL_TextEditingExtEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    windowID: Uint32 = @import("std").mem.zeroes(Uint32),
    text: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    start: Sint32 = @import("std").mem.zeroes(Sint32),
    length: Sint32 = @import("std").mem.zeroes(Sint32),
};
pub const SDL_TextEditingExtEvent = struct_SDL_TextEditingExtEvent;
pub const struct_SDL_TextInputEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    windowID: Uint32 = @import("std").mem.zeroes(Uint32),
    text: [32]u8 = @import("std").mem.zeroes([32]u8),
};
pub const SDL_TextInputEvent = struct_SDL_TextInputEvent;
pub const struct_SDL_MouseMotionEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    windowID: Uint32 = @import("std").mem.zeroes(Uint32),
    which: Uint32 = @import("std").mem.zeroes(Uint32),
    state: Uint32 = @import("std").mem.zeroes(Uint32),
    x: Sint32 = @import("std").mem.zeroes(Sint32),
    y: Sint32 = @import("std").mem.zeroes(Sint32),
    xrel: Sint32 = @import("std").mem.zeroes(Sint32),
    yrel: Sint32 = @import("std").mem.zeroes(Sint32),
};
pub const SDL_MouseMotionEvent = struct_SDL_MouseMotionEvent;
pub const struct_SDL_MouseButtonEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    windowID: Uint32 = @import("std").mem.zeroes(Uint32),
    which: Uint32 = @import("std").mem.zeroes(Uint32),
    button: Uint8 = @import("std").mem.zeroes(Uint8),
    state: Uint8 = @import("std").mem.zeroes(Uint8),
    clicks: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    x: Sint32 = @import("std").mem.zeroes(Sint32),
    y: Sint32 = @import("std").mem.zeroes(Sint32),
};
pub const SDL_MouseButtonEvent = struct_SDL_MouseButtonEvent;
pub const struct_SDL_MouseWheelEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    windowID: Uint32 = @import("std").mem.zeroes(Uint32),
    which: Uint32 = @import("std").mem.zeroes(Uint32),
    x: Sint32 = @import("std").mem.zeroes(Sint32),
    y: Sint32 = @import("std").mem.zeroes(Sint32),
    direction: Uint32 = @import("std").mem.zeroes(Uint32),
    preciseX: f32 = @import("std").mem.zeroes(f32),
    preciseY: f32 = @import("std").mem.zeroes(f32),
    mouseX: Sint32 = @import("std").mem.zeroes(Sint32),
    mouseY: Sint32 = @import("std").mem.zeroes(Sint32),
};
pub const SDL_MouseWheelEvent = struct_SDL_MouseWheelEvent;
pub const struct_SDL_JoyAxisEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    axis: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
    padding3: Uint8 = @import("std").mem.zeroes(Uint8),
    value: Sint16 = @import("std").mem.zeroes(Sint16),
    padding4: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_JoyAxisEvent = struct_SDL_JoyAxisEvent;
pub const struct_SDL_JoyBallEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    ball: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
    padding3: Uint8 = @import("std").mem.zeroes(Uint8),
    xrel: Sint16 = @import("std").mem.zeroes(Sint16),
    yrel: Sint16 = @import("std").mem.zeroes(Sint16),
};
pub const SDL_JoyBallEvent = struct_SDL_JoyBallEvent;
pub const struct_SDL_JoyHatEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    hat: Uint8 = @import("std").mem.zeroes(Uint8),
    value: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
};
pub const SDL_JoyHatEvent = struct_SDL_JoyHatEvent;
pub const struct_SDL_JoyButtonEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    button: Uint8 = @import("std").mem.zeroes(Uint8),
    state: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
};
pub const SDL_JoyButtonEvent = struct_SDL_JoyButtonEvent;
pub const struct_SDL_JoyDeviceEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    which: Sint32 = @import("std").mem.zeroes(Sint32),
};
pub const SDL_JoyDeviceEvent = struct_SDL_JoyDeviceEvent;
pub const struct_SDL_JoyBatteryEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    level: SDL_JoystickPowerLevel = @import("std").mem.zeroes(SDL_JoystickPowerLevel),
};
pub const SDL_JoyBatteryEvent = struct_SDL_JoyBatteryEvent;
pub const struct_SDL_ControllerAxisEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    axis: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
    padding3: Uint8 = @import("std").mem.zeroes(Uint8),
    value: Sint16 = @import("std").mem.zeroes(Sint16),
    padding4: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_ControllerAxisEvent = struct_SDL_ControllerAxisEvent;
pub const struct_SDL_ControllerButtonEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    button: Uint8 = @import("std").mem.zeroes(Uint8),
    state: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
};
pub const SDL_ControllerButtonEvent = struct_SDL_ControllerButtonEvent;
pub const struct_SDL_ControllerDeviceEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    which: Sint32 = @import("std").mem.zeroes(Sint32),
};
pub const SDL_ControllerDeviceEvent = struct_SDL_ControllerDeviceEvent;
pub const struct_SDL_ControllerTouchpadEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    touchpad: Sint32 = @import("std").mem.zeroes(Sint32),
    finger: Sint32 = @import("std").mem.zeroes(Sint32),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    pressure: f32 = @import("std").mem.zeroes(f32),
};
pub const SDL_ControllerTouchpadEvent = struct_SDL_ControllerTouchpadEvent;
pub const struct_SDL_ControllerSensorEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    which: SDL_JoystickID = @import("std").mem.zeroes(SDL_JoystickID),
    sensor: Sint32 = @import("std").mem.zeroes(Sint32),
    data: [3]f32 = @import("std").mem.zeroes([3]f32),
    timestamp_us: Uint64 = @import("std").mem.zeroes(Uint64),
};
pub const SDL_ControllerSensorEvent = struct_SDL_ControllerSensorEvent;
pub const struct_SDL_AudioDeviceEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    which: Uint32 = @import("std").mem.zeroes(Uint32),
    iscapture: Uint8 = @import("std").mem.zeroes(Uint8),
    padding1: Uint8 = @import("std").mem.zeroes(Uint8),
    padding2: Uint8 = @import("std").mem.zeroes(Uint8),
    padding3: Uint8 = @import("std").mem.zeroes(Uint8),
};
pub const SDL_AudioDeviceEvent = struct_SDL_AudioDeviceEvent;
pub const struct_SDL_TouchFingerEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    touchId: SDL_TouchID = @import("std").mem.zeroes(SDL_TouchID),
    fingerId: SDL_FingerID = @import("std").mem.zeroes(SDL_FingerID),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    dx: f32 = @import("std").mem.zeroes(f32),
    dy: f32 = @import("std").mem.zeroes(f32),
    pressure: f32 = @import("std").mem.zeroes(f32),
    windowID: Uint32 = @import("std").mem.zeroes(Uint32),
};
pub const SDL_TouchFingerEvent = struct_SDL_TouchFingerEvent;
pub const struct_SDL_MultiGestureEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    touchId: SDL_TouchID = @import("std").mem.zeroes(SDL_TouchID),
    dTheta: f32 = @import("std").mem.zeroes(f32),
    dDist: f32 = @import("std").mem.zeroes(f32),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    numFingers: Uint16 = @import("std").mem.zeroes(Uint16),
    padding: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_MultiGestureEvent = struct_SDL_MultiGestureEvent;
pub const struct_SDL_DollarGestureEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    touchId: SDL_TouchID = @import("std").mem.zeroes(SDL_TouchID),
    gestureId: SDL_GestureID = @import("std").mem.zeroes(SDL_GestureID),
    numFingers: Uint32 = @import("std").mem.zeroes(Uint32),
    @"error": f32 = @import("std").mem.zeroes(f32),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
};
pub const SDL_DollarGestureEvent = struct_SDL_DollarGestureEvent;
pub const struct_SDL_DropEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    file: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    windowID: Uint32 = @import("std").mem.zeroes(Uint32),
};
pub const SDL_DropEvent = struct_SDL_DropEvent;
pub const struct_SDL_SensorEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    which: Sint32 = @import("std").mem.zeroes(Sint32),
    data: [6]f32 = @import("std").mem.zeroes([6]f32),
    timestamp_us: Uint64 = @import("std").mem.zeroes(Uint64),
};
pub const SDL_SensorEvent = struct_SDL_SensorEvent;
pub const struct_SDL_QuitEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
};
pub const SDL_QuitEvent = struct_SDL_QuitEvent;
pub const struct_SDL_UserEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    windowID: Uint32 = @import("std").mem.zeroes(Uint32),
    code: Sint32 = @import("std").mem.zeroes(Sint32),
    data1: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    data2: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const SDL_UserEvent = struct_SDL_UserEvent;
pub const struct_SDL_SysWMmsg = opaque {};
pub const SDL_SysWMmsg = struct_SDL_SysWMmsg;
pub const struct_SDL_SysWMEvent = extern struct {
    type: Uint32 = @import("std").mem.zeroes(Uint32),
    timestamp: Uint32 = @import("std").mem.zeroes(Uint32),
    msg: ?*SDL_SysWMmsg = @import("std").mem.zeroes(?*SDL_SysWMmsg),
};
pub const SDL_SysWMEvent = struct_SDL_SysWMEvent;
pub const union_SDL_Event = extern union {
    type: Uint32,
    common: SDL_CommonEvent,
    display: SDL_DisplayEvent,
    window: SDL_WindowEvent,
    key: SDL_KeyboardEvent,
    edit: SDL_TextEditingEvent,
    editExt: SDL_TextEditingExtEvent,
    text: SDL_TextInputEvent,
    motion: SDL_MouseMotionEvent,
    button: SDL_MouseButtonEvent,
    wheel: SDL_MouseWheelEvent,
    jaxis: SDL_JoyAxisEvent,
    jball: SDL_JoyBallEvent,
    jhat: SDL_JoyHatEvent,
    jbutton: SDL_JoyButtonEvent,
    jdevice: SDL_JoyDeviceEvent,
    jbattery: SDL_JoyBatteryEvent,
    caxis: SDL_ControllerAxisEvent,
    cbutton: SDL_ControllerButtonEvent,
    cdevice: SDL_ControllerDeviceEvent,
    ctouchpad: SDL_ControllerTouchpadEvent,
    csensor: SDL_ControllerSensorEvent,
    adevice: SDL_AudioDeviceEvent,
    sensor: SDL_SensorEvent,
    quit: SDL_QuitEvent,
    user: SDL_UserEvent,
    syswm: SDL_SysWMEvent,
    tfinger: SDL_TouchFingerEvent,
    mgesture: SDL_MultiGestureEvent,
    dgesture: SDL_DollarGestureEvent,
    drop: SDL_DropEvent,
    padding: [56]Uint8,
};
pub const SDL_Event = union_SDL_Event;
// /usr/include/SDL2/SDL_stdinc.h:387:42: warning: ignoring StaticAssert declaration
pub extern fn SDL_PumpEvents() void;
pub const SDL_ADDEVENT: c_int = 0;
pub const SDL_PEEKEVENT: c_int = 1;
pub const SDL_GETEVENT: c_int = 2;
pub const SDL_eventaction = c_uint;
pub extern fn SDL_PeepEvents(events: [*c]SDL_Event, numevents: c_int, action: SDL_eventaction, minType: Uint32, maxType: Uint32) c_int;
pub extern fn SDL_HasEvent(@"type": Uint32) SDL_bool;
pub extern fn SDL_HasEvents(minType: Uint32, maxType: Uint32) SDL_bool;
pub extern fn SDL_FlushEvent(@"type": Uint32) void;
pub extern fn SDL_FlushEvents(minType: Uint32, maxType: Uint32) void;
pub extern fn SDL_PollEvent(event: [*c]SDL_Event) c_int;
pub extern fn SDL_WaitEvent(event: [*c]SDL_Event) c_int;
pub extern fn SDL_WaitEventTimeout(event: [*c]SDL_Event, timeout: c_int) c_int;
pub extern fn SDL_PushEvent(event: [*c]SDL_Event) c_int;
pub const SDL_EventFilter = ?*const fn (?*anyopaque, [*c]SDL_Event) callconv(.C) c_int;
pub extern fn SDL_SetEventFilter(filter: SDL_EventFilter, userdata: ?*anyopaque) void;
pub extern fn SDL_GetEventFilter(filter: [*c]SDL_EventFilter, userdata: [*c]?*anyopaque) SDL_bool;
pub extern fn SDL_AddEventWatch(filter: SDL_EventFilter, userdata: ?*anyopaque) void;
pub extern fn SDL_DelEventWatch(filter: SDL_EventFilter, userdata: ?*anyopaque) void;
pub extern fn SDL_FilterEvents(filter: SDL_EventFilter, userdata: ?*anyopaque) void;
pub extern fn SDL_EventState(@"type": Uint32, state: c_int) Uint8;
pub extern fn SDL_RegisterEvents(numevents: c_int) Uint32;
pub extern fn SDL_GetBasePath() [*c]u8;
pub extern fn SDL_GetPrefPath(org: [*c]const u8, app: [*c]const u8) [*c]u8;
pub const struct__SDL_Haptic = opaque {};
pub const SDL_Haptic = struct__SDL_Haptic;
pub const struct_SDL_HapticDirection = extern struct {
    type: Uint8 = @import("std").mem.zeroes(Uint8),
    dir: [3]Sint32 = @import("std").mem.zeroes([3]Sint32),
};
pub const SDL_HapticDirection = struct_SDL_HapticDirection;
pub const struct_SDL_HapticConstant = extern struct {
    type: Uint16 = @import("std").mem.zeroes(Uint16),
    direction: SDL_HapticDirection = @import("std").mem.zeroes(SDL_HapticDirection),
    length: Uint32 = @import("std").mem.zeroes(Uint32),
    delay: Uint16 = @import("std").mem.zeroes(Uint16),
    button: Uint16 = @import("std").mem.zeroes(Uint16),
    interval: Uint16 = @import("std").mem.zeroes(Uint16),
    level: Sint16 = @import("std").mem.zeroes(Sint16),
    attack_length: Uint16 = @import("std").mem.zeroes(Uint16),
    attack_level: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_length: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_level: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_HapticConstant = struct_SDL_HapticConstant;
pub const struct_SDL_HapticPeriodic = extern struct {
    type: Uint16 = @import("std").mem.zeroes(Uint16),
    direction: SDL_HapticDirection = @import("std").mem.zeroes(SDL_HapticDirection),
    length: Uint32 = @import("std").mem.zeroes(Uint32),
    delay: Uint16 = @import("std").mem.zeroes(Uint16),
    button: Uint16 = @import("std").mem.zeroes(Uint16),
    interval: Uint16 = @import("std").mem.zeroes(Uint16),
    period: Uint16 = @import("std").mem.zeroes(Uint16),
    magnitude: Sint16 = @import("std").mem.zeroes(Sint16),
    offset: Sint16 = @import("std").mem.zeroes(Sint16),
    phase: Uint16 = @import("std").mem.zeroes(Uint16),
    attack_length: Uint16 = @import("std").mem.zeroes(Uint16),
    attack_level: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_length: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_level: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_HapticPeriodic = struct_SDL_HapticPeriodic;
pub const struct_SDL_HapticCondition = extern struct {
    type: Uint16 = @import("std").mem.zeroes(Uint16),
    direction: SDL_HapticDirection = @import("std").mem.zeroes(SDL_HapticDirection),
    length: Uint32 = @import("std").mem.zeroes(Uint32),
    delay: Uint16 = @import("std").mem.zeroes(Uint16),
    button: Uint16 = @import("std").mem.zeroes(Uint16),
    interval: Uint16 = @import("std").mem.zeroes(Uint16),
    right_sat: [3]Uint16 = @import("std").mem.zeroes([3]Uint16),
    left_sat: [3]Uint16 = @import("std").mem.zeroes([3]Uint16),
    right_coeff: [3]Sint16 = @import("std").mem.zeroes([3]Sint16),
    left_coeff: [3]Sint16 = @import("std").mem.zeroes([3]Sint16),
    deadband: [3]Uint16 = @import("std").mem.zeroes([3]Uint16),
    center: [3]Sint16 = @import("std").mem.zeroes([3]Sint16),
};
pub const SDL_HapticCondition = struct_SDL_HapticCondition;
pub const struct_SDL_HapticRamp = extern struct {
    type: Uint16 = @import("std").mem.zeroes(Uint16),
    direction: SDL_HapticDirection = @import("std").mem.zeroes(SDL_HapticDirection),
    length: Uint32 = @import("std").mem.zeroes(Uint32),
    delay: Uint16 = @import("std").mem.zeroes(Uint16),
    button: Uint16 = @import("std").mem.zeroes(Uint16),
    interval: Uint16 = @import("std").mem.zeroes(Uint16),
    start: Sint16 = @import("std").mem.zeroes(Sint16),
    end: Sint16 = @import("std").mem.zeroes(Sint16),
    attack_length: Uint16 = @import("std").mem.zeroes(Uint16),
    attack_level: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_length: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_level: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_HapticRamp = struct_SDL_HapticRamp;
pub const struct_SDL_HapticLeftRight = extern struct {
    type: Uint16 = @import("std").mem.zeroes(Uint16),
    length: Uint32 = @import("std").mem.zeroes(Uint32),
    large_magnitude: Uint16 = @import("std").mem.zeroes(Uint16),
    small_magnitude: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_HapticLeftRight = struct_SDL_HapticLeftRight;
pub const struct_SDL_HapticCustom = extern struct {
    type: Uint16 = @import("std").mem.zeroes(Uint16),
    direction: SDL_HapticDirection = @import("std").mem.zeroes(SDL_HapticDirection),
    length: Uint32 = @import("std").mem.zeroes(Uint32),
    delay: Uint16 = @import("std").mem.zeroes(Uint16),
    button: Uint16 = @import("std").mem.zeroes(Uint16),
    interval: Uint16 = @import("std").mem.zeroes(Uint16),
    channels: Uint8 = @import("std").mem.zeroes(Uint8),
    period: Uint16 = @import("std").mem.zeroes(Uint16),
    samples: Uint16 = @import("std").mem.zeroes(Uint16),
    data: [*c]Uint16 = @import("std").mem.zeroes([*c]Uint16),
    attack_length: Uint16 = @import("std").mem.zeroes(Uint16),
    attack_level: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_length: Uint16 = @import("std").mem.zeroes(Uint16),
    fade_level: Uint16 = @import("std").mem.zeroes(Uint16),
};
pub const SDL_HapticCustom = struct_SDL_HapticCustom;
pub const union_SDL_HapticEffect = extern union {
    type: Uint16,
    constant: SDL_HapticConstant,
    periodic: SDL_HapticPeriodic,
    condition: SDL_HapticCondition,
    ramp: SDL_HapticRamp,
    leftright: SDL_HapticLeftRight,
    custom: SDL_HapticCustom,
};
pub const SDL_HapticEffect = union_SDL_HapticEffect;
pub extern fn SDL_NumHaptics() c_int;
pub extern fn SDL_HapticName(device_index: c_int) [*c]const u8;
pub extern fn SDL_HapticOpen(device_index: c_int) ?*SDL_Haptic;
pub extern fn SDL_HapticOpened(device_index: c_int) c_int;
pub extern fn SDL_HapticIndex(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_MouseIsHaptic() c_int;
pub extern fn SDL_HapticOpenFromMouse() ?*SDL_Haptic;
pub extern fn SDL_JoystickIsHaptic(joystick: ?*SDL_Joystick) c_int;
pub extern fn SDL_HapticOpenFromJoystick(joystick: ?*SDL_Joystick) ?*SDL_Haptic;
pub extern fn SDL_HapticClose(haptic: ?*SDL_Haptic) void;
pub extern fn SDL_HapticNumEffects(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_HapticNumEffectsPlaying(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_HapticQuery(haptic: ?*SDL_Haptic) c_uint;
pub extern fn SDL_HapticNumAxes(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_HapticEffectSupported(haptic: ?*SDL_Haptic, effect: [*c]SDL_HapticEffect) c_int;
pub extern fn SDL_HapticNewEffect(haptic: ?*SDL_Haptic, effect: [*c]SDL_HapticEffect) c_int;
pub extern fn SDL_HapticUpdateEffect(haptic: ?*SDL_Haptic, effect: c_int, data: [*c]SDL_HapticEffect) c_int;
pub extern fn SDL_HapticRunEffect(haptic: ?*SDL_Haptic, effect: c_int, iterations: Uint32) c_int;
pub extern fn SDL_HapticStopEffect(haptic: ?*SDL_Haptic, effect: c_int) c_int;
pub extern fn SDL_HapticDestroyEffect(haptic: ?*SDL_Haptic, effect: c_int) void;
pub extern fn SDL_HapticGetEffectStatus(haptic: ?*SDL_Haptic, effect: c_int) c_int;
pub extern fn SDL_HapticSetGain(haptic: ?*SDL_Haptic, gain: c_int) c_int;
pub extern fn SDL_HapticSetAutocenter(haptic: ?*SDL_Haptic, autocenter: c_int) c_int;
pub extern fn SDL_HapticPause(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_HapticUnpause(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_HapticStopAll(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_HapticRumbleSupported(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_HapticRumbleInit(haptic: ?*SDL_Haptic) c_int;
pub extern fn SDL_HapticRumblePlay(haptic: ?*SDL_Haptic, strength: f32, length: Uint32) c_int;
pub extern fn SDL_HapticRumbleStop(haptic: ?*SDL_Haptic) c_int;
pub const struct_SDL_hid_device_ = opaque {};
pub const SDL_hid_device = struct_SDL_hid_device_;
pub const struct_SDL_hid_device_info = extern struct {
    path: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    vendor_id: c_ushort = @import("std").mem.zeroes(c_ushort),
    product_id: c_ushort = @import("std").mem.zeroes(c_ushort),
    serial_number: [*c]wchar_t = @import("std").mem.zeroes([*c]wchar_t),
    release_number: c_ushort = @import("std").mem.zeroes(c_ushort),
    manufacturer_string: [*c]wchar_t = @import("std").mem.zeroes([*c]wchar_t),
    product_string: [*c]wchar_t = @import("std").mem.zeroes([*c]wchar_t),
    usage_page: c_ushort = @import("std").mem.zeroes(c_ushort),
    usage: c_ushort = @import("std").mem.zeroes(c_ushort),
    interface_number: c_int = @import("std").mem.zeroes(c_int),
    interface_class: c_int = @import("std").mem.zeroes(c_int),
    interface_subclass: c_int = @import("std").mem.zeroes(c_int),
    interface_protocol: c_int = @import("std").mem.zeroes(c_int),
    next: [*c]struct_SDL_hid_device_info = @import("std").mem.zeroes([*c]struct_SDL_hid_device_info),
};
pub const SDL_hid_device_info = struct_SDL_hid_device_info;
pub extern fn SDL_hid_init() c_int;
pub extern fn SDL_hid_exit() c_int;
pub extern fn SDL_hid_device_change_count() Uint32;
pub extern fn SDL_hid_enumerate(vendor_id: c_ushort, product_id: c_ushort) [*c]SDL_hid_device_info;
pub extern fn SDL_hid_free_enumeration(devs: [*c]SDL_hid_device_info) void;
pub extern fn SDL_hid_open(vendor_id: c_ushort, product_id: c_ushort, serial_number: [*c]const wchar_t) ?*SDL_hid_device;
pub extern fn SDL_hid_open_path(path: [*c]const u8, bExclusive: c_int) ?*SDL_hid_device;
pub extern fn SDL_hid_write(dev: ?*SDL_hid_device, data: [*c]const u8, length: usize) c_int;
pub extern fn SDL_hid_read_timeout(dev: ?*SDL_hid_device, data: [*c]u8, length: usize, milliseconds: c_int) c_int;
pub extern fn SDL_hid_read(dev: ?*SDL_hid_device, data: [*c]u8, length: usize) c_int;
pub extern fn SDL_hid_set_nonblocking(dev: ?*SDL_hid_device, nonblock: c_int) c_int;
pub extern fn SDL_hid_send_feature_report(dev: ?*SDL_hid_device, data: [*c]const u8, length: usize) c_int;
pub extern fn SDL_hid_get_feature_report(dev: ?*SDL_hid_device, data: [*c]u8, length: usize) c_int;
pub extern fn SDL_hid_close(dev: ?*SDL_hid_device) void;
pub extern fn SDL_hid_get_manufacturer_string(dev: ?*SDL_hid_device, string: [*c]wchar_t, maxlen: usize) c_int;
pub extern fn SDL_hid_get_product_string(dev: ?*SDL_hid_device, string: [*c]wchar_t, maxlen: usize) c_int;
pub extern fn SDL_hid_get_serial_number_string(dev: ?*SDL_hid_device, string: [*c]wchar_t, maxlen: usize) c_int;
pub extern fn SDL_hid_get_indexed_string(dev: ?*SDL_hid_device, string_index: c_int, string: [*c]wchar_t, maxlen: usize) c_int;
pub extern fn SDL_hid_ble_scan(active: SDL_bool) void;
pub const SDL_HINT_DEFAULT: c_int = 0;
pub const SDL_HINT_NORMAL: c_int = 1;
pub const SDL_HINT_OVERRIDE: c_int = 2;
pub const SDL_HintPriority = c_uint;
pub extern fn SDL_SetHintWithPriority(name: [*c]const u8, value: [*c]const u8, priority: SDL_HintPriority) SDL_bool;
pub extern fn SDL_SetHint(name: [*c]const u8, value: [*c]const u8) SDL_bool;
pub extern fn SDL_ResetHint(name: [*c]const u8) SDL_bool;
pub extern fn SDL_ResetHints() void;
pub extern fn SDL_GetHint(name: [*c]const u8) [*c]const u8;
pub extern fn SDL_GetHintBoolean(name: [*c]const u8, default_value: SDL_bool) SDL_bool;
pub const SDL_HintCallback = ?*const fn (?*anyopaque, [*c]const u8, [*c]const u8, [*c]const u8) callconv(.C) void;
pub extern fn SDL_AddHintCallback(name: [*c]const u8, callback: SDL_HintCallback, userdata: ?*anyopaque) void;
pub extern fn SDL_DelHintCallback(name: [*c]const u8, callback: SDL_HintCallback, userdata: ?*anyopaque) void;
pub extern fn SDL_ClearHints() void;
pub extern fn SDL_LoadObject(sofile: [*c]const u8) ?*anyopaque;
pub extern fn SDL_LoadFunction(handle: ?*anyopaque, name: [*c]const u8) ?*anyopaque;
pub extern fn SDL_UnloadObject(handle: ?*anyopaque) void;
pub const SDL_LOG_CATEGORY_APPLICATION: c_int = 0;
pub const SDL_LOG_CATEGORY_ERROR: c_int = 1;
pub const SDL_LOG_CATEGORY_ASSERT: c_int = 2;
pub const SDL_LOG_CATEGORY_SYSTEM: c_int = 3;
pub const SDL_LOG_CATEGORY_AUDIO: c_int = 4;
pub const SDL_LOG_CATEGORY_VIDEO: c_int = 5;
pub const SDL_LOG_CATEGORY_RENDER: c_int = 6;
pub const SDL_LOG_CATEGORY_INPUT: c_int = 7;
pub const SDL_LOG_CATEGORY_TEST: c_int = 8;
pub const SDL_LOG_CATEGORY_RESERVED1: c_int = 9;
pub const SDL_LOG_CATEGORY_RESERVED2: c_int = 10;
pub const SDL_LOG_CATEGORY_RESERVED3: c_int = 11;
pub const SDL_LOG_CATEGORY_RESERVED4: c_int = 12;
pub const SDL_LOG_CATEGORY_RESERVED5: c_int = 13;
pub const SDL_LOG_CATEGORY_RESERVED6: c_int = 14;
pub const SDL_LOG_CATEGORY_RESERVED7: c_int = 15;
pub const SDL_LOG_CATEGORY_RESERVED8: c_int = 16;
pub const SDL_LOG_CATEGORY_RESERVED9: c_int = 17;
pub const SDL_LOG_CATEGORY_RESERVED10: c_int = 18;
pub const SDL_LOG_CATEGORY_CUSTOM: c_int = 19;
pub const SDL_LogCategory = c_uint;
pub const SDL_LOG_PRIORITY_VERBOSE: c_int = 1;
pub const SDL_LOG_PRIORITY_DEBUG: c_int = 2;
pub const SDL_LOG_PRIORITY_INFO: c_int = 3;
pub const SDL_LOG_PRIORITY_WARN: c_int = 4;
pub const SDL_LOG_PRIORITY_ERROR: c_int = 5;
pub const SDL_LOG_PRIORITY_CRITICAL: c_int = 6;
pub const SDL_NUM_LOG_PRIORITIES: c_int = 7;
pub const SDL_LogPriority = c_uint;
pub extern fn SDL_LogSetAllPriority(priority: SDL_LogPriority) void;
pub extern fn SDL_LogSetPriority(category: c_int, priority: SDL_LogPriority) void;
pub extern fn SDL_LogGetPriority(category: c_int) SDL_LogPriority;
pub extern fn SDL_LogResetPriorities() void;
pub extern fn SDL_Log(fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogVerbose(category: c_int, fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogDebug(category: c_int, fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogInfo(category: c_int, fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogWarn(category: c_int, fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogError(category: c_int, fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogCritical(category: c_int, fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogMessage(category: c_int, priority: SDL_LogPriority, fmt: [*c]const u8, ...) void;
pub extern fn SDL_LogMessageV(category: c_int, priority: SDL_LogPriority, fmt: [*c]const u8, ap: [*c]struct___va_list_tag_2) void;
pub const SDL_LogOutputFunction = ?*const fn (?*anyopaque, c_int, SDL_LogPriority, [*c]const u8) callconv(.C) void;
pub extern fn SDL_LogGetOutputFunction(callback: [*c]SDL_LogOutputFunction, userdata: [*c]?*anyopaque) void;
pub extern fn SDL_LogSetOutputFunction(callback: SDL_LogOutputFunction, userdata: ?*anyopaque) void;
pub const SDL_MESSAGEBOX_ERROR: c_int = 16;
pub const SDL_MESSAGEBOX_WARNING: c_int = 32;
pub const SDL_MESSAGEBOX_INFORMATION: c_int = 64;
pub const SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT: c_int = 128;
pub const SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT: c_int = 256;
pub const SDL_MessageBoxFlags = c_uint;
pub const SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT: c_int = 1;
pub const SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT: c_int = 2;
pub const SDL_MessageBoxButtonFlags = c_uint;
pub const SDL_MessageBoxButtonData = extern struct {
    flags: Uint32 = @import("std").mem.zeroes(Uint32),
    buttonid: c_int = @import("std").mem.zeroes(c_int),
    text: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const SDL_MessageBoxColor = extern struct {
    r: Uint8 = @import("std").mem.zeroes(Uint8),
    g: Uint8 = @import("std").mem.zeroes(Uint8),
    b: Uint8 = @import("std").mem.zeroes(Uint8),
};
pub const SDL_MESSAGEBOX_COLOR_BACKGROUND: c_int = 0;
pub const SDL_MESSAGEBOX_COLOR_TEXT: c_int = 1;
pub const SDL_MESSAGEBOX_COLOR_BUTTON_BORDER: c_int = 2;
pub const SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND: c_int = 3;
pub const SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED: c_int = 4;
pub const SDL_MESSAGEBOX_COLOR_MAX: c_int = 5;
pub const SDL_MessageBoxColorType = c_uint;
pub const SDL_MessageBoxColorScheme = extern struct {
    colors: [5]SDL_MessageBoxColor = @import("std").mem.zeroes([5]SDL_MessageBoxColor),
};
pub const SDL_MessageBoxData = extern struct {
    flags: Uint32 = @import("std").mem.zeroes(Uint32),
    window: ?*SDL_Window = @import("std").mem.zeroes(?*SDL_Window),
    title: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    message: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    numbuttons: c_int = @import("std").mem.zeroes(c_int),
    buttons: [*c]const SDL_MessageBoxButtonData = @import("std").mem.zeroes([*c]const SDL_MessageBoxButtonData),
    colorScheme: [*c]const SDL_MessageBoxColorScheme = @import("std").mem.zeroes([*c]const SDL_MessageBoxColorScheme),
};
pub extern fn SDL_ShowMessageBox(messageboxdata: [*c]const SDL_MessageBoxData, buttonid: [*c]c_int) c_int;
pub extern fn SDL_ShowSimpleMessageBox(flags: Uint32, title: [*c]const u8, message: [*c]const u8, window: ?*SDL_Window) c_int;
pub const SDL_MetalView = ?*anyopaque;
pub extern fn SDL_Metal_CreateView(window: ?*SDL_Window) SDL_MetalView;
pub extern fn SDL_Metal_DestroyView(view: SDL_MetalView) void;
pub extern fn SDL_Metal_GetLayer(view: SDL_MetalView) ?*anyopaque;
pub extern fn SDL_Metal_GetDrawableSize(window: ?*SDL_Window, w: [*c]c_int, h: [*c]c_int) void;
pub const SDL_POWERSTATE_UNKNOWN: c_int = 0;
pub const SDL_POWERSTATE_ON_BATTERY: c_int = 1;
pub const SDL_POWERSTATE_NO_BATTERY: c_int = 2;
pub const SDL_POWERSTATE_CHARGING: c_int = 3;
pub const SDL_POWERSTATE_CHARGED: c_int = 4;
pub const SDL_PowerState = c_uint;
pub extern fn SDL_GetPowerInfo(seconds: [*c]c_int, percent: [*c]c_int) SDL_PowerState;
pub const SDL_RENDERER_SOFTWARE: c_int = 1;
pub const SDL_RENDERER_ACCELERATED: c_int = 2;
pub const SDL_RENDERER_PRESENTVSYNC: c_int = 4;
pub const SDL_RENDERER_TARGETTEXTURE: c_int = 8;
pub const SDL_RendererFlags = c_uint;
pub const struct_SDL_RendererInfo = extern struct {
    name: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    flags: Uint32 = @import("std").mem.zeroes(Uint32),
    num_texture_formats: Uint32 = @import("std").mem.zeroes(Uint32),
    texture_formats: [16]Uint32 = @import("std").mem.zeroes([16]Uint32),
    max_texture_width: c_int = @import("std").mem.zeroes(c_int),
    max_texture_height: c_int = @import("std").mem.zeroes(c_int),
};
pub const SDL_RendererInfo = struct_SDL_RendererInfo;
pub const struct_SDL_Vertex = extern struct {
    position: SDL_FPoint = @import("std").mem.zeroes(SDL_FPoint),
    color: SDL_Color = @import("std").mem.zeroes(SDL_Color),
    tex_coord: SDL_FPoint = @import("std").mem.zeroes(SDL_FPoint),
};
pub const SDL_Vertex = struct_SDL_Vertex;
pub const SDL_ScaleModeNearest: c_int = 0;
pub const SDL_ScaleModeLinear: c_int = 1;
pub const SDL_ScaleModeBest: c_int = 2;
pub const SDL_ScaleMode = c_uint;
pub const SDL_TEXTUREACCESS_STATIC: c_int = 0;
pub const SDL_TEXTUREACCESS_STREAMING: c_int = 1;
pub const SDL_TEXTUREACCESS_TARGET: c_int = 2;
pub const SDL_TextureAccess = c_uint;
pub const SDL_TEXTUREMODULATE_NONE: c_int = 0;
pub const SDL_TEXTUREMODULATE_COLOR: c_int = 1;
pub const SDL_TEXTUREMODULATE_ALPHA: c_int = 2;
pub const SDL_TextureModulate = c_uint;
pub const SDL_FLIP_NONE: c_int = 0;
pub const SDL_FLIP_HORIZONTAL: c_int = 1;
pub const SDL_FLIP_VERTICAL: c_int = 2;
pub const SDL_RendererFlip = c_uint;
pub const struct_SDL_Renderer = opaque {};
pub const SDL_Renderer = struct_SDL_Renderer;
pub const struct_SDL_Texture = opaque {};
pub const SDL_Texture = struct_SDL_Texture;
pub extern fn SDL_GetNumRenderDrivers() c_int;
pub extern fn SDL_GetRenderDriverInfo(index: c_int, info: [*c]SDL_RendererInfo) c_int;
pub extern fn SDL_CreateWindowAndRenderer(width: c_int, height: c_int, window_flags: Uint32, window: [*c]?*SDL_Window, renderer: [*c]?*SDL_Renderer) c_int;
pub extern fn SDL_CreateRenderer(window: ?*SDL_Window, index: c_int, flags: Uint32) ?*SDL_Renderer;
pub extern fn SDL_CreateSoftwareRenderer(surface: [*c]SDL_Surface) ?*SDL_Renderer;
pub extern fn SDL_GetRenderer(window: ?*SDL_Window) ?*SDL_Renderer;
pub extern fn SDL_RenderGetWindow(renderer: ?*SDL_Renderer) ?*SDL_Window;
pub extern fn SDL_GetRendererInfo(renderer: ?*SDL_Renderer, info: [*c]SDL_RendererInfo) c_int;
pub extern fn SDL_GetRendererOutputSize(renderer: ?*SDL_Renderer, w: [*c]c_int, h: [*c]c_int) c_int;
pub extern fn SDL_CreateTexture(renderer: ?*SDL_Renderer, format: Uint32, access: c_int, w: c_int, h: c_int) ?*SDL_Texture;
pub extern fn SDL_CreateTextureFromSurface(renderer: ?*SDL_Renderer, surface: [*c]SDL_Surface) ?*SDL_Texture;
pub extern fn SDL_QueryTexture(texture: ?*SDL_Texture, format: [*c]Uint32, access: [*c]c_int, w: [*c]c_int, h: [*c]c_int) c_int;
pub extern fn SDL_SetTextureColorMod(texture: ?*SDL_Texture, r: Uint8, g: Uint8, b: Uint8) c_int;
pub extern fn SDL_GetTextureColorMod(texture: ?*SDL_Texture, r: [*c]Uint8, g: [*c]Uint8, b: [*c]Uint8) c_int;
pub extern fn SDL_SetTextureAlphaMod(texture: ?*SDL_Texture, alpha: Uint8) c_int;
pub extern fn SDL_GetTextureAlphaMod(texture: ?*SDL_Texture, alpha: [*c]Uint8) c_int;
pub extern fn SDL_SetTextureBlendMode(texture: ?*SDL_Texture, blendMode: SDL_BlendMode) c_int;
pub extern fn SDL_GetTextureBlendMode(texture: ?*SDL_Texture, blendMode: [*c]SDL_BlendMode) c_int;
pub extern fn SDL_SetTextureScaleMode(texture: ?*SDL_Texture, scaleMode: SDL_ScaleMode) c_int;
pub extern fn SDL_GetTextureScaleMode(texture: ?*SDL_Texture, scaleMode: [*c]SDL_ScaleMode) c_int;
pub extern fn SDL_SetTextureUserData(texture: ?*SDL_Texture, userdata: ?*anyopaque) c_int;
pub extern fn SDL_GetTextureUserData(texture: ?*SDL_Texture) ?*anyopaque;
pub extern fn SDL_UpdateTexture(texture: ?*SDL_Texture, rect: [*c]const SDL_Rect, pixels: ?*const anyopaque, pitch: c_int) c_int;
pub extern fn SDL_UpdateYUVTexture(texture: ?*SDL_Texture, rect: [*c]const SDL_Rect, Yplane: [*c]const Uint8, Ypitch: c_int, Uplane: [*c]const Uint8, Upitch: c_int, Vplane: [*c]const Uint8, Vpitch: c_int) c_int;
pub extern fn SDL_UpdateNVTexture(texture: ?*SDL_Texture, rect: [*c]const SDL_Rect, Yplane: [*c]const Uint8, Ypitch: c_int, UVplane: [*c]const Uint8, UVpitch: c_int) c_int;
pub extern fn SDL_LockTexture(texture: ?*SDL_Texture, rect: [*c]const SDL_Rect, pixels: [*c]?*anyopaque, pitch: [*c]c_int) c_int;
pub extern fn SDL_LockTextureToSurface(texture: ?*SDL_Texture, rect: [*c]const SDL_Rect, surface: [*c][*c]SDL_Surface) c_int;
pub extern fn SDL_UnlockTexture(texture: ?*SDL_Texture) void;
pub extern fn SDL_RenderTargetSupported(renderer: ?*SDL_Renderer) SDL_bool;
pub extern fn SDL_SetRenderTarget(renderer: ?*SDL_Renderer, texture: ?*SDL_Texture) c_int;
pub extern fn SDL_GetRenderTarget(renderer: ?*SDL_Renderer) ?*SDL_Texture;
pub extern fn SDL_RenderSetLogicalSize(renderer: ?*SDL_Renderer, w: c_int, h: c_int) c_int;
pub extern fn SDL_RenderGetLogicalSize(renderer: ?*SDL_Renderer, w: [*c]c_int, h: [*c]c_int) void;
pub extern fn SDL_RenderSetIntegerScale(renderer: ?*SDL_Renderer, enable: SDL_bool) c_int;
pub extern fn SDL_RenderGetIntegerScale(renderer: ?*SDL_Renderer) SDL_bool;
pub extern fn SDL_RenderSetViewport(renderer: ?*SDL_Renderer, rect: [*c]const SDL_Rect) c_int;
pub extern fn SDL_RenderGetViewport(renderer: ?*SDL_Renderer, rect: [*c]SDL_Rect) void;
pub extern fn SDL_RenderSetClipRect(renderer: ?*SDL_Renderer, rect: [*c]const SDL_Rect) c_int;
pub extern fn SDL_RenderGetClipRect(renderer: ?*SDL_Renderer, rect: [*c]SDL_Rect) void;
pub extern fn SDL_RenderIsClipEnabled(renderer: ?*SDL_Renderer) SDL_bool;
pub extern fn SDL_RenderSetScale(renderer: ?*SDL_Renderer, scaleX: f32, scaleY: f32) c_int;
pub extern fn SDL_RenderGetScale(renderer: ?*SDL_Renderer, scaleX: [*c]f32, scaleY: [*c]f32) void;
pub extern fn SDL_RenderWindowToLogical(renderer: ?*SDL_Renderer, windowX: c_int, windowY: c_int, logicalX: [*c]f32, logicalY: [*c]f32) void;
pub extern fn SDL_RenderLogicalToWindow(renderer: ?*SDL_Renderer, logicalX: f32, logicalY: f32, windowX: [*c]c_int, windowY: [*c]c_int) void;
pub extern fn SDL_SetRenderDrawColor(renderer: ?*SDL_Renderer, r: Uint8, g: Uint8, b: Uint8, a: Uint8) c_int;
pub extern fn SDL_GetRenderDrawColor(renderer: ?*SDL_Renderer, r: [*c]Uint8, g: [*c]Uint8, b: [*c]Uint8, a: [*c]Uint8) c_int;
pub extern fn SDL_SetRenderDrawBlendMode(renderer: ?*SDL_Renderer, blendMode: SDL_BlendMode) c_int;
pub extern fn SDL_GetRenderDrawBlendMode(renderer: ?*SDL_Renderer, blendMode: [*c]SDL_BlendMode) c_int;
pub extern fn SDL_RenderClear(renderer: ?*SDL_Renderer) c_int;
pub extern fn SDL_RenderDrawPoint(renderer: ?*SDL_Renderer, x: c_int, y: c_int) c_int;
pub extern fn SDL_RenderDrawPoints(renderer: ?*SDL_Renderer, points: [*c]const SDL_Point, count: c_int) c_int;
pub extern fn SDL_RenderDrawLine(renderer: ?*SDL_Renderer, x1: c_int, y1: c_int, x2: c_int, y2: c_int) c_int;
pub extern fn SDL_RenderDrawLines(renderer: ?*SDL_Renderer, points: [*c]const SDL_Point, count: c_int) c_int;
pub extern fn SDL_RenderDrawRect(renderer: ?*SDL_Renderer, rect: [*c]const SDL_Rect) c_int;
pub extern fn SDL_RenderDrawRects(renderer: ?*SDL_Renderer, rects: [*c]const SDL_Rect, count: c_int) c_int;
pub extern fn SDL_RenderFillRect(renderer: ?*SDL_Renderer, rect: [*c]const SDL_Rect) c_int;
pub extern fn SDL_RenderFillRects(renderer: ?*SDL_Renderer, rects: [*c]const SDL_Rect, count: c_int) c_int;
pub extern fn SDL_RenderCopy(renderer: ?*SDL_Renderer, texture: ?*SDL_Texture, srcrect: [*c]const SDL_Rect, dstrect: [*c]const SDL_Rect) c_int;
pub extern fn SDL_RenderCopyEx(renderer: ?*SDL_Renderer, texture: ?*SDL_Texture, srcrect: [*c]const SDL_Rect, dstrect: [*c]const SDL_Rect, angle: f64, center: [*c]const SDL_Point, flip: SDL_RendererFlip) c_int;
pub extern fn SDL_RenderDrawPointF(renderer: ?*SDL_Renderer, x: f32, y: f32) c_int;
pub extern fn SDL_RenderDrawPointsF(renderer: ?*SDL_Renderer, points: [*c]const SDL_FPoint, count: c_int) c_int;
pub extern fn SDL_RenderDrawLineF(renderer: ?*SDL_Renderer, x1: f32, y1: f32, x2: f32, y2: f32) c_int;
pub extern fn SDL_RenderDrawLinesF(renderer: ?*SDL_Renderer, points: [*c]const SDL_FPoint, count: c_int) c_int;
pub extern fn SDL_RenderDrawRectF(renderer: ?*SDL_Renderer, rect: [*c]const SDL_FRect) c_int;
pub extern fn SDL_RenderDrawRectsF(renderer: ?*SDL_Renderer, rects: [*c]const SDL_FRect, count: c_int) c_int;
pub extern fn SDL_RenderFillRectF(renderer: ?*SDL_Renderer, rect: [*c]const SDL_FRect) c_int;
pub extern fn SDL_RenderFillRectsF(renderer: ?*SDL_Renderer, rects: [*c]const SDL_FRect, count: c_int) c_int;
pub extern fn SDL_RenderCopyF(renderer: ?*SDL_Renderer, texture: ?*SDL_Texture, srcrect: [*c]const SDL_Rect, dstrect: [*c]const SDL_FRect) c_int;
pub extern fn SDL_RenderCopyExF(renderer: ?*SDL_Renderer, texture: ?*SDL_Texture, srcrect: [*c]const SDL_Rect, dstrect: [*c]const SDL_FRect, angle: f64, center: [*c]const SDL_FPoint, flip: SDL_RendererFlip) c_int;
pub extern fn SDL_RenderGeometry(renderer: ?*SDL_Renderer, texture: ?*SDL_Texture, vertices: [*c]const SDL_Vertex, num_vertices: c_int, indices: [*c]const c_int, num_indices: c_int) c_int;
pub extern fn SDL_RenderGeometryRaw(renderer: ?*SDL_Renderer, texture: ?*SDL_Texture, xy: [*c]const f32, xy_stride: c_int, color: [*c]const SDL_Color, color_stride: c_int, uv: [*c]const f32, uv_stride: c_int, num_vertices: c_int, indices: ?*const anyopaque, num_indices: c_int, size_indices: c_int) c_int;
pub extern fn SDL_RenderReadPixels(renderer: ?*SDL_Renderer, rect: [*c]const SDL_Rect, format: Uint32, pixels: ?*anyopaque, pitch: c_int) c_int;
pub extern fn SDL_RenderPresent(renderer: ?*SDL_Renderer) void;
pub extern fn SDL_DestroyTexture(texture: ?*SDL_Texture) void;
pub extern fn SDL_DestroyRenderer(renderer: ?*SDL_Renderer) void;
pub extern fn SDL_RenderFlush(renderer: ?*SDL_Renderer) c_int;
pub extern fn SDL_GL_BindTexture(texture: ?*SDL_Texture, texw: [*c]f32, texh: [*c]f32) c_int;
pub extern fn SDL_GL_UnbindTexture(texture: ?*SDL_Texture) c_int;
pub extern fn SDL_RenderGetMetalLayer(renderer: ?*SDL_Renderer) ?*anyopaque;
pub extern fn SDL_RenderGetMetalCommandEncoder(renderer: ?*SDL_Renderer) ?*anyopaque;
pub extern fn SDL_RenderSetVSync(renderer: ?*SDL_Renderer, vsync: c_int) c_int;
pub extern fn SDL_CreateShapedWindow(title: [*c]const u8, x: c_uint, y: c_uint, w: c_uint, h: c_uint, flags: Uint32) ?*SDL_Window;
pub extern fn SDL_IsShapedWindow(window: ?*const SDL_Window) SDL_bool;
pub const ShapeModeDefault: c_int = 0;
pub const ShapeModeBinarizeAlpha: c_int = 1;
pub const ShapeModeReverseBinarizeAlpha: c_int = 2;
pub const ShapeModeColorKey: c_int = 3;
pub const WindowShapeMode = c_uint;
pub const SDL_WindowShapeParams = extern union {
    binarizationCutoff: Uint8,
    colorKey: SDL_Color,
};
pub const struct_SDL_WindowShapeMode = extern struct {
    mode: WindowShapeMode = @import("std").mem.zeroes(WindowShapeMode),
    parameters: SDL_WindowShapeParams = @import("std").mem.zeroes(SDL_WindowShapeParams),
};
pub const SDL_WindowShapeMode = struct_SDL_WindowShapeMode;
pub extern fn SDL_SetWindowShape(window: ?*SDL_Window, shape: [*c]SDL_Surface, shape_mode: [*c]SDL_WindowShapeMode) c_int;
pub extern fn SDL_GetShapedWindowMode(window: ?*SDL_Window, shape_mode: [*c]SDL_WindowShapeMode) c_int;
pub extern fn SDL_LinuxSetThreadPriority(threadID: Sint64, priority: c_int) c_int;
pub extern fn SDL_LinuxSetThreadPriorityAndPolicy(threadID: Sint64, sdlPriority: c_int, schedPolicy: c_int) c_int;
pub extern fn SDL_IsTablet() SDL_bool;
pub extern fn SDL_OnApplicationWillTerminate() void;
pub extern fn SDL_OnApplicationDidReceiveMemoryWarning() void;
pub extern fn SDL_OnApplicationWillResignActive() void;
pub extern fn SDL_OnApplicationDidEnterBackground() void;
pub extern fn SDL_OnApplicationWillEnterForeground() void;
pub extern fn SDL_OnApplicationDidBecomeActive() void;
pub extern fn SDL_GetTicks() Uint32;
pub extern fn SDL_GetTicks64() Uint64;
pub extern fn SDL_GetPerformanceCounter() Uint64;
pub extern fn SDL_GetPerformanceFrequency() Uint64;
pub extern fn SDL_Delay(ms: Uint32) void;
pub const SDL_TimerCallback = ?*const fn (Uint32, ?*anyopaque) callconv(.C) Uint32;
pub const SDL_TimerID = c_int;
pub extern fn SDL_AddTimer(interval: Uint32, callback: SDL_TimerCallback, param: ?*anyopaque) SDL_TimerID;
pub extern fn SDL_RemoveTimer(id: SDL_TimerID) SDL_bool;
pub const struct_SDL_version = extern struct {
    major: Uint8 = @import("std").mem.zeroes(Uint8),
    minor: Uint8 = @import("std").mem.zeroes(Uint8),
    patch: Uint8 = @import("std").mem.zeroes(Uint8),
};
pub const SDL_version = struct_SDL_version;
pub extern fn SDL_GetVersion(ver: [*c]SDL_version) void;
pub extern fn SDL_GetRevision() [*c]const u8;
pub extern fn SDL_GetRevisionNumber() c_int;
pub const struct_SDL_Locale = extern struct {
    language: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    country: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const SDL_Locale = struct_SDL_Locale;
pub extern fn SDL_GetPreferredLocales() [*c]SDL_Locale;
pub extern fn SDL_OpenURL(url: [*c]const u8) c_int;
pub extern fn SDL_Init(flags: Uint32) c_int;
pub extern fn SDL_InitSubSystem(flags: Uint32) c_int;
pub extern fn SDL_QuitSubSystem(flags: Uint32) void;
pub extern fn SDL_WasInit(flags: Uint32) Uint32;
pub extern fn SDL_Quit() void;
pub const SDL_vulkanInstance = VkInstance;
pub const SDL_vulkanSurface = VkSurfaceKHR;
pub extern fn SDL_Vulkan_LoadLibrary(path: [*c]const u8) c_int;
pub extern fn SDL_Vulkan_GetVkGetInstanceProcAddr() ?*anyopaque;
pub extern fn SDL_Vulkan_UnloadLibrary() void;
pub extern fn SDL_Vulkan_GetInstanceExtensions(window: ?*SDL_Window, pCount: [*c]c_uint, pNames: [*c][*c]const u8) SDL_bool;
pub extern fn SDL_Vulkan_CreateSurface(window: ?*SDL_Window, instance: VkInstance, surface: [*c]VkSurfaceKHR) SDL_bool;
pub extern fn SDL_Vulkan_GetDrawableSize(window: ?*SDL_Window, w: [*c]c_int, h: [*c]c_int) void;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 18);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 8);
pub const __clang_version__ = "18.1.8 ";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 18.1.8";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):95:9
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):101:9
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_uint;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_long;
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):198:9
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):220:9
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulong;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):228:9
pub const __UINT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __INT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_long;
pub const __INT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_TYPE__ = c_ulong;
pub const __UINT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_long;
pub const __INT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_TYPE__ = c_ulong;
pub const __UINT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __GCC_DESTRUCTIVE_SIZE = @as(c_int, 64);
pub const __GCC_CONSTRUCTIVE_SIZE = @as(c_int, 64);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __ELF__ = @as(c_int, 1);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):362:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):363:9
pub const __k8 = @as(c_int, 1);
pub const __k8__ = @as(c_int, 1);
pub const __tune_k8__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __VAES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __VPCLMULQDQ__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __GFNI__ = @as(c_int, 1);
pub const __AVX512CD__ = @as(c_int, 1);
pub const __AVX512VPOPCNTDQ__ = @as(c_int, 1);
pub const __AVX512VNNI__ = @as(c_int, 1);
pub const __AVX512DQ__ = @as(c_int, 1);
pub const __AVX512BITALG__ = @as(c_int, 1);
pub const __AVX512BW__ = @as(c_int, 1);
pub const __AVX512VL__ = @as(c_int, 1);
pub const __EVEX256__ = @as(c_int, 1);
pub const __AVX512VBMI__ = @as(c_int, 1);
pub const __AVX512VBMI2__ = @as(c_int, 1);
pub const __AVX512IFMA__ = @as(c_int, 1);
pub const __AVX512VP2INTERSECT__ = @as(c_int, 1);
pub const __SHA__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __PKU__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __CLWB__ = @as(c_int, 1);
pub const __SHSTK__ = @as(c_int, 1);
pub const __RDPID__ = @as(c_int, 1);
pub const __MOVDIRI__ = @as(c_int, 1);
pub const __MOVDIR64B__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __AVX512F__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const unix = @as(c_int, 1);
pub const __unix = @as(c_int, 1);
pub const __unix__ = @as(c_int, 1);
pub const linux = @as(c_int, 1);
pub const __linux = @as(c_int, 1);
pub const __linux__ = @as(c_int, 1);
pub const __gnu_linux__ = @as(c_int, 1);
pub const __FLOAT128__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __GLIBC_MINOR__ = @as(c_int, 39);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const VK_NO_PROTOTYPES = "";
pub const VULKAN_H_ = @as(c_int, 1);
pub const VK_PLATFORM_H_ = "";
pub const VKAPI_ATTR = "";
pub const VKAPI_CALL = "";
pub const VKAPI_PTR = "";
pub const __STDDEF_H = "";
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_max_align_t = "";
pub const __need_offsetof = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /usr/lib/zig/include/__stddef_offsetof.h:16:9
pub const __CLANG_STDINT_H = "";
pub const _STDINT_H = @as(c_int, 1);
pub const __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION = "";
pub const _FEATURES_H = @as(c_int, 1);
pub const __KERNEL_STRICT_NAMES = "";
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub inline fn __glibc_clang_prereq(maj: anytype, min: anytype) @TypeOf(((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min);
}
pub const __GLIBC_USE = @compileError("unable to translate macro: undefined identifier `__GLIBC_USE_`");
// /usr/include/features.h:189:9
pub const _DEFAULT_SOURCE = @as(c_int, 1);
pub const __GLIBC_USE_ISOC23 = @as(c_int, 0);
pub const __USE_ISOC11 = @as(c_int, 1);
pub const __USE_ISOC99 = @as(c_int, 1);
pub const __USE_ISOC95 = @as(c_int, 1);
pub const __USE_POSIX_IMPLICITLY = @as(c_int, 1);
pub const _POSIX_SOURCE = @as(c_int, 1);
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const __USE_POSIX = @as(c_int, 1);
pub const __USE_POSIX2 = @as(c_int, 1);
pub const __USE_POSIX199309 = @as(c_int, 1);
pub const __USE_POSIX199506 = @as(c_int, 1);
pub const __USE_XOPEN2K = @as(c_int, 1);
pub const __USE_XOPEN2K8 = @as(c_int, 1);
pub const _ATFILE_SOURCE = @as(c_int, 1);
pub const __WORDSIZE = @as(c_int, 64);
pub const __WORDSIZE_TIME64_COMPAT32 = @as(c_int, 1);
pub const __SYSCALL_WORDSIZE = @as(c_int, 64);
pub const __TIMESIZE = __WORDSIZE;
pub const __USE_TIME_BITS64 = @as(c_int, 1);
pub const __USE_MISC = @as(c_int, 1);
pub const __USE_ATFILE = @as(c_int, 1);
pub const __USE_FORTIFY_LEVEL = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_GETS = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_SCANF = @as(c_int, 0);
pub const __GLIBC_USE_C23_STRTOL = @as(c_int, 0);
pub const _STDC_PREDEF_H = @as(c_int, 1);
pub const __STDC_IEC_559__ = @as(c_int, 1);
pub const __STDC_IEC_60559_BFP__ = @as(c_long, 201404);
pub const __STDC_IEC_559_COMPLEX__ = @as(c_int, 1);
pub const __STDC_IEC_60559_COMPLEX__ = @as(c_long, 201404);
pub const __STDC_ISO_10646__ = @as(c_long, 201706);
pub const __GNU_LIBRARY__ = @as(c_int, 6);
pub const __GLIBC__ = @as(c_int, 2);
pub inline fn __GLIBC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub const _SYS_CDEFS_H = @as(c_int, 1);
pub const __glibc_has_attribute = @compileError("unable to translate macro: undefined identifier `__has_attribute`");
// /usr/include/sys/cdefs.h:45:10
pub inline fn __glibc_has_builtin(name: anytype) @TypeOf(__has_builtin(name)) {
    _ = &name;
    return __has_builtin(name);
}
pub const __glibc_has_extension = @compileError("unable to translate macro: undefined identifier `__has_extension`");
// /usr/include/sys/cdefs.h:55:10
pub const __LEAF = "";
pub const __LEAF_ATTR = "";
pub const __THROW = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:79:11
pub const __THROWNL = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:80:11
pub const __NTH = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:81:11
pub const __NTHNL = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:82:11
pub const __COLD = @compileError("unable to translate macro: undefined identifier `__cold__`");
// /usr/include/sys/cdefs.h:102:11
pub inline fn __P(args: anytype) @TypeOf(args) {
    _ = &args;
    return args;
}
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    _ = &args;
    return args;
}
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token '##'");
// /usr/include/sys/cdefs.h:131:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token '#'");
// /usr/include/sys/cdefs.h:132:9
pub const __ptr_t = ?*anyopaque;
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub const __attribute_overloadable__ = @compileError("unable to translate macro: undefined identifier `__overloadable__`");
// /usr/include/sys/cdefs.h:151:10
pub inline fn __bos(ptr: anytype) @TypeOf(__builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1))) {
    _ = &ptr;
    return __builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1));
}
pub inline fn __bos0(ptr: anytype) @TypeOf(__builtin_object_size(ptr, @as(c_int, 0))) {
    _ = &ptr;
    return __builtin_object_size(ptr, @as(c_int, 0));
}
pub inline fn __glibc_objsize0(__o: anytype) @TypeOf(__bos0(__o)) {
    _ = &__o;
    return __bos0(__o);
}
pub inline fn __glibc_objsize(__o: anytype) @TypeOf(__bos(__o)) {
    _ = &__o;
    return __bos(__o);
}
pub const __warnattr = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:370:10
pub const __errordecl = @compileError("unable to translate C expr: unexpected token 'extern'");
// /usr/include/sys/cdefs.h:371:10
pub const __flexarr = @compileError("unable to translate C expr: unexpected token '['");
// /usr/include/sys/cdefs.h:379:10
pub const __glibc_c99_flexarr_available = @as(c_int, 1);
pub const __REDIRECT = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/sys/cdefs.h:410:10
pub const __REDIRECT_NTH = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/sys/cdefs.h:417:11
pub const __REDIRECT_NTHNL = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/sys/cdefs.h:419:11
pub const __ASMNAME = @compileError("unable to translate C expr: unexpected token ','");
// /usr/include/sys/cdefs.h:422:10
pub inline fn __ASMNAME2(prefix: anytype, cname: anytype) @TypeOf(__STRING(prefix) ++ cname) {
    _ = &prefix;
    _ = &cname;
    return __STRING(prefix) ++ cname;
}
pub const __REDIRECT_FORTIFY = __REDIRECT;
pub const __REDIRECT_FORTIFY_NTH = __REDIRECT_NTH;
pub const __attribute_malloc__ = @compileError("unable to translate macro: undefined identifier `__malloc__`");
// /usr/include/sys/cdefs.h:452:10
pub const __attribute_alloc_size__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:463:10
pub const __attribute_alloc_align__ = @compileError("unable to translate macro: undefined identifier `__alloc_align__`");
// /usr/include/sys/cdefs.h:469:10
pub const __attribute_pure__ = @compileError("unable to translate macro: undefined identifier `__pure__`");
// /usr/include/sys/cdefs.h:479:10
pub const __attribute_const__ = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// /usr/include/sys/cdefs.h:486:10
pub const __attribute_maybe_unused__ = @compileError("unable to translate macro: undefined identifier `__unused__`");
// /usr/include/sys/cdefs.h:492:10
pub const __attribute_used__ = @compileError("unable to translate macro: undefined identifier `__used__`");
// /usr/include/sys/cdefs.h:501:10
pub const __attribute_noinline__ = @compileError("unable to translate macro: undefined identifier `__noinline__`");
// /usr/include/sys/cdefs.h:502:10
pub const __attribute_deprecated__ = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /usr/include/sys/cdefs.h:510:10
pub const __attribute_deprecated_msg__ = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /usr/include/sys/cdefs.h:520:10
pub const __attribute_format_arg__ = @compileError("unable to translate macro: undefined identifier `__format_arg__`");
// /usr/include/sys/cdefs.h:533:10
pub const __attribute_format_strfmon__ = @compileError("unable to translate macro: undefined identifier `__format__`");
// /usr/include/sys/cdefs.h:543:10
pub const __attribute_nonnull__ = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /usr/include/sys/cdefs.h:555:11
pub inline fn __nonnull(params: anytype) @TypeOf(__attribute_nonnull__(params)) {
    _ = &params;
    return __attribute_nonnull__(params);
}
pub const __returns_nonnull = @compileError("unable to translate macro: undefined identifier `__returns_nonnull__`");
// /usr/include/sys/cdefs.h:568:10
pub const __attribute_warn_unused_result__ = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`");
// /usr/include/sys/cdefs.h:577:10
pub const __wur = "";
pub const __always_inline = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/include/sys/cdefs.h:595:10
pub const __attribute_artificial__ = @compileError("unable to translate macro: undefined identifier `__artificial__`");
// /usr/include/sys/cdefs.h:604:10
pub const __extern_inline = @compileError("unable to translate macro: undefined identifier `__gnu_inline__`");
// /usr/include/sys/cdefs.h:622:11
pub const __extern_always_inline = @compileError("unable to translate macro: undefined identifier `__gnu_inline__`");
// /usr/include/sys/cdefs.h:623:11
pub const __fortify_function = __extern_always_inline ++ __attribute_artificial__;
pub const __restrict_arr = @compileError("unable to translate C expr: unexpected token '__restrict'");
// /usr/include/sys/cdefs.h:666:10
pub inline fn __glibc_unlikely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 0))) {
    _ = &cond;
    return __builtin_expect(cond, @as(c_int, 0));
}
pub inline fn __glibc_likely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 1))) {
    _ = &cond;
    return __builtin_expect(cond, @as(c_int, 1));
}
pub const __attribute_nonstring__ = "";
pub const __attribute_copy__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:715:10
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = @as(c_int, 0);
pub inline fn __LDBL_REDIR1(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR(name: anytype, proto: anytype) @TypeOf(name ++ proto) {
    _ = &name;
    _ = &proto;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR1_NTH(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return name ++ proto ++ __THROW;
}
pub inline fn __LDBL_REDIR_NTH(name: anytype, proto: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = &name;
    _ = &proto;
    return name ++ proto ++ __THROW;
}
pub const __LDBL_REDIR2_DECL = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:792:10
pub const __LDBL_REDIR_DECL = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:793:10
pub inline fn __REDIRECT_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT(name, proto, alias)) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return __REDIRECT(name, proto, alias);
}
pub inline fn __REDIRECT_NTH_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT_NTH(name, proto, alias)) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return __REDIRECT_NTH(name, proto, alias);
}
pub const __glibc_macro_warning1 = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /usr/include/sys/cdefs.h:807:10
pub const __glibc_macro_warning = @compileError("unable to translate macro: undefined identifier `GCC`");
// /usr/include/sys/cdefs.h:808:10
pub const __HAVE_GENERIC_SELECTION = @as(c_int, 1);
pub const __fortified_attr_access = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:853:11
pub const __attr_access = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:854:11
pub const __attr_access_none = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:855:11
pub const __attr_dealloc = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:865:10
pub const __attr_dealloc_free = "";
pub const __attribute_returns_twice__ = @compileError("unable to translate macro: undefined identifier `__returns_twice__`");
// /usr/include/sys/cdefs.h:872:10
pub const __attribute_struct_may_alias__ = @compileError("unable to translate macro: undefined identifier `__may_alias__`");
// /usr/include/sys/cdefs.h:881:10
pub const __stub___compat_bdflush = "";
pub const __stub_chflags = "";
pub const __stub_fchflags = "";
pub const __stub_gtty = "";
pub const __stub_revoke = "";
pub const __stub_setlogin = "";
pub const __stub_sigreturn = "";
pub const __stub_stty = "";
pub const __GLIBC_USE_LIB_EXT2 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_TYPES_EXT = @as(c_int, 0);
pub const _BITS_TYPES_H = @as(c_int, 1);
pub const __S16_TYPE = c_short;
pub const __U16_TYPE = c_ushort;
pub const __S32_TYPE = c_int;
pub const __U32_TYPE = c_uint;
pub const __SLONGWORD_TYPE = c_long;
pub const __ULONGWORD_TYPE = c_ulong;
pub const __SQUAD_TYPE = c_long;
pub const __UQUAD_TYPE = c_ulong;
pub const __SWORD_TYPE = c_long;
pub const __UWORD_TYPE = c_ulong;
pub const __SLONG32_TYPE = c_int;
pub const __ULONG32_TYPE = c_uint;
pub const __S64_TYPE = c_long;
pub const __U64_TYPE = c_ulong;
pub const __STD_TYPE = @compileError("unable to translate C expr: unexpected token 'typedef'");
// /usr/include/bits/types.h:137:10
pub const _BITS_TYPESIZES_H = @as(c_int, 1);
pub const __SYSCALL_SLONG_TYPE = __SLONGWORD_TYPE;
pub const __SYSCALL_ULONG_TYPE = __ULONGWORD_TYPE;
pub const __DEV_T_TYPE = __UQUAD_TYPE;
pub const __UID_T_TYPE = __U32_TYPE;
pub const __GID_T_TYPE = __U32_TYPE;
pub const __INO_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __INO64_T_TYPE = __UQUAD_TYPE;
pub const __MODE_T_TYPE = __U32_TYPE;
pub const __NLINK_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSWORD_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF64_T_TYPE = __SQUAD_TYPE;
pub const __PID_T_TYPE = __S32_TYPE;
pub const __RLIM_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __RLIM64_T_TYPE = __UQUAD_TYPE;
pub const __BLKCNT_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __BLKCNT64_T_TYPE = __SQUAD_TYPE;
pub const __FSBLKCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;
pub const __FSFILCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSFILCNT64_T_TYPE = __UQUAD_TYPE;
pub const __ID_T_TYPE = __U32_TYPE;
pub const __CLOCK_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __TIME_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __USECONDS_T_TYPE = __U32_TYPE;
pub const __SUSECONDS_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SUSECONDS64_T_TYPE = __SQUAD_TYPE;
pub const __DADDR_T_TYPE = __S32_TYPE;
pub const __KEY_T_TYPE = __S32_TYPE;
pub const __CLOCKID_T_TYPE = __S32_TYPE;
pub const __TIMER_T_TYPE = ?*anyopaque;
pub const __BLKSIZE_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __FSID_T_TYPE = @compileError("unable to translate macro: undefined identifier `__val`");
// /usr/include/bits/typesizes.h:73:9
pub const __SSIZE_T_TYPE = __SWORD_TYPE;
pub const __CPU_MASK_TYPE = __SYSCALL_ULONG_TYPE;
pub const __OFF_T_MATCHES_OFF64_T = @as(c_int, 1);
pub const __INO_T_MATCHES_INO64_T = @as(c_int, 1);
pub const __RLIM_T_MATCHES_RLIM64_T = @as(c_int, 1);
pub const __STATFS_MATCHES_STATFS64 = @as(c_int, 1);
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = @as(c_int, 1);
pub const __FD_SETSIZE = @as(c_int, 1024);
pub const _BITS_TIME64_H = @as(c_int, 1);
pub const __TIME64_T_TYPE = __TIME_T_TYPE;
pub const _BITS_WCHAR_H = @as(c_int, 1);
pub const __WCHAR_MAX = __WCHAR_MAX__;
pub const __WCHAR_MIN = -__WCHAR_MAX - @as(c_int, 1);
pub const _BITS_STDINT_INTN_H = @as(c_int, 1);
pub const _BITS_STDINT_UINTN_H = @as(c_int, 1);
pub const _BITS_STDINT_LEAST_H = @as(c_int, 1);
pub const __intptr_t_defined = "";
pub const __INT64_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const __UINT64_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INT8_MIN = -@as(c_int, 128);
pub const INT16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT8_MAX = @as(c_int, 127);
pub const INT16_MAX = @as(c_int, 32767);
pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT8_MAX = @as(c_int, 255);
pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_LEAST8_MIN = -@as(c_int, 128);
pub const INT_LEAST16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT_LEAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT_LEAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_LEAST8_MAX = @as(c_int, 127);
pub const INT_LEAST16_MAX = @as(c_int, 32767);
pub const INT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT_LEAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_LEAST8_MAX = @as(c_int, 255);
pub const UINT_LEAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT_LEAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_FAST8_MIN = -@as(c_int, 128);
pub const INT_FAST16_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_FAST8_MAX = @as(c_int, 127);
pub const INT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_FAST8_MAX = @as(c_int, 255);
pub const UINT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INTPTR_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const UINTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const INTMAX_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INTMAX_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINTMAX_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const PTRDIFF_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const PTRDIFF_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const SIG_ATOMIC_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const SIG_ATOMIC_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const WCHAR_MIN = __WCHAR_MIN;
pub const WCHAR_MAX = __WCHAR_MAX;
pub const WINT_MIN = @as(c_uint, 0);
pub const WINT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub inline fn INT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT32_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const INT64_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub inline fn UINT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn UINT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const UINT64_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INTMAX_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const UINTMAX_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const VULKAN_CORE_H_ = @as(c_int, 1);
pub const VK_VERSION_1_0 = @as(c_int, 1);
pub const VK_DEFINE_HANDLE = @compileError("unable to translate macro: untranslatable usage of arg `object`");
// /usr/include/vulkan/vulkan_core.h:26:9
pub const VK_USE_64_BIT_PTR_DEFINES = @as(c_int, 1);
pub const VK_NULL_HANDLE = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const VK_DEFINE_NON_DISPATCHABLE_HANDLE = @compileError("unable to translate macro: untranslatable usage of arg `object`");
// /usr/include/vulkan/vulkan_core.h:56:17
pub inline fn VK_MAKE_API_VERSION(variant: anytype, major: anytype, minor: anytype, patch: anytype) @TypeOf((((@import("std").zig.c_translation.cast(u32, variant) << @as(c_uint, 29)) | (@import("std").zig.c_translation.cast(u32, major) << @as(c_uint, 22))) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_uint, 12))) | @import("std").zig.c_translation.cast(u32, patch)) {
    _ = &variant;
    _ = &major;
    _ = &minor;
    _ = &patch;
    return (((@import("std").zig.c_translation.cast(u32, variant) << @as(c_uint, 29)) | (@import("std").zig.c_translation.cast(u32, major) << @as(c_uint, 22))) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_uint, 12))) | @import("std").zig.c_translation.cast(u32, patch);
}
pub const VK_API_VERSION_1_0 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_HEADER_VERSION = @as(c_int, 303);
pub const VK_HEADER_VERSION_COMPLETE = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 4), VK_HEADER_VERSION);
pub inline fn VK_MAKE_VERSION(major: anytype, minor: anytype, patch: anytype) @TypeOf(((@import("std").zig.c_translation.cast(u32, major) << @as(c_uint, 22)) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_uint, 12))) | @import("std").zig.c_translation.cast(u32, patch)) {
    _ = &major;
    _ = &minor;
    _ = &patch;
    return ((@import("std").zig.c_translation.cast(u32, major) << @as(c_uint, 22)) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_uint, 12))) | @import("std").zig.c_translation.cast(u32, patch);
}
pub inline fn VK_VERSION_MAJOR(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 22)) {
    _ = &version;
    return @import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 22);
}
pub inline fn VK_VERSION_MINOR(version: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 12)) & @as(c_uint, 0x3FF)) {
    _ = &version;
    return (@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 12)) & @as(c_uint, 0x3FF);
}
pub inline fn VK_VERSION_PATCH(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF)) {
    _ = &version;
    return @import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF);
}
pub inline fn VK_API_VERSION_VARIANT(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 29)) {
    _ = &version;
    return @import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 29);
}
pub inline fn VK_API_VERSION_MAJOR(version: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 22)) & @as(c_uint, 0x7F)) {
    _ = &version;
    return (@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 22)) & @as(c_uint, 0x7F);
}
pub inline fn VK_API_VERSION_MINOR(version: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 12)) & @as(c_uint, 0x3FF)) {
    _ = &version;
    return (@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 12)) & @as(c_uint, 0x3FF);
}
pub inline fn VK_API_VERSION_PATCH(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF)) {
    _ = &version;
    return @import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF);
}
pub const VK_ATTACHMENT_UNUSED = ~@as(c_uint, 0);
pub const VK_FALSE = @as(c_uint, 0);
pub const VK_LOD_CLAMP_NONE = @as(f32, 1000.0);
pub const VK_QUEUE_FAMILY_IGNORED = ~@as(c_uint, 0);
pub const VK_REMAINING_ARRAY_LAYERS = ~@as(c_uint, 0);
pub const VK_REMAINING_MIP_LEVELS = ~@as(c_uint, 0);
pub const VK_SUBPASS_EXTERNAL = ~@as(c_uint, 0);
pub const VK_TRUE = @as(c_uint, 1);
pub const VK_WHOLE_SIZE = ~@as(c_ulonglong, 0);
pub const VK_MAX_MEMORY_TYPES = @as(c_uint, 32);
pub const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = @as(c_uint, 256);
pub const VK_UUID_SIZE = @as(c_uint, 16);
pub const VK_MAX_EXTENSION_NAME_SIZE = @as(c_uint, 256);
pub const VK_MAX_DESCRIPTION_SIZE = @as(c_uint, 256);
pub const VK_MAX_MEMORY_HEAPS = @as(c_uint, 16);
pub const VK_VERSION_1_1 = @as(c_int, 1);
pub const VK_API_VERSION_1_1 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 1), @as(c_int, 0));
pub const VK_MAX_DEVICE_GROUP_SIZE = @as(c_uint, 32);
pub const VK_LUID_SIZE = @as(c_uint, 8);
pub const VK_QUEUE_FAMILY_EXTERNAL = ~@as(c_uint, 1);
pub const VK_VERSION_1_2 = @as(c_int, 1);
pub const VK_API_VERSION_1_2 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 2), @as(c_int, 0));
pub const VK_MAX_DRIVER_NAME_SIZE = @as(c_uint, 256);
pub const VK_MAX_DRIVER_INFO_SIZE = @as(c_uint, 256);
pub const VK_VERSION_1_3 = @as(c_int, 1);
pub const VK_API_VERSION_1_3 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 3), @as(c_int, 0));
pub const VK_VERSION_1_4 = @as(c_int, 1);
pub const VK_API_VERSION_1_4 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 4), @as(c_int, 0));
pub const VK_MAX_GLOBAL_PRIORITY_SIZE = @as(c_uint, 16);
pub const VK_KHR_surface = @as(c_int, 1);
pub const VK_KHR_SURFACE_SPEC_VERSION = @as(c_int, 25);
pub const VK_KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface";
pub const VK_KHR_swapchain = @as(c_int, 1);
pub const VK_KHR_SWAPCHAIN_SPEC_VERSION = @as(c_int, 70);
pub const VK_KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain";
pub const VK_KHR_display = @as(c_int, 1);
pub const VK_KHR_DISPLAY_SPEC_VERSION = @as(c_int, 23);
pub const VK_KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display";
pub const VK_KHR_display_swapchain = @as(c_int, 1);
pub const VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = @as(c_int, 10);
pub const VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain";
pub const VK_KHR_sampler_mirror_clamp_to_edge = @as(c_int, 1);
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = @as(c_int, 3);
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge";
pub const VK_KHR_video_queue = @as(c_int, 1);
pub const VK_KHR_VIDEO_QUEUE_SPEC_VERSION = @as(c_int, 8);
pub const VK_KHR_VIDEO_QUEUE_EXTENSION_NAME = "VK_KHR_video_queue";
pub const VK_KHR_video_decode_queue = @as(c_int, 1);
pub const VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION = @as(c_int, 8);
pub const VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME = "VK_KHR_video_decode_queue";
pub const VK_KHR_video_encode_h264 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_H264STD_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h264std = @as(c_int, 1);
pub const VULKAN_VIDEO_CODECS_COMMON_H_ = @as(c_int, 1);
pub const vulkan_video_codecs_common = @as(c_int, 1);
pub inline fn VK_MAKE_VIDEO_STD_VERSION(major: anytype, minor: anytype, patch: anytype) @TypeOf(((@import("std").zig.c_translation.cast(u32, major) << @as(c_int, 22)) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_int, 12))) | @import("std").zig.c_translation.cast(u32, patch)) {
    _ = &major;
    _ = &minor;
    _ = &patch;
    return ((@import("std").zig.c_translation.cast(u32, major) << @as(c_int, 22)) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_int, 12))) | @import("std").zig.c_translation.cast(u32, patch);
}
pub const STD_VIDEO_H264_CPB_CNT_LIST_SIZE = @as(c_int, 32);
pub const STD_VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS = @as(c_int, 6);
pub const STD_VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS = @as(c_int, 16);
pub const STD_VIDEO_H264_SCALING_LIST_8X8_NUM_LISTS = @as(c_int, 6);
pub const STD_VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS = @as(c_int, 64);
pub const STD_VIDEO_H264_MAX_NUM_LIST_REF = @as(c_int, 32);
pub const STD_VIDEO_H264_MAX_CHROMA_PLANES = @as(c_int, 2);
pub const STD_VIDEO_H264_NO_REFERENCE_PICTURE = @as(c_int, 0xFF);
pub const VULKAN_VIDEO_CODEC_H264STD_ENCODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h264std_encode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h264_encode";
pub const VK_KHR_VIDEO_ENCODE_H264_SPEC_VERSION = @as(c_int, 14);
pub const VK_KHR_VIDEO_ENCODE_H264_EXTENSION_NAME = "VK_KHR_video_encode_h264";
pub const VK_KHR_video_encode_h265 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_H265STD_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h265std = @as(c_int, 1);
pub const STD_VIDEO_H265_CPB_CNT_LIST_SIZE = @as(c_int, 32);
pub const STD_VIDEO_H265_SUBLAYERS_LIST_SIZE = @as(c_int, 7);
pub const STD_VIDEO_H265_SCALING_LIST_4X4_NUM_LISTS = @as(c_int, 6);
pub const STD_VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS = @as(c_int, 16);
pub const STD_VIDEO_H265_SCALING_LIST_8X8_NUM_LISTS = @as(c_int, 6);
pub const STD_VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS = @as(c_int, 64);
pub const STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS = @as(c_int, 6);
pub const STD_VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS = @as(c_int, 64);
pub const STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS = @as(c_int, 2);
pub const STD_VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS = @as(c_int, 64);
pub const STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE = @as(c_int, 6);
pub const STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_COLS_LIST_SIZE = @as(c_int, 19);
pub const STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_ROWS_LIST_SIZE = @as(c_int, 21);
pub const STD_VIDEO_H265_PREDICTOR_PALETTE_COMPONENTS_LIST_SIZE = @as(c_int, 3);
pub const STD_VIDEO_H265_PREDICTOR_PALETTE_COMP_ENTRIES_LIST_SIZE = @as(c_int, 128);
pub const STD_VIDEO_H265_MAX_NUM_LIST_REF = @as(c_int, 15);
pub const STD_VIDEO_H265_MAX_CHROMA_PLANES = @as(c_int, 2);
pub const STD_VIDEO_H265_MAX_SHORT_TERM_REF_PIC_SETS = @as(c_int, 64);
pub const STD_VIDEO_H265_MAX_DPB_SIZE = @as(c_int, 16);
pub const STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS = @as(c_int, 32);
pub const STD_VIDEO_H265_MAX_LONG_TERM_PICS = @as(c_int, 16);
pub const STD_VIDEO_H265_MAX_DELTA_POC = @as(c_int, 48);
pub const STD_VIDEO_H265_NO_REFERENCE_PICTURE = @as(c_int, 0xFF);
pub const VULKAN_VIDEO_CODEC_H265STD_ENCODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h265std_encode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h265_encode";
pub const VK_KHR_VIDEO_ENCODE_H265_SPEC_VERSION = @as(c_int, 14);
pub const VK_KHR_VIDEO_ENCODE_H265_EXTENSION_NAME = "VK_KHR_video_encode_h265";
pub const VK_KHR_video_decode_h264 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_H264STD_DECODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h264std_decode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h264_decode";
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE = @as(c_int, 2);
pub const VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION = @as(c_int, 9);
pub const VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME = "VK_KHR_video_decode_h264";
pub const VK_KHR_dynamic_rendering = @as(c_int, 1);
pub const VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME = "VK_KHR_dynamic_rendering";
pub const VK_KHR_multiview = @as(c_int, 1);
pub const VK_KHR_MULTIVIEW_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MULTIVIEW_EXTENSION_NAME = "VK_KHR_multiview";
pub const VK_KHR_get_physical_device_properties2 = @as(c_int, 1);
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_physical_device_properties2";
pub const VK_KHR_device_group = @as(c_int, 1);
pub const VK_KHR_DEVICE_GROUP_SPEC_VERSION = @as(c_int, 4);
pub const VK_KHR_DEVICE_GROUP_EXTENSION_NAME = "VK_KHR_device_group";
pub const VK_KHR_shader_draw_parameters = @as(c_int, 1);
pub const VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = "VK_KHR_shader_draw_parameters";
pub const VK_KHR_maintenance1 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_maintenance1";
pub const VK_KHR_MAINTENANCE1_SPEC_VERSION = VK_KHR_MAINTENANCE_1_SPEC_VERSION;
pub const VK_KHR_MAINTENANCE1_EXTENSION_NAME = VK_KHR_MAINTENANCE_1_EXTENSION_NAME;
pub const VK_KHR_device_group_creation = @as(c_int, 1);
pub const VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME = "VK_KHR_device_group_creation";
pub const VK_MAX_DEVICE_GROUP_SIZE_KHR = VK_MAX_DEVICE_GROUP_SIZE;
pub const VK_KHR_external_memory_capabilities = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_memory_capabilities";
pub const VK_LUID_SIZE_KHR = VK_LUID_SIZE;
pub const VK_KHR_external_memory = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_KHR_external_memory";
pub const VK_QUEUE_FAMILY_EXTERNAL_KHR = VK_QUEUE_FAMILY_EXTERNAL;
pub const VK_KHR_external_memory_fd = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME = "VK_KHR_external_memory_fd";
pub const VK_KHR_external_semaphore_capabilities = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_semaphore_capabilities";
pub const VK_KHR_external_semaphore = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_KHR_external_semaphore";
pub const VK_KHR_external_semaphore_fd = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = "VK_KHR_external_semaphore_fd";
pub const VK_KHR_push_descriptor = @as(c_int, 1);
pub const VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = "VK_KHR_push_descriptor";
pub const VK_KHR_shader_float16_int8 = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME = "VK_KHR_shader_float16_int8";
pub const VK_KHR_16bit_storage = @as(c_int, 1);
pub const VK_KHR_16BIT_STORAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_16BIT_STORAGE_EXTENSION_NAME = "VK_KHR_16bit_storage";
pub const VK_KHR_incremental_present = @as(c_int, 1);
pub const VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = "VK_KHR_incremental_present";
pub const VK_KHR_descriptor_update_template = @as(c_int, 1);
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = "VK_KHR_descriptor_update_template";
pub const VK_KHR_imageless_framebuffer = @as(c_int, 1);
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME = "VK_KHR_imageless_framebuffer";
pub const VK_KHR_create_renderpass2 = @as(c_int, 1);
pub const VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME = "VK_KHR_create_renderpass2";
pub const VK_KHR_shared_presentable_image = @as(c_int, 1);
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = "VK_KHR_shared_presentable_image";
pub const VK_KHR_external_fence_capabilities = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_fence_capabilities";
pub const VK_KHR_external_fence = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME = "VK_KHR_external_fence";
pub const VK_KHR_external_fence_fd = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME = "VK_KHR_external_fence_fd";
pub const VK_KHR_performance_query = @as(c_int, 1);
pub const VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_KHR_performance_query";
pub const VK_KHR_maintenance2 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_2_EXTENSION_NAME = "VK_KHR_maintenance2";
pub const VK_KHR_MAINTENANCE2_SPEC_VERSION = VK_KHR_MAINTENANCE_2_SPEC_VERSION;
pub const VK_KHR_MAINTENANCE2_EXTENSION_NAME = VK_KHR_MAINTENANCE_2_EXTENSION_NAME;
pub const VK_KHR_get_surface_capabilities2 = @as(c_int, 1);
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = "VK_KHR_get_surface_capabilities2";
pub const VK_KHR_variable_pointers = @as(c_int, 1);
pub const VK_KHR_VARIABLE_POINTERS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME = "VK_KHR_variable_pointers";
pub const VK_KHR_get_display_properties2 = @as(c_int, 1);
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_display_properties2";
pub const VK_KHR_dedicated_allocation = @as(c_int, 1);
pub const VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION = @as(c_int, 3);
pub const VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_KHR_dedicated_allocation";
pub const VK_KHR_storage_buffer_storage_class = @as(c_int, 1);
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME = "VK_KHR_storage_buffer_storage_class";
pub const VK_KHR_relaxed_block_layout = @as(c_int, 1);
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME = "VK_KHR_relaxed_block_layout";
pub const VK_KHR_get_memory_requirements2 = @as(c_int, 1);
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME = "VK_KHR_get_memory_requirements2";
pub const VK_KHR_image_format_list = @as(c_int, 1);
pub const VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME = "VK_KHR_image_format_list";
pub const VK_KHR_sampler_ycbcr_conversion = @as(c_int, 1);
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION = @as(c_int, 14);
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME = "VK_KHR_sampler_ycbcr_conversion";
pub const VK_KHR_bind_memory2 = @as(c_int, 1);
pub const VK_KHR_BIND_MEMORY_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_BIND_MEMORY_2_EXTENSION_NAME = "VK_KHR_bind_memory2";
pub const VK_KHR_maintenance3 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_3_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_3_EXTENSION_NAME = "VK_KHR_maintenance3";
pub const VK_KHR_MAINTENANCE3_SPEC_VERSION = VK_KHR_MAINTENANCE_3_SPEC_VERSION;
pub const VK_KHR_MAINTENANCE3_EXTENSION_NAME = VK_KHR_MAINTENANCE_3_EXTENSION_NAME;
pub const VK_KHR_draw_indirect_count = @as(c_int, 1);
pub const VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_KHR_draw_indirect_count";
pub const VK_KHR_shader_subgroup_extended_types = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME = "VK_KHR_shader_subgroup_extended_types";
pub const VK_KHR_8bit_storage = @as(c_int, 1);
pub const VK_KHR_8BIT_STORAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_8BIT_STORAGE_EXTENSION_NAME = "VK_KHR_8bit_storage";
pub const VK_KHR_shader_atomic_int64 = @as(c_int, 1);
pub const VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME = "VK_KHR_shader_atomic_int64";
pub const VK_KHR_shader_clock = @as(c_int, 1);
pub const VK_KHR_SHADER_CLOCK_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_CLOCK_EXTENSION_NAME = "VK_KHR_shader_clock";
pub const VK_KHR_video_decode_h265 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_H265STD_DECODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h265std_decode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h265_decode";
pub const STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE = @as(c_int, 8);
pub const VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION = @as(c_int, 8);
pub const VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME = "VK_KHR_video_decode_h265";
pub const VK_KHR_global_priority = @as(c_int, 1);
pub const VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_KHR_global_priority";
pub const VK_MAX_GLOBAL_PRIORITY_SIZE_KHR = VK_MAX_GLOBAL_PRIORITY_SIZE;
pub const VK_KHR_driver_properties = @as(c_int, 1);
pub const VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME = "VK_KHR_driver_properties";
pub const VK_MAX_DRIVER_NAME_SIZE_KHR = VK_MAX_DRIVER_NAME_SIZE;
pub const VK_MAX_DRIVER_INFO_SIZE_KHR = VK_MAX_DRIVER_INFO_SIZE;
pub const VK_KHR_shader_float_controls = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION = @as(c_int, 4);
pub const VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME = "VK_KHR_shader_float_controls";
pub const VK_KHR_depth_stencil_resolve = @as(c_int, 1);
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME = "VK_KHR_depth_stencil_resolve";
pub const VK_KHR_swapchain_mutable_format = @as(c_int, 1);
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME = "VK_KHR_swapchain_mutable_format";
pub const VK_KHR_timeline_semaphore = @as(c_int, 1);
pub const VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME = "VK_KHR_timeline_semaphore";
pub const VK_KHR_vulkan_memory_model = @as(c_int, 1);
pub const VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION = @as(c_int, 3);
pub const VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME = "VK_KHR_vulkan_memory_model";
pub const VK_KHR_shader_terminate_invocation = @as(c_int, 1);
pub const VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME = "VK_KHR_shader_terminate_invocation";
pub const VK_KHR_fragment_shading_rate = @as(c_int, 1);
pub const VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME = "VK_KHR_fragment_shading_rate";
pub const VK_KHR_dynamic_rendering_local_read = @as(c_int, 1);
pub const VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_EXTENSION_NAME = "VK_KHR_dynamic_rendering_local_read";
pub const VK_KHR_shader_quad_control = @as(c_int, 1);
pub const VK_KHR_SHADER_QUAD_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_QUAD_CONTROL_EXTENSION_NAME = "VK_KHR_shader_quad_control";
pub const VK_KHR_spirv_1_4 = @as(c_int, 1);
pub const VK_KHR_SPIRV_1_4_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SPIRV_1_4_EXTENSION_NAME = "VK_KHR_spirv_1_4";
pub const VK_KHR_surface_protected_capabilities = @as(c_int, 1);
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME = "VK_KHR_surface_protected_capabilities";
pub const VK_KHR_separate_depth_stencil_layouts = @as(c_int, 1);
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME = "VK_KHR_separate_depth_stencil_layouts";
pub const VK_KHR_present_wait = @as(c_int, 1);
pub const VK_KHR_PRESENT_WAIT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PRESENT_WAIT_EXTENSION_NAME = "VK_KHR_present_wait";
pub const VK_KHR_uniform_buffer_standard_layout = @as(c_int, 1);
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME = "VK_KHR_uniform_buffer_standard_layout";
pub const VK_KHR_buffer_device_address = @as(c_int, 1);
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_KHR_buffer_device_address";
pub const VK_KHR_deferred_host_operations = @as(c_int, 1);
pub const VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION = @as(c_int, 4);
pub const VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME = "VK_KHR_deferred_host_operations";
pub const VK_KHR_pipeline_executable_properties = @as(c_int, 1);
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME = "VK_KHR_pipeline_executable_properties";
pub const VK_KHR_map_memory2 = @as(c_int, 1);
pub const VK_KHR_MAP_MEMORY_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAP_MEMORY_2_EXTENSION_NAME = "VK_KHR_map_memory2";
pub const VK_KHR_shader_integer_dot_product = @as(c_int, 1);
pub const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME = "VK_KHR_shader_integer_dot_product";
pub const VK_KHR_pipeline_library = @as(c_int, 1);
pub const VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_KHR_pipeline_library";
pub const VK_KHR_shader_non_semantic_info = @as(c_int, 1);
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME = "VK_KHR_shader_non_semantic_info";
pub const VK_KHR_present_id = @as(c_int, 1);
pub const VK_KHR_PRESENT_ID_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PRESENT_ID_EXTENSION_NAME = "VK_KHR_present_id";
pub const VK_KHR_video_encode_queue = @as(c_int, 1);
pub const VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION = @as(c_int, 12);
pub const VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME = "VK_KHR_video_encode_queue";
pub const VK_KHR_synchronization2 = @as(c_int, 1);
pub const VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME = "VK_KHR_synchronization2";
pub const VK_KHR_fragment_shader_barycentric = @as(c_int, 1);
pub const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_KHR_fragment_shader_barycentric";
pub const VK_KHR_shader_subgroup_uniform_control_flow = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME = "VK_KHR_shader_subgroup_uniform_control_flow";
pub const VK_KHR_zero_initialize_workgroup_memory = @as(c_int, 1);
pub const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME = "VK_KHR_zero_initialize_workgroup_memory";
pub const VK_KHR_workgroup_memory_explicit_layout = @as(c_int, 1);
pub const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME = "VK_KHR_workgroup_memory_explicit_layout";
pub const VK_KHR_copy_commands2 = @as(c_int, 1);
pub const VK_KHR_COPY_COMMANDS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME = "VK_KHR_copy_commands2";
pub const VK_KHR_format_feature_flags2 = @as(c_int, 1);
pub const VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME = "VK_KHR_format_feature_flags2";
pub const VK_KHR_ray_tracing_maintenance1 = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_ray_tracing_maintenance1";
pub const VK_KHR_portability_enumeration = @as(c_int, 1);
pub const VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME = "VK_KHR_portability_enumeration";
pub const VK_KHR_maintenance4 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_4_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_MAINTENANCE_4_EXTENSION_NAME = "VK_KHR_maintenance4";
pub const VK_KHR_shader_subgroup_rotate = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_ROTATE_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_SHADER_SUBGROUP_ROTATE_EXTENSION_NAME = "VK_KHR_shader_subgroup_rotate";
pub const VK_KHR_shader_maximal_reconvergence = @as(c_int, 1);
pub const VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_EXTENSION_NAME = "VK_KHR_shader_maximal_reconvergence";
pub const VK_KHR_maintenance5 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_5_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_5_EXTENSION_NAME = "VK_KHR_maintenance5";
pub const VK_KHR_ray_tracing_position_fetch = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME = "VK_KHR_ray_tracing_position_fetch";
pub const VK_KHR_pipeline_binary = @as(c_int, 1);
pub const VK_MAX_PIPELINE_BINARY_KEY_SIZE_KHR = @as(c_uint, 32);
pub const VK_KHR_PIPELINE_BINARY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PIPELINE_BINARY_EXTENSION_NAME = "VK_KHR_pipeline_binary";
pub const VK_KHR_cooperative_matrix = @as(c_int, 1);
pub const VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_KHR_cooperative_matrix";
pub const VK_KHR_compute_shader_derivatives = @as(c_int, 1);
pub const VK_KHR_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_KHR_compute_shader_derivatives";
pub const VK_KHR_video_decode_av1 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_AV1STD_H_ = @as(c_int, 1);
pub const vulkan_video_codec_av1std = @as(c_int, 1);
pub const STD_VIDEO_AV1_NUM_REF_FRAMES = @as(c_int, 8);
pub const STD_VIDEO_AV1_REFS_PER_FRAME = @as(c_int, 7);
pub const STD_VIDEO_AV1_TOTAL_REFS_PER_FRAME = @as(c_int, 8);
pub const STD_VIDEO_AV1_MAX_TILE_COLS = @as(c_int, 64);
pub const STD_VIDEO_AV1_MAX_TILE_ROWS = @as(c_int, 64);
pub const STD_VIDEO_AV1_MAX_SEGMENTS = @as(c_int, 8);
pub const STD_VIDEO_AV1_SEG_LVL_MAX = @as(c_int, 8);
pub const STD_VIDEO_AV1_PRIMARY_REF_NONE = @as(c_int, 7);
pub const STD_VIDEO_AV1_SELECT_INTEGER_MV = @as(c_int, 2);
pub const STD_VIDEO_AV1_SELECT_SCREEN_CONTENT_TOOLS = @as(c_int, 2);
pub const STD_VIDEO_AV1_SKIP_MODE_FRAMES = @as(c_int, 2);
pub const STD_VIDEO_AV1_MAX_LOOP_FILTER_STRENGTHS = @as(c_int, 4);
pub const STD_VIDEO_AV1_LOOP_FILTER_ADJUSTMENTS = @as(c_int, 2);
pub const STD_VIDEO_AV1_MAX_CDEF_FILTER_STRENGTHS = @as(c_int, 8);
pub const STD_VIDEO_AV1_MAX_NUM_PLANES = @as(c_int, 3);
pub const STD_VIDEO_AV1_GLOBAL_MOTION_PARAMS = @as(c_int, 6);
pub const STD_VIDEO_AV1_MAX_NUM_Y_POINTS = @as(c_int, 14);
pub const STD_VIDEO_AV1_MAX_NUM_CB_POINTS = @as(c_int, 10);
pub const STD_VIDEO_AV1_MAX_NUM_CR_POINTS = @as(c_int, 10);
pub const STD_VIDEO_AV1_MAX_NUM_POS_LUMA = @as(c_int, 24);
pub const STD_VIDEO_AV1_MAX_NUM_POS_CHROMA = @as(c_int, 25);
pub const VULKAN_VIDEO_CODEC_AV1STD_DECODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_av1std_decode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_av1_decode";
pub const VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR = @as(c_uint, 7);
pub const VK_KHR_VIDEO_DECODE_AV1_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_VIDEO_DECODE_AV1_EXTENSION_NAME = "VK_KHR_video_decode_av1";
pub const VK_KHR_video_encode_av1 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_AV1STD_ENCODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_av1std_encode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_AV1_ENCODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_AV1_ENCODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_AV1_ENCODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_AV1_ENCODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_av1_encode";
pub const VK_KHR_VIDEO_ENCODE_AV1_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_VIDEO_ENCODE_AV1_EXTENSION_NAME = "VK_KHR_video_encode_av1";
pub const VK_KHR_video_maintenance1 = @as(c_int, 1);
pub const VK_KHR_VIDEO_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_VIDEO_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_video_maintenance1";
pub const VK_KHR_vertex_attribute_divisor = @as(c_int, 1);
pub const VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_KHR_vertex_attribute_divisor";
pub const VK_KHR_load_store_op_none = @as(c_int, 1);
pub const VK_KHR_LOAD_STORE_OP_NONE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_LOAD_STORE_OP_NONE_EXTENSION_NAME = "VK_KHR_load_store_op_none";
pub const VK_KHR_shader_float_controls2 = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT_CONTROLS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT_CONTROLS_2_EXTENSION_NAME = "VK_KHR_shader_float_controls2";
pub const VK_KHR_index_type_uint8 = @as(c_int, 1);
pub const VK_KHR_INDEX_TYPE_UINT8_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_KHR_index_type_uint8";
pub const VK_KHR_line_rasterization = @as(c_int, 1);
pub const VK_KHR_LINE_RASTERIZATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME = "VK_KHR_line_rasterization";
pub const VK_KHR_calibrated_timestamps = @as(c_int, 1);
pub const VK_KHR_CALIBRATED_TIMESTAMPS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_KHR_calibrated_timestamps";
pub const VK_KHR_shader_expect_assume = @as(c_int, 1);
pub const VK_KHR_SHADER_EXPECT_ASSUME_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_EXPECT_ASSUME_EXTENSION_NAME = "VK_KHR_shader_expect_assume";
pub const VK_KHR_maintenance6 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_6_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_6_EXTENSION_NAME = "VK_KHR_maintenance6";
pub const VK_KHR_video_encode_quantization_map = @as(c_int, 1);
pub const VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_EXTENSION_NAME = "VK_KHR_video_encode_quantization_map";
pub const VK_KHR_shader_relaxed_extended_instruction = @as(c_int, 1);
pub const VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_EXTENSION_NAME = "VK_KHR_shader_relaxed_extended_instruction";
pub const VK_KHR_maintenance7 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_7_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_7_EXTENSION_NAME = "VK_KHR_maintenance7";
pub const VK_EXT_debug_report = @as(c_int, 1);
pub const VK_EXT_DEBUG_REPORT_SPEC_VERSION = @as(c_int, 10);
pub const VK_EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report";
pub const VK_NV_glsl_shader = @as(c_int, 1);
pub const VK_NV_GLSL_SHADER_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader";
pub const VK_EXT_depth_range_unrestricted = @as(c_int, 1);
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME = "VK_EXT_depth_range_unrestricted";
pub const VK_IMG_filter_cubic = @as(c_int, 1);
pub const VK_IMG_FILTER_CUBIC_SPEC_VERSION = @as(c_int, 1);
pub const VK_IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic";
pub const VK_AMD_rasterization_order = @as(c_int, 1);
pub const VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order";
pub const VK_AMD_shader_trinary_minmax = @as(c_int, 1);
pub const VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = "VK_AMD_shader_trinary_minmax";
pub const VK_AMD_shader_explicit_vertex_parameter = @as(c_int, 1);
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = "VK_AMD_shader_explicit_vertex_parameter";
pub const VK_EXT_debug_marker = @as(c_int, 1);
pub const VK_EXT_DEBUG_MARKER_SPEC_VERSION = @as(c_int, 4);
pub const VK_EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker";
pub const VK_AMD_gcn_shader = @as(c_int, 1);
pub const VK_AMD_GCN_SHADER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_GCN_SHADER_EXTENSION_NAME = "VK_AMD_gcn_shader";
pub const VK_NV_dedicated_allocation = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_NV_dedicated_allocation";
pub const VK_EXT_transform_feedback = @as(c_int, 1);
pub const VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME = "VK_EXT_transform_feedback";
pub const VK_NVX_binary_import = @as(c_int, 1);
pub const VK_NVX_BINARY_IMPORT_SPEC_VERSION = @as(c_int, 2);
pub const VK_NVX_BINARY_IMPORT_EXTENSION_NAME = "VK_NVX_binary_import";
pub const VK_NVX_image_view_handle = @as(c_int, 1);
pub const VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION = @as(c_int, 3);
pub const VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME = "VK_NVX_image_view_handle";
pub const VK_AMD_draw_indirect_count = @as(c_int, 1);
pub const VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_AMD_draw_indirect_count";
pub const VK_AMD_negative_viewport_height = @as(c_int, 1);
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = "VK_AMD_negative_viewport_height";
pub const VK_AMD_gpu_shader_half_float = @as(c_int, 1);
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = "VK_AMD_gpu_shader_half_float";
pub const VK_AMD_shader_ballot = @as(c_int, 1);
pub const VK_AMD_SHADER_BALLOT_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_BALLOT_EXTENSION_NAME = "VK_AMD_shader_ballot";
pub const VK_AMD_texture_gather_bias_lod = @as(c_int, 1);
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME = "VK_AMD_texture_gather_bias_lod";
pub const VK_AMD_shader_info = @as(c_int, 1);
pub const VK_AMD_SHADER_INFO_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_INFO_EXTENSION_NAME = "VK_AMD_shader_info";
pub const VK_AMD_shader_image_load_store_lod = @as(c_int, 1);
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME = "VK_AMD_shader_image_load_store_lod";
pub const VK_NV_corner_sampled_image = @as(c_int, 1);
pub const VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME = "VK_NV_corner_sampled_image";
pub const VK_IMG_format_pvrtc = @as(c_int, 1);
pub const VK_IMG_FORMAT_PVRTC_SPEC_VERSION = @as(c_int, 1);
pub const VK_IMG_FORMAT_PVRTC_EXTENSION_NAME = "VK_IMG_format_pvrtc";
pub const VK_NV_external_memory_capabilities = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_NV_external_memory_capabilities";
pub const VK_NV_external_memory = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_NV_external_memory";
pub const VK_EXT_validation_flags = @as(c_int, 1);
pub const VK_EXT_VALIDATION_FLAGS_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME = "VK_EXT_validation_flags";
pub const VK_EXT_shader_subgroup_ballot = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = "VK_EXT_shader_subgroup_ballot";
pub const VK_EXT_shader_subgroup_vote = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = "VK_EXT_shader_subgroup_vote";
pub const VK_EXT_texture_compression_astc_hdr = @as(c_int, 1);
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME = "VK_EXT_texture_compression_astc_hdr";
pub const VK_EXT_astc_decode_mode = @as(c_int, 1);
pub const VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME = "VK_EXT_astc_decode_mode";
pub const VK_EXT_pipeline_robustness = @as(c_int, 1);
pub const VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_pipeline_robustness";
pub const VK_EXT_conditional_rendering = @as(c_int, 1);
pub const VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME = "VK_EXT_conditional_rendering";
pub const VK_NV_clip_space_w_scaling = @as(c_int, 1);
pub const VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = "VK_NV_clip_space_w_scaling";
pub const VK_EXT_direct_mode_display = @as(c_int, 1);
pub const VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = "VK_EXT_direct_mode_display";
pub const VK_EXT_display_surface_counter = @as(c_int, 1);
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = "VK_EXT_display_surface_counter";
pub const VK_EXT_display_control = @as(c_int, 1);
pub const VK_EXT_DISPLAY_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME = "VK_EXT_display_control";
pub const VK_GOOGLE_display_timing = @as(c_int, 1);
pub const VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = "VK_GOOGLE_display_timing";
pub const VK_NV_sample_mask_override_coverage = @as(c_int, 1);
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = "VK_NV_sample_mask_override_coverage";
pub const VK_NV_geometry_shader_passthrough = @as(c_int, 1);
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = "VK_NV_geometry_shader_passthrough";
pub const VK_NV_viewport_array2 = @as(c_int, 1);
pub const VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME = "VK_NV_viewport_array2";
pub const VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION = VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION;
pub const VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME = VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME;
pub const VK_NVX_multiview_per_view_attributes = @as(c_int, 1);
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = "VK_NVX_multiview_per_view_attributes";
pub const VK_NV_viewport_swizzle = @as(c_int, 1);
pub const VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = "VK_NV_viewport_swizzle";
pub const VK_EXT_discard_rectangles = @as(c_int, 1);
pub const VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME = "VK_EXT_discard_rectangles";
pub const VK_EXT_conservative_rasterization = @as(c_int, 1);
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_conservative_rasterization";
pub const VK_EXT_depth_clip_enable = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME = "VK_EXT_depth_clip_enable";
pub const VK_EXT_swapchain_colorspace = @as(c_int, 1);
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION = @as(c_int, 5);
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = "VK_EXT_swapchain_colorspace";
pub const VK_EXT_hdr_metadata = @as(c_int, 1);
pub const VK_EXT_HDR_METADATA_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_HDR_METADATA_EXTENSION_NAME = "VK_EXT_hdr_metadata";
pub const VK_IMG_relaxed_line_rasterization = @as(c_int, 1);
pub const VK_IMG_RELAXED_LINE_RASTERIZATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_IMG_RELAXED_LINE_RASTERIZATION_EXTENSION_NAME = "VK_IMG_relaxed_line_rasterization";
pub const VK_EXT_external_memory_dma_buf = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME = "VK_EXT_external_memory_dma_buf";
pub const VK_EXT_queue_family_foreign = @as(c_int, 1);
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME = "VK_EXT_queue_family_foreign";
pub const VK_QUEUE_FAMILY_FOREIGN_EXT = ~@as(c_uint, 2);
pub const VK_EXT_debug_utils = @as(c_int, 1);
pub const VK_EXT_DEBUG_UTILS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DEBUG_UTILS_EXTENSION_NAME = "VK_EXT_debug_utils";
pub const VK_EXT_sampler_filter_minmax = @as(c_int, 1);
pub const VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME = "VK_EXT_sampler_filter_minmax";
pub const VK_AMD_gpu_shader_int16 = @as(c_int, 1);
pub const VK_AMD_GPU_SHADER_INT16_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME = "VK_AMD_gpu_shader_int16";
pub const VK_AMD_mixed_attachment_samples = @as(c_int, 1);
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME = "VK_AMD_mixed_attachment_samples";
pub const VK_AMD_shader_fragment_mask = @as(c_int, 1);
pub const VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME = "VK_AMD_shader_fragment_mask";
pub const VK_EXT_inline_uniform_block = @as(c_int, 1);
pub const VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME = "VK_EXT_inline_uniform_block";
pub const VK_EXT_shader_stencil_export = @as(c_int, 1);
pub const VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME = "VK_EXT_shader_stencil_export";
pub const VK_EXT_sample_locations = @as(c_int, 1);
pub const VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME = "VK_EXT_sample_locations";
pub const VK_EXT_blend_operation_advanced = @as(c_int, 1);
pub const VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME = "VK_EXT_blend_operation_advanced";
pub const VK_NV_fragment_coverage_to_color = @as(c_int, 1);
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME = "VK_NV_fragment_coverage_to_color";
pub const VK_NV_framebuffer_mixed_samples = @as(c_int, 1);
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME = "VK_NV_framebuffer_mixed_samples";
pub const VK_NV_fill_rectangle = @as(c_int, 1);
pub const VK_NV_FILL_RECTANGLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FILL_RECTANGLE_EXTENSION_NAME = "VK_NV_fill_rectangle";
pub const VK_NV_shader_sm_builtins = @as(c_int, 1);
pub const VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME = "VK_NV_shader_sm_builtins";
pub const VK_EXT_post_depth_coverage = @as(c_int, 1);
pub const VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME = "VK_EXT_post_depth_coverage";
pub const VK_EXT_image_drm_format_modifier = @as(c_int, 1);
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME = "VK_EXT_image_drm_format_modifier";
pub const VK_EXT_validation_cache = @as(c_int, 1);
pub const VK_EXT_VALIDATION_CACHE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_VALIDATION_CACHE_EXTENSION_NAME = "VK_EXT_validation_cache";
pub const VK_EXT_descriptor_indexing = @as(c_int, 1);
pub const VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME = "VK_EXT_descriptor_indexing";
pub const VK_EXT_shader_viewport_index_layer = @as(c_int, 1);
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME = "VK_EXT_shader_viewport_index_layer";
pub const VK_NV_shading_rate_image = @as(c_int, 1);
pub const VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION = @as(c_int, 3);
pub const VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME = "VK_NV_shading_rate_image";
pub const VK_NV_ray_tracing = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_SPEC_VERSION = @as(c_int, 3);
pub const VK_NV_RAY_TRACING_EXTENSION_NAME = "VK_NV_ray_tracing";
pub const VK_SHADER_UNUSED_KHR = ~@as(c_uint, 0);
pub const VK_SHADER_UNUSED_NV = VK_SHADER_UNUSED_KHR;
pub const VK_NV_representative_fragment_test = @as(c_int, 1);
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME = "VK_NV_representative_fragment_test";
pub const VK_EXT_filter_cubic = @as(c_int, 1);
pub const VK_EXT_FILTER_CUBIC_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_FILTER_CUBIC_EXTENSION_NAME = "VK_EXT_filter_cubic";
pub const VK_QCOM_render_pass_shader_resolve = @as(c_int, 1);
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION = @as(c_int, 4);
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME = "VK_QCOM_render_pass_shader_resolve";
pub const VK_EXT_global_priority = @as(c_int, 1);
pub const VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_EXT_global_priority";
pub const VK_EXT_external_memory_host = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME = "VK_EXT_external_memory_host";
pub const VK_AMD_buffer_marker = @as(c_int, 1);
pub const VK_AMD_BUFFER_MARKER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_BUFFER_MARKER_EXTENSION_NAME = "VK_AMD_buffer_marker";
pub const VK_AMD_pipeline_compiler_control = @as(c_int, 1);
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME = "VK_AMD_pipeline_compiler_control";
pub const VK_EXT_calibrated_timestamps = @as(c_int, 1);
pub const VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_EXT_calibrated_timestamps";
pub const VK_AMD_shader_core_properties = @as(c_int, 1);
pub const VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_AMD_shader_core_properties";
pub const VK_AMD_memory_overallocation_behavior = @as(c_int, 1);
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME = "VK_AMD_memory_overallocation_behavior";
pub const VK_EXT_vertex_attribute_divisor = @as(c_int, 1);
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_EXT_vertex_attribute_divisor";
pub const VK_EXT_pipeline_creation_feedback = @as(c_int, 1);
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME = "VK_EXT_pipeline_creation_feedback";
pub const VK_NV_shader_subgroup_partitioned = @as(c_int, 1);
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME = "VK_NV_shader_subgroup_partitioned";
pub const VK_NV_compute_shader_derivatives = @as(c_int, 1);
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_NV_compute_shader_derivatives";
pub const VK_NV_mesh_shader = @as(c_int, 1);
pub const VK_NV_MESH_SHADER_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_MESH_SHADER_EXTENSION_NAME = "VK_NV_mesh_shader";
pub const VK_NV_fragment_shader_barycentric = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_NV_fragment_shader_barycentric";
pub const VK_NV_shader_image_footprint = @as(c_int, 1);
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME = "VK_NV_shader_image_footprint";
pub const VK_NV_scissor_exclusive = @as(c_int, 1);
pub const VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME = "VK_NV_scissor_exclusive";
pub const VK_NV_device_diagnostic_checkpoints = @as(c_int, 1);
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME = "VK_NV_device_diagnostic_checkpoints";
pub const VK_INTEL_shader_integer_functions2 = @as(c_int, 1);
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME = "VK_INTEL_shader_integer_functions2";
pub const VK_INTEL_performance_query = @as(c_int, 1);
pub const VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION = @as(c_int, 2);
pub const VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_INTEL_performance_query";
pub const VK_EXT_pci_bus_info = @as(c_int, 1);
pub const VK_EXT_PCI_BUS_INFO_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_PCI_BUS_INFO_EXTENSION_NAME = "VK_EXT_pci_bus_info";
pub const VK_AMD_display_native_hdr = @as(c_int, 1);
pub const VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME = "VK_AMD_display_native_hdr";
pub const VK_EXT_fragment_density_map = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME = "VK_EXT_fragment_density_map";
pub const VK_EXT_scalar_block_layout = @as(c_int, 1);
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME = "VK_EXT_scalar_block_layout";
pub const VK_GOOGLE_hlsl_functionality1 = @as(c_int, 1);
pub const VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1";
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION = VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME = VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME;
pub const VK_GOOGLE_decorate_string = @as(c_int, 1);
pub const VK_GOOGLE_DECORATE_STRING_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME = "VK_GOOGLE_decorate_string";
pub const VK_EXT_subgroup_size_control = @as(c_int, 1);
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME = "VK_EXT_subgroup_size_control";
pub const VK_AMD_shader_core_properties2 = @as(c_int, 1);
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME = "VK_AMD_shader_core_properties2";
pub const VK_AMD_device_coherent_memory = @as(c_int, 1);
pub const VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME = "VK_AMD_device_coherent_memory";
pub const VK_EXT_shader_image_atomic_int64 = @as(c_int, 1);
pub const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME = "VK_EXT_shader_image_atomic_int64";
pub const VK_EXT_memory_budget = @as(c_int, 1);
pub const VK_EXT_MEMORY_BUDGET_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MEMORY_BUDGET_EXTENSION_NAME = "VK_EXT_memory_budget";
pub const VK_EXT_memory_priority = @as(c_int, 1);
pub const VK_EXT_MEMORY_PRIORITY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME = "VK_EXT_memory_priority";
pub const VK_NV_dedicated_allocation_image_aliasing = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME = "VK_NV_dedicated_allocation_image_aliasing";
pub const VK_EXT_buffer_device_address = @as(c_int, 1);
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_EXT_buffer_device_address";
pub const VK_EXT_tooling_info = @as(c_int, 1);
pub const VK_EXT_TOOLING_INFO_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TOOLING_INFO_EXTENSION_NAME = "VK_EXT_tooling_info";
pub const VK_EXT_separate_stencil_usage = @as(c_int, 1);
pub const VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME = "VK_EXT_separate_stencil_usage";
pub const VK_EXT_validation_features = @as(c_int, 1);
pub const VK_EXT_VALIDATION_FEATURES_SPEC_VERSION = @as(c_int, 6);
pub const VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME = "VK_EXT_validation_features";
pub const VK_NV_cooperative_matrix = @as(c_int, 1);
pub const VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_NV_cooperative_matrix";
pub const VK_NV_coverage_reduction_mode = @as(c_int, 1);
pub const VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME = "VK_NV_coverage_reduction_mode";
pub const VK_EXT_fragment_shader_interlock = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME = "VK_EXT_fragment_shader_interlock";
pub const VK_EXT_ycbcr_image_arrays = @as(c_int, 1);
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME = "VK_EXT_ycbcr_image_arrays";
pub const VK_EXT_provoking_vertex = @as(c_int, 1);
pub const VK_EXT_PROVOKING_VERTEX_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME = "VK_EXT_provoking_vertex";
pub const VK_EXT_headless_surface = @as(c_int, 1);
pub const VK_EXT_HEADLESS_SURFACE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME = "VK_EXT_headless_surface";
pub const VK_EXT_line_rasterization = @as(c_int, 1);
pub const VK_EXT_LINE_RASTERIZATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_line_rasterization";
pub const VK_EXT_shader_atomic_float = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME = "VK_EXT_shader_atomic_float";
pub const VK_EXT_host_query_reset = @as(c_int, 1);
pub const VK_EXT_HOST_QUERY_RESET_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME = "VK_EXT_host_query_reset";
pub const VK_EXT_index_type_uint8 = @as(c_int, 1);
pub const VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_EXT_index_type_uint8";
pub const VK_EXT_extended_dynamic_state = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_extended_dynamic_state";
pub const VK_EXT_host_image_copy = @as(c_int, 1);
pub const VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME = "VK_EXT_host_image_copy";
pub const VK_EXT_map_memory_placed = @as(c_int, 1);
pub const VK_EXT_MAP_MEMORY_PLACED_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MAP_MEMORY_PLACED_EXTENSION_NAME = "VK_EXT_map_memory_placed";
pub const VK_EXT_shader_atomic_float2 = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME = "VK_EXT_shader_atomic_float2";
pub const VK_EXT_surface_maintenance1 = @as(c_int, 1);
pub const VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME = "VK_EXT_surface_maintenance1";
pub const VK_EXT_swapchain_maintenance1 = @as(c_int, 1);
pub const VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME = "VK_EXT_swapchain_maintenance1";
pub const VK_EXT_shader_demote_to_helper_invocation = @as(c_int, 1);
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME = "VK_EXT_shader_demote_to_helper_invocation";
pub const VK_NV_device_generated_commands = @as(c_int, 1);
pub const VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = @as(c_int, 3);
pub const VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NV_device_generated_commands";
pub const VK_NV_inherited_viewport_scissor = @as(c_int, 1);
pub const VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME = "VK_NV_inherited_viewport_scissor";
pub const VK_EXT_texel_buffer_alignment = @as(c_int, 1);
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME = "VK_EXT_texel_buffer_alignment";
pub const VK_QCOM_render_pass_transform = @as(c_int, 1);
pub const VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION = @as(c_int, 4);
pub const VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME = "VK_QCOM_render_pass_transform";
pub const VK_EXT_depth_bias_control = @as(c_int, 1);
pub const VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME = "VK_EXT_depth_bias_control";
pub const VK_EXT_device_memory_report = @as(c_int, 1);
pub const VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME = "VK_EXT_device_memory_report";
pub const VK_EXT_acquire_drm_display = @as(c_int, 1);
pub const VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME = "VK_EXT_acquire_drm_display";
pub const VK_EXT_robustness2 = @as(c_int, 1);
pub const VK_EXT_ROBUSTNESS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_ROBUSTNESS_2_EXTENSION_NAME = "VK_EXT_robustness2";
pub const VK_EXT_custom_border_color = @as(c_int, 1);
pub const VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION = @as(c_int, 12);
pub const VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME = "VK_EXT_custom_border_color";
pub const VK_GOOGLE_user_type = @as(c_int, 1);
pub const VK_GOOGLE_USER_TYPE_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_USER_TYPE_EXTENSION_NAME = "VK_GOOGLE_user_type";
pub const VK_NV_present_barrier = @as(c_int, 1);
pub const VK_NV_PRESENT_BARRIER_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_PRESENT_BARRIER_EXTENSION_NAME = "VK_NV_present_barrier";
pub const VK_EXT_private_data = @as(c_int, 1);
pub const VK_EXT_PRIVATE_DATA_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PRIVATE_DATA_EXTENSION_NAME = "VK_EXT_private_data";
pub const VK_EXT_pipeline_creation_cache_control = @as(c_int, 1);
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME = "VK_EXT_pipeline_creation_cache_control";
pub const VK_NV_device_diagnostics_config = @as(c_int, 1);
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME = "VK_NV_device_diagnostics_config";
pub const VK_QCOM_render_pass_store_ops = @as(c_int, 1);
pub const VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION = @as(c_int, 2);
pub const VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME = "VK_QCOM_render_pass_store_ops";
pub const VK_NV_cuda_kernel_launch = @as(c_int, 1);
pub const VK_NV_CUDA_KERNEL_LAUNCH_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_CUDA_KERNEL_LAUNCH_EXTENSION_NAME = "VK_NV_cuda_kernel_launch";
pub const VK_NV_low_latency = @as(c_int, 1);
pub const VK_NV_LOW_LATENCY_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_LOW_LATENCY_EXTENSION_NAME = "VK_NV_low_latency";
pub const VK_EXT_descriptor_buffer = @as(c_int, 1);
pub const VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME = "VK_EXT_descriptor_buffer";
pub const VK_EXT_graphics_pipeline_library = @as(c_int, 1);
pub const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_EXT_graphics_pipeline_library";
pub const VK_AMD_shader_early_and_late_fragment_tests = @as(c_int, 1);
pub const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME = "VK_AMD_shader_early_and_late_fragment_tests";
pub const VK_NV_fragment_shading_rate_enums = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME = "VK_NV_fragment_shading_rate_enums";
pub const VK_NV_ray_tracing_motion_blur = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME = "VK_NV_ray_tracing_motion_blur";
pub const VK_EXT_ycbcr_2plane_444_formats = @as(c_int, 1);
pub const VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME = "VK_EXT_ycbcr_2plane_444_formats";
pub const VK_EXT_fragment_density_map2 = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME = "VK_EXT_fragment_density_map2";
pub const VK_QCOM_rotated_copy_commands = @as(c_int, 1);
pub const VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION = @as(c_int, 2);
pub const VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME = "VK_QCOM_rotated_copy_commands";
pub const VK_EXT_image_robustness = @as(c_int, 1);
pub const VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_image_robustness";
pub const VK_EXT_image_compression_control = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME = "VK_EXT_image_compression_control";
pub const VK_EXT_attachment_feedback_loop_layout = @as(c_int, 1);
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME = "VK_EXT_attachment_feedback_loop_layout";
pub const VK_EXT_4444_formats = @as(c_int, 1);
pub const VK_EXT_4444_FORMATS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_4444_FORMATS_EXTENSION_NAME = "VK_EXT_4444_formats";
pub const VK_EXT_device_fault = @as(c_int, 1);
pub const VK_EXT_DEVICE_FAULT_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DEVICE_FAULT_EXTENSION_NAME = "VK_EXT_device_fault";
pub const VK_ARM_rasterization_order_attachment_access = @as(c_int, 1);
pub const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_ARM_rasterization_order_attachment_access";
pub const VK_EXT_rgba10x6_formats = @as(c_int, 1);
pub const VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME = "VK_EXT_rgba10x6_formats";
pub const VK_VALVE_mutable_descriptor_type = @as(c_int, 1);
pub const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = @as(c_int, 1);
pub const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_VALVE_mutable_descriptor_type";
pub const VK_EXT_vertex_input_dynamic_state = @as(c_int, 1);
pub const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_vertex_input_dynamic_state";
pub const VK_EXT_physical_device_drm = @as(c_int, 1);
pub const VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME = "VK_EXT_physical_device_drm";
pub const VK_EXT_device_address_binding_report = @as(c_int, 1);
pub const VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME = "VK_EXT_device_address_binding_report";
pub const VK_EXT_depth_clip_control = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME = "VK_EXT_depth_clip_control";
pub const VK_EXT_primitive_topology_list_restart = @as(c_int, 1);
pub const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME = "VK_EXT_primitive_topology_list_restart";
pub const VK_EXT_present_mode_fifo_latest_ready = @as(c_int, 1);
pub const VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_EXTENSION_NAME = "VK_EXT_present_mode_fifo_latest_ready";
pub const VK_HUAWEI_subpass_shading = @as(c_int, 1);
pub const VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION = @as(c_int, 3);
pub const VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME = "VK_HUAWEI_subpass_shading";
pub const VK_HUAWEI_invocation_mask = @as(c_int, 1);
pub const VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION = @as(c_int, 1);
pub const VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME = "VK_HUAWEI_invocation_mask";
pub const VK_NV_external_memory_rdma = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME = "VK_NV_external_memory_rdma";
pub const VK_EXT_pipeline_properties = @as(c_int, 1);
pub const VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME = "VK_EXT_pipeline_properties";
pub const VK_EXT_frame_boundary = @as(c_int, 1);
pub const VK_EXT_FRAME_BOUNDARY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_FRAME_BOUNDARY_EXTENSION_NAME = "VK_EXT_frame_boundary";
pub const VK_EXT_multisampled_render_to_single_sampled = @as(c_int, 1);
pub const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME = "VK_EXT_multisampled_render_to_single_sampled";
pub const VK_EXT_extended_dynamic_state2 = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME = "VK_EXT_extended_dynamic_state2";
pub const VK_EXT_color_write_enable = @as(c_int, 1);
pub const VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME = "VK_EXT_color_write_enable";
pub const VK_EXT_primitives_generated_query = @as(c_int, 1);
pub const VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME = "VK_EXT_primitives_generated_query";
pub const VK_EXT_global_priority_query = @as(c_int, 1);
pub const VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME = "VK_EXT_global_priority_query";
pub const VK_MAX_GLOBAL_PRIORITY_SIZE_EXT = VK_MAX_GLOBAL_PRIORITY_SIZE;
pub const VK_EXT_image_view_min_lod = @as(c_int, 1);
pub const VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME = "VK_EXT_image_view_min_lod";
pub const VK_EXT_multi_draw = @as(c_int, 1);
pub const VK_EXT_MULTI_DRAW_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MULTI_DRAW_EXTENSION_NAME = "VK_EXT_multi_draw";
pub const VK_EXT_image_2d_view_of_3d = @as(c_int, 1);
pub const VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME = "VK_EXT_image_2d_view_of_3d";
pub const VK_EXT_shader_tile_image = @as(c_int, 1);
pub const VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME = "VK_EXT_shader_tile_image";
pub const VK_EXT_opacity_micromap = @as(c_int, 1);
pub const VK_EXT_OPACITY_MICROMAP_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME = "VK_EXT_opacity_micromap";
pub const VK_EXT_load_store_op_none = @as(c_int, 1);
pub const VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME = "VK_EXT_load_store_op_none";
pub const VK_HUAWEI_cluster_culling_shader = @as(c_int, 1);
pub const VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION = @as(c_int, 3);
pub const VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME = "VK_HUAWEI_cluster_culling_shader";
pub const VK_EXT_border_color_swizzle = @as(c_int, 1);
pub const VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME = "VK_EXT_border_color_swizzle";
pub const VK_EXT_pageable_device_local_memory = @as(c_int, 1);
pub const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME = "VK_EXT_pageable_device_local_memory";
pub const VK_ARM_shader_core_properties = @as(c_int, 1);
pub const VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_ARM_shader_core_properties";
pub const VK_ARM_scheduling_controls = @as(c_int, 1);
pub const VK_ARM_SCHEDULING_CONTROLS_SPEC_VERSION = @as(c_int, 1);
pub const VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME = "VK_ARM_scheduling_controls";
pub const VK_EXT_image_sliced_view_of_3d = @as(c_int, 1);
pub const VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME = "VK_EXT_image_sliced_view_of_3d";
pub const VK_REMAINING_3D_SLICES_EXT = ~@as(c_uint, 0);
pub const VK_VALVE_descriptor_set_host_mapping = @as(c_int, 1);
pub const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION = @as(c_int, 1);
pub const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME = "VK_VALVE_descriptor_set_host_mapping";
pub const VK_EXT_depth_clamp_zero_one = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME = "VK_EXT_depth_clamp_zero_one";
pub const VK_EXT_non_seamless_cube_map = @as(c_int, 1);
pub const VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME = "VK_EXT_non_seamless_cube_map";
pub const VK_ARM_render_pass_striped = @as(c_int, 1);
pub const VK_ARM_RENDER_PASS_STRIPED_SPEC_VERSION = @as(c_int, 1);
pub const VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME = "VK_ARM_render_pass_striped";
pub const VK_QCOM_fragment_density_map_offset = @as(c_int, 1);
pub const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION = @as(c_int, 2);
pub const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME = "VK_QCOM_fragment_density_map_offset";
pub const VK_NV_copy_memory_indirect = @as(c_int, 1);
pub const VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME = "VK_NV_copy_memory_indirect";
pub const VK_NV_memory_decompression = @as(c_int, 1);
pub const VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME = "VK_NV_memory_decompression";
pub const VK_NV_device_generated_commands_compute = @as(c_int, 1);
pub const VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME = "VK_NV_device_generated_commands_compute";
pub const VK_NV_linear_color_attachment = @as(c_int, 1);
pub const VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME = "VK_NV_linear_color_attachment";
pub const VK_GOOGLE_surfaceless_query = @as(c_int, 1);
pub const VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION = @as(c_int, 2);
pub const VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME = "VK_GOOGLE_surfaceless_query";
pub const VK_EXT_image_compression_control_swapchain = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME = "VK_EXT_image_compression_control_swapchain";
pub const VK_QCOM_image_processing = @as(c_int, 1);
pub const VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME = "VK_QCOM_image_processing";
pub const VK_EXT_nested_command_buffer = @as(c_int, 1);
pub const VK_EXT_NESTED_COMMAND_BUFFER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME = "VK_EXT_nested_command_buffer";
pub const VK_EXT_external_memory_acquire_unmodified = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME = "VK_EXT_external_memory_acquire_unmodified";
pub const VK_EXT_extended_dynamic_state3 = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME = "VK_EXT_extended_dynamic_state3";
pub const VK_EXT_subpass_merge_feedback = @as(c_int, 1);
pub const VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME = "VK_EXT_subpass_merge_feedback";
pub const VK_LUNARG_direct_driver_loading = @as(c_int, 1);
pub const VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION = @as(c_int, 1);
pub const VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME = "VK_LUNARG_direct_driver_loading";
pub const VK_EXT_shader_module_identifier = @as(c_int, 1);
pub const VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT = @as(c_uint, 32);
pub const VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME = "VK_EXT_shader_module_identifier";
pub const VK_EXT_rasterization_order_attachment_access = @as(c_int, 1);
pub const VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_EXT_rasterization_order_attachment_access";
pub const VK_NV_optical_flow = @as(c_int, 1);
pub const VK_NV_OPTICAL_FLOW_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_OPTICAL_FLOW_EXTENSION_NAME = "VK_NV_optical_flow";
pub const VK_EXT_legacy_dithering = @as(c_int, 1);
pub const VK_EXT_LEGACY_DITHERING_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_LEGACY_DITHERING_EXTENSION_NAME = "VK_EXT_legacy_dithering";
pub const VK_EXT_pipeline_protected_access = @as(c_int, 1);
pub const VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME = "VK_EXT_pipeline_protected_access";
pub const VK_AMD_anti_lag = @as(c_int, 1);
pub const VK_AMD_ANTI_LAG_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_ANTI_LAG_EXTENSION_NAME = "VK_AMD_anti_lag";
pub const VK_EXT_shader_object = @as(c_int, 1);
pub const VK_EXT_SHADER_OBJECT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_OBJECT_EXTENSION_NAME = "VK_EXT_shader_object";
pub const VK_QCOM_tile_properties = @as(c_int, 1);
pub const VK_QCOM_TILE_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME = "VK_QCOM_tile_properties";
pub const VK_SEC_amigo_profiling = @as(c_int, 1);
pub const VK_SEC_AMIGO_PROFILING_SPEC_VERSION = @as(c_int, 1);
pub const VK_SEC_AMIGO_PROFILING_EXTENSION_NAME = "VK_SEC_amigo_profiling";
pub const VK_QCOM_multiview_per_view_viewports = @as(c_int, 1);
pub const VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME = "VK_QCOM_multiview_per_view_viewports";
pub const VK_NV_ray_tracing_invocation_reorder = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME = "VK_NV_ray_tracing_invocation_reorder";
pub const VK_NV_extended_sparse_address_space = @as(c_int, 1);
pub const VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME = "VK_NV_extended_sparse_address_space";
pub const VK_EXT_mutable_descriptor_type = @as(c_int, 1);
pub const VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_EXT_mutable_descriptor_type";
pub const VK_EXT_legacy_vertex_attributes = @as(c_int, 1);
pub const VK_EXT_LEGACY_VERTEX_ATTRIBUTES_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_LEGACY_VERTEX_ATTRIBUTES_EXTENSION_NAME = "VK_EXT_legacy_vertex_attributes";
pub const VK_EXT_layer_settings = @as(c_int, 1);
pub const VK_EXT_LAYER_SETTINGS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_LAYER_SETTINGS_EXTENSION_NAME = "VK_EXT_layer_settings";
pub const VK_ARM_shader_core_builtins = @as(c_int, 1);
pub const VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION = @as(c_int, 2);
pub const VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME = "VK_ARM_shader_core_builtins";
pub const VK_EXT_pipeline_library_group_handles = @as(c_int, 1);
pub const VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME = "VK_EXT_pipeline_library_group_handles";
pub const VK_EXT_dynamic_rendering_unused_attachments = @as(c_int, 1);
pub const VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME = "VK_EXT_dynamic_rendering_unused_attachments";
pub const VK_NV_low_latency2 = @as(c_int, 1);
pub const VK_NV_LOW_LATENCY_2_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_LOW_LATENCY_2_EXTENSION_NAME = "VK_NV_low_latency2";
pub const VK_QCOM_multiview_per_view_render_areas = @as(c_int, 1);
pub const VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME = "VK_QCOM_multiview_per_view_render_areas";
pub const VK_NV_per_stage_descriptor_set = @as(c_int, 1);
pub const VK_NV_PER_STAGE_DESCRIPTOR_SET_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_PER_STAGE_DESCRIPTOR_SET_EXTENSION_NAME = "VK_NV_per_stage_descriptor_set";
pub const VK_QCOM_image_processing2 = @as(c_int, 1);
pub const VK_QCOM_IMAGE_PROCESSING_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME = "VK_QCOM_image_processing2";
pub const VK_QCOM_filter_cubic_weights = @as(c_int, 1);
pub const VK_QCOM_FILTER_CUBIC_WEIGHTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_FILTER_CUBIC_WEIGHTS_EXTENSION_NAME = "VK_QCOM_filter_cubic_weights";
pub const VK_QCOM_ycbcr_degamma = @as(c_int, 1);
pub const VK_QCOM_YCBCR_DEGAMMA_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_YCBCR_DEGAMMA_EXTENSION_NAME = "VK_QCOM_ycbcr_degamma";
pub const VK_QCOM_filter_cubic_clamp = @as(c_int, 1);
pub const VK_QCOM_FILTER_CUBIC_CLAMP_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_FILTER_CUBIC_CLAMP_EXTENSION_NAME = "VK_QCOM_filter_cubic_clamp";
pub const VK_EXT_attachment_feedback_loop_dynamic_state = @as(c_int, 1);
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_attachment_feedback_loop_dynamic_state";
pub const VK_MSFT_layered_driver = @as(c_int, 1);
pub const VK_MSFT_LAYERED_DRIVER_SPEC_VERSION = @as(c_int, 1);
pub const VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME = "VK_MSFT_layered_driver";
pub const VK_NV_descriptor_pool_overallocation = @as(c_int, 1);
pub const VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_EXTENSION_NAME = "VK_NV_descriptor_pool_overallocation";
pub const VK_NV_display_stereo = @as(c_int, 1);
pub const VK_NV_DISPLAY_STEREO_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_DISPLAY_STEREO_EXTENSION_NAME = "VK_NV_display_stereo";
pub const VK_NV_raw_access_chains = @as(c_int, 1);
pub const VK_NV_RAW_ACCESS_CHAINS_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_RAW_ACCESS_CHAINS_EXTENSION_NAME = "VK_NV_raw_access_chains";
pub const VK_NV_command_buffer_inheritance = @as(c_int, 1);
pub const VK_NV_COMMAND_BUFFER_INHERITANCE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COMMAND_BUFFER_INHERITANCE_EXTENSION_NAME = "VK_NV_command_buffer_inheritance";
pub const VK_NV_shader_atomic_float16_vector = @as(c_int, 1);
pub const VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_EXTENSION_NAME = "VK_NV_shader_atomic_float16_vector";
pub const VK_EXT_shader_replicated_composites = @as(c_int, 1);
pub const VK_EXT_SHADER_REPLICATED_COMPOSITES_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_REPLICATED_COMPOSITES_EXTENSION_NAME = "VK_EXT_shader_replicated_composites";
pub const VK_NV_ray_tracing_validation = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_VALIDATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_VALIDATION_EXTENSION_NAME = "VK_NV_ray_tracing_validation";
pub const VK_EXT_device_generated_commands = @as(c_int, 1);
pub const VK_EXT_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_EXT_device_generated_commands";
pub const VK_MESA_image_alignment_control = @as(c_int, 1);
pub const VK_MESA_IMAGE_ALIGNMENT_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_MESA_IMAGE_ALIGNMENT_CONTROL_EXTENSION_NAME = "VK_MESA_image_alignment_control";
pub const VK_EXT_depth_clamp_control = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLAMP_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLAMP_CONTROL_EXTENSION_NAME = "VK_EXT_depth_clamp_control";
pub const VK_HUAWEI_hdr_vivid = @as(c_int, 1);
pub const VK_HUAWEI_HDR_VIVID_SPEC_VERSION = @as(c_int, 1);
pub const VK_HUAWEI_HDR_VIVID_EXTENSION_NAME = "VK_HUAWEI_hdr_vivid";
pub const VK_NV_cooperative_matrix2 = @as(c_int, 1);
pub const VK_NV_COOPERATIVE_MATRIX_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COOPERATIVE_MATRIX_2_EXTENSION_NAME = "VK_NV_cooperative_matrix2";
pub const VK_EXT_vertex_attribute_robustness = @as(c_int, 1);
pub const VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_vertex_attribute_robustness";
pub const VK_KHR_acceleration_structure = @as(c_int, 1);
pub const VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION = @as(c_int, 13);
pub const VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME = "VK_KHR_acceleration_structure";
pub const VK_KHR_ray_tracing_pipeline = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME = "VK_KHR_ray_tracing_pipeline";
pub const VK_KHR_ray_query = @as(c_int, 1);
pub const VK_KHR_RAY_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RAY_QUERY_EXTENSION_NAME = "VK_KHR_ray_query";
pub const VK_EXT_mesh_shader = @as(c_int, 1);
pub const VK_EXT_MESH_SHADER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MESH_SHADER_EXTENSION_NAME = "VK_EXT_mesh_shader";
pub const SDL_h_ = "";
pub const SDL_main_h_ = "";
pub const SDL_stdinc_h_ = "";
pub const SDL_config_h_ = "";
pub const SDL_platform_h_ = "";
pub const __LINUX__ = @as(c_int, 1);
pub const SDL_begin_code_h = "";
pub const SDL_DEPRECATED = @compileError("unable to translate macro: undefined identifier `deprecated`");
// /usr/include/SDL2/begin_code.h:38:13
pub const SDL_UNUSED = @compileError("unable to translate macro: undefined identifier `unused`");
// /usr/include/SDL2/begin_code.h:48:13
pub const DECLSPEC = @compileError("unable to translate macro: undefined identifier `visibility`");
// /usr/include/SDL2/begin_code.h:70:12
pub const SDLCALL = "";
pub const SDL_INLINE = @compileError("unable to translate C expr: unexpected token '__inline__'");
// /usr/include/SDL2/begin_code.h:122:9
pub const SDL_FORCE_INLINE = @compileError("unable to translate macro: undefined identifier `always_inline`");
// /usr/include/SDL2/begin_code.h:143:9
pub const SDL_NORETURN = @compileError("unable to translate macro: undefined identifier `noreturn`");
// /usr/include/SDL2/begin_code.h:151:9
pub const SDL_HAS_FALLTHROUGH = @compileError("unable to translate macro: undefined identifier `__has_attribute`");
// /usr/include/SDL2/begin_code.h:176:9
pub const SDL_FALLTHROUGH = @compileError("unable to translate macro: undefined identifier `__fallthrough__`");
// /usr/include/SDL2/begin_code.h:183:9
pub const SIZEOF_VOIDP = @as(c_int, 8);
pub const HAVE_GCC_ATOMICS = @as(c_int, 1);
pub const HAVE_LIBC = @as(c_int, 1);
pub const STDC_HEADERS = @as(c_int, 1);
pub const HAVE_ALLOCA_H = @as(c_int, 1);
pub const HAVE_CTYPE_H = @as(c_int, 1);
pub const HAVE_FLOAT_H = @as(c_int, 1);
pub const HAVE_ICONV_H = @as(c_int, 1);
pub const HAVE_INTTYPES_H = @as(c_int, 1);
pub const HAVE_LIMITS_H = @as(c_int, 1);
pub const HAVE_MALLOC_H = @as(c_int, 1);
pub const HAVE_MATH_H = @as(c_int, 1);
pub const HAVE_MEMORY_H = @as(c_int, 1);
pub const HAVE_SIGNAL_H = @as(c_int, 1);
pub const HAVE_STDARG_H = @as(c_int, 1);
pub const HAVE_STDDEF_H = @as(c_int, 1);
pub const HAVE_STDINT_H = @as(c_int, 1);
pub const HAVE_STDIO_H = @as(c_int, 1);
pub const HAVE_STDLIB_H = @as(c_int, 1);
pub const HAVE_STRINGS_H = @as(c_int, 1);
pub const HAVE_STRING_H = @as(c_int, 1);
pub const HAVE_SYS_TYPES_H = @as(c_int, 1);
pub const HAVE_WCHAR_H = @as(c_int, 1);
pub const HAVE_LINUX_INPUT_H = @as(c_int, 1);
pub const HAVE_LIBUNWIND_H = @as(c_int, 1);
pub const HAVE_DLOPEN = @as(c_int, 1);
pub const HAVE_MALLOC = @as(c_int, 1);
pub const HAVE_CALLOC = @as(c_int, 1);
pub const HAVE_REALLOC = @as(c_int, 1);
pub const HAVE_FREE = @as(c_int, 1);
pub const HAVE_ALLOCA = @as(c_int, 1);
pub const HAVE_GETENV = @as(c_int, 1);
pub const HAVE_SETENV = @as(c_int, 1);
pub const HAVE_PUTENV = @as(c_int, 1);
pub const HAVE_UNSETENV = @as(c_int, 1);
pub const HAVE_QSORT = @as(c_int, 1);
pub const HAVE_BSEARCH = @as(c_int, 1);
pub const HAVE_ABS = @as(c_int, 1);
pub const HAVE_BCOPY = @as(c_int, 1);
pub const HAVE_MEMSET = @as(c_int, 1);
pub const HAVE_MEMCPY = @as(c_int, 1);
pub const HAVE_MEMMOVE = @as(c_int, 1);
pub const HAVE_MEMCMP = @as(c_int, 1);
pub const HAVE_WCSLEN = @as(c_int, 1);
pub const HAVE_WCSLCPY = @as(c_int, 1);
pub const HAVE_WCSLCAT = @as(c_int, 1);
pub const HAVE_WCSDUP = @as(c_int, 1);
pub const HAVE_WCSSTR = @as(c_int, 1);
pub const HAVE_WCSCMP = @as(c_int, 1);
pub const HAVE_WCSNCMP = @as(c_int, 1);
pub const HAVE_WCSCASECMP = @as(c_int, 1);
pub const HAVE_WCSNCASECMP = @as(c_int, 1);
pub const HAVE_STRLEN = @as(c_int, 1);
pub const HAVE_STRLCPY = @as(c_int, 1);
pub const HAVE_STRLCAT = @as(c_int, 1);
pub const HAVE_INDEX = @as(c_int, 1);
pub const HAVE_RINDEX = @as(c_int, 1);
pub const HAVE_STRCHR = @as(c_int, 1);
pub const HAVE_STRRCHR = @as(c_int, 1);
pub const HAVE_STRSTR = @as(c_int, 1);
pub const HAVE_STRTOK_R = @as(c_int, 1);
pub const HAVE_STRTOL = @as(c_int, 1);
pub const HAVE_STRTOUL = @as(c_int, 1);
pub const HAVE_STRTOLL = @as(c_int, 1);
pub const HAVE_STRTOULL = @as(c_int, 1);
pub const HAVE_STRTOD = @as(c_int, 1);
pub const HAVE_ATOI = @as(c_int, 1);
pub const HAVE_ATOF = @as(c_int, 1);
pub const HAVE_STRCMP = @as(c_int, 1);
pub const HAVE_STRNCMP = @as(c_int, 1);
pub const HAVE_STRCASECMP = @as(c_int, 1);
pub const HAVE_STRNCASECMP = @as(c_int, 1);
pub const HAVE_STRCASESTR = @as(c_int, 1);
pub const HAVE_SSCANF = @as(c_int, 1);
pub const HAVE_VSSCANF = @as(c_int, 1);
pub const HAVE_VSNPRINTF = @as(c_int, 1);
pub const HAVE_M_PI = @as(c_int, 1);
pub const HAVE_ACOS = @as(c_int, 1);
pub const HAVE_ACOSF = @as(c_int, 1);
pub const HAVE_ASIN = @as(c_int, 1);
pub const HAVE_ASINF = @as(c_int, 1);
pub const HAVE_ATAN = @as(c_int, 1);
pub const HAVE_ATANF = @as(c_int, 1);
pub const HAVE_ATAN2 = @as(c_int, 1);
pub const HAVE_ATAN2F = @as(c_int, 1);
pub const HAVE_CEIL = @as(c_int, 1);
pub const HAVE_CEILF = @as(c_int, 1);
pub const HAVE_COPYSIGN = @as(c_int, 1);
pub const HAVE_COPYSIGNF = @as(c_int, 1);
pub const HAVE_COS = @as(c_int, 1);
pub const HAVE_COSF = @as(c_int, 1);
pub const HAVE_EXP = @as(c_int, 1);
pub const HAVE_EXPF = @as(c_int, 1);
pub const HAVE_FABS = @as(c_int, 1);
pub const HAVE_FABSF = @as(c_int, 1);
pub const HAVE_FLOOR = @as(c_int, 1);
pub const HAVE_FLOORF = @as(c_int, 1);
pub const HAVE_FMOD = @as(c_int, 1);
pub const HAVE_FMODF = @as(c_int, 1);
pub const HAVE_LOG = @as(c_int, 1);
pub const HAVE_LOGF = @as(c_int, 1);
pub const HAVE_LOG10 = @as(c_int, 1);
pub const HAVE_LOG10F = @as(c_int, 1);
pub const HAVE_LROUND = @as(c_int, 1);
pub const HAVE_LROUNDF = @as(c_int, 1);
pub const HAVE_POW = @as(c_int, 1);
pub const HAVE_POWF = @as(c_int, 1);
pub const HAVE_ROUND = @as(c_int, 1);
pub const HAVE_ROUNDF = @as(c_int, 1);
pub const HAVE_SCALBN = @as(c_int, 1);
pub const HAVE_SCALBNF = @as(c_int, 1);
pub const HAVE_SIN = @as(c_int, 1);
pub const HAVE_SINF = @as(c_int, 1);
pub const HAVE_SQRT = @as(c_int, 1);
pub const HAVE_SQRTF = @as(c_int, 1);
pub const HAVE_TAN = @as(c_int, 1);
pub const HAVE_TANF = @as(c_int, 1);
pub const HAVE_TRUNC = @as(c_int, 1);
pub const HAVE_TRUNCF = @as(c_int, 1);
pub const HAVE_FOPEN64 = @as(c_int, 1);
pub const HAVE_FSEEKO = @as(c_int, 1);
pub const HAVE_FSEEKO64 = @as(c_int, 1);
pub const HAVE_MEMFD_CREATE = @as(c_int, 1);
pub const HAVE_POSIX_FALLOCATE = @as(c_int, 1);
pub const HAVE_SIGACTION = @as(c_int, 1);
pub const HAVE_SA_SIGACTION = @as(c_int, 1);
pub const HAVE_SETJMP = @as(c_int, 1);
pub const HAVE_NANOSLEEP = @as(c_int, 1);
pub const HAVE_SYSCONF = @as(c_int, 1);
pub const HAVE_CLOCK_GETTIME = @as(c_int, 1);
pub const HAVE_MPROTECT = @as(c_int, 1);
pub const HAVE_ICONV = @as(c_int, 1);
pub const HAVE_PTHREAD_SETNAME_NP = @as(c_int, 1);
pub const HAVE_SEM_TIMEDWAIT = @as(c_int, 1);
pub const HAVE_GETAUXVAL = @as(c_int, 1);
pub const HAVE_POLL = @as(c_int, 1);
pub const HAVE__EXIT = @as(c_int, 1);
pub const HAVE_DBUS_DBUS_H = @as(c_int, 1);
pub const HAVE_FCITX = @as(c_int, 1);
pub const HAVE_IBUS_IBUS_H = @as(c_int, 1);
pub const HAVE_SYS_INOTIFY_H = @as(c_int, 1);
pub const HAVE_INOTIFY_INIT = @as(c_int, 1);
pub const HAVE_INOTIFY_INIT1 = @as(c_int, 1);
pub const HAVE_INOTIFY = @as(c_int, 1);
pub const HAVE_O_CLOEXEC = @as(c_int, 1);
pub const HAVE_IMMINTRIN_H = @as(c_int, 1);
pub const HAVE_LIBUDEV_H = @as(c_int, 1);
pub const HAVE_LIBSAMPLERATE_H = @as(c_int, 1);
pub const HAVE_LIBDECOR_H = @as(c_int, 1);
pub const SDL_AUDIO_DRIVER_ALSA = @as(c_int, 1);
pub const SDL_AUDIO_DRIVER_ALSA_DYNAMIC = "libasound.so.2";
pub const SDL_AUDIO_DRIVER_DISK = @as(c_int, 1);
pub const SDL_AUDIO_DRIVER_DUMMY = @as(c_int, 1);
pub const SDL_AUDIO_DRIVER_JACK = @as(c_int, 1);
pub const SDL_AUDIO_DRIVER_JACK_DYNAMIC = "libjack.so.0";
pub const SDL_AUDIO_DRIVER_OSS = @as(c_int, 1);
pub const SDL_AUDIO_DRIVER_PIPEWIRE = @as(c_int, 1);
pub const SDL_AUDIO_DRIVER_PIPEWIRE_DYNAMIC = "libpipewire-0.3.so.0";
pub const SDL_AUDIO_DRIVER_PULSEAUDIO = @as(c_int, 1);
pub const SDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC = "libpulse.so.0";
pub const SDL_INPUT_LINUXEV = @as(c_int, 1);
pub const SDL_INPUT_LINUXKD = @as(c_int, 1);
pub const SDL_JOYSTICK_LINUX = @as(c_int, 1);
pub const SDL_JOYSTICK_HIDAPI = @as(c_int, 1);
pub const SDL_JOYSTICK_VIRTUAL = @as(c_int, 1);
pub const SDL_HAPTIC_LINUX = @as(c_int, 1);
pub const SDL_UDEV_DYNAMIC = "libudev.so.1";
pub const SDL_SENSOR_DUMMY = @as(c_int, 1);
pub const SDL_LOADSO_DLOPEN = @as(c_int, 1);
pub const SDL_THREAD_PTHREAD = @as(c_int, 1);
pub const SDL_THREAD_PTHREAD_RECURSIVE_MUTEX = @as(c_int, 1);
pub const SDL_TIMER_UNIX = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_DUMMY = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_OFFSCREEN = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_WAYLAND = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_KMSDRM = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_KMSDRM_DYNAMIC = "libdrm.so.2";
pub const SDL_VIDEO_DRIVER_KMSDRM_DYNAMIC_GBM = "libgbm.so.1";
pub const SDL_VIDEO_DRIVER_WAYLAND_QT_TOUCH = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC = "libwayland-client.so.0";
pub const SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_EGL = "libwayland-egl.so.1";
pub const SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_CURSOR = "libwayland-cursor.so.0";
pub const SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_XKBCOMMON = "libxkbcommon.so.0";
pub const SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_LIBDECOR = "libdecor-0.so.0";
pub const SDL_VIDEO_DRIVER_X11 = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_X11_DYNAMIC = "libX11.so.6";
pub const SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT = "libXext.so.6";
pub const SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR = "libXcursor.so.1";
pub const SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2 = "libXi.so.6";
pub const SDL_VIDEO_DRIVER_X11_DYNAMIC_XFIXES = "libXfixes.so.3";
pub const SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR = "libXrandr.so.2";
pub const SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS = "libXss.so.1";
pub const SDL_VIDEO_DRIVER_X11_XCURSOR = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_X11_XDBE = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_X11_XINPUT2 = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_X11_XINPUT2_SUPPORTS_MULTITOUCH = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_X11_XFIXES = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_X11_XRANDR = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_X11_XSCRNSAVER = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_X11_XSHAPE = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS = @as(c_int, 1);
pub const SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM = @as(c_int, 1);
pub const SDL_VIDEO_RENDER_OGL = @as(c_int, 1);
pub const SDL_VIDEO_RENDER_OGL_ES2 = @as(c_int, 1);
pub const SDL_VIDEO_OPENGL = @as(c_int, 1);
pub const SDL_VIDEO_OPENGL_ES2 = @as(c_int, 1);
pub const SDL_VIDEO_OPENGL_GLX = @as(c_int, 1);
pub const SDL_VIDEO_OPENGL_EGL = @as(c_int, 1);
pub const SDL_VIDEO_VULKAN = @as(c_int, 1);
pub const SDL_POWER_LINUX = @as(c_int, 1);
pub const SDL_FILESYSTEM_UNIX = @as(c_int, 1);
pub const DYNAPI_NEEDS_DLOPEN = @as(c_int, 1);
pub const SDL_LIBSAMPLERATE_DYNAMIC = "libsamplerate.so.0";
pub const SDL_USE_IME = @as(c_int, 1);
pub const SDL_HAVE_LIBDECOR_GET_MIN_MAX = @as(c_int, 1);
pub const _SYS_TYPES_H = @as(c_int, 1);
pub const __u_char_defined = "";
pub const __ino_t_defined = "";
pub const __dev_t_defined = "";
pub const __gid_t_defined = "";
pub const __mode_t_defined = "";
pub const __nlink_t_defined = "";
pub const __uid_t_defined = "";
pub const __off_t_defined = "";
pub const __pid_t_defined = "";
pub const __id_t_defined = "";
pub const __ssize_t_defined = "";
pub const __daddr_t_defined = "";
pub const __key_t_defined = "";
pub const __clock_t_defined = @as(c_int, 1);
pub const __clockid_t_defined = @as(c_int, 1);
pub const __time_t_defined = @as(c_int, 1);
pub const __timer_t_defined = @as(c_int, 1);
pub const __BIT_TYPES_DEFINED__ = @as(c_int, 1);
pub const _ENDIAN_H = @as(c_int, 1);
pub const _BITS_ENDIAN_H = @as(c_int, 1);
pub const __LITTLE_ENDIAN = @as(c_int, 1234);
pub const __BIG_ENDIAN = @as(c_int, 4321);
pub const __PDP_ENDIAN = @as(c_int, 3412);
pub const _BITS_ENDIANNESS_H = @as(c_int, 1);
pub const __BYTE_ORDER = __LITTLE_ENDIAN;
pub const __FLOAT_WORD_ORDER = __BYTE_ORDER;
pub inline fn __LONG_LONG_PAIR(HI: anytype, LO: anytype) @TypeOf(HI) {
    _ = &HI;
    _ = &LO;
    return blk: {
        _ = &LO;
        break :blk HI;
    };
}
pub const LITTLE_ENDIAN = __LITTLE_ENDIAN;
pub const BIG_ENDIAN = __BIG_ENDIAN;
pub const PDP_ENDIAN = __PDP_ENDIAN;
pub const BYTE_ORDER = __BYTE_ORDER;
pub const _BITS_BYTESWAP_H = @as(c_int, 1);
pub inline fn __bswap_constant_16(x: anytype) __uint16_t {
    _ = &x;
    return @import("std").zig.c_translation.cast(__uint16_t, ((x >> @as(c_int, 8)) & @as(c_int, 0xff)) | ((x & @as(c_int, 0xff)) << @as(c_int, 8)));
}
pub inline fn __bswap_constant_32(x: anytype) @TypeOf(((((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff000000, .hex)) >> @as(c_int, 24)) | ((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff0000, .hex)) >> @as(c_int, 8))) | ((x & @as(c_uint, 0x0000ff00)) << @as(c_int, 8))) | ((x & @as(c_uint, 0x000000ff)) << @as(c_int, 24))) {
    _ = &x;
    return ((((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff000000, .hex)) >> @as(c_int, 24)) | ((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff0000, .hex)) >> @as(c_int, 8))) | ((x & @as(c_uint, 0x0000ff00)) << @as(c_int, 8))) | ((x & @as(c_uint, 0x000000ff)) << @as(c_int, 24));
}
pub inline fn __bswap_constant_64(x: anytype) @TypeOf(((((((((x & @as(c_ulonglong, 0xff00000000000000)) >> @as(c_int, 56)) | ((x & @as(c_ulonglong, 0x00ff000000000000)) >> @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x0000ff0000000000)) >> @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000ff00000000)) >> @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x00000000ff000000)) << @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x0000000000ff0000)) << @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000000000ff00)) << @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x00000000000000ff)) << @as(c_int, 56))) {
    _ = &x;
    return ((((((((x & @as(c_ulonglong, 0xff00000000000000)) >> @as(c_int, 56)) | ((x & @as(c_ulonglong, 0x00ff000000000000)) >> @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x0000ff0000000000)) >> @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000ff00000000)) >> @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x00000000ff000000)) << @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x0000000000ff0000)) << @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000000000ff00)) << @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x00000000000000ff)) << @as(c_int, 56));
}
pub const _BITS_UINTN_IDENTITY_H = @as(c_int, 1);
pub inline fn htobe16(x: anytype) @TypeOf(__bswap_16(x)) {
    _ = &x;
    return __bswap_16(x);
}
pub inline fn htole16(x: anytype) @TypeOf(__uint16_identity(x)) {
    _ = &x;
    return __uint16_identity(x);
}
pub inline fn be16toh(x: anytype) @TypeOf(__bswap_16(x)) {
    _ = &x;
    return __bswap_16(x);
}
pub inline fn le16toh(x: anytype) @TypeOf(__uint16_identity(x)) {
    _ = &x;
    return __uint16_identity(x);
}
pub inline fn htobe32(x: anytype) @TypeOf(__bswap_32(x)) {
    _ = &x;
    return __bswap_32(x);
}
pub inline fn htole32(x: anytype) @TypeOf(__uint32_identity(x)) {
    _ = &x;
    return __uint32_identity(x);
}
pub inline fn be32toh(x: anytype) @TypeOf(__bswap_32(x)) {
    _ = &x;
    return __bswap_32(x);
}
pub inline fn le32toh(x: anytype) @TypeOf(__uint32_identity(x)) {
    _ = &x;
    return __uint32_identity(x);
}
pub inline fn htobe64(x: anytype) @TypeOf(__bswap_64(x)) {
    _ = &x;
    return __bswap_64(x);
}
pub inline fn htole64(x: anytype) @TypeOf(__uint64_identity(x)) {
    _ = &x;
    return __uint64_identity(x);
}
pub inline fn be64toh(x: anytype) @TypeOf(__bswap_64(x)) {
    _ = &x;
    return __bswap_64(x);
}
pub inline fn le64toh(x: anytype) @TypeOf(__uint64_identity(x)) {
    _ = &x;
    return __uint64_identity(x);
}
pub const _SYS_SELECT_H = @as(c_int, 1);
pub const __FD_ZERO = @compileError("unable to translate macro: undefined identifier `__i`");
// /usr/include/bits/select.h:25:9
pub const __FD_SET = @compileError("unable to translate C expr: expected ')' instead got '|='");
// /usr/include/bits/select.h:32:9
pub const __FD_CLR = @compileError("unable to translate C expr: expected ')' instead got '&='");
// /usr/include/bits/select.h:34:9
pub inline fn __FD_ISSET(d: anytype, s: anytype) @TypeOf((__FDS_BITS(s)[@as(usize, @intCast(__FD_ELT(d)))] & __FD_MASK(d)) != @as(c_int, 0)) {
    _ = &d;
    _ = &s;
    return (__FDS_BITS(s)[@as(usize, @intCast(__FD_ELT(d)))] & __FD_MASK(d)) != @as(c_int, 0);
}
pub const __sigset_t_defined = @as(c_int, 1);
pub const ____sigset_t_defined = "";
pub const _SIGSET_NWORDS = @import("std").zig.c_translation.MacroArithmetic.div(@as(c_int, 1024), @as(c_int, 8) * @import("std").zig.c_translation.sizeof(c_ulong));
pub const __timeval_defined = @as(c_int, 1);
pub const _STRUCT_TIMESPEC = @as(c_int, 1);
pub const __suseconds_t_defined = "";
pub const __NFDBITS = @as(c_int, 8) * @import("std").zig.c_translation.cast(c_int, @import("std").zig.c_translation.sizeof(__fd_mask));
pub inline fn __FD_ELT(d: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(d, __NFDBITS)) {
    _ = &d;
    return @import("std").zig.c_translation.MacroArithmetic.div(d, __NFDBITS);
}
pub inline fn __FD_MASK(d: anytype) __fd_mask {
    _ = &d;
    return @import("std").zig.c_translation.cast(__fd_mask, @as(c_ulong, 1) << @import("std").zig.c_translation.MacroArithmetic.rem(d, __NFDBITS));
}
pub inline fn __FDS_BITS(set: anytype) @TypeOf(set.*.__fds_bits) {
    _ = &set;
    return set.*.__fds_bits;
}
pub const FD_SETSIZE = __FD_SETSIZE;
pub const NFDBITS = __NFDBITS;
pub inline fn FD_SET(fd: anytype, fdsetp: anytype) @TypeOf(__FD_SET(fd, fdsetp)) {
    _ = &fd;
    _ = &fdsetp;
    return __FD_SET(fd, fdsetp);
}
pub inline fn FD_CLR(fd: anytype, fdsetp: anytype) @TypeOf(__FD_CLR(fd, fdsetp)) {
    _ = &fd;
    _ = &fdsetp;
    return __FD_CLR(fd, fdsetp);
}
pub inline fn FD_ISSET(fd: anytype, fdsetp: anytype) @TypeOf(__FD_ISSET(fd, fdsetp)) {
    _ = &fd;
    _ = &fdsetp;
    return __FD_ISSET(fd, fdsetp);
}
pub inline fn FD_ZERO(fdsetp: anytype) @TypeOf(__FD_ZERO(fdsetp)) {
    _ = &fdsetp;
    return __FD_ZERO(fdsetp);
}
pub const __blksize_t_defined = "";
pub const __blkcnt_t_defined = "";
pub const __fsblkcnt_t_defined = "";
pub const __fsfilcnt_t_defined = "";
pub const _BITS_PTHREADTYPES_COMMON_H = @as(c_int, 1);
pub const _THREAD_SHARED_TYPES_H = @as(c_int, 1);
pub const _BITS_PTHREADTYPES_ARCH_H = @as(c_int, 1);
pub const __SIZEOF_PTHREAD_MUTEX_T = @as(c_int, 40);
pub const __SIZEOF_PTHREAD_ATTR_T = @as(c_int, 56);
pub const __SIZEOF_PTHREAD_RWLOCK_T = @as(c_int, 56);
pub const __SIZEOF_PTHREAD_BARRIER_T = @as(c_int, 32);
pub const __SIZEOF_PTHREAD_MUTEXATTR_T = @as(c_int, 4);
pub const __SIZEOF_PTHREAD_COND_T = @as(c_int, 48);
pub const __SIZEOF_PTHREAD_CONDATTR_T = @as(c_int, 4);
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T = @as(c_int, 8);
pub const __SIZEOF_PTHREAD_BARRIERATTR_T = @as(c_int, 4);
pub const __LOCK_ALIGNMENT = "";
pub const __ONCE_ALIGNMENT = "";
pub const _BITS_ATOMIC_WIDE_COUNTER_H = "";
pub const _THREAD_MUTEX_INTERNAL_H = @as(c_int, 1);
pub const __PTHREAD_MUTEX_HAVE_PREV = @as(c_int, 1);
pub const __PTHREAD_MUTEX_INITIALIZER = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/include/bits/struct_mutex.h:56:10
pub const _RWLOCK_INTERNAL_H = "";
pub const __PTHREAD_RWLOCK_ELISION_EXTRA = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/include/bits/struct_rwlock.h:40:11
pub inline fn __PTHREAD_RWLOCK_INITIALIZER(__flags: anytype) @TypeOf(__flags) {
    _ = &__flags;
    return blk: {
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = &__PTHREAD_RWLOCK_ELISION_EXTRA;
        _ = @as(c_int, 0);
        break :blk __flags;
    };
}
pub const __ONCE_FLAG_INIT = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/include/bits/thread-shared-types.h:113:9
pub const __have_pthread_attr_t = @as(c_int, 1);
pub const _STDIO_H = @as(c_int, 1);
pub const __need___va_list = "";
pub const __GNUC_VA_LIST = "";
pub const _____fpos_t_defined = @as(c_int, 1);
pub const ____mbstate_t_defined = @as(c_int, 1);
pub const _____fpos64_t_defined = @as(c_int, 1);
pub const ____FILE_defined = @as(c_int, 1);
pub const __FILE_defined = @as(c_int, 1);
pub const __struct_FILE_defined = @as(c_int, 1);
pub const __getc_unlocked_body = @compileError("TODO postfix inc/dec expr");
// /usr/include/bits/types/struct_FILE.h:102:9
pub const __putc_unlocked_body = @compileError("TODO postfix inc/dec expr");
// /usr/include/bits/types/struct_FILE.h:106:9
pub const _IO_EOF_SEEN = @as(c_int, 0x0010);
pub inline fn __feof_unlocked_body(_fp: anytype) @TypeOf((_fp.*._flags & _IO_EOF_SEEN) != @as(c_int, 0)) {
    _ = &_fp;
    return (_fp.*._flags & _IO_EOF_SEEN) != @as(c_int, 0);
}
pub const _IO_ERR_SEEN = @as(c_int, 0x0020);
pub inline fn __ferror_unlocked_body(_fp: anytype) @TypeOf((_fp.*._flags & _IO_ERR_SEEN) != @as(c_int, 0)) {
    _ = &_fp;
    return (_fp.*._flags & _IO_ERR_SEEN) != @as(c_int, 0);
}
pub const _IO_USER_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hex);
pub const __cookie_io_functions_t_defined = @as(c_int, 1);
pub const _VA_LIST_DEFINED = "";
pub const _IOFBF = @as(c_int, 0);
pub const _IOLBF = @as(c_int, 1);
pub const _IONBF = @as(c_int, 2);
pub const BUFSIZ = @as(c_int, 8192);
pub const EOF = -@as(c_int, 1);
pub const SEEK_SET = @as(c_int, 0);
pub const SEEK_CUR = @as(c_int, 1);
pub const SEEK_END = @as(c_int, 2);
pub const P_tmpdir = "/tmp";
pub const L_tmpnam = @as(c_int, 20);
pub const TMP_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 238328, .decimal);
pub const _BITS_STDIO_LIM_H = @as(c_int, 1);
pub const FILENAME_MAX = @as(c_int, 4096);
pub const L_ctermid = @as(c_int, 9);
pub const FOPEN_MAX = @as(c_int, 16);
pub const __attr_dealloc_fclose = __attr_dealloc(fclose, @as(c_int, 1));
pub const _BITS_FLOATN_H = "";
pub const __HAVE_FLOAT128 = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT128 = @as(c_int, 0);
pub const __HAVE_FLOAT64X = @as(c_int, 1);
pub const __HAVE_FLOAT64X_LONG_DOUBLE = @as(c_int, 1);
pub const _BITS_FLOATN_COMMON_H = "";
pub const __HAVE_FLOAT16 = @as(c_int, 0);
pub const __HAVE_FLOAT32 = @as(c_int, 1);
pub const __HAVE_FLOAT64 = @as(c_int, 1);
pub const __HAVE_FLOAT32X = @as(c_int, 1);
pub const __HAVE_FLOAT128X = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT16 = __HAVE_FLOAT16;
pub const __HAVE_DISTINCT_FLOAT32 = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT64 = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT32X = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT64X = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT128X = __HAVE_FLOAT128X;
pub const __HAVE_FLOAT128_UNLIKE_LDBL = (__HAVE_DISTINCT_FLOAT128 != 0) and (__LDBL_MANT_DIG__ != @as(c_int, 113));
pub const __HAVE_FLOATN_NOT_TYPEDEF = @as(c_int, 0);
pub const __f32 = @import("std").zig.c_translation.Macros.F_SUFFIX;
pub inline fn __f64(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __f32x(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub const __f64x = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const __CFLOAT32 = @compileError("unable to translate: TODO _Complex");
// /usr/include/bits/floatn-common.h:149:12
pub const __CFLOAT64 = @compileError("unable to translate: TODO _Complex");
// /usr/include/bits/floatn-common.h:160:13
pub const __CFLOAT32X = @compileError("unable to translate: TODO _Complex");
// /usr/include/bits/floatn-common.h:169:12
pub const __CFLOAT64X = @compileError("unable to translate: TODO _Complex");
// /usr/include/bits/floatn-common.h:178:13
pub inline fn __builtin_huge_valf32() @TypeOf(__builtin_huge_valf()) {
    return __builtin_huge_valf();
}
pub inline fn __builtin_inff32() @TypeOf(__builtin_inff()) {
    return __builtin_inff();
}
pub inline fn __builtin_nanf32(x: anytype) @TypeOf(__builtin_nanf(x)) {
    _ = &x;
    return __builtin_nanf(x);
}
pub const __builtin_nansf32 = @compileError("unable to translate macro: undefined identifier `__builtin_nansf`");
// /usr/include/bits/floatn-common.h:221:12
pub const __builtin_huge_valf64 = @compileError("unable to translate macro: undefined identifier `__builtin_huge_val`");
// /usr/include/bits/floatn-common.h:255:13
pub const __builtin_inff64 = @compileError("unable to translate macro: undefined identifier `__builtin_inf`");
// /usr/include/bits/floatn-common.h:256:13
pub const __builtin_nanf64 = @compileError("unable to translate macro: undefined identifier `__builtin_nan`");
// /usr/include/bits/floatn-common.h:257:13
pub const __builtin_nansf64 = @compileError("unable to translate macro: undefined identifier `__builtin_nans`");
// /usr/include/bits/floatn-common.h:258:13
pub const __builtin_huge_valf32x = @compileError("unable to translate macro: undefined identifier `__builtin_huge_val`");
// /usr/include/bits/floatn-common.h:272:12
pub const __builtin_inff32x = @compileError("unable to translate macro: undefined identifier `__builtin_inf`");
// /usr/include/bits/floatn-common.h:273:12
pub const __builtin_nanf32x = @compileError("unable to translate macro: undefined identifier `__builtin_nan`");
// /usr/include/bits/floatn-common.h:274:12
pub const __builtin_nansf32x = @compileError("unable to translate macro: undefined identifier `__builtin_nans`");
// /usr/include/bits/floatn-common.h:275:12
pub const __builtin_huge_valf64x = @compileError("unable to translate macro: undefined identifier `__builtin_huge_vall`");
// /usr/include/bits/floatn-common.h:289:13
pub const __builtin_inff64x = @compileError("unable to translate macro: undefined identifier `__builtin_infl`");
// /usr/include/bits/floatn-common.h:290:13
pub const __builtin_nanf64x = @compileError("unable to translate macro: undefined identifier `__builtin_nanl`");
// /usr/include/bits/floatn-common.h:291:13
pub const __builtin_nansf64x = @compileError("unable to translate macro: undefined identifier `__builtin_nansl`");
// /usr/include/bits/floatn-common.h:292:13
pub const _STDLIB_H = @as(c_int, 1);
pub const WNOHANG = @as(c_int, 1);
pub const WUNTRACED = @as(c_int, 2);
pub const WSTOPPED = @as(c_int, 2);
pub const WEXITED = @as(c_int, 4);
pub const WCONTINUED = @as(c_int, 8);
pub const WNOWAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex);
pub const __WNOTHREAD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const __WALL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const __WCLONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub inline fn __WEXITSTATUS(status: anytype) @TypeOf((status & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hex)) >> @as(c_int, 8)) {
    _ = &status;
    return (status & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hex)) >> @as(c_int, 8);
}
pub inline fn __WTERMSIG(status: anytype) @TypeOf(status & @as(c_int, 0x7f)) {
    _ = &status;
    return status & @as(c_int, 0x7f);
}
pub inline fn __WSTOPSIG(status: anytype) @TypeOf(__WEXITSTATUS(status)) {
    _ = &status;
    return __WEXITSTATUS(status);
}
pub inline fn __WIFEXITED(status: anytype) @TypeOf(__WTERMSIG(status) == @as(c_int, 0)) {
    _ = &status;
    return __WTERMSIG(status) == @as(c_int, 0);
}
pub inline fn __WIFSIGNALED(status: anytype) @TypeOf((@import("std").zig.c_translation.cast(i8, (status & @as(c_int, 0x7f)) + @as(c_int, 1)) >> @as(c_int, 1)) > @as(c_int, 0)) {
    _ = &status;
    return (@import("std").zig.c_translation.cast(i8, (status & @as(c_int, 0x7f)) + @as(c_int, 1)) >> @as(c_int, 1)) > @as(c_int, 0);
}
pub inline fn __WIFSTOPPED(status: anytype) @TypeOf((status & @as(c_int, 0xff)) == @as(c_int, 0x7f)) {
    _ = &status;
    return (status & @as(c_int, 0xff)) == @as(c_int, 0x7f);
}
pub inline fn __WIFCONTINUED(status: anytype) @TypeOf(status == __W_CONTINUED) {
    _ = &status;
    return status == __W_CONTINUED;
}
pub inline fn __WCOREDUMP(status: anytype) @TypeOf(status & __WCOREFLAG) {
    _ = &status;
    return status & __WCOREFLAG;
}
pub inline fn __W_EXITCODE(ret: anytype, sig: anytype) @TypeOf((ret << @as(c_int, 8)) | sig) {
    _ = &ret;
    _ = &sig;
    return (ret << @as(c_int, 8)) | sig;
}
pub inline fn __W_STOPCODE(sig: anytype) @TypeOf((sig << @as(c_int, 8)) | @as(c_int, 0x7f)) {
    _ = &sig;
    return (sig << @as(c_int, 8)) | @as(c_int, 0x7f);
}
pub const __W_CONTINUED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hex);
pub const __WCOREFLAG = @as(c_int, 0x80);
pub inline fn WEXITSTATUS(status: anytype) @TypeOf(__WEXITSTATUS(status)) {
    _ = &status;
    return __WEXITSTATUS(status);
}
pub inline fn WTERMSIG(status: anytype) @TypeOf(__WTERMSIG(status)) {
    _ = &status;
    return __WTERMSIG(status);
}
pub inline fn WSTOPSIG(status: anytype) @TypeOf(__WSTOPSIG(status)) {
    _ = &status;
    return __WSTOPSIG(status);
}
pub inline fn WIFEXITED(status: anytype) @TypeOf(__WIFEXITED(status)) {
    _ = &status;
    return __WIFEXITED(status);
}
pub inline fn WIFSIGNALED(status: anytype) @TypeOf(__WIFSIGNALED(status)) {
    _ = &status;
    return __WIFSIGNALED(status);
}
pub inline fn WIFSTOPPED(status: anytype) @TypeOf(__WIFSTOPPED(status)) {
    _ = &status;
    return __WIFSTOPPED(status);
}
pub inline fn WIFCONTINUED(status: anytype) @TypeOf(__WIFCONTINUED(status)) {
    _ = &status;
    return __WIFCONTINUED(status);
}
pub const __ldiv_t_defined = @as(c_int, 1);
pub const __lldiv_t_defined = @as(c_int, 1);
pub const RAND_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const EXIT_FAILURE = @as(c_int, 1);
pub const EXIT_SUCCESS = @as(c_int, 0);
pub const MB_CUR_MAX = __ctype_get_mb_cur_max();
pub const _ALLOCA_H = @as(c_int, 1);
pub const __COMPAR_FN_T = "";
pub const __STDARG_H = "";
pub const __need_va_list = "";
pub const __need_va_arg = "";
pub const __need___va_copy = "";
pub const __need_va_copy = "";
pub const _VA_LIST = "";
pub const va_start = @compileError("unable to translate macro: undefined identifier `__builtin_va_start`");
// /usr/lib/zig/include/__stdarg_va_arg.h:17:9
pub const va_end = @compileError("unable to translate macro: undefined identifier `__builtin_va_end`");
// /usr/lib/zig/include/__stdarg_va_arg.h:19:9
pub const va_arg = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /usr/lib/zig/include/__stdarg_va_arg.h:20:9
pub const __va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`");
// /usr/lib/zig/include/__stdarg___va_copy.h:11:9
pub const va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`");
// /usr/lib/zig/include/__stdarg_va_copy.h:11:9
pub const _STRING_H = @as(c_int, 1);
pub const _BITS_TYPES_LOCALE_T_H = @as(c_int, 1);
pub const _BITS_TYPES___LOCALE_T_H = @as(c_int, 1);
pub const _STRINGS_H = @as(c_int, 1);
pub const _WCHAR_H = @as(c_int, 1);
pub const __wint_t_defined = @as(c_int, 1);
pub const _WINT_T = @as(c_int, 1);
pub const __mbstate_t_defined = @as(c_int, 1);
pub const WEOF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xffffffff, .hex);
pub const __CLANG_INTTYPES_H = "";
pub const _INTTYPES_H = @as(c_int, 1);
pub const ____gwchar_t_defined = @as(c_int, 1);
pub const __PRI64_PREFIX = "l";
pub const __PRIPTR_PREFIX = "l";
pub const PRId8 = "d";
pub const PRId16 = "d";
pub const PRId32 = "d";
pub const PRId64 = __PRI64_PREFIX ++ "d";
pub const PRIdLEAST8 = "d";
pub const PRIdLEAST16 = "d";
pub const PRIdLEAST32 = "d";
pub const PRIdLEAST64 = __PRI64_PREFIX ++ "d";
pub const PRIdFAST8 = "d";
pub const PRIdFAST16 = __PRIPTR_PREFIX ++ "d";
pub const PRIdFAST32 = __PRIPTR_PREFIX ++ "d";
pub const PRIdFAST64 = __PRI64_PREFIX ++ "d";
pub const PRIi8 = "i";
pub const PRIi16 = "i";
pub const PRIi32 = "i";
pub const PRIi64 = __PRI64_PREFIX ++ "i";
pub const PRIiLEAST8 = "i";
pub const PRIiLEAST16 = "i";
pub const PRIiLEAST32 = "i";
pub const PRIiLEAST64 = __PRI64_PREFIX ++ "i";
pub const PRIiFAST8 = "i";
pub const PRIiFAST16 = __PRIPTR_PREFIX ++ "i";
pub const PRIiFAST32 = __PRIPTR_PREFIX ++ "i";
pub const PRIiFAST64 = __PRI64_PREFIX ++ "i";
pub const PRIo8 = "o";
pub const PRIo16 = "o";
pub const PRIo32 = "o";
pub const PRIo64 = __PRI64_PREFIX ++ "o";
pub const PRIoLEAST8 = "o";
pub const PRIoLEAST16 = "o";
pub const PRIoLEAST32 = "o";
pub const PRIoLEAST64 = __PRI64_PREFIX ++ "o";
pub const PRIoFAST8 = "o";
pub const PRIoFAST16 = __PRIPTR_PREFIX ++ "o";
pub const PRIoFAST32 = __PRIPTR_PREFIX ++ "o";
pub const PRIoFAST64 = __PRI64_PREFIX ++ "o";
pub const PRIu8 = "u";
pub const PRIu16 = "u";
pub const PRIu32 = "u";
pub const PRIu64 = __PRI64_PREFIX ++ "u";
pub const PRIuLEAST8 = "u";
pub const PRIuLEAST16 = "u";
pub const PRIuLEAST32 = "u";
pub const PRIuLEAST64 = __PRI64_PREFIX ++ "u";
pub const PRIuFAST8 = "u";
pub const PRIuFAST16 = __PRIPTR_PREFIX ++ "u";
pub const PRIuFAST32 = __PRIPTR_PREFIX ++ "u";
pub const PRIuFAST64 = __PRI64_PREFIX ++ "u";
pub const PRIx8 = "x";
pub const PRIx16 = "x";
pub const PRIx32 = "x";
pub const PRIx64 = __PRI64_PREFIX ++ "x";
pub const PRIxLEAST8 = "x";
pub const PRIxLEAST16 = "x";
pub const PRIxLEAST32 = "x";
pub const PRIxLEAST64 = __PRI64_PREFIX ++ "x";
pub const PRIxFAST8 = "x";
pub const PRIxFAST16 = __PRIPTR_PREFIX ++ "x";
pub const PRIxFAST32 = __PRIPTR_PREFIX ++ "x";
pub const PRIxFAST64 = __PRI64_PREFIX ++ "x";
pub const PRIX8 = "X";
pub const PRIX16 = "X";
pub const PRIX32 = "X";
pub const PRIX64 = __PRI64_PREFIX ++ "X";
pub const PRIXLEAST8 = "X";
pub const PRIXLEAST16 = "X";
pub const PRIXLEAST32 = "X";
pub const PRIXLEAST64 = __PRI64_PREFIX ++ "X";
pub const PRIXFAST8 = "X";
pub const PRIXFAST16 = __PRIPTR_PREFIX ++ "X";
pub const PRIXFAST32 = __PRIPTR_PREFIX ++ "X";
pub const PRIXFAST64 = __PRI64_PREFIX ++ "X";
pub const PRIdMAX = __PRI64_PREFIX ++ "d";
pub const PRIiMAX = __PRI64_PREFIX ++ "i";
pub const PRIoMAX = __PRI64_PREFIX ++ "o";
pub const PRIuMAX = __PRI64_PREFIX ++ "u";
pub const PRIxMAX = __PRI64_PREFIX ++ "x";
pub const PRIXMAX = __PRI64_PREFIX ++ "X";
pub const PRIdPTR = __PRIPTR_PREFIX ++ "d";
pub const PRIiPTR = __PRIPTR_PREFIX ++ "i";
pub const PRIoPTR = __PRIPTR_PREFIX ++ "o";
pub const PRIuPTR = __PRIPTR_PREFIX ++ "u";
pub const PRIxPTR = __PRIPTR_PREFIX ++ "x";
pub const PRIXPTR = __PRIPTR_PREFIX ++ "X";
pub const SCNd8 = "hhd";
pub const SCNd16 = "hd";
pub const SCNd32 = "d";
pub const SCNd64 = __PRI64_PREFIX ++ "d";
pub const SCNdLEAST8 = "hhd";
pub const SCNdLEAST16 = "hd";
pub const SCNdLEAST32 = "d";
pub const SCNdLEAST64 = __PRI64_PREFIX ++ "d";
pub const SCNdFAST8 = "hhd";
pub const SCNdFAST16 = __PRIPTR_PREFIX ++ "d";
pub const SCNdFAST32 = __PRIPTR_PREFIX ++ "d";
pub const SCNdFAST64 = __PRI64_PREFIX ++ "d";
pub const SCNi8 = "hhi";
pub const SCNi16 = "hi";
pub const SCNi32 = "i";
pub const SCNi64 = __PRI64_PREFIX ++ "i";
pub const SCNiLEAST8 = "hhi";
pub const SCNiLEAST16 = "hi";
pub const SCNiLEAST32 = "i";
pub const SCNiLEAST64 = __PRI64_PREFIX ++ "i";
pub const SCNiFAST8 = "hhi";
pub const SCNiFAST16 = __PRIPTR_PREFIX ++ "i";
pub const SCNiFAST32 = __PRIPTR_PREFIX ++ "i";
pub const SCNiFAST64 = __PRI64_PREFIX ++ "i";
pub const SCNu8 = "hhu";
pub const SCNu16 = "hu";
pub const SCNu32 = "u";
pub const SCNu64 = __PRI64_PREFIX ++ "u";
pub const SCNuLEAST8 = "hhu";
pub const SCNuLEAST16 = "hu";
pub const SCNuLEAST32 = "u";
pub const SCNuLEAST64 = __PRI64_PREFIX ++ "u";
pub const SCNuFAST8 = "hhu";
pub const SCNuFAST16 = __PRIPTR_PREFIX ++ "u";
pub const SCNuFAST32 = __PRIPTR_PREFIX ++ "u";
pub const SCNuFAST64 = __PRI64_PREFIX ++ "u";
pub const SCNo8 = "hho";
pub const SCNo16 = "ho";
pub const SCNo32 = "o";
pub const SCNo64 = __PRI64_PREFIX ++ "o";
pub const SCNoLEAST8 = "hho";
pub const SCNoLEAST16 = "ho";
pub const SCNoLEAST32 = "o";
pub const SCNoLEAST64 = __PRI64_PREFIX ++ "o";
pub const SCNoFAST8 = "hho";
pub const SCNoFAST16 = __PRIPTR_PREFIX ++ "o";
pub const SCNoFAST32 = __PRIPTR_PREFIX ++ "o";
pub const SCNoFAST64 = __PRI64_PREFIX ++ "o";
pub const SCNx8 = "hhx";
pub const SCNx16 = "hx";
pub const SCNx32 = "x";
pub const SCNx64 = __PRI64_PREFIX ++ "x";
pub const SCNxLEAST8 = "hhx";
pub const SCNxLEAST16 = "hx";
pub const SCNxLEAST32 = "x";
pub const SCNxLEAST64 = __PRI64_PREFIX ++ "x";
pub const SCNxFAST8 = "hhx";
pub const SCNxFAST16 = __PRIPTR_PREFIX ++ "x";
pub const SCNxFAST32 = __PRIPTR_PREFIX ++ "x";
pub const SCNxFAST64 = __PRI64_PREFIX ++ "x";
pub const SCNdMAX = __PRI64_PREFIX ++ "d";
pub const SCNiMAX = __PRI64_PREFIX ++ "i";
pub const SCNoMAX = __PRI64_PREFIX ++ "o";
pub const SCNuMAX = __PRI64_PREFIX ++ "u";
pub const SCNxMAX = __PRI64_PREFIX ++ "x";
pub const SCNdPTR = __PRIPTR_PREFIX ++ "d";
pub const SCNiPTR = __PRIPTR_PREFIX ++ "i";
pub const SCNoPTR = __PRIPTR_PREFIX ++ "o";
pub const SCNuPTR = __PRIPTR_PREFIX ++ "u";
pub const SCNxPTR = __PRIPTR_PREFIX ++ "x";
pub const _CTYPE_H = @as(c_int, 1);
pub inline fn _ISbit(bit: anytype) @TypeOf(if (bit < @as(c_int, 8)) (@as(c_int, 1) << bit) << @as(c_int, 8) else (@as(c_int, 1) << bit) >> @as(c_int, 8)) {
    _ = &bit;
    return if (bit < @as(c_int, 8)) (@as(c_int, 1) << bit) << @as(c_int, 8) else (@as(c_int, 1) << bit) >> @as(c_int, 8);
}
pub inline fn __isctype(c: anytype, @"type": anytype) @TypeOf(__ctype_b_loc().*[@as(usize, @intCast(@import("std").zig.c_translation.cast(c_int, c)))] & @import("std").zig.c_translation.cast(c_ushort, @"type")) {
    _ = &c;
    _ = &@"type";
    return __ctype_b_loc().*[@as(usize, @intCast(@import("std").zig.c_translation.cast(c_int, c)))] & @import("std").zig.c_translation.cast(c_ushort, @"type");
}
pub inline fn __isascii(c: anytype) @TypeOf((c & ~@as(c_int, 0x7f)) == @as(c_int, 0)) {
    _ = &c;
    return (c & ~@as(c_int, 0x7f)) == @as(c_int, 0);
}
pub inline fn __toascii(c: anytype) @TypeOf(c & @as(c_int, 0x7f)) {
    _ = &c;
    return c & @as(c_int, 0x7f);
}
pub const __exctype = @compileError("unable to translate C expr: unexpected token 'extern'");
// /usr/include/ctype.h:102:9
pub const __tobody = @compileError("unable to translate macro: undefined identifier `__res`");
// /usr/include/ctype.h:155:9
pub inline fn __isctype_l(c: anytype, @"type": anytype, locale: anytype) @TypeOf(locale.*.__ctype_b[@as(usize, @intCast(@import("std").zig.c_translation.cast(c_int, c)))] & @import("std").zig.c_translation.cast(c_ushort, @"type")) {
    _ = &c;
    _ = &@"type";
    _ = &locale;
    return locale.*.__ctype_b[@as(usize, @intCast(@import("std").zig.c_translation.cast(c_int, c)))] & @import("std").zig.c_translation.cast(c_ushort, @"type");
}
pub const __exctype_l = @compileError("unable to translate C expr: unexpected token 'extern'");
// /usr/include/ctype.h:244:10
pub inline fn __isalnum_l(c: anytype, l: anytype) @TypeOf(__isctype_l(c, _ISalnum, l)) {
    _ = &c;
    _ = &l;
    return __isctype_l(c, _ISalnum, l);
}
pub inline fn __isalpha_l(c: anytype, l: anytype) @TypeOf(__isctype_l(c, _ISalpha, l)) {
    _ = &c;
    _ = &l;
    return __isctype_l(c, _ISalpha, l);
}
pub inline fn __iscntrl_l(c: anytype, l: anytype) @TypeOf(__isctype_l(c, _IScntrl, l)) {
    _ = &c;
    _ = &l;
    return __isctype_l(c, _IScntrl, l);
}
pub inline fn __isdigit_l(c: anytype, l: anytype) @TypeOf(__isctype_l(c, _ISdigit, l)) {
    _ = &c;
    _ = &l;
    return __isctype_l(c, _ISdigit, l);
}
pub inline fn __islower_l(c: anytype, l: anytype) @TypeOf(__isctype_l(c, _ISlower, l)) {
    _ = &c;
    _ = &l;
    return __isctype_l(c, _ISlower, l);
}
pub inline fn __isgraph_l(c: anytype, l: anytype) @TypeOf(__isctype_l(c, _ISgraph, l)) {
    _ = &c;
    _ = &l;
    return __isctype_l(c, _ISgraph, l);
}
pub inline fn __isprint_l(c: anytype, l: anytype) @TypeOf(__isctype_l(c, _ISprint, l)) {
    _ = &c;
    _ = &l;
    return __isctype_l(c, _ISprint, l);
}
pub inline fn __ispunct_l(c: anytype, l: anytype) @TypeOf(__isctype_l(c, _ISpunct, l)) {
    _ = &c;
    _ = &l;
    return __isctype_l(c, _ISpunct, l);
}
pub inline fn __isspace_l(c: anytype, l: anytype) @TypeOf(__isctype_l(c, _ISspace, l)) {
    _ = &c;
    _ = &l;
    return __isctype_l(c, _ISspace, l);
}
pub inline fn __isupper_l(c: anytype, l: anytype) @TypeOf(__isctype_l(c, _ISupper, l)) {
    _ = &c;
    _ = &l;
    return __isctype_l(c, _ISupper, l);
}
pub inline fn __isxdigit_l(c: anytype, l: anytype) @TypeOf(__isctype_l(c, _ISxdigit, l)) {
    _ = &c;
    _ = &l;
    return __isctype_l(c, _ISxdigit, l);
}
pub inline fn __isblank_l(c: anytype, l: anytype) @TypeOf(__isctype_l(c, _ISblank, l)) {
    _ = &c;
    _ = &l;
    return __isctype_l(c, _ISblank, l);
}
pub inline fn __isascii_l(c: anytype, l: anytype) @TypeOf(__isascii(c)) {
    _ = &c;
    _ = &l;
    return blk_1: {
        _ = &l;
        break :blk_1 __isascii(c);
    };
}
pub inline fn __toascii_l(c: anytype, l: anytype) @TypeOf(__toascii(c)) {
    _ = &c;
    _ = &l;
    return blk_1: {
        _ = &l;
        break :blk_1 __toascii(c);
    };
}
pub inline fn isascii_l(c: anytype, l: anytype) @TypeOf(__isascii_l(c, l)) {
    _ = &c;
    _ = &l;
    return __isascii_l(c, l);
}
pub inline fn toascii_l(c: anytype, l: anytype) @TypeOf(__toascii_l(c, l)) {
    _ = &c;
    _ = &l;
    return __toascii_l(c, l);
}
pub const _MATH_H = @as(c_int, 1);
pub const _BITS_LIBM_SIMD_DECL_STUBS_H = @as(c_int, 1);
pub const __DECL_SIMD_cos = "";
pub const __DECL_SIMD_cosf = "";
pub const __DECL_SIMD_cosl = "";
pub const __DECL_SIMD_cosf16 = "";
pub const __DECL_SIMD_cosf32 = "";
pub const __DECL_SIMD_cosf64 = "";
pub const __DECL_SIMD_cosf128 = "";
pub const __DECL_SIMD_cosf32x = "";
pub const __DECL_SIMD_cosf64x = "";
pub const __DECL_SIMD_cosf128x = "";
pub const __DECL_SIMD_sin = "";
pub const __DECL_SIMD_sinf = "";
pub const __DECL_SIMD_sinl = "";
pub const __DECL_SIMD_sinf16 = "";
pub const __DECL_SIMD_sinf32 = "";
pub const __DECL_SIMD_sinf64 = "";
pub const __DECL_SIMD_sinf128 = "";
pub const __DECL_SIMD_sinf32x = "";
pub const __DECL_SIMD_sinf64x = "";
pub const __DECL_SIMD_sinf128x = "";
pub const __DECL_SIMD_sincos = "";
pub const __DECL_SIMD_sincosf = "";
pub const __DECL_SIMD_sincosl = "";
pub const __DECL_SIMD_sincosf16 = "";
pub const __DECL_SIMD_sincosf32 = "";
pub const __DECL_SIMD_sincosf64 = "";
pub const __DECL_SIMD_sincosf128 = "";
pub const __DECL_SIMD_sincosf32x = "";
pub const __DECL_SIMD_sincosf64x = "";
pub const __DECL_SIMD_sincosf128x = "";
pub const __DECL_SIMD_log = "";
pub const __DECL_SIMD_logf = "";
pub const __DECL_SIMD_logl = "";
pub const __DECL_SIMD_logf16 = "";
pub const __DECL_SIMD_logf32 = "";
pub const __DECL_SIMD_logf64 = "";
pub const __DECL_SIMD_logf128 = "";
pub const __DECL_SIMD_logf32x = "";
pub const __DECL_SIMD_logf64x = "";
pub const __DECL_SIMD_logf128x = "";
pub const __DECL_SIMD_exp = "";
pub const __DECL_SIMD_expf = "";
pub const __DECL_SIMD_expl = "";
pub const __DECL_SIMD_expf16 = "";
pub const __DECL_SIMD_expf32 = "";
pub const __DECL_SIMD_expf64 = "";
pub const __DECL_SIMD_expf128 = "";
pub const __DECL_SIMD_expf32x = "";
pub const __DECL_SIMD_expf64x = "";
pub const __DECL_SIMD_expf128x = "";
pub const __DECL_SIMD_pow = "";
pub const __DECL_SIMD_powf = "";
pub const __DECL_SIMD_powl = "";
pub const __DECL_SIMD_powf16 = "";
pub const __DECL_SIMD_powf32 = "";
pub const __DECL_SIMD_powf64 = "";
pub const __DECL_SIMD_powf128 = "";
pub const __DECL_SIMD_powf32x = "";
pub const __DECL_SIMD_powf64x = "";
pub const __DECL_SIMD_powf128x = "";
pub const __DECL_SIMD_acos = "";
pub const __DECL_SIMD_acosf = "";
pub const __DECL_SIMD_acosl = "";
pub const __DECL_SIMD_acosf16 = "";
pub const __DECL_SIMD_acosf32 = "";
pub const __DECL_SIMD_acosf64 = "";
pub const __DECL_SIMD_acosf128 = "";
pub const __DECL_SIMD_acosf32x = "";
pub const __DECL_SIMD_acosf64x = "";
pub const __DECL_SIMD_acosf128x = "";
pub const __DECL_SIMD_atan = "";
pub const __DECL_SIMD_atanf = "";
pub const __DECL_SIMD_atanl = "";
pub const __DECL_SIMD_atanf16 = "";
pub const __DECL_SIMD_atanf32 = "";
pub const __DECL_SIMD_atanf64 = "";
pub const __DECL_SIMD_atanf128 = "";
pub const __DECL_SIMD_atanf32x = "";
pub const __DECL_SIMD_atanf64x = "";
pub const __DECL_SIMD_atanf128x = "";
pub const __DECL_SIMD_asin = "";
pub const __DECL_SIMD_asinf = "";
pub const __DECL_SIMD_asinl = "";
pub const __DECL_SIMD_asinf16 = "";
pub const __DECL_SIMD_asinf32 = "";
pub const __DECL_SIMD_asinf64 = "";
pub const __DECL_SIMD_asinf128 = "";
pub const __DECL_SIMD_asinf32x = "";
pub const __DECL_SIMD_asinf64x = "";
pub const __DECL_SIMD_asinf128x = "";
pub const __DECL_SIMD_hypot = "";
pub const __DECL_SIMD_hypotf = "";
pub const __DECL_SIMD_hypotl = "";
pub const __DECL_SIMD_hypotf16 = "";
pub const __DECL_SIMD_hypotf32 = "";
pub const __DECL_SIMD_hypotf64 = "";
pub const __DECL_SIMD_hypotf128 = "";
pub const __DECL_SIMD_hypotf32x = "";
pub const __DECL_SIMD_hypotf64x = "";
pub const __DECL_SIMD_hypotf128x = "";
pub const __DECL_SIMD_exp2 = "";
pub const __DECL_SIMD_exp2f = "";
pub const __DECL_SIMD_exp2l = "";
pub const __DECL_SIMD_exp2f16 = "";
pub const __DECL_SIMD_exp2f32 = "";
pub const __DECL_SIMD_exp2f64 = "";
pub const __DECL_SIMD_exp2f128 = "";
pub const __DECL_SIMD_exp2f32x = "";
pub const __DECL_SIMD_exp2f64x = "";
pub const __DECL_SIMD_exp2f128x = "";
pub const __DECL_SIMD_exp10 = "";
pub const __DECL_SIMD_exp10f = "";
pub const __DECL_SIMD_exp10l = "";
pub const __DECL_SIMD_exp10f16 = "";
pub const __DECL_SIMD_exp10f32 = "";
pub const __DECL_SIMD_exp10f64 = "";
pub const __DECL_SIMD_exp10f128 = "";
pub const __DECL_SIMD_exp10f32x = "";
pub const __DECL_SIMD_exp10f64x = "";
pub const __DECL_SIMD_exp10f128x = "";
pub const __DECL_SIMD_cosh = "";
pub const __DECL_SIMD_coshf = "";
pub const __DECL_SIMD_coshl = "";
pub const __DECL_SIMD_coshf16 = "";
pub const __DECL_SIMD_coshf32 = "";
pub const __DECL_SIMD_coshf64 = "";
pub const __DECL_SIMD_coshf128 = "";
pub const __DECL_SIMD_coshf32x = "";
pub const __DECL_SIMD_coshf64x = "";
pub const __DECL_SIMD_coshf128x = "";
pub const __DECL_SIMD_expm1 = "";
pub const __DECL_SIMD_expm1f = "";
pub const __DECL_SIMD_expm1l = "";
pub const __DECL_SIMD_expm1f16 = "";
pub const __DECL_SIMD_expm1f32 = "";
pub const __DECL_SIMD_expm1f64 = "";
pub const __DECL_SIMD_expm1f128 = "";
pub const __DECL_SIMD_expm1f32x = "";
pub const __DECL_SIMD_expm1f64x = "";
pub const __DECL_SIMD_expm1f128x = "";
pub const __DECL_SIMD_sinh = "";
pub const __DECL_SIMD_sinhf = "";
pub const __DECL_SIMD_sinhl = "";
pub const __DECL_SIMD_sinhf16 = "";
pub const __DECL_SIMD_sinhf32 = "";
pub const __DECL_SIMD_sinhf64 = "";
pub const __DECL_SIMD_sinhf128 = "";
pub const __DECL_SIMD_sinhf32x = "";
pub const __DECL_SIMD_sinhf64x = "";
pub const __DECL_SIMD_sinhf128x = "";
pub const __DECL_SIMD_cbrt = "";
pub const __DECL_SIMD_cbrtf = "";
pub const __DECL_SIMD_cbrtl = "";
pub const __DECL_SIMD_cbrtf16 = "";
pub const __DECL_SIMD_cbrtf32 = "";
pub const __DECL_SIMD_cbrtf64 = "";
pub const __DECL_SIMD_cbrtf128 = "";
pub const __DECL_SIMD_cbrtf32x = "";
pub const __DECL_SIMD_cbrtf64x = "";
pub const __DECL_SIMD_cbrtf128x = "";
pub const __DECL_SIMD_atan2 = "";
pub const __DECL_SIMD_atan2f = "";
pub const __DECL_SIMD_atan2l = "";
pub const __DECL_SIMD_atan2f16 = "";
pub const __DECL_SIMD_atan2f32 = "";
pub const __DECL_SIMD_atan2f64 = "";
pub const __DECL_SIMD_atan2f128 = "";
pub const __DECL_SIMD_atan2f32x = "";
pub const __DECL_SIMD_atan2f64x = "";
pub const __DECL_SIMD_atan2f128x = "";
pub const __DECL_SIMD_log10 = "";
pub const __DECL_SIMD_log10f = "";
pub const __DECL_SIMD_log10l = "";
pub const __DECL_SIMD_log10f16 = "";
pub const __DECL_SIMD_log10f32 = "";
pub const __DECL_SIMD_log10f64 = "";
pub const __DECL_SIMD_log10f128 = "";
pub const __DECL_SIMD_log10f32x = "";
pub const __DECL_SIMD_log10f64x = "";
pub const __DECL_SIMD_log10f128x = "";
pub const __DECL_SIMD_log2 = "";
pub const __DECL_SIMD_log2f = "";
pub const __DECL_SIMD_log2l = "";
pub const __DECL_SIMD_log2f16 = "";
pub const __DECL_SIMD_log2f32 = "";
pub const __DECL_SIMD_log2f64 = "";
pub const __DECL_SIMD_log2f128 = "";
pub const __DECL_SIMD_log2f32x = "";
pub const __DECL_SIMD_log2f64x = "";
pub const __DECL_SIMD_log2f128x = "";
pub const __DECL_SIMD_log1p = "";
pub const __DECL_SIMD_log1pf = "";
pub const __DECL_SIMD_log1pl = "";
pub const __DECL_SIMD_log1pf16 = "";
pub const __DECL_SIMD_log1pf32 = "";
pub const __DECL_SIMD_log1pf64 = "";
pub const __DECL_SIMD_log1pf128 = "";
pub const __DECL_SIMD_log1pf32x = "";
pub const __DECL_SIMD_log1pf64x = "";
pub const __DECL_SIMD_log1pf128x = "";
pub const __DECL_SIMD_atanh = "";
pub const __DECL_SIMD_atanhf = "";
pub const __DECL_SIMD_atanhl = "";
pub const __DECL_SIMD_atanhf16 = "";
pub const __DECL_SIMD_atanhf32 = "";
pub const __DECL_SIMD_atanhf64 = "";
pub const __DECL_SIMD_atanhf128 = "";
pub const __DECL_SIMD_atanhf32x = "";
pub const __DECL_SIMD_atanhf64x = "";
pub const __DECL_SIMD_atanhf128x = "";
pub const __DECL_SIMD_acosh = "";
pub const __DECL_SIMD_acoshf = "";
pub const __DECL_SIMD_acoshl = "";
pub const __DECL_SIMD_acoshf16 = "";
pub const __DECL_SIMD_acoshf32 = "";
pub const __DECL_SIMD_acoshf64 = "";
pub const __DECL_SIMD_acoshf128 = "";
pub const __DECL_SIMD_acoshf32x = "";
pub const __DECL_SIMD_acoshf64x = "";
pub const __DECL_SIMD_acoshf128x = "";
pub const __DECL_SIMD_erf = "";
pub const __DECL_SIMD_erff = "";
pub const __DECL_SIMD_erfl = "";
pub const __DECL_SIMD_erff16 = "";
pub const __DECL_SIMD_erff32 = "";
pub const __DECL_SIMD_erff64 = "";
pub const __DECL_SIMD_erff128 = "";
pub const __DECL_SIMD_erff32x = "";
pub const __DECL_SIMD_erff64x = "";
pub const __DECL_SIMD_erff128x = "";
pub const __DECL_SIMD_tanh = "";
pub const __DECL_SIMD_tanhf = "";
pub const __DECL_SIMD_tanhl = "";
pub const __DECL_SIMD_tanhf16 = "";
pub const __DECL_SIMD_tanhf32 = "";
pub const __DECL_SIMD_tanhf64 = "";
pub const __DECL_SIMD_tanhf128 = "";
pub const __DECL_SIMD_tanhf32x = "";
pub const __DECL_SIMD_tanhf64x = "";
pub const __DECL_SIMD_tanhf128x = "";
pub const __DECL_SIMD_asinh = "";
pub const __DECL_SIMD_asinhf = "";
pub const __DECL_SIMD_asinhl = "";
pub const __DECL_SIMD_asinhf16 = "";
pub const __DECL_SIMD_asinhf32 = "";
pub const __DECL_SIMD_asinhf64 = "";
pub const __DECL_SIMD_asinhf128 = "";
pub const __DECL_SIMD_asinhf32x = "";
pub const __DECL_SIMD_asinhf64x = "";
pub const __DECL_SIMD_asinhf128x = "";
pub const __DECL_SIMD_erfc = "";
pub const __DECL_SIMD_erfcf = "";
pub const __DECL_SIMD_erfcl = "";
pub const __DECL_SIMD_erfcf16 = "";
pub const __DECL_SIMD_erfcf32 = "";
pub const __DECL_SIMD_erfcf64 = "";
pub const __DECL_SIMD_erfcf128 = "";
pub const __DECL_SIMD_erfcf32x = "";
pub const __DECL_SIMD_erfcf64x = "";
pub const __DECL_SIMD_erfcf128x = "";
pub const __DECL_SIMD_tan = "";
pub const __DECL_SIMD_tanf = "";
pub const __DECL_SIMD_tanl = "";
pub const __DECL_SIMD_tanf16 = "";
pub const __DECL_SIMD_tanf32 = "";
pub const __DECL_SIMD_tanf64 = "";
pub const __DECL_SIMD_tanf128 = "";
pub const __DECL_SIMD_tanf32x = "";
pub const __DECL_SIMD_tanf64x = "";
pub const __DECL_SIMD_tanf128x = "";
pub const HUGE_VAL = @compileError("unable to translate macro: undefined identifier `__builtin_huge_val`");
// /usr/include/math.h:48:10
pub const HUGE_VALF = __builtin_huge_valf();
pub const HUGE_VALL = @compileError("unable to translate macro: undefined identifier `__builtin_huge_vall`");
// /usr/include/math.h:60:11
pub const INFINITY = __builtin_inff();
pub const NAN = __builtin_nanf("");
pub const __GLIBC_FLT_EVAL_METHOD = @compileError("unable to translate macro: undefined identifier `__FLT_EVAL_METHOD__`");
// /usr/include/bits/flt-eval-method.h:27:11
pub const __FP_LOGB0_IS_MIN = @as(c_int, 1);
pub const __FP_LOGBNAN_IS_MIN = @as(c_int, 1);
pub const FP_ILOGB0 = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const FP_ILOGBNAN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const __SIMD_DECL = @compileError("unable to translate macro: undefined identifier `__DECL_SIMD_`");
// /usr/include/math.h:276:9
pub inline fn __MATHCALL_VEC(function: anytype, suffix: anytype, args: anytype) @TypeOf(__SIMD_DECL(__MATH_PRECNAME(function, suffix)) ++ __MATHCALL(function, suffix, args)) {
    _ = &function;
    _ = &suffix;
    _ = &args;
    return __SIMD_DECL(__MATH_PRECNAME(function, suffix)) ++ __MATHCALL(function, suffix, args);
}
pub inline fn __MATHDECL_VEC(@"type": anytype, function: anytype, suffix: anytype, args: anytype) @TypeOf(__SIMD_DECL(__MATH_PRECNAME(function, suffix)) ++ __MATHDECL(@"type", function, suffix, args)) {
    _ = &@"type";
    _ = &function;
    _ = &suffix;
    _ = &args;
    return __SIMD_DECL(__MATH_PRECNAME(function, suffix)) ++ __MATHDECL(@"type", function, suffix, args);
}
pub inline fn __MATHCALL(function: anytype, suffix: anytype, args: anytype) @TypeOf(__MATHDECL(_Mdouble_, function, suffix, args)) {
    _ = &function;
    _ = &suffix;
    _ = &args;
    return __MATHDECL(_Mdouble_, function, suffix, args);
}
pub const __MATHDECL = @compileError("unable to translate macro: undefined identifier `__`");
// /usr/include/math.h:288:9
pub inline fn __MATHCALLX(function: anytype, suffix: anytype, args: anytype, attrib: anytype) @TypeOf(__MATHDECLX(_Mdouble_, function, suffix, args, attrib)) {
    _ = &function;
    _ = &suffix;
    _ = &args;
    _ = &attrib;
    return __MATHDECLX(_Mdouble_, function, suffix, args, attrib);
}
pub const __MATHDECLX = @compileError("unable to translate macro: undefined identifier `__`");
// /usr/include/math.h:293:9
pub const __MATHDECL_1_IMPL = @compileError("unable to translate C expr: unexpected token 'extern'");
// /usr/include/math.h:296:9
pub inline fn __MATHDECL_1(@"type": anytype, function: anytype, suffix: anytype, args: anytype) @TypeOf(__MATHDECL_1_IMPL(@"type", function, suffix, args)) {
    _ = &@"type";
    _ = &function;
    _ = &suffix;
    _ = &args;
    return __MATHDECL_1_IMPL(@"type", function, suffix, args);
}
pub inline fn __MATHDECL_ALIAS(@"type": anytype, function: anytype, suffix: anytype, args: anytype, alias: anytype) @TypeOf(__MATHDECL_1(@"type", function, suffix, args)) {
    _ = &@"type";
    _ = &function;
    _ = &suffix;
    _ = &args;
    _ = &alias;
    return __MATHDECL_1(@"type", function, suffix, args);
}
pub const __MATHREDIR = @compileError("unable to translate C expr: unexpected token 'extern'");
// /usr/include/math.h:305:9
pub const _Mdouble_ = f64;
pub inline fn __MATH_PRECNAME(name: anytype, r: anytype) @TypeOf(__CONCAT(name, r)) {
    _ = &name;
    _ = &r;
    return __CONCAT(name, r);
}
pub const __MATH_DECLARING_DOUBLE = @as(c_int, 1);
pub const __MATH_DECLARING_FLOATN = @as(c_int, 0);
pub const __MATH_DECLARE_LDOUBLE = @as(c_int, 1);
pub const __MATHCALL_NARROW_ARGS_1 = @compileError("unable to translate macro: undefined identifier `_Marg_`");
// /usr/include/math.h:550:9
pub const __MATHCALL_NARROW_ARGS_2 = @compileError("unable to translate macro: undefined identifier `_Marg_`");
// /usr/include/math.h:551:9
pub const __MATHCALL_NARROW_ARGS_3 = @compileError("unable to translate macro: undefined identifier `_Marg_`");
// /usr/include/math.h:552:9
pub const __MATHCALL_NARROW_NORMAL = @compileError("unable to translate macro: undefined identifier `_Mret_`");
// /usr/include/math.h:553:9
pub const __MATHCALL_NARROW_REDIR = @compileError("unable to translate macro: undefined identifier `_Mret_`");
// /usr/include/math.h:555:9
pub inline fn __MATHCALL_NARROW(func: anytype, redir: anytype, nargs: anytype) @TypeOf(__MATHCALL_NARROW_NORMAL(func, nargs)) {
    _ = &func;
    _ = &redir;
    _ = &nargs;
    return __MATHCALL_NARROW_NORMAL(func, nargs);
}
pub const __MATH_TG = @compileError("unable to translate macro: undefined identifier `f`");
// /usr/include/math.h:922:10
pub const fpclassify = @compileError("unable to translate macro: undefined identifier `__builtin_fpclassify`");
// /usr/include/math.h:967:11
pub inline fn signbit(x: anytype) @TypeOf(__builtin_signbit(x)) {
    _ = &x;
    return __builtin_signbit(x);
}
pub const isfinite = @compileError("unable to translate macro: undefined identifier `__builtin_isfinite`");
// /usr/include/math.h:994:11
pub const isnormal = @compileError("unable to translate macro: undefined identifier `__builtin_isnormal`");
// /usr/include/math.h:1002:11
pub const MATH_ERRNO = @as(c_int, 1);
pub const MATH_ERREXCEPT = @as(c_int, 2);
pub const math_errhandling = MATH_ERRNO | MATH_ERREXCEPT;
pub const M_E = @as(f64, 2.7182818284590452354);
pub const M_LOG2E = @as(f64, 1.4426950408889634074);
pub const M_LOG10E = @as(f64, 0.43429448190325182765);
pub const M_LN2 = @as(f64, 0.69314718055994530942);
pub const M_LN10 = @as(f64, 2.30258509299404568402);
pub const M_PI = @as(f64, 3.14159265358979323846);
pub const M_PI_2 = @as(f64, 1.57079632679489661923);
pub const M_PI_4 = @as(f64, 0.78539816339744830962);
pub const M_1_PI = @as(f64, 0.31830988618379067154);
pub const M_2_PI = @as(f64, 0.63661977236758134308);
pub const M_2_SQRTPI = @as(f64, 1.12837916709551257390);
pub const M_SQRT2 = @as(f64, 1.41421356237309504880);
pub const M_SQRT1_2 = @as(f64, 0.70710678118654752440);
pub const isgreater = @compileError("unable to translate macro: undefined identifier `__builtin_isgreater`");
// /usr/include/math.h:1306:11
pub const isgreaterequal = @compileError("unable to translate macro: undefined identifier `__builtin_isgreaterequal`");
// /usr/include/math.h:1307:11
pub const isless = @compileError("unable to translate macro: undefined identifier `__builtin_isless`");
// /usr/include/math.h:1308:11
pub const islessequal = @compileError("unable to translate macro: undefined identifier `__builtin_islessequal`");
// /usr/include/math.h:1309:11
pub const islessgreater = @compileError("unable to translate macro: undefined identifier `__builtin_islessgreater`");
// /usr/include/math.h:1310:11
pub const isunordered = @compileError("unable to translate macro: undefined identifier `__builtin_isunordered`");
// /usr/include/math.h:1311:11
pub const __CLANG_FLOAT_H = "";
pub const FLT_EVAL_METHOD = @compileError("unable to translate macro: undefined identifier `__FLT_EVAL_METHOD__`");
// /usr/lib/zig/include/float.h:91:9
pub const FLT_ROUNDS = @compileError("unable to translate macro: undefined identifier `__builtin_flt_rounds`");
// /usr/lib/zig/include/float.h:93:9
pub const FLT_RADIX = __FLT_RADIX__;
pub const FLT_MANT_DIG = __FLT_MANT_DIG__;
pub const DBL_MANT_DIG = __DBL_MANT_DIG__;
pub const LDBL_MANT_DIG = __LDBL_MANT_DIG__;
pub const DECIMAL_DIG = __DECIMAL_DIG__;
pub const FLT_DIG = __FLT_DIG__;
pub const DBL_DIG = __DBL_DIG__;
pub const LDBL_DIG = __LDBL_DIG__;
pub const FLT_MIN_EXP = __FLT_MIN_EXP__;
pub const DBL_MIN_EXP = __DBL_MIN_EXP__;
pub const LDBL_MIN_EXP = __LDBL_MIN_EXP__;
pub const FLT_MIN_10_EXP = __FLT_MIN_10_EXP__;
pub const DBL_MIN_10_EXP = __DBL_MIN_10_EXP__;
pub const LDBL_MIN_10_EXP = __LDBL_MIN_10_EXP__;
pub const FLT_MAX_EXP = __FLT_MAX_EXP__;
pub const DBL_MAX_EXP = __DBL_MAX_EXP__;
pub const LDBL_MAX_EXP = __LDBL_MAX_EXP__;
pub const FLT_MAX_10_EXP = __FLT_MAX_10_EXP__;
pub const DBL_MAX_10_EXP = __DBL_MAX_10_EXP__;
pub const LDBL_MAX_10_EXP = __LDBL_MAX_10_EXP__;
pub const FLT_MAX = __FLT_MAX__;
pub const DBL_MAX = __DBL_MAX__;
pub const LDBL_MAX = __LDBL_MAX__;
pub const FLT_EPSILON = __FLT_EPSILON__;
pub const DBL_EPSILON = __DBL_EPSILON__;
pub const LDBL_EPSILON = __LDBL_EPSILON__;
pub const FLT_MIN = __FLT_MIN__;
pub const DBL_MIN = __DBL_MIN__;
pub const LDBL_MIN = __LDBL_MIN__;
pub const FLT_TRUE_MIN = __FLT_DENORM_MIN__;
pub const DBL_TRUE_MIN = __DBL_DENORM_MIN__;
pub const LDBL_TRUE_MIN = __LDBL_DENORM_MIN__;
pub const FLT_DECIMAL_DIG = __FLT_DECIMAL_DIG__;
pub const DBL_DECIMAL_DIG = __DBL_DECIMAL_DIG__;
pub const LDBL_DECIMAL_DIG = __LDBL_DECIMAL_DIG__;
pub const FLT_HAS_SUBNORM = __FLT_HAS_DENORM__;
pub const DBL_HAS_SUBNORM = __DBL_HAS_DENORM__;
pub const LDBL_HAS_SUBNORM = __LDBL_HAS_DENORM__;
pub const SDL_SIZE_MAX = SIZE_MAX;
pub inline fn _SDL_HAS_BUILTIN(x: anytype) @TypeOf(__has_builtin(x)) {
    _ = &x;
    return __has_builtin(x);
}
pub const SDL_arraysize = @compileError("unable to translate C expr: expected ')' instead got '['");
// /usr/include/SDL2/SDL_stdinc.h:134:9
pub inline fn SDL_TABLESIZE(table: anytype) @TypeOf(SDL_arraysize(table)) {
    _ = &table;
    return SDL_arraysize(table);
}
pub const SDL_STRINGIFY_ARG = @compileError("unable to translate C expr: unexpected token '#'");
// /usr/include/SDL2/SDL_stdinc.h:142:9
pub const SDL_reinterpret_cast = @import("std").zig.c_translation.Macros.CAST_OR_CALL;
pub const SDL_static_cast = @import("std").zig.c_translation.Macros.CAST_OR_CALL;
pub const SDL_const_cast = @import("std").zig.c_translation.Macros.CAST_OR_CALL;
pub inline fn SDL_FOURCC(A: anytype, B: anytype, C: anytype, D: anytype) @TypeOf((((SDL_static_cast(Uint32, SDL_static_cast(Uint8, A)) << @as(c_int, 0)) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, B)) << @as(c_int, 8))) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, C)) << @as(c_int, 16))) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, D)) << @as(c_int, 24))) {
    _ = &A;
    _ = &B;
    _ = &C;
    _ = &D;
    return (((SDL_static_cast(Uint32, SDL_static_cast(Uint8, A)) << @as(c_int, 0)) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, B)) << @as(c_int, 8))) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, C)) << @as(c_int, 16))) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, D)) << @as(c_int, 24));
}
pub const SDL_MAX_SINT8 = @import("std").zig.c_translation.cast(Sint8, @as(c_int, 0x7F));
pub const SDL_MIN_SINT8 = @import("std").zig.c_translation.cast(Sint8, ~@as(c_int, 0x7F));
pub const SDL_MAX_UINT8 = @import("std").zig.c_translation.cast(Uint8, @as(c_int, 0xFF));
pub const SDL_MIN_UINT8 = @import("std").zig.c_translation.cast(Uint8, @as(c_int, 0x00));
pub const SDL_MAX_SINT16 = @import("std").zig.c_translation.cast(Sint16, @as(c_int, 0x7FFF));
pub const SDL_MIN_SINT16 = @import("std").zig.c_translation.cast(Sint16, ~@as(c_int, 0x7FFF));
pub const SDL_MAX_UINT16 = @import("std").zig.c_translation.cast(Uint16, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF, .hex));
pub const SDL_MIN_UINT16 = @import("std").zig.c_translation.cast(Uint16, @as(c_int, 0x0000));
pub const SDL_MAX_SINT32 = @import("std").zig.c_translation.cast(Sint32, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7FFFFFFF, .hex));
pub const SDL_MIN_SINT32 = @import("std").zig.c_translation.cast(Sint32, ~@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7FFFFFFF, .hex));
pub const SDL_MAX_UINT32 = @import("std").zig.c_translation.cast(Uint32, @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex));
pub const SDL_MIN_UINT32 = @import("std").zig.c_translation.cast(Uint32, @as(c_int, 0x00000000));
pub const SDL_MAX_SINT64 = @import("std").zig.c_translation.cast(Sint64, @as(c_longlong, 0x7FFFFFFFFFFFFFFF));
pub const SDL_MIN_SINT64 = @import("std").zig.c_translation.cast(Sint64, ~@as(c_longlong, 0x7FFFFFFFFFFFFFFF));
pub const SDL_MAX_UINT64 = @import("std").zig.c_translation.cast(Uint64, @as(c_ulonglong, 0xFFFFFFFFFFFFFFFF));
pub const SDL_MIN_UINT64 = @import("std").zig.c_translation.cast(Uint64, @as(c_ulonglong, 0x0000000000000000));
pub const SDL_FLT_EPSILON = FLT_EPSILON;
pub const SDL_PRIs64 = PRId64;
pub const SDL_PRIu64 = PRIu64;
pub const SDL_PRIx64 = PRIx64;
pub const SDL_PRIX64 = PRIX64;
pub const SDL_PRIs32 = PRId32;
pub const SDL_PRIu32 = PRIu32;
pub const SDL_PRIx32 = PRIx32;
pub const SDL_PRIX32 = PRIX32;
pub const SDL_IN_BYTECAP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL2/SDL_stdinc.h:356:9
pub const SDL_INOUT_Z_CAP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL2/SDL_stdinc.h:357:9
pub const SDL_OUT_Z_CAP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL2/SDL_stdinc.h:358:9
pub const SDL_OUT_CAP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL2/SDL_stdinc.h:359:9
pub const SDL_OUT_BYTECAP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL2/SDL_stdinc.h:360:9
pub const SDL_OUT_Z_BYTECAP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL2/SDL_stdinc.h:361:9
pub const SDL_PRINTF_FORMAT_STRING = "";
pub const SDL_SCANF_FORMAT_STRING = "";
pub const SDL_PRINTF_VARARG_FUNC = @compileError("unable to translate macro: undefined identifier `format`");
// /usr/include/SDL2/SDL_stdinc.h:366:9
pub const SDL_PRINTF_VARARG_FUNCV = @compileError("unable to translate macro: undefined identifier `format`");
// /usr/include/SDL2/SDL_stdinc.h:367:9
pub const SDL_SCANF_VARARG_FUNC = @compileError("unable to translate macro: undefined identifier `format`");
// /usr/include/SDL2/SDL_stdinc.h:368:9
pub const SDL_SCANF_VARARG_FUNCV = @compileError("unable to translate macro: undefined identifier `format`");
// /usr/include/SDL2/SDL_stdinc.h:369:9
pub const SDL_COMPILE_TIME_ASSERT = @compileError("unable to translate C expr: unexpected token '_Static_assert'");
// /usr/include/SDL2/SDL_stdinc.h:387:9
pub const SDL_stack_alloc = @compileError("unable to translate C expr: unexpected token ')'");
// /usr/include/SDL2/SDL_stdinc.h:437:9
pub const SDL_stack_free = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL2/SDL_stdinc.h:438:9
pub inline fn SDL_min(x: anytype, y: anytype) @TypeOf(if (x < y) x else y) {
    _ = &x;
    _ = &y;
    return if (x < y) x else y;
}
pub inline fn SDL_max(x: anytype, y: anytype) @TypeOf(if (x > y) x else y) {
    _ = &x;
    _ = &y;
    return if (x > y) x else y;
}
pub inline fn SDL_clamp(x: anytype, a: anytype, b: anytype) @TypeOf(if (x < a) a else if (x > b) b else x) {
    _ = &x;
    _ = &a;
    _ = &b;
    return if (x < a) a else if (x > b) b else x;
}
pub const SDL_zero = @compileError("unable to translate C expr: unexpected token '('");
// /usr/include/SDL2/SDL_stdinc.h:524:9
pub const SDL_zerop = @compileError("unable to translate C expr: unexpected token '*'");
// /usr/include/SDL2/SDL_stdinc.h:525:9
pub const SDL_zeroa = @compileError("unable to translate C expr: unexpected token '('");
// /usr/include/SDL2/SDL_stdinc.h:526:9
pub const SDL_copyp = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/include/SDL2/SDL_stdinc.h:528:9
pub const SDL_ICONV_ERROR = @import("std").zig.c_translation.cast(usize, -@as(c_int, 1));
pub const SDL_ICONV_E2BIG = @import("std").zig.c_translation.cast(usize, -@as(c_int, 2));
pub const SDL_ICONV_EILSEQ = @import("std").zig.c_translation.cast(usize, -@as(c_int, 3));
pub const SDL_ICONV_EINVAL = @import("std").zig.c_translation.cast(usize, -@as(c_int, 4));
pub inline fn SDL_iconv_utf8_locale(S: anytype) @TypeOf(SDL_iconv_string("", "UTF-8", S, SDL_strlen(S) + @as(c_int, 1))) {
    _ = &S;
    return SDL_iconv_string("", "UTF-8", S, SDL_strlen(S) + @as(c_int, 1));
}
pub inline fn SDL_iconv_utf8_ucs2(S: anytype) [*c]Uint16 {
    _ = &S;
    return @import("std").zig.c_translation.cast([*c]Uint16, SDL_iconv_string("UCS-2", "UTF-8", S, SDL_strlen(S) + @as(c_int, 1)));
}
pub inline fn SDL_iconv_utf8_ucs4(S: anytype) [*c]Uint32 {
    _ = &S;
    return @import("std").zig.c_translation.cast([*c]Uint32, SDL_iconv_string("UCS-4", "UTF-8", S, SDL_strlen(S) + @as(c_int, 1)));
}
pub inline fn SDL_iconv_wchar_utf8(S: anytype) @TypeOf(SDL_iconv_string("UTF-8", "WCHAR_T", @import("std").zig.c_translation.cast([*c]u8, S), (SDL_wcslen(S) + @as(c_int, 1)) * @import("std").zig.c_translation.sizeof(wchar_t))) {
    _ = &S;
    return SDL_iconv_string("UTF-8", "WCHAR_T", @import("std").zig.c_translation.cast([*c]u8, S), (SDL_wcslen(S) + @as(c_int, 1)) * @import("std").zig.c_translation.sizeof(wchar_t));
}
pub const SDLMAIN_DECLSPEC = "";
pub const SDL_assert_h_ = "";
pub const SDL_ASSERT_LEVEL = @as(c_int, 2);
pub const SDL_TriggerBreakpoint = @compileError("unable to translate macro: undefined identifier `__builtin_debugtrap`");
// /usr/include/SDL2/SDL_assert.h:55:13
pub const SDL_FUNCTION = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /usr/include/SDL2/SDL_assert.h:75:12
pub const SDL_FILE = @compileError("unable to translate macro: undefined identifier `__FILE__`");
// /usr/include/SDL2/SDL_assert.h:81:9
pub const SDL_LINE = @compileError("unable to translate macro: undefined identifier `__LINE__`");
// /usr/include/SDL2/SDL_assert.h:82:9
pub const SDL_NULL_WHILE_LOOP_CONDITION = @as(c_int, 0);
pub const SDL_disabled_assert = @compileError("unable to translate C expr: unexpected token 'do'");
// /usr/include/SDL2/SDL_assert.h:107:9
pub const SDL_enabled_assert = @compileError("unable to translate macro: undefined identifier `sdl_assert_data`");
// /usr/include/SDL2/SDL_assert.h:151:9
pub inline fn SDL_assert(condition: anytype) @TypeOf(SDL_enabled_assert(condition)) {
    _ = &condition;
    return SDL_enabled_assert(condition);
}
pub inline fn SDL_assert_release(condition: anytype) @TypeOf(SDL_enabled_assert(condition)) {
    _ = &condition;
    return SDL_enabled_assert(condition);
}
pub inline fn SDL_assert_paranoid(condition: anytype) @TypeOf(SDL_disabled_assert(condition)) {
    _ = &condition;
    return SDL_disabled_assert(condition);
}
pub inline fn SDL_assert_always(condition: anytype) @TypeOf(SDL_enabled_assert(condition)) {
    _ = &condition;
    return SDL_enabled_assert(condition);
}
pub const SDL_assert_state = SDL_AssertState;
pub const SDL_assert_data = SDL_AssertData;
pub const SDL_atomic_h_ = "";
pub const SDL_CompilerBarrier = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/SDL2/SDL_atomic.h:153:9
pub inline fn SDL_MemoryBarrierRelease() @TypeOf(SDL_CompilerBarrier()) {
    return SDL_CompilerBarrier();
}
pub inline fn SDL_MemoryBarrierAcquire() @TypeOf(SDL_CompilerBarrier()) {
    return SDL_CompilerBarrier();
}
pub const SDL_CPUPauseInstruction = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/SDL2/SDL_atomic.h:242:13
pub inline fn SDL_AtomicIncRef(a: anytype) @TypeOf(SDL_AtomicAdd(a, @as(c_int, 1))) {
    _ = &a;
    return SDL_AtomicAdd(a, @as(c_int, 1));
}
pub inline fn SDL_AtomicDecRef(a: anytype) @TypeOf(SDL_AtomicAdd(a, -@as(c_int, 1)) == @as(c_int, 1)) {
    _ = &a;
    return SDL_AtomicAdd(a, -@as(c_int, 1)) == @as(c_int, 1);
}
pub const SDL_audio_h_ = "";
pub const SDL_error_h_ = "";
pub inline fn SDL_OutOfMemory() @TypeOf(SDL_Error(SDL_ENOMEM)) {
    return SDL_Error(SDL_ENOMEM);
}
pub inline fn SDL_Unsupported() @TypeOf(SDL_Error(SDL_UNSUPPORTED)) {
    return SDL_Error(SDL_UNSUPPORTED);
}
pub inline fn SDL_InvalidParamError(param: anytype) @TypeOf(SDL_SetError("Parameter '%s' is invalid", param)) {
    _ = &param;
    return SDL_SetError("Parameter '%s' is invalid", param);
}
pub const SDL_endian_h_ = "";
pub const SDL_LIL_ENDIAN = @as(c_int, 1234);
pub const SDL_BIG_ENDIAN = @as(c_int, 4321);
pub const SDL_BYTEORDER = __BYTE_ORDER;
pub const SDL_FLOATWORDORDER = SDL_BYTEORDER;
pub const HAS_BUILTIN_BSWAP16 = (_SDL_HAS_BUILTIN(__builtin_bswap16) != 0) or ((__GNUC__ > @as(c_int, 4)) or ((__GNUC__ == @as(c_int, 4)) and (__GNUC_MINOR__ >= @as(c_int, 8))));
pub const HAS_BUILTIN_BSWAP32 = (_SDL_HAS_BUILTIN(__builtin_bswap32) != 0) or ((__GNUC__ > @as(c_int, 4)) or ((__GNUC__ == @as(c_int, 4)) and (__GNUC_MINOR__ >= @as(c_int, 3))));
pub const HAS_BUILTIN_BSWAP64 = (_SDL_HAS_BUILTIN(__builtin_bswap64) != 0) or ((__GNUC__ > @as(c_int, 4)) or ((__GNUC__ == @as(c_int, 4)) and (__GNUC_MINOR__ >= @as(c_int, 3))));
pub const HAS_BROKEN_BSWAP = (__GNUC__ == @as(c_int, 2)) and (__GNUC_MINOR__ <= @as(c_int, 95));
pub inline fn SDL_Swap16(x: anytype) @TypeOf(__builtin_bswap16(x)) {
    _ = &x;
    return __builtin_bswap16(x);
}
pub inline fn SDL_Swap32(x: anytype) @TypeOf(__builtin_bswap32(x)) {
    _ = &x;
    return __builtin_bswap32(x);
}
pub inline fn SDL_Swap64(x: anytype) @TypeOf(__builtin_bswap64(x)) {
    _ = &x;
    return __builtin_bswap64(x);
}
pub inline fn SDL_SwapLE16(X: anytype) @TypeOf(X) {
    _ = &X;
    return X;
}
pub inline fn SDL_SwapLE32(X: anytype) @TypeOf(X) {
    _ = &X;
    return X;
}
pub inline fn SDL_SwapLE64(X: anytype) @TypeOf(X) {
    _ = &X;
    return X;
}
pub inline fn SDL_SwapFloatLE(X: anytype) @TypeOf(X) {
    _ = &X;
    return X;
}
pub inline fn SDL_SwapBE16(X: anytype) @TypeOf(SDL_Swap16(X)) {
    _ = &X;
    return SDL_Swap16(X);
}
pub inline fn SDL_SwapBE32(X: anytype) @TypeOf(SDL_Swap32(X)) {
    _ = &X;
    return SDL_Swap32(X);
}
pub inline fn SDL_SwapBE64(X: anytype) @TypeOf(SDL_Swap64(X)) {
    _ = &X;
    return SDL_Swap64(X);
}
pub inline fn SDL_SwapFloatBE(X: anytype) @TypeOf(SDL_SwapFloat(X)) {
    _ = &X;
    return SDL_SwapFloat(X);
}
pub const SDL_mutex_h_ = "";
pub const SDL_THREAD_ANNOTATION_ATTRIBUTE__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/SDL2/SDL_mutex.h:42:9
pub const SDL_CAPABILITY = @compileError("unable to translate macro: undefined identifier `capability`");
// /usr/include/SDL2/SDL_mutex.h:45:9
pub const SDL_SCOPED_CAPABILITY = @compileError("unable to translate macro: undefined identifier `scoped_lockable`");
// /usr/include/SDL2/SDL_mutex.h:48:9
pub const SDL_GUARDED_BY = @compileError("unable to translate macro: undefined identifier `guarded_by`");
// /usr/include/SDL2/SDL_mutex.h:51:9
pub const SDL_PT_GUARDED_BY = @compileError("unable to translate macro: undefined identifier `pt_guarded_by`");
// /usr/include/SDL2/SDL_mutex.h:54:9
pub const SDL_ACQUIRED_BEFORE = @compileError("unable to translate macro: undefined identifier `acquired_before`");
// /usr/include/SDL2/SDL_mutex.h:57:9
pub const SDL_ACQUIRED_AFTER = @compileError("unable to translate macro: undefined identifier `acquired_after`");
// /usr/include/SDL2/SDL_mutex.h:60:9
pub const SDL_REQUIRES = @compileError("unable to translate macro: undefined identifier `requires_capability`");
// /usr/include/SDL2/SDL_mutex.h:63:9
pub const SDL_REQUIRES_SHARED = @compileError("unable to translate macro: undefined identifier `requires_shared_capability`");
// /usr/include/SDL2/SDL_mutex.h:66:9
pub const SDL_ACQUIRE = @compileError("unable to translate macro: undefined identifier `acquire_capability`");
// /usr/include/SDL2/SDL_mutex.h:69:9
pub const SDL_ACQUIRE_SHARED = @compileError("unable to translate macro: undefined identifier `acquire_shared_capability`");
// /usr/include/SDL2/SDL_mutex.h:72:9
pub const SDL_RELEASE = @compileError("unable to translate macro: undefined identifier `release_capability`");
// /usr/include/SDL2/SDL_mutex.h:75:9
pub const SDL_RELEASE_SHARED = @compileError("unable to translate macro: undefined identifier `release_shared_capability`");
// /usr/include/SDL2/SDL_mutex.h:78:9
pub const SDL_RELEASE_GENERIC = @compileError("unable to translate macro: undefined identifier `release_generic_capability`");
// /usr/include/SDL2/SDL_mutex.h:81:9
pub const SDL_TRY_ACQUIRE = @compileError("unable to translate macro: undefined identifier `try_acquire_capability`");
// /usr/include/SDL2/SDL_mutex.h:84:9
pub const SDL_TRY_ACQUIRE_SHARED = @compileError("unable to translate macro: undefined identifier `try_acquire_shared_capability`");
// /usr/include/SDL2/SDL_mutex.h:87:9
pub const SDL_EXCLUDES = @compileError("unable to translate macro: undefined identifier `locks_excluded`");
// /usr/include/SDL2/SDL_mutex.h:90:9
pub const SDL_ASSERT_CAPABILITY = @compileError("unable to translate macro: undefined identifier `assert_capability`");
// /usr/include/SDL2/SDL_mutex.h:93:9
pub const SDL_ASSERT_SHARED_CAPABILITY = @compileError("unable to translate macro: undefined identifier `assert_shared_capability`");
// /usr/include/SDL2/SDL_mutex.h:96:9
pub const SDL_RETURN_CAPABILITY = @compileError("unable to translate macro: undefined identifier `lock_returned`");
// /usr/include/SDL2/SDL_mutex.h:99:9
pub const SDL_NO_THREAD_SAFETY_ANALYSIS = @compileError("unable to translate macro: undefined identifier `no_thread_safety_analysis`");
// /usr/include/SDL2/SDL_mutex.h:102:9
pub const SDL_MUTEX_TIMEDOUT = @as(c_int, 1);
pub const SDL_MUTEX_MAXWAIT = ~@import("std").zig.c_translation.cast(Uint32, @as(c_int, 0));
pub inline fn SDL_mutexP(m: anytype) @TypeOf(SDL_LockMutex(m)) {
    _ = &m;
    return SDL_LockMutex(m);
}
pub inline fn SDL_mutexV(m: anytype) @TypeOf(SDL_UnlockMutex(m)) {
    _ = &m;
    return SDL_UnlockMutex(m);
}
pub const SDL_thread_h_ = "";
pub const SDL_rwops_h_ = "";
pub const SDL_RWOPS_UNKNOWN = @as(c_uint, 0);
pub const SDL_RWOPS_WINFILE = @as(c_uint, 1);
pub const SDL_RWOPS_STDFILE = @as(c_uint, 2);
pub const SDL_RWOPS_JNIFILE = @as(c_uint, 3);
pub const SDL_RWOPS_MEMORY = @as(c_uint, 4);
pub const SDL_RWOPS_MEMORY_RO = @as(c_uint, 5);
pub const RW_SEEK_SET = @as(c_int, 0);
pub const RW_SEEK_CUR = @as(c_int, 1);
pub const RW_SEEK_END = @as(c_int, 2);
pub const SDL_AUDIO_MASK_BITSIZE = @as(c_int, 0xFF);
pub const SDL_AUDIO_MASK_DATATYPE = @as(c_int, 1) << @as(c_int, 8);
pub const SDL_AUDIO_MASK_ENDIAN = @as(c_int, 1) << @as(c_int, 12);
pub const SDL_AUDIO_MASK_SIGNED = @as(c_int, 1) << @as(c_int, 15);
pub inline fn SDL_AUDIO_BITSIZE(x: anytype) @TypeOf(x & SDL_AUDIO_MASK_BITSIZE) {
    _ = &x;
    return x & SDL_AUDIO_MASK_BITSIZE;
}
pub inline fn SDL_AUDIO_ISFLOAT(x: anytype) @TypeOf(x & SDL_AUDIO_MASK_DATATYPE) {
    _ = &x;
    return x & SDL_AUDIO_MASK_DATATYPE;
}
pub inline fn SDL_AUDIO_ISBIGENDIAN(x: anytype) @TypeOf(x & SDL_AUDIO_MASK_ENDIAN) {
    _ = &x;
    return x & SDL_AUDIO_MASK_ENDIAN;
}
pub inline fn SDL_AUDIO_ISSIGNED(x: anytype) @TypeOf(x & SDL_AUDIO_MASK_SIGNED) {
    _ = &x;
    return x & SDL_AUDIO_MASK_SIGNED;
}
pub inline fn SDL_AUDIO_ISINT(x: anytype) @TypeOf(!(SDL_AUDIO_ISFLOAT(x) != 0)) {
    _ = &x;
    return !(SDL_AUDIO_ISFLOAT(x) != 0);
}
pub inline fn SDL_AUDIO_ISLITTLEENDIAN(x: anytype) @TypeOf(!(SDL_AUDIO_ISBIGENDIAN(x) != 0)) {
    _ = &x;
    return !(SDL_AUDIO_ISBIGENDIAN(x) != 0);
}
pub inline fn SDL_AUDIO_ISUNSIGNED(x: anytype) @TypeOf(!(SDL_AUDIO_ISSIGNED(x) != 0)) {
    _ = &x;
    return !(SDL_AUDIO_ISSIGNED(x) != 0);
}
pub const AUDIO_U8 = @as(c_int, 0x0008);
pub const AUDIO_S8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8008, .hex);
pub const AUDIO_U16LSB = @as(c_int, 0x0010);
pub const AUDIO_S16LSB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8010, .hex);
pub const AUDIO_U16MSB = @as(c_int, 0x1010);
pub const AUDIO_S16MSB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9010, .hex);
pub const AUDIO_U16 = AUDIO_U16LSB;
pub const AUDIO_S16 = AUDIO_S16LSB;
pub const AUDIO_S32LSB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8020, .hex);
pub const AUDIO_S32MSB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9020, .hex);
pub const AUDIO_S32 = AUDIO_S32LSB;
pub const AUDIO_F32LSB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8120, .hex);
pub const AUDIO_F32MSB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9120, .hex);
pub const AUDIO_F32 = AUDIO_F32LSB;
pub const AUDIO_U16SYS = AUDIO_U16LSB;
pub const AUDIO_S16SYS = AUDIO_S16LSB;
pub const AUDIO_S32SYS = AUDIO_S32LSB;
pub const AUDIO_F32SYS = AUDIO_F32LSB;
pub const SDL_AUDIO_ALLOW_FREQUENCY_CHANGE = @as(c_int, 0x00000001);
pub const SDL_AUDIO_ALLOW_FORMAT_CHANGE = @as(c_int, 0x00000002);
pub const SDL_AUDIO_ALLOW_CHANNELS_CHANGE = @as(c_int, 0x00000004);
pub const SDL_AUDIO_ALLOW_SAMPLES_CHANGE = @as(c_int, 0x00000008);
pub const SDL_AUDIO_ALLOW_ANY_CHANGE = ((SDL_AUDIO_ALLOW_FREQUENCY_CHANGE | SDL_AUDIO_ALLOW_FORMAT_CHANGE) | SDL_AUDIO_ALLOW_CHANNELS_CHANGE) | SDL_AUDIO_ALLOW_SAMPLES_CHANGE;
pub const SDL_AUDIOCVT_MAX_FILTERS = @as(c_int, 9);
pub const SDL_AUDIOCVT_PACKED = @compileError("unable to translate macro: undefined identifier `packed`");
// /usr/include/SDL2/SDL_audio.h:226:9
pub inline fn SDL_LoadWAV(file: anytype, spec: anytype, audio_buf: anytype, audio_len: anytype) @TypeOf(SDL_LoadWAV_RW(SDL_RWFromFile(file, "rb"), @as(c_int, 1), spec, audio_buf, audio_len)) {
    _ = &file;
    _ = &spec;
    _ = &audio_buf;
    _ = &audio_len;
    return SDL_LoadWAV_RW(SDL_RWFromFile(file, "rb"), @as(c_int, 1), spec, audio_buf, audio_len);
}
pub const SDL_MIX_MAXVOLUME = @as(c_int, 128);
pub const SDL_clipboard_h_ = "";
pub const SDL_cpuinfo_h_ = "";
pub const __IMMINTRIN_H = "";
pub const __X86GPRINTRIN_H = "";
pub const __HRESETINTRIN_H = "";
pub const __DEFAULT_FN_ATTRS = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/hresetintrin.h:19:9
pub const __UINTRINTRIN_H = "";
pub const __USERMSRINTRIN_H = "";
pub const __CRC32INTRIN_H = "";
pub const __PRFCHIINTRIN_H = "";
pub const __RAOINTINTRIN_H = "";
pub const __CMPCCXADDINTRIN_H = "";
pub const _cmpccxadd_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpccxadd32`");
// /usr/lib/zig/include/cmpccxaddintrin.h:61:9
pub const _cmpccxadd_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpccxadd64`");
// /usr/lib/zig/include/cmpccxaddintrin.h:65:9
pub const __SAVE_GPRBX = "mov {%%rbx, %%rax |rax, rbx};";
pub const __RESTORE_GPRBX = "mov {%%rax, %%rbx |rbx, rax};";
pub const __TMPGPR = "rax";
pub const __SSC_MARK = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/lib/zig/include/x86gprintrin.h:62:9
pub const __MMINTRIN_H = "";
pub const _m_empty = _mm_empty;
pub const _m_from_int = _mm_cvtsi32_si64;
pub const _m_from_int64 = _mm_cvtsi64_m64;
pub const _m_to_int = _mm_cvtsi64_si32;
pub const _m_to_int64 = _mm_cvtm64_si64;
pub const _m_packsswb = _mm_packs_pi16;
pub const _m_packssdw = _mm_packs_pi32;
pub const _m_packuswb = _mm_packs_pu16;
pub const _m_punpckhbw = _mm_unpackhi_pi8;
pub const _m_punpckhwd = _mm_unpackhi_pi16;
pub const _m_punpckhdq = _mm_unpackhi_pi32;
pub const _m_punpcklbw = _mm_unpacklo_pi8;
pub const _m_punpcklwd = _mm_unpacklo_pi16;
pub const _m_punpckldq = _mm_unpacklo_pi32;
pub const _m_paddb = _mm_add_pi8;
pub const _m_paddw = _mm_add_pi16;
pub const _m_paddd = _mm_add_pi32;
pub const _m_paddsb = _mm_adds_pi8;
pub const _m_paddsw = _mm_adds_pi16;
pub const _m_paddusb = _mm_adds_pu8;
pub const _m_paddusw = _mm_adds_pu16;
pub const _m_psubb = _mm_sub_pi8;
pub const _m_psubw = _mm_sub_pi16;
pub const _m_psubd = _mm_sub_pi32;
pub const _m_psubsb = _mm_subs_pi8;
pub const _m_psubsw = _mm_subs_pi16;
pub const _m_psubusb = _mm_subs_pu8;
pub const _m_psubusw = _mm_subs_pu16;
pub const _m_pmaddwd = _mm_madd_pi16;
pub const _m_pmulhw = _mm_mulhi_pi16;
pub const _m_pmullw = _mm_mullo_pi16;
pub const _m_psllw = _mm_sll_pi16;
pub const _m_psllwi = _mm_slli_pi16;
pub const _m_pslld = _mm_sll_pi32;
pub const _m_pslldi = _mm_slli_pi32;
pub const _m_psllq = _mm_sll_si64;
pub const _m_psllqi = _mm_slli_si64;
pub const _m_psraw = _mm_sra_pi16;
pub const _m_psrawi = _mm_srai_pi16;
pub const _m_psrad = _mm_sra_pi32;
pub const _m_psradi = _mm_srai_pi32;
pub const _m_psrlw = _mm_srl_pi16;
pub const _m_psrlwi = _mm_srli_pi16;
pub const _m_psrld = _mm_srl_pi32;
pub const _m_psrldi = _mm_srli_pi32;
pub const _m_psrlq = _mm_srl_si64;
pub const _m_psrlqi = _mm_srli_si64;
pub const _m_pand = _mm_and_si64;
pub const _m_pandn = _mm_andnot_si64;
pub const _m_por = _mm_or_si64;
pub const _m_pxor = _mm_xor_si64;
pub const _m_pcmpeqb = _mm_cmpeq_pi8;
pub const _m_pcmpeqw = _mm_cmpeq_pi16;
pub const _m_pcmpeqd = _mm_cmpeq_pi32;
pub const _m_pcmpgtb = _mm_cmpgt_pi8;
pub const _m_pcmpgtw = _mm_cmpgt_pi16;
pub const _m_pcmpgtd = _mm_cmpgt_pi32;
pub const __XMMINTRIN_H = "";
pub const __MM_MALLOC_H = "";
pub const __DEFAULT_FN_ATTRS_MMX = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/xmmintrin.h:38:9
pub inline fn _mm_load_ps1(p: anytype) @TypeOf(_mm_load1_ps(p)) {
    _ = &p;
    return _mm_load1_ps(p);
}
pub const _MM_HINT_ET0 = @as(c_int, 7);
pub const _MM_HINT_ET1 = @as(c_int, 6);
pub const _MM_HINT_T0 = @as(c_int, 3);
pub const _MM_HINT_T1 = @as(c_int, 2);
pub const _MM_HINT_T2 = @as(c_int, 1);
pub const _MM_HINT_NTA = @as(c_int, 0);
pub const _mm_prefetch = @compileError("unable to translate macro: undefined identifier `__builtin_prefetch`");
// /usr/lib/zig/include/xmmintrin.h:2111:9
pub const _mm_extract_pi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_ext_v4hi`");
// /usr/lib/zig/include/xmmintrin.h:2191:9
pub const _mm_insert_pi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_set_v4hi`");
// /usr/lib/zig/include/xmmintrin.h:2222:9
pub const _mm_shuffle_pi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pshufw`");
// /usr/lib/zig/include/xmmintrin.h:2372:9
pub const _mm_shuffle_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_shufps`");
// /usr/lib/zig/include/xmmintrin.h:2617:9
pub const _MM_ALIGN16 = @compileError("unable to translate macro: undefined identifier `aligned`");
// /usr/lib/zig/include/xmmintrin.h:2944:9
pub inline fn _MM_SHUFFLE(z: anytype, y: anytype, x: anytype, w: anytype) @TypeOf((((z << @as(c_int, 6)) | (y << @as(c_int, 4))) | (x << @as(c_int, 2))) | w) {
    _ = &z;
    _ = &y;
    _ = &x;
    _ = &w;
    return (((z << @as(c_int, 6)) | (y << @as(c_int, 4))) | (x << @as(c_int, 2))) | w;
}
pub const _MM_EXCEPT_INVALID = @as(c_uint, 0x0001);
pub const _MM_EXCEPT_DENORM = @as(c_uint, 0x0002);
pub const _MM_EXCEPT_DIV_ZERO = @as(c_uint, 0x0004);
pub const _MM_EXCEPT_OVERFLOW = @as(c_uint, 0x0008);
pub const _MM_EXCEPT_UNDERFLOW = @as(c_uint, 0x0010);
pub const _MM_EXCEPT_INEXACT = @as(c_uint, 0x0020);
pub const _MM_EXCEPT_MASK = @as(c_uint, 0x003f);
pub const _MM_MASK_INVALID = @as(c_uint, 0x0080);
pub const _MM_MASK_DENORM = @as(c_uint, 0x0100);
pub const _MM_MASK_DIV_ZERO = @as(c_uint, 0x0200);
pub const _MM_MASK_OVERFLOW = @as(c_uint, 0x0400);
pub const _MM_MASK_UNDERFLOW = @as(c_uint, 0x0800);
pub const _MM_MASK_INEXACT = @as(c_uint, 0x1000);
pub const _MM_MASK_MASK = @as(c_uint, 0x1f80);
pub const _MM_ROUND_NEAREST = @as(c_uint, 0x0000);
pub const _MM_ROUND_DOWN = @as(c_uint, 0x2000);
pub const _MM_ROUND_UP = @as(c_uint, 0x4000);
pub const _MM_ROUND_TOWARD_ZERO = @as(c_uint, 0x6000);
pub const _MM_ROUND_MASK = @as(c_uint, 0x6000);
pub const _MM_FLUSH_ZERO_MASK = @as(c_uint, 0x8000);
pub const _MM_FLUSH_ZERO_ON = @as(c_uint, 0x8000);
pub const _MM_FLUSH_ZERO_OFF = @as(c_uint, 0x0000);
pub inline fn _MM_GET_EXCEPTION_MASK() @TypeOf(_mm_getcsr() & _MM_MASK_MASK) {
    return _mm_getcsr() & _MM_MASK_MASK;
}
pub inline fn _MM_GET_EXCEPTION_STATE() @TypeOf(_mm_getcsr() & _MM_EXCEPT_MASK) {
    return _mm_getcsr() & _MM_EXCEPT_MASK;
}
pub inline fn _MM_GET_FLUSH_ZERO_MODE() @TypeOf(_mm_getcsr() & _MM_FLUSH_ZERO_MASK) {
    return _mm_getcsr() & _MM_FLUSH_ZERO_MASK;
}
pub inline fn _MM_GET_ROUNDING_MODE() @TypeOf(_mm_getcsr() & _MM_ROUND_MASK) {
    return _mm_getcsr() & _MM_ROUND_MASK;
}
pub inline fn _MM_SET_EXCEPTION_MASK(x: anytype) @TypeOf(_mm_setcsr((_mm_getcsr() & ~_MM_MASK_MASK) | x)) {
    _ = &x;
    return _mm_setcsr((_mm_getcsr() & ~_MM_MASK_MASK) | x);
}
pub inline fn _MM_SET_EXCEPTION_STATE(x: anytype) @TypeOf(_mm_setcsr((_mm_getcsr() & ~_MM_EXCEPT_MASK) | x)) {
    _ = &x;
    return _mm_setcsr((_mm_getcsr() & ~_MM_EXCEPT_MASK) | x);
}
pub inline fn _MM_SET_FLUSH_ZERO_MODE(x: anytype) @TypeOf(_mm_setcsr((_mm_getcsr() & ~_MM_FLUSH_ZERO_MASK) | x)) {
    _ = &x;
    return _mm_setcsr((_mm_getcsr() & ~_MM_FLUSH_ZERO_MASK) | x);
}
pub inline fn _MM_SET_ROUNDING_MODE(x: anytype) @TypeOf(_mm_setcsr((_mm_getcsr() & ~_MM_ROUND_MASK) | x)) {
    _ = &x;
    return _mm_setcsr((_mm_getcsr() & ~_MM_ROUND_MASK) | x);
}
pub const _MM_TRANSPOSE4_PS = @compileError("unable to translate macro: undefined identifier `tmp3`");
// /usr/lib/zig/include/xmmintrin.h:2984:9
pub const _m_pextrw = _mm_extract_pi16;
pub const _m_pinsrw = _mm_insert_pi16;
pub const _m_pmaxsw = _mm_max_pi16;
pub const _m_pmaxub = _mm_max_pu8;
pub const _m_pminsw = _mm_min_pi16;
pub const _m_pminub = _mm_min_pu8;
pub const _m_pmovmskb = _mm_movemask_pi8;
pub const _m_pmulhuw = _mm_mulhi_pu16;
pub const _m_pshufw = _mm_shuffle_pi16;
pub const _m_maskmovq = _mm_maskmove_si64;
pub const _m_pavgb = _mm_avg_pu8;
pub const _m_pavgw = _mm_avg_pu16;
pub const _m_psadbw = _mm_sad_pu8;
pub const _m_ = @compileError("unable to translate macro: undefined identifier `_mm_`");
// /usr/lib/zig/include/xmmintrin.h:3011:9
pub const __EMMINTRIN_H = "";
pub inline fn _mm_load_pd1(dp: anytype) @TypeOf(_mm_load1_pd(dp)) {
    _ = &dp;
    return _mm_load1_pd(dp);
}
pub const _mm_slli_si128 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pslldqi128_byteshift`");
// /usr/lib/zig/include/emmintrin.h:2685:9
pub const _mm_bslli_si128 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pslldqi128_byteshift`");
// /usr/lib/zig/include/emmintrin.h:2689:9
pub const _mm_srli_si128 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_psrldqi128_byteshift`");
// /usr/lib/zig/include/emmintrin.h:2894:9
pub const _mm_bsrli_si128 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_psrldqi128_byteshift`");
// /usr/lib/zig/include/emmintrin.h:2898:9
pub const _mm_extract_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_ext_v8hi`");
// /usr/lib/zig/include/emmintrin.h:4160:9
pub const _mm_insert_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_set_v8hi`");
// /usr/lib/zig/include/emmintrin.h:4188:9
pub const _mm_shuffle_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pshufd`");
// /usr/lib/zig/include/emmintrin.h:4239:9
pub const _mm_shufflelo_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pshuflw`");
// /usr/lib/zig/include/emmintrin.h:4272:9
pub const _mm_shufflehi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pshufhw`");
// /usr/lib/zig/include/emmintrin.h:4305:9
pub const _mm_shuffle_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_shufpd`");
// /usr/lib/zig/include/emmintrin.h:4651:9
pub inline fn _MM_SHUFFLE2(x: anytype, y: anytype) @TypeOf((x << @as(c_int, 1)) | y) {
    _ = &x;
    _ = &y;
    return (x << @as(c_int, 1)) | y;
}
pub const _MM_DENORMALS_ZERO_ON = @as(c_uint, 0x0040);
pub const _MM_DENORMALS_ZERO_OFF = @as(c_uint, 0x0000);
pub const _MM_DENORMALS_ZERO_MASK = @as(c_uint, 0x0040);
pub inline fn _MM_GET_DENORMALS_ZERO_MODE() @TypeOf(_mm_getcsr() & _MM_DENORMALS_ZERO_MASK) {
    return _mm_getcsr() & _MM_DENORMALS_ZERO_MASK;
}
pub inline fn _MM_SET_DENORMALS_ZERO_MODE(x: anytype) @TypeOf(_mm_setcsr((_mm_getcsr() & ~_MM_DENORMALS_ZERO_MASK) | x)) {
    _ = &x;
    return _mm_setcsr((_mm_getcsr() & ~_MM_DENORMALS_ZERO_MASK) | x);
}
pub const __PMMINTRIN_H = "";
pub inline fn _mm_loaddup_pd(dp: anytype) @TypeOf(_mm_load1_pd(dp)) {
    _ = &dp;
    return _mm_load1_pd(dp);
}
pub const __TMMINTRIN_H = "";
pub const _mm_alignr_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_palignr128`");
// /usr/lib/zig/include/tmmintrin.h:156:9
pub const _mm_alignr_pi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_palignr`");
// /usr/lib/zig/include/tmmintrin.h:179:9
pub const __SMMINTRIN_H = "";
pub const _MM_FROUND_TO_NEAREST_INT = @as(c_int, 0x00);
pub const _MM_FROUND_TO_NEG_INF = @as(c_int, 0x01);
pub const _MM_FROUND_TO_POS_INF = @as(c_int, 0x02);
pub const _MM_FROUND_TO_ZERO = @as(c_int, 0x03);
pub const _MM_FROUND_CUR_DIRECTION = @as(c_int, 0x04);
pub const _MM_FROUND_RAISE_EXC = @as(c_int, 0x00);
pub const _MM_FROUND_NO_EXC = @as(c_int, 0x08);
pub const _MM_FROUND_NINT = _MM_FROUND_RAISE_EXC | _MM_FROUND_TO_NEAREST_INT;
pub const _MM_FROUND_FLOOR = _MM_FROUND_RAISE_EXC | _MM_FROUND_TO_NEG_INF;
pub const _MM_FROUND_CEIL = _MM_FROUND_RAISE_EXC | _MM_FROUND_TO_POS_INF;
pub const _MM_FROUND_TRUNC = _MM_FROUND_RAISE_EXC | _MM_FROUND_TO_ZERO;
pub const _MM_FROUND_RINT = _MM_FROUND_RAISE_EXC | _MM_FROUND_CUR_DIRECTION;
pub const _MM_FROUND_NEARBYINT = _MM_FROUND_NO_EXC | _MM_FROUND_CUR_DIRECTION;
pub inline fn _mm_ceil_ps(X: anytype) @TypeOf(_mm_round_ps(X, _MM_FROUND_CEIL)) {
    _ = &X;
    return _mm_round_ps(X, _MM_FROUND_CEIL);
}
pub inline fn _mm_ceil_pd(X: anytype) @TypeOf(_mm_round_pd(X, _MM_FROUND_CEIL)) {
    _ = &X;
    return _mm_round_pd(X, _MM_FROUND_CEIL);
}
pub inline fn _mm_ceil_ss(X: anytype, Y: anytype) @TypeOf(_mm_round_ss(X, Y, _MM_FROUND_CEIL)) {
    _ = &X;
    _ = &Y;
    return _mm_round_ss(X, Y, _MM_FROUND_CEIL);
}
pub inline fn _mm_ceil_sd(X: anytype, Y: anytype) @TypeOf(_mm_round_sd(X, Y, _MM_FROUND_CEIL)) {
    _ = &X;
    _ = &Y;
    return _mm_round_sd(X, Y, _MM_FROUND_CEIL);
}
pub inline fn _mm_floor_ps(X: anytype) @TypeOf(_mm_round_ps(X, _MM_FROUND_FLOOR)) {
    _ = &X;
    return _mm_round_ps(X, _MM_FROUND_FLOOR);
}
pub inline fn _mm_floor_pd(X: anytype) @TypeOf(_mm_round_pd(X, _MM_FROUND_FLOOR)) {
    _ = &X;
    return _mm_round_pd(X, _MM_FROUND_FLOOR);
}
pub inline fn _mm_floor_ss(X: anytype, Y: anytype) @TypeOf(_mm_round_ss(X, Y, _MM_FROUND_FLOOR)) {
    _ = &X;
    _ = &Y;
    return _mm_round_ss(X, Y, _MM_FROUND_FLOOR);
}
pub inline fn _mm_floor_sd(X: anytype, Y: anytype) @TypeOf(_mm_round_sd(X, Y, _MM_FROUND_FLOOR)) {
    _ = &X;
    _ = &Y;
    return _mm_round_sd(X, Y, _MM_FROUND_FLOOR);
}
pub const _mm_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_roundps`");
// /usr/lib/zig/include/smmintrin.h:239:9
pub const _mm_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_roundss`");
// /usr/lib/zig/include/smmintrin.h:280:9
pub const _mm_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_roundpd`");
// /usr/lib/zig/include/smmintrin.h:314:9
pub const _mm_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_roundsd`");
// /usr/lib/zig/include/smmintrin.h:355:9
pub const _mm_blend_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_blendpd`");
// /usr/lib/zig/include/smmintrin.h:384:9
pub const _mm_blend_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_blendps`");
// /usr/lib/zig/include/smmintrin.h:412:9
pub const _mm_blend_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pblendw128`");
// /usr/lib/zig/include/smmintrin.h:521:9
pub const _mm_dp_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_dpps`");
// /usr/lib/zig/include/smmintrin.h:596:9
pub const _mm_dp_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_dppd`");
// /usr/lib/zig/include/smmintrin.h:630:9
pub const _mm_insert_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_insertps128`");
// /usr/lib/zig/include/smmintrin.h:838:9
pub const _mm_extract_ps = @compileError("unable to translate macro: undefined identifier `__builtin_bit_cast`");
// /usr/lib/zig/include/smmintrin.h:862:9
pub const _MM_EXTRACT_FLOAT = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_ext_v4sf`");
// /usr/lib/zig/include/smmintrin.h:868:9
pub inline fn _MM_MK_INSERTPS_NDX(X: anytype, Y: anytype, Z: anytype) @TypeOf(((X << @as(c_int, 6)) | (Y << @as(c_int, 4))) | Z) {
    _ = &X;
    _ = &Y;
    _ = &Z;
    return ((X << @as(c_int, 6)) | (Y << @as(c_int, 4))) | Z;
}
pub inline fn _MM_PICK_OUT_PS(X: anytype, N: anytype) @TypeOf(_mm_insert_ps(_mm_setzero_ps(), X, _MM_MK_INSERTPS_NDX(N, @as(c_int, 0), @as(c_int, 0x0e)))) {
    _ = &X;
    _ = &N;
    return _mm_insert_ps(_mm_setzero_ps(), X, _MM_MK_INSERTPS_NDX(N, @as(c_int, 0), @as(c_int, 0x0e)));
}
pub const _mm_insert_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_set_v16qi`");
// /usr/lib/zig/include/smmintrin.h:922:9
pub const _mm_insert_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_set_v4si`");
// /usr/lib/zig/include/smmintrin.h:954:9
pub const _mm_insert_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_set_v2di`");
// /usr/lib/zig/include/smmintrin.h:985:9
pub const _mm_extract_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_ext_v16qi`");
// /usr/lib/zig/include/smmintrin.h:1028:9
pub const _mm_extract_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_ext_v4si`");
// /usr/lib/zig/include/smmintrin.h:1054:9
pub const _mm_extract_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_ext_v2di`");
// /usr/lib/zig/include/smmintrin.h:1077:9
pub inline fn _mm_test_all_ones(V: anytype) @TypeOf(_mm_testc_si128(V, _mm_set1_epi32(-@as(c_int, 1)))) {
    _ = &V;
    return _mm_testc_si128(V, _mm_set1_epi32(-@as(c_int, 1)));
}
pub inline fn _mm_test_mix_ones_zeros(M: anytype, V: anytype) @TypeOf(_mm_testnzc_si128(M, V)) {
    _ = &M;
    _ = &V;
    return _mm_testnzc_si128(M, V);
}
pub inline fn _mm_test_all_zeros(M: anytype, V: anytype) @TypeOf(_mm_testz_si128(M, V)) {
    _ = &M;
    _ = &V;
    return _mm_testz_si128(M, V);
}
pub const _mm_mpsadbw_epu8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_mpsadbw128`");
// /usr/lib/zig/include/smmintrin.h:1497:9
pub const _SIDD_UBYTE_OPS = @as(c_int, 0x00);
pub const _SIDD_UWORD_OPS = @as(c_int, 0x01);
pub const _SIDD_SBYTE_OPS = @as(c_int, 0x02);
pub const _SIDD_SWORD_OPS = @as(c_int, 0x03);
pub const _SIDD_CMP_EQUAL_ANY = @as(c_int, 0x00);
pub const _SIDD_CMP_RANGES = @as(c_int, 0x04);
pub const _SIDD_CMP_EQUAL_EACH = @as(c_int, 0x08);
pub const _SIDD_CMP_EQUAL_ORDERED = @as(c_int, 0x0c);
pub const _SIDD_POSITIVE_POLARITY = @as(c_int, 0x00);
pub const _SIDD_NEGATIVE_POLARITY = @as(c_int, 0x10);
pub const _SIDD_MASKED_POSITIVE_POLARITY = @as(c_int, 0x20);
pub const _SIDD_MASKED_NEGATIVE_POLARITY = @as(c_int, 0x30);
pub const _SIDD_LEAST_SIGNIFICANT = @as(c_int, 0x00);
pub const _SIDD_MOST_SIGNIFICANT = @as(c_int, 0x40);
pub const _SIDD_BIT_MASK = @as(c_int, 0x00);
pub const _SIDD_UNIT_MASK = @as(c_int, 0x40);
pub const _mm_cmpistrm = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pcmpistrm128`");
// /usr/lib/zig/include/smmintrin.h:1606:9
pub const _mm_cmpistri = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pcmpistri128`");
// /usr/lib/zig/include/smmintrin.h:1660:9
pub const _mm_cmpestrm = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pcmpestrm128`");
// /usr/lib/zig/include/smmintrin.h:1720:9
pub const _mm_cmpestri = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pcmpestri128`");
// /usr/lib/zig/include/smmintrin.h:1779:9
pub const _mm_cmpistra = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pcmpistria128`");
// /usr/lib/zig/include/smmintrin.h:1831:9
pub const _mm_cmpistrc = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pcmpistric128`");
// /usr/lib/zig/include/smmintrin.h:1880:9
pub const _mm_cmpistro = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pcmpistrio128`");
// /usr/lib/zig/include/smmintrin.h:1928:9
pub const _mm_cmpistrs = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pcmpistris128`");
// /usr/lib/zig/include/smmintrin.h:1978:9
pub const _mm_cmpistrz = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pcmpistriz128`");
// /usr/lib/zig/include/smmintrin.h:2028:9
pub const _mm_cmpestra = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pcmpestria128`");
// /usr/lib/zig/include/smmintrin.h:2082:9
pub const _mm_cmpestrc = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pcmpestric128`");
// /usr/lib/zig/include/smmintrin.h:2136:9
pub const _mm_cmpestro = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pcmpestrio128`");
// /usr/lib/zig/include/smmintrin.h:2189:9
pub const _mm_cmpestrs = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pcmpestris128`");
// /usr/lib/zig/include/smmintrin.h:2244:9
pub const _mm_cmpestrz = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pcmpestriz128`");
// /usr/lib/zig/include/smmintrin.h:2298:9
pub const __POPCNTINTRIN_H = "";
pub const __DEFAULT_FN_ATTRS_CONSTEXPR = __DEFAULT_FN_ATTRS;
pub const __WMMINTRIN_H = "";
pub const __WMMINTRIN_AES_H = "";
pub const _mm_aeskeygenassist_si128 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_aeskeygenassist128`");
// /usr/lib/zig/include/__wmmintrin_aes.h:135:9
pub const __WMMINTRIN_PCLMUL_H = "";
pub const _mm_clmulepi64_si128 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pclmulqdq128`");
// /usr/lib/zig/include/__wmmintrin_pclmul.h:44:9
pub const __CLFLUSHOPTINTRIN_H = "";
pub const __CLWBINTRIN_H = "";
pub const __AVXINTRIN_H = "";
pub const __DEFAULT_FN_ATTRS128 = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/avxintrin.h:56:9
pub const _mm256_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_roundpd256`");
// /usr/lib/zig/include/avxintrin.h:416:9
pub const _mm256_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_roundps256`");
// /usr/lib/zig/include/avxintrin.h:448:9
pub inline fn _mm256_ceil_pd(V: anytype) @TypeOf(_mm256_round_pd(V, _MM_FROUND_CEIL)) {
    _ = &V;
    return _mm256_round_pd(V, _MM_FROUND_CEIL);
}
pub inline fn _mm256_floor_pd(V: anytype) @TypeOf(_mm256_round_pd(V, _MM_FROUND_FLOOR)) {
    _ = &V;
    return _mm256_round_pd(V, _MM_FROUND_FLOOR);
}
pub inline fn _mm256_ceil_ps(V: anytype) @TypeOf(_mm256_round_ps(V, _MM_FROUND_CEIL)) {
    _ = &V;
    return _mm256_round_ps(V, _MM_FROUND_CEIL);
}
pub inline fn _mm256_floor_ps(V: anytype) @TypeOf(_mm256_round_ps(V, _MM_FROUND_FLOOR)) {
    _ = &V;
    return _mm256_round_ps(V, _MM_FROUND_FLOOR);
}
pub const _mm_permute_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpermilpd`");
// /usr/lib/zig/include/avxintrin.h:1005:9
pub const _mm256_permute_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpermilpd256`");
// /usr/lib/zig/include/avxintrin.h:1045:9
pub const _mm_permute_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpermilps`");
// /usr/lib/zig/include/avxintrin.h:1101:9
pub const _mm256_permute_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpermilps256`");
// /usr/lib/zig/include/avxintrin.h:1193:9
pub const _mm256_permute2f128_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vperm2f128_pd256`");
// /usr/lib/zig/include/avxintrin.h:1233:9
pub const _mm256_permute2f128_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vperm2f128_ps256`");
// /usr/lib/zig/include/avxintrin.h:1274:9
pub const _mm256_permute2f128_si256 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vperm2f128_si256`");
// /usr/lib/zig/include/avxintrin.h:1314:9
pub const _mm256_blend_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_blendpd256`");
// /usr/lib/zig/include/avxintrin.h:1343:9
pub const _mm256_blend_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_blendps256`");
// /usr/lib/zig/include/avxintrin.h:1371:9
pub const _mm256_dp_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_dpps256`");
// /usr/lib/zig/include/avxintrin.h:1469:9
pub const _mm256_shuffle_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_shufps256`");
// /usr/lib/zig/include/avxintrin.h:1526:9
pub const _mm256_shuffle_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_shufpd256`");
// /usr/lib/zig/include/avxintrin.h:1572:9
pub const _CMP_EQ_OQ = @as(c_int, 0x00);
pub const _CMP_LT_OS = @as(c_int, 0x01);
pub const _CMP_LE_OS = @as(c_int, 0x02);
pub const _CMP_UNORD_Q = @as(c_int, 0x03);
pub const _CMP_NEQ_UQ = @as(c_int, 0x04);
pub const _CMP_NLT_US = @as(c_int, 0x05);
pub const _CMP_NLE_US = @as(c_int, 0x06);
pub const _CMP_ORD_Q = @as(c_int, 0x07);
pub const _CMP_EQ_UQ = @as(c_int, 0x08);
pub const _CMP_NGE_US = @as(c_int, 0x09);
pub const _CMP_NGT_US = @as(c_int, 0x0a);
pub const _CMP_FALSE_OQ = @as(c_int, 0x0b);
pub const _CMP_NEQ_OQ = @as(c_int, 0x0c);
pub const _CMP_GE_OS = @as(c_int, 0x0d);
pub const _CMP_GT_OS = @as(c_int, 0x0e);
pub const _CMP_TRUE_UQ = @as(c_int, 0x0f);
pub const _CMP_EQ_OS = @as(c_int, 0x10);
pub const _CMP_LT_OQ = @as(c_int, 0x11);
pub const _CMP_LE_OQ = @as(c_int, 0x12);
pub const _CMP_UNORD_S = @as(c_int, 0x13);
pub const _CMP_NEQ_US = @as(c_int, 0x14);
pub const _CMP_NLT_UQ = @as(c_int, 0x15);
pub const _CMP_NLE_UQ = @as(c_int, 0x16);
pub const _CMP_ORD_S = @as(c_int, 0x17);
pub const _CMP_EQ_US = @as(c_int, 0x18);
pub const _CMP_NGE_UQ = @as(c_int, 0x19);
pub const _CMP_NGT_UQ = @as(c_int, 0x1a);
pub const _CMP_FALSE_OS = @as(c_int, 0x1b);
pub const _CMP_NEQ_OS = @as(c_int, 0x1c);
pub const _CMP_GE_OQ = @as(c_int, 0x1d);
pub const _CMP_GT_OQ = @as(c_int, 0x1e);
pub const _CMP_TRUE_US = @as(c_int, 0x1f);
pub const _mm_cmp_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmppd`");
// /usr/lib/zig/include/avxintrin.h:1666:9
pub const _mm_cmp_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpps`");
// /usr/lib/zig/include/avxintrin.h:1726:9
pub const _mm256_cmp_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmppd256`");
// /usr/lib/zig/include/avxintrin.h:1786:9
pub const _mm256_cmp_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpps256`");
// /usr/lib/zig/include/avxintrin.h:1846:9
pub const _mm_cmp_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpsd`");
// /usr/lib/zig/include/avxintrin.h:1905:9
pub const _mm_cmp_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpss`");
// /usr/lib/zig/include/avxintrin.h:1964:9
pub const _mm256_extract_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_ext_v8si`");
// /usr/lib/zig/include/avxintrin.h:1987:9
pub const _mm256_extract_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_ext_v16hi`");
// /usr/lib/zig/include/avxintrin.h:2009:9
pub const _mm256_extract_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_ext_v32qi`");
// /usr/lib/zig/include/avxintrin.h:2032:9
pub const _mm256_extract_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_ext_v4di`");
// /usr/lib/zig/include/avxintrin.h:2056:9
pub const _mm256_insert_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_set_v8si`");
// /usr/lib/zig/include/avxintrin.h:2082:9
pub const _mm256_insert_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_set_v16hi`");
// /usr/lib/zig/include/avxintrin.h:2109:9
pub const _mm256_insert_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_set_v32qi`");
// /usr/lib/zig/include/avxintrin.h:2135:9
pub const _mm256_insert_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vec_set_v4di`");
// /usr/lib/zig/include/avxintrin.h:2162:9
pub const _mm256_insertf128_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vinsertf128_ps256`");
// /usr/lib/zig/include/avxintrin.h:4656:9
pub const _mm256_insertf128_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vinsertf128_pd256`");
// /usr/lib/zig/include/avxintrin.h:4694:9
pub const _mm256_insertf128_si256 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vinsertf128_si256`");
// /usr/lib/zig/include/avxintrin.h:4732:9
pub const _mm256_extractf128_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vextractf128_ps256`");
// /usr/lib/zig/include/avxintrin.h:4762:9
pub const _mm256_extractf128_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vextractf128_pd256`");
// /usr/lib/zig/include/avxintrin.h:4786:9
pub const _mm256_extractf128_si256 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vextractf128_si256`");
// /usr/lib/zig/include/avxintrin.h:4810:9
pub const __AVX2INTRIN_H = "";
pub const __DEFAULT_FN_ATTRS256 = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/avx2intrin.h:18:9
pub const _mm256_mpsadbw_epu8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_mpsadbw256`");
// /usr/lib/zig/include/avx2intrin.h:83:9
pub const _mm256_alignr_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_palignr256`");
// /usr/lib/zig/include/avx2intrin.h:438:9
pub const _mm256_blend_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pblendw256`");
// /usr/lib/zig/include/avx2intrin.h:603:9
pub const _mm256_shuffle_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pshufd256`");
// /usr/lib/zig/include/avx2intrin.h:1936:9
pub const _mm256_shufflehi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pshufhw256`");
// /usr/lib/zig/include/avx2intrin.h:1972:9
pub const _mm256_shufflelo_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pshuflw256`");
// /usr/lib/zig/include/avx2intrin.h:2009:9
pub const _mm256_slli_si256 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pslldqi256_byteshift`");
// /usr/lib/zig/include/avx2intrin.h:2092:9
pub const _mm256_bslli_epi128 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pslldqi256_byteshift`");
// /usr/lib/zig/include/avx2intrin.h:2112:9
pub const _mm256_srli_si256 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_psrldqi256_byteshift`");
// /usr/lib/zig/include/avx2intrin.h:2336:9
pub const _mm256_bsrli_epi128 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_psrldqi256_byteshift`");
// /usr/lib/zig/include/avx2intrin.h:2356:9
pub inline fn _mm_broadcastsi128_si256(X: anytype) @TypeOf(_mm256_broadcastsi128_si256(X)) {
    _ = &X;
    return _mm256_broadcastsi128_si256(X);
}
pub const _mm_blend_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pblendd128`");
// /usr/lib/zig/include/avx2intrin.h:3111:9
pub const _mm256_blend_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pblendd256`");
// /usr/lib/zig/include/avx2intrin.h:3148:9
pub const _mm256_permute4x64_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_permdf256`");
// /usr/lib/zig/include/avx2intrin.h:3335:9
pub const _mm256_permute4x64_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_permdi256`");
// /usr/lib/zig/include/avx2intrin.h:3393:9
pub const _mm256_permute2x128_si256 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_permti256`");
// /usr/lib/zig/include/avx2intrin.h:3439:9
pub const _mm256_extracti128_si256 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extract128i256`");
// /usr/lib/zig/include/avx2intrin.h:3459:9
pub const _mm256_inserti128_si256 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_insert128i256`");
// /usr/lib/zig/include/avx2intrin.h:3482:9
pub const _mm_mask_i32gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_pd`");
// /usr/lib/zig/include/avx2intrin.h:3999:9
pub const _mm256_mask_i32gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_pd256`");
// /usr/lib/zig/include/avx2intrin.h:4047:9
pub const _mm_mask_i64gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_pd`");
// /usr/lib/zig/include/avx2intrin.h:4095:9
pub const _mm256_mask_i64gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_pd256`");
// /usr/lib/zig/include/avx2intrin.h:4143:9
pub const _mm_mask_i32gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_ps`");
// /usr/lib/zig/include/avx2intrin.h:4191:9
pub const _mm256_mask_i32gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_ps256`");
// /usr/lib/zig/include/avx2intrin.h:4239:9
pub const _mm_mask_i64gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_ps`");
// /usr/lib/zig/include/avx2intrin.h:4290:9
pub const _mm256_mask_i64gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_ps256`");
// /usr/lib/zig/include/avx2intrin.h:4338:9
pub const _mm_mask_i32gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_d`");
// /usr/lib/zig/include/avx2intrin.h:4386:9
pub const _mm256_mask_i32gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_d256`");
// /usr/lib/zig/include/avx2intrin.h:4434:9
pub const _mm_mask_i64gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_d`");
// /usr/lib/zig/include/avx2intrin.h:4485:9
pub const _mm256_mask_i64gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_d256`");
// /usr/lib/zig/include/avx2intrin.h:4533:9
pub const _mm_mask_i32gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_q`");
// /usr/lib/zig/include/avx2intrin.h:4582:9
pub const _mm256_mask_i32gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_q256`");
// /usr/lib/zig/include/avx2intrin.h:4630:9
pub const _mm_mask_i64gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_q`");
// /usr/lib/zig/include/avx2intrin.h:4678:9
pub const _mm256_mask_i64gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_q256`");
// /usr/lib/zig/include/avx2intrin.h:4726:9
pub const _mm_i32gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_pd`");
// /usr/lib/zig/include/avx2intrin.h:4760:9
pub const _mm256_i32gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_pd256`");
// /usr/lib/zig/include/avx2intrin.h:4795:9
pub const _mm_i64gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_pd`");
// /usr/lib/zig/include/avx2intrin.h:4831:9
pub const _mm256_i64gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_pd256`");
// /usr/lib/zig/include/avx2intrin.h:4866:9
pub const _mm_i32gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_ps`");
// /usr/lib/zig/include/avx2intrin.h:4902:9
pub const _mm256_i32gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_ps256`");
// /usr/lib/zig/include/avx2intrin.h:4937:9
pub const _mm_i64gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_ps`");
// /usr/lib/zig/include/avx2intrin.h:4975:9
pub const _mm256_i64gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_ps256`");
// /usr/lib/zig/include/avx2intrin.h:5010:9
pub const _mm_i32gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_d`");
// /usr/lib/zig/include/avx2intrin.h:5045:9
pub const _mm256_i32gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_d256`");
// /usr/lib/zig/include/avx2intrin.h:5077:9
pub const _mm_i64gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_d`");
// /usr/lib/zig/include/avx2intrin.h:5111:9
pub const _mm256_i64gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_d256`");
// /usr/lib/zig/include/avx2intrin.h:5143:9
pub const _mm_i32gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_q`");
// /usr/lib/zig/include/avx2intrin.h:5176:9
pub const _mm256_i32gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherd_q256`");
// /usr/lib/zig/include/avx2intrin.h:5209:9
pub const _mm_i64gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_q`");
// /usr/lib/zig/include/avx2intrin.h:5242:9
pub const _mm256_i64gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherq_q256`");
// /usr/lib/zig/include/avx2intrin.h:5275:9
pub const __F16CINTRIN_H = "";
pub const _cvtss_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtps2ph`");
// /usr/lib/zig/include/f16cintrin.h:68:9
pub const _mm_cvtps_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtps2ph`");
// /usr/lib/zig/include/f16cintrin.h:95:9
pub const _mm256_cvtps_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtps2ph256`");
// /usr/lib/zig/include/f16cintrin.h:138:9
pub const __BMIINTRIN_H = "";
pub const __RELAXED_FN_ATTRS = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/bmiintrin.h:20:9
pub const _tzcnt_u16 = __tzcnt_u16;
pub const _tzcnt_u32 = __tzcnt_u32;
pub const _tzcnt_u64 = __tzcnt_u64;
pub const _andn_u32 = __andn_u32;
pub const _blsi_u32 = __blsi_u32;
pub const _blsmsk_u32 = __blsmsk_u32;
pub const _blsr_u32 = __blsr_u32;
pub const _andn_u64 = __andn_u64;
pub const _blsi_u64 = __blsi_u64;
pub const _blsmsk_u64 = __blsmsk_u64;
pub const _blsr_u64 = __blsr_u64;
pub const __BMI2INTRIN_H = "";
pub const __LZCNTINTRIN_H = "";
pub const __lzcnt16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_lzcnt_u16`");
// /usr/lib/zig/include/lzcntintrin.h:31:9
pub const __lzcnt64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_lzcnt_u64`");
// /usr/lib/zig/include/lzcntintrin.h:81:9
pub const __FMAINTRIN_H = "";
pub const __AVX512FINTRIN_H = "";
pub const _MM_CMPINT_GE = _MM_CMPINT_NLT;
pub const _MM_CMPINT_GT = _MM_CMPINT_NLE;
pub const __DEFAULT_FN_ATTRS512 = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/avx512fintrin.h:170:9
pub const _mm512_setzero_epi32 = _mm512_setzero_si512;
pub const _mm512_setzero = _mm512_setzero_ps;
pub inline fn _mm512_setr4_epi32(e0: anytype, e1: anytype, e2: anytype, e3: anytype) @TypeOf(_mm512_set4_epi32(e3, e2, e1, e0)) {
    _ = &e0;
    _ = &e1;
    _ = &e2;
    _ = &e3;
    return _mm512_set4_epi32(e3, e2, e1, e0);
}
pub inline fn _mm512_setr4_epi64(e0: anytype, e1: anytype, e2: anytype, e3: anytype) @TypeOf(_mm512_set4_epi64(e3, e2, e1, e0)) {
    _ = &e0;
    _ = &e1;
    _ = &e2;
    _ = &e3;
    return _mm512_set4_epi64(e3, e2, e1, e0);
}
pub inline fn _mm512_setr4_pd(e0: anytype, e1: anytype, e2: anytype, e3: anytype) @TypeOf(_mm512_set4_pd(e3, e2, e1, e0)) {
    _ = &e0;
    _ = &e1;
    _ = &e2;
    _ = &e3;
    return _mm512_set4_pd(e3, e2, e1, e0);
}
pub inline fn _mm512_setr4_ps(e0: anytype, e1: anytype, e2: anytype, e3: anytype) @TypeOf(_mm512_set4_ps(e3, e2, e1, e0)) {
    _ = &e0;
    _ = &e1;
    _ = &e2;
    _ = &e3;
    return _mm512_set4_ps(e3, e2, e1, e0);
}
pub const _mm512_max_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_maxpd512`");
// /usr/lib/zig/include/avx512fintrin.h:957:9
pub const _mm512_mask_max_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:961:9
pub const _mm512_maskz_max_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:966:9
pub const _mm512_max_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_maxps512`");
// /usr/lib/zig/include/avx512fintrin.h:994:9
pub const _mm512_mask_max_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:998:9
pub const _mm512_maskz_max_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:1003:9
pub const _mm_max_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_maxss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1049:9
pub const _mm_mask_max_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_maxss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1055:9
pub const _mm_maskz_max_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_maxss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1061:9
pub const _mm_max_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_maxsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1085:9
pub const _mm_mask_max_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_maxsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1091:9
pub const _mm_maskz_max_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_maxsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1097:9
pub const _mm512_min_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_minpd512`");
// /usr/lib/zig/include/avx512fintrin.h:1192:9
pub const _mm512_mask_min_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:1196:9
pub const _mm512_maskz_min_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:1201:9
pub const _mm512_min_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_minps512`");
// /usr/lib/zig/include/avx512fintrin.h:1229:9
pub const _mm512_mask_min_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:1233:9
pub const _mm512_maskz_min_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:1238:9
pub const _mm_min_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_minss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1284:9
pub const _mm_mask_min_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_minss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1290:9
pub const _mm_maskz_min_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_minss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1296:9
pub const _mm_min_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_minsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1320:9
pub const _mm_mask_min_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_minsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1326:9
pub const _mm_maskz_min_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_minsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1332:9
pub const _mm512_sqrt_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_sqrtpd512`");
// /usr/lib/zig/include/avx512fintrin.h:1505:9
pub const _mm512_mask_sqrt_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:1508:9
pub const _mm512_maskz_sqrt_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:1513:9
pub const _mm512_sqrt_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_sqrtps512`");
// /usr/lib/zig/include/avx512fintrin.h:1541:9
pub const _mm512_mask_sqrt_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:1544:9
pub const _mm512_maskz_sqrt_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:1549:9
pub const _mm_add_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_addss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1920:9
pub const _mm_mask_add_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_addss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1926:9
pub const _mm_maskz_add_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_addss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1932:9
pub const _mm_add_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_addsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1949:9
pub const _mm_mask_add_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_addsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1955:9
pub const _mm_maskz_add_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_addsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:1961:9
pub const _mm512_add_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_addpd512`");
// /usr/lib/zig/include/avx512fintrin.h:1995:9
pub const _mm512_mask_add_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:1999:9
pub const _mm512_maskz_add_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:2004:9
pub const _mm512_add_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_addps512`");
// /usr/lib/zig/include/avx512fintrin.h:2009:9
pub const _mm512_mask_add_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:2013:9
pub const _mm512_maskz_add_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:2018:9
pub const _mm_sub_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_subss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2034:9
pub const _mm_mask_sub_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_subss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2040:9
pub const _mm_maskz_sub_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_subss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2046:9
pub const _mm_sub_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_subsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2064:9
pub const _mm_mask_sub_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_subsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2070:9
pub const _mm_maskz_sub_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_subsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2076:9
pub const _mm512_sub_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_subpd512`");
// /usr/lib/zig/include/avx512fintrin.h:2110:9
pub const _mm512_mask_sub_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:2114:9
pub const _mm512_maskz_sub_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:2119:9
pub const _mm512_sub_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_subps512`");
// /usr/lib/zig/include/avx512fintrin.h:2124:9
pub const _mm512_mask_sub_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:2128:9
pub const _mm512_maskz_sub_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:2133:9
pub const _mm_mul_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_mulss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2149:9
pub const _mm_mask_mul_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_mulss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2155:9
pub const _mm_maskz_mul_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_mulss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2161:9
pub const _mm_mul_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_mulsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2179:9
pub const _mm_mask_mul_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_mulsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2185:9
pub const _mm_maskz_mul_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_mulsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2191:9
pub const _mm512_mul_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_mulpd512`");
// /usr/lib/zig/include/avx512fintrin.h:2225:9
pub const _mm512_mask_mul_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:2229:9
pub const _mm512_maskz_mul_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:2234:9
pub const _mm512_mul_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_mulps512`");
// /usr/lib/zig/include/avx512fintrin.h:2239:9
pub const _mm512_mask_mul_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:2243:9
pub const _mm512_maskz_mul_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:2248:9
pub const _mm_div_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_divss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2265:9
pub const _mm_mask_div_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_divss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2271:9
pub const _mm_maskz_div_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_divss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2277:9
pub const _mm_div_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_divsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2295:9
pub const _mm_mask_div_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_divsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2301:9
pub const _mm_maskz_div_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_divsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2307:9
pub const _mm512_div_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_divpd512`");
// /usr/lib/zig/include/avx512fintrin.h:2353:9
pub const _mm512_mask_div_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:2357:9
pub const _mm512_maskz_div_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:2362:9
pub const _mm512_div_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_divps512`");
// /usr/lib/zig/include/avx512fintrin.h:2367:9
pub const _mm512_mask_div_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:2371:9
pub const _mm512_maskz_div_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:2376:9
pub const _mm512_roundscale_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleps_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2381:9
pub const _mm512_mask_roundscale_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleps_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2387:9
pub const _mm512_maskz_roundscale_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleps_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2392:9
pub const _mm512_mask_roundscale_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleps_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2398:9
pub const _mm512_maskz_roundscale_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleps_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2403:9
pub const _mm512_roundscale_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleps_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2408:9
pub const _mm512_roundscale_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalepd_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2413:9
pub const _mm512_mask_roundscale_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalepd_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2419:9
pub const _mm512_maskz_roundscale_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalepd_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2424:9
pub const _mm512_mask_roundscale_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalepd_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2430:9
pub const _mm512_maskz_roundscale_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalepd_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2435:9
pub const _mm512_roundscale_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalepd_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2440:9
pub const _mm512_fmadd_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2445:9
pub const _mm512_mask_fmadd_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2452:9
pub const _mm512_mask3_fmadd_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddpd512_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:2459:9
pub const _mm512_maskz_fmadd_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddpd512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:2466:9
pub const _mm512_fmsub_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2473:9
pub const _mm512_mask_fmsub_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2480:9
pub const _mm512_maskz_fmsub_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddpd512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:2487:9
pub const _mm512_fnmadd_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2494:9
pub const _mm512_mask3_fnmadd_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddpd512_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:2501:9
pub const _mm512_maskz_fnmadd_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddpd512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:2508:9
pub const _mm512_fnmsub_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2515:9
pub const _mm512_maskz_fnmsub_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddpd512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:2522:9
pub const _mm512_fmadd_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2649:9
pub const _mm512_mask_fmadd_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2656:9
pub const _mm512_mask3_fmadd_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddps512_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:2663:9
pub const _mm512_maskz_fmadd_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddps512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:2670:9
pub const _mm512_fmsub_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2677:9
pub const _mm512_mask_fmsub_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2684:9
pub const _mm512_maskz_fmsub_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddps512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:2691:9
pub const _mm512_fnmadd_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2698:9
pub const _mm512_mask3_fnmadd_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddps512_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:2705:9
pub const _mm512_maskz_fnmadd_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddps512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:2712:9
pub const _mm512_fnmsub_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2719:9
pub const _mm512_maskz_fnmsub_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddps512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:2726:9
pub const _mm512_fmaddsub_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2853:9
pub const _mm512_mask_fmaddsub_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2860:9
pub const _mm512_mask3_fmaddsub_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubpd512_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:2867:9
pub const _mm512_maskz_fmaddsub_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubpd512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:2874:9
pub const _mm512_fmsubadd_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2881:9
pub const _mm512_mask_fmsubadd_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2888:9
pub const _mm512_maskz_fmsubadd_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubpd512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:2895:9
pub const _mm512_fmaddsub_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2972:9
pub const _mm512_mask_fmaddsub_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:2979:9
pub const _mm512_mask3_fmaddsub_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubps512_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:2986:9
pub const _mm512_maskz_fmaddsub_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubps512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:2993:9
pub const _mm512_fmsubadd_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3000:9
pub const _mm512_mask_fmsubadd_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3007:9
pub const _mm512_maskz_fmsubadd_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubps512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:3014:9
pub const _mm512_mask3_fmsub_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmsubpd512_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:3091:9
pub const _mm512_mask3_fmsub_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmsubps512_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:3108:9
pub const _mm512_mask3_fmsubadd_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmsubaddpd512_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:3124:9
pub const _mm512_mask3_fmsubadd_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmsubaddps512_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:3141:9
pub const _mm512_mask_fnmadd_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3158:9
pub const _mm512_mask_fnmadd_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3175:9
pub const _mm512_mask_fnmsub_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3192:9
pub const _mm512_mask3_fnmsub_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmsubpd512_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:3199:9
pub const _mm512_mask_fnmsub_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3226:9
pub const _mm512_mask3_fnmsub_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmsubps512_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:3233:9
pub const _mm512_alignr_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_alignq512`");
// /usr/lib/zig/include/avx512fintrin.h:3332:9
pub const _mm512_mask_alignr_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512fintrin.h:3336:9
pub const _mm512_maskz_alignr_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512fintrin.h:3341:9
pub const _mm512_alignr_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_alignd512`");
// /usr/lib/zig/include/avx512fintrin.h:3346:9
pub const _mm512_mask_alignr_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512fintrin.h:3350:9
pub const _mm512_maskz_alignr_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512fintrin.h:3355:9
pub const _mm512_extractf64x4_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf64x4_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3361:9
pub const _mm512_mask_extractf64x4_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf64x4_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3366:9
pub const _mm512_maskz_extractf64x4_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf64x4_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3371:9
pub const _mm512_extractf32x4_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf32x4_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3376:9
pub const _mm512_mask_extractf32x4_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf32x4_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3381:9
pub const _mm512_maskz_extractf32x4_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf32x4_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3386:9
pub const _mm512_cmp_round_ps_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3427:9
pub const _mm512_mask_cmp_round_ps_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3432:9
pub inline fn _mm512_cmp_ps_mask(A: anytype, B: anytype, P: anytype) @TypeOf(_mm512_cmp_round_ps_mask(A, B, P, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    _ = &B;
    _ = &P;
    return _mm512_cmp_round_ps_mask(A, B, P, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_mask_cmp_ps_mask(U: anytype, A: anytype, B: anytype, P: anytype) @TypeOf(_mm512_mask_cmp_round_ps_mask(U, A, B, P, _MM_FROUND_CUR_DIRECTION)) {
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &P;
    return _mm512_mask_cmp_round_ps_mask(U, A, B, P, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_cmpeq_ps_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_ps_mask(A, B, _CMP_EQ_OQ)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_ps_mask(A, B, _CMP_EQ_OQ);
}
pub inline fn _mm512_mask_cmpeq_ps_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_ps_mask(k, A, B, _CMP_EQ_OQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_ps_mask(k, A, B, _CMP_EQ_OQ);
}
pub inline fn _mm512_cmplt_ps_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_ps_mask(A, B, _CMP_LT_OS)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_ps_mask(A, B, _CMP_LT_OS);
}
pub inline fn _mm512_mask_cmplt_ps_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_ps_mask(k, A, B, _CMP_LT_OS)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_ps_mask(k, A, B, _CMP_LT_OS);
}
pub inline fn _mm512_cmple_ps_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_ps_mask(A, B, _CMP_LE_OS)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_ps_mask(A, B, _CMP_LE_OS);
}
pub inline fn _mm512_mask_cmple_ps_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_ps_mask(k, A, B, _CMP_LE_OS)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_ps_mask(k, A, B, _CMP_LE_OS);
}
pub inline fn _mm512_cmpunord_ps_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_ps_mask(A, B, _CMP_UNORD_Q)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_ps_mask(A, B, _CMP_UNORD_Q);
}
pub inline fn _mm512_mask_cmpunord_ps_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_ps_mask(k, A, B, _CMP_UNORD_Q)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_ps_mask(k, A, B, _CMP_UNORD_Q);
}
pub inline fn _mm512_cmpneq_ps_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_ps_mask(A, B, _CMP_NEQ_UQ)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_ps_mask(A, B, _CMP_NEQ_UQ);
}
pub inline fn _mm512_mask_cmpneq_ps_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_ps_mask(k, A, B, _CMP_NEQ_UQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_ps_mask(k, A, B, _CMP_NEQ_UQ);
}
pub inline fn _mm512_cmpnlt_ps_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_ps_mask(A, B, _CMP_NLT_US)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_ps_mask(A, B, _CMP_NLT_US);
}
pub inline fn _mm512_mask_cmpnlt_ps_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_ps_mask(k, A, B, _CMP_NLT_US)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_ps_mask(k, A, B, _CMP_NLT_US);
}
pub inline fn _mm512_cmpnle_ps_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_ps_mask(A, B, _CMP_NLE_US)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_ps_mask(A, B, _CMP_NLE_US);
}
pub inline fn _mm512_mask_cmpnle_ps_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_ps_mask(k, A, B, _CMP_NLE_US)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_ps_mask(k, A, B, _CMP_NLE_US);
}
pub inline fn _mm512_cmpord_ps_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_ps_mask(A, B, _CMP_ORD_Q)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_ps_mask(A, B, _CMP_ORD_Q);
}
pub inline fn _mm512_mask_cmpord_ps_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_ps_mask(k, A, B, _CMP_ORD_Q)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_ps_mask(k, A, B, _CMP_ORD_Q);
}
pub const _mm512_cmp_round_pd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmppd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3482:9
pub const _mm512_mask_cmp_round_pd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmppd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3487:9
pub inline fn _mm512_cmp_pd_mask(A: anytype, B: anytype, P: anytype) @TypeOf(_mm512_cmp_round_pd_mask(A, B, P, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    _ = &B;
    _ = &P;
    return _mm512_cmp_round_pd_mask(A, B, P, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_mask_cmp_pd_mask(U: anytype, A: anytype, B: anytype, P: anytype) @TypeOf(_mm512_mask_cmp_round_pd_mask(U, A, B, P, _MM_FROUND_CUR_DIRECTION)) {
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &P;
    return _mm512_mask_cmp_round_pd_mask(U, A, B, P, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_cmpeq_pd_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_pd_mask(A, B, _CMP_EQ_OQ)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_pd_mask(A, B, _CMP_EQ_OQ);
}
pub inline fn _mm512_mask_cmpeq_pd_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_pd_mask(k, A, B, _CMP_EQ_OQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_pd_mask(k, A, B, _CMP_EQ_OQ);
}
pub inline fn _mm512_cmplt_pd_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_pd_mask(A, B, _CMP_LT_OS)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_pd_mask(A, B, _CMP_LT_OS);
}
pub inline fn _mm512_mask_cmplt_pd_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_pd_mask(k, A, B, _CMP_LT_OS)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_pd_mask(k, A, B, _CMP_LT_OS);
}
pub inline fn _mm512_cmple_pd_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_pd_mask(A, B, _CMP_LE_OS)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_pd_mask(A, B, _CMP_LE_OS);
}
pub inline fn _mm512_mask_cmple_pd_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_pd_mask(k, A, B, _CMP_LE_OS)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_pd_mask(k, A, B, _CMP_LE_OS);
}
pub inline fn _mm512_cmpunord_pd_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_pd_mask(A, B, _CMP_UNORD_Q)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_pd_mask(A, B, _CMP_UNORD_Q);
}
pub inline fn _mm512_mask_cmpunord_pd_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_pd_mask(k, A, B, _CMP_UNORD_Q)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_pd_mask(k, A, B, _CMP_UNORD_Q);
}
pub inline fn _mm512_cmpneq_pd_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_pd_mask(A, B, _CMP_NEQ_UQ)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_pd_mask(A, B, _CMP_NEQ_UQ);
}
pub inline fn _mm512_mask_cmpneq_pd_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_pd_mask(k, A, B, _CMP_NEQ_UQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_pd_mask(k, A, B, _CMP_NEQ_UQ);
}
pub inline fn _mm512_cmpnlt_pd_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_pd_mask(A, B, _CMP_NLT_US)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_pd_mask(A, B, _CMP_NLT_US);
}
pub inline fn _mm512_mask_cmpnlt_pd_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_pd_mask(k, A, B, _CMP_NLT_US)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_pd_mask(k, A, B, _CMP_NLT_US);
}
pub inline fn _mm512_cmpnle_pd_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_pd_mask(A, B, _CMP_NLE_US)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_pd_mask(A, B, _CMP_NLE_US);
}
pub inline fn _mm512_mask_cmpnle_pd_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_pd_mask(k, A, B, _CMP_NLE_US)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_pd_mask(k, A, B, _CMP_NLE_US);
}
pub inline fn _mm512_cmpord_pd_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_pd_mask(A, B, _CMP_ORD_Q)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_pd_mask(A, B, _CMP_ORD_Q);
}
pub inline fn _mm512_mask_cmpord_pd_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_pd_mask(k, A, B, _CMP_ORD_Q)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_pd_mask(k, A, B, _CMP_ORD_Q);
}
pub const _mm512_cvtt_roundps_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttps2udq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3539:9
pub const _mm512_mask_cvtt_roundps_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttps2udq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3544:9
pub const _mm512_maskz_cvtt_roundps_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttps2udq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3549:9
pub const _mm512_cvt_roundepi32_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtdq2ps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3583:9
pub const _mm512_mask_cvt_roundepi32_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtdq2ps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3588:9
pub const _mm512_maskz_cvt_roundepi32_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtdq2ps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3593:9
pub const _mm512_cvt_roundepu32_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtudq2ps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3598:9
pub const _mm512_mask_cvt_roundepu32_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtudq2ps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3603:9
pub const _mm512_maskz_cvt_roundepu32_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtudq2ps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3608:9
pub const _mm512_cvt_roundpd_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtpd2ps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3725:9
pub const _mm512_mask_cvt_roundpd_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtpd2ps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3730:9
pub const _mm512_maskz_cvt_roundpd_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtpd2ps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3735:9
pub const _mm512_cvt_roundps_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtps2ph512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3785:9
pub const _mm512_mask_cvt_roundps_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtps2ph512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3790:9
pub const _mm512_maskz_cvt_roundps_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtps2ph512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3795:9
pub const _mm512_cvtps_ph = _mm512_cvt_roundps_ph;
pub const _mm512_mask_cvtps_ph = _mm512_mask_cvt_roundps_ph;
pub const _mm512_maskz_cvtps_ph = _mm512_maskz_cvt_roundps_ph;
pub const _mm512_cvt_roundph_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2ps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3804:9
pub const _mm512_mask_cvt_roundph_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2ps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3809:9
pub const _mm512_maskz_cvt_roundph_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2ps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3814:9
pub const _mm512_cvtt_roundpd_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttpd2dq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3848:9
pub const _mm512_mask_cvtt_roundpd_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttpd2dq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3853:9
pub const _mm512_maskz_cvtt_roundpd_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttpd2dq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3858:9
pub const _mm512_cvtt_roundps_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttps2dq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3890:9
pub const _mm512_mask_cvtt_roundps_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttps2dq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3895:9
pub const _mm512_maskz_cvtt_roundps_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttps2dq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3900:9
pub const _mm512_cvt_roundps_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtps2dq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3932:9
pub const _mm512_mask_cvt_roundps_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtps2dq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3937:9
pub const _mm512_maskz_cvt_roundps_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtps2dq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3942:9
pub const _mm512_cvt_roundpd_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtpd2dq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3975:9
pub const _mm512_mask_cvt_roundpd_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtpd2dq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3980:9
pub const _mm512_maskz_cvt_roundpd_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtpd2dq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:3985:9
pub const _mm512_cvt_roundps_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtps2udq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:4019:9
pub const _mm512_mask_cvt_roundps_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtps2udq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:4024:9
pub const _mm512_maskz_cvt_roundps_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtps2udq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:4029:9
pub const _mm512_cvt_roundpd_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtpd2udq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:4063:9
pub const _mm512_mask_cvt_roundpd_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtpd2udq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:4068:9
pub const _mm512_maskz_cvt_roundpd_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtpd2udq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:4073:9
pub inline fn _mm512_cmpeq_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi32_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi32_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_mask_cmpeq_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_cmpge_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi32_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi32_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_mask_cmpge_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_cmpgt_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi32_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi32_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_mask_cmpgt_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_cmple_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi32_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi32_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_mask_cmple_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_cmplt_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi32_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi32_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_mask_cmplt_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_cmpneq_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi32_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi32_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm512_mask_cmpneq_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm512_cmpeq_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu32_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu32_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_mask_cmpeq_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_cmpge_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu32_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu32_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_mask_cmpge_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_cmpgt_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu32_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu32_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_mask_cmpgt_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_cmple_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu32_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu32_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_mask_cmple_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_cmplt_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu32_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu32_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_mask_cmplt_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_cmpneq_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu32_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu32_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm512_mask_cmpneq_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm512_cmpeq_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi64_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi64_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_mask_cmpeq_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_cmpge_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi64_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi64_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_mask_cmpge_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_cmpgt_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi64_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi64_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_mask_cmpgt_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_cmple_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi64_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi64_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_mask_cmple_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_cmplt_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi64_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi64_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_mask_cmplt_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_cmpneq_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi64_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi64_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm512_mask_cmpneq_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm512_cmpeq_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu64_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu64_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_mask_cmpeq_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_cmpge_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu64_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu64_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_mask_cmpge_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_cmpgt_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu64_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu64_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_mask_cmpgt_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_cmple_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu64_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu64_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_mask_cmple_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_cmplt_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu64_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu64_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_mask_cmplt_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_cmpneq_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu64_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu64_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm512_mask_cmpneq_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_NE);
}
pub const _mm512_cmp_epi32_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:4995:9
pub const _mm512_cmp_epu32_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5000:9
pub const _mm512_cmp_epi64_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5005:9
pub const _mm512_cmp_epu64_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5010:9
pub const _mm512_mask_cmp_epi32_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5015:9
pub const _mm512_mask_cmp_epu32_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5020:9
pub const _mm512_mask_cmp_epi64_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5025:9
pub const _mm512_mask_cmp_epu64_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5030:9
pub const _mm512_rol_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_prold512`");
// /usr/lib/zig/include/avx512fintrin.h:5035:9
pub const _mm512_mask_rol_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512fintrin.h:5038:9
pub const _mm512_maskz_rol_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512fintrin.h:5043:9
pub const _mm512_rol_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_prolq512`");
// /usr/lib/zig/include/avx512fintrin.h:5048:9
pub const _mm512_mask_rol_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512fintrin.h:5051:9
pub const _mm512_maskz_rol_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512fintrin.h:5056:9
pub const _mm512_ror_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_prord512`");
// /usr/lib/zig/include/avx512fintrin.h:5105:9
pub const _mm512_mask_ror_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512fintrin.h:5108:9
pub const _mm512_maskz_ror_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512fintrin.h:5113:9
pub const _mm512_ror_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_prorq512`");
// /usr/lib/zig/include/avx512fintrin.h:5118:9
pub const _mm512_mask_ror_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512fintrin.h:5121:9
pub const _mm512_maskz_ror_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512fintrin.h:5126:9
pub const _mm512_fixupimm_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5324:9
pub const _mm512_mask_fixupimm_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5330:9
pub const _mm512_fixupimm_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5336:9
pub const _mm512_mask_fixupimm_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5343:9
pub const _mm512_maskz_fixupimm_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmpd512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:5350:9
pub const _mm512_maskz_fixupimm_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmpd512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:5357:9
pub const _mm512_fixupimm_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5364:9
pub const _mm512_mask_fixupimm_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5370:9
pub const _mm512_fixupimm_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5376:9
pub const _mm512_mask_fixupimm_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5383:9
pub const _mm512_maskz_fixupimm_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmps512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:5390:9
pub const _mm512_maskz_fixupimm_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmps512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:5397:9
pub const _mm_fixupimm_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmsd_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5404:9
pub const _mm_mask_fixupimm_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmsd_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5410:9
pub const _mm_fixupimm_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmsd_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5416:9
pub const _mm_mask_fixupimm_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmsd_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5423:9
pub const _mm_maskz_fixupimm_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmsd_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:5430:9
pub const _mm_maskz_fixupimm_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmsd_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:5436:9
pub const _mm_fixupimm_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmss_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5443:9
pub const _mm_mask_fixupimm_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmss_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5449:9
pub const _mm_fixupimm_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmss_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5455:9
pub const _mm_mask_fixupimm_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmss_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5462:9
pub const _mm_maskz_fixupimm_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmss_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:5469:9
pub const _mm_maskz_fixupimm_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmss_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:5475:9
pub const _mm_getexp_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexpsd128_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5482:9
pub const _mm_mask_getexp_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexpsd128_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5506:9
pub const _mm_maskz_getexp_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexpsd128_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5522:9
pub const _mm_getexp_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexpss128_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5528:9
pub const _mm_mask_getexp_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexpss128_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5551:9
pub const _mm_maskz_getexp_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexpss128_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5567:9
pub const _mm_getmant_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5573:9
pub const _mm_getmant_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5580:9
pub const _mm_mask_getmant_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5588:9
pub const _mm_mask_getmant_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5596:9
pub const _mm_maskz_getmant_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5603:9
pub const _mm_maskz_getmant_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5611:9
pub const _mm_getmant_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5618:9
pub const _mm_getmant_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5625:9
pub const _mm_mask_getmant_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5633:9
pub const _mm_mask_getmant_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5641:9
pub const _mm_maskz_getmant_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5648:9
pub const _mm_maskz_getmant_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5656:9
pub const _mm_comi_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcomisd`");
// /usr/lib/zig/include/avx512fintrin.h:5669:9
pub const _mm_comi_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcomiss`");
// /usr/lib/zig/include/avx512fintrin.h:5673:9
pub const _mm_cvt_roundsd_si64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsd2si64`");
// /usr/lib/zig/include/avx512fintrin.h:5678:9
pub const _mm512_ternarylogic_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5955:9
pub const _mm512_mask_ternarylogic_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5960:9
pub const _mm512_maskz_ternarylogic_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogd512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:5965:9
pub const _mm512_ternarylogic_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5970:9
pub const _mm512_mask_ternarylogic_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:5975:9
pub const _mm512_maskz_ternarylogic_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogq512_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:5980:9
pub const _mm_cvt_roundsd_i64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsd2si64`");
// /usr/lib/zig/include/avx512fintrin.h:5986:9
pub const _mm_cvt_roundsd_si32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsd2si32`");
// /usr/lib/zig/include/avx512fintrin.h:5990:9
pub const _mm_cvt_roundsd_i32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsd2si32`");
// /usr/lib/zig/include/avx512fintrin.h:5993:9
pub const _mm_cvt_roundsd_u32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsd2usi32`");
// /usr/lib/zig/include/avx512fintrin.h:5996:9
pub const _mm_cvt_roundsd_u64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsd2usi64`");
// /usr/lib/zig/include/avx512fintrin.h:6007:9
pub const _mm_cvt_roundss_si32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtss2si32`");
// /usr/lib/zig/include/avx512fintrin.h:6020:9
pub const _mm_cvt_roundss_i32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtss2si32`");
// /usr/lib/zig/include/avx512fintrin.h:6023:9
pub const _mm_cvt_roundss_si64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtss2si64`");
// /usr/lib/zig/include/avx512fintrin.h:6027:9
pub const _mm_cvt_roundss_i64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtss2si64`");
// /usr/lib/zig/include/avx512fintrin.h:6030:9
pub const _mm_cvt_roundss_u32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtss2usi32`");
// /usr/lib/zig/include/avx512fintrin.h:6034:9
pub const _mm_cvt_roundss_u64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtss2usi64`");
// /usr/lib/zig/include/avx512fintrin.h:6045:9
pub const _mm_cvtt_roundsd_i32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttsd2si32`");
// /usr/lib/zig/include/avx512fintrin.h:6058:9
pub const _mm_cvtt_roundsd_si32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttsd2si32`");
// /usr/lib/zig/include/avx512fintrin.h:6061:9
pub const _mm_cvtt_roundsd_si64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttsd2si64`");
// /usr/lib/zig/include/avx512fintrin.h:6072:9
pub const _mm_cvtt_roundsd_i64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttsd2si64`");
// /usr/lib/zig/include/avx512fintrin.h:6075:9
pub const _mm_cvtt_roundsd_u32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttsd2usi32`");
// /usr/lib/zig/include/avx512fintrin.h:6086:9
pub const _mm_cvtt_roundsd_u64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttsd2usi64`");
// /usr/lib/zig/include/avx512fintrin.h:6097:9
pub const _mm_cvtt_roundss_i32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttss2si32`");
// /usr/lib/zig/include/avx512fintrin.h:6110:9
pub const _mm_cvtt_roundss_si32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttss2si32`");
// /usr/lib/zig/include/avx512fintrin.h:6113:9
pub const _mm_cvtt_roundss_i64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttss2si64`");
// /usr/lib/zig/include/avx512fintrin.h:6124:9
pub const _mm_cvtt_roundss_si64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttss2si64`");
// /usr/lib/zig/include/avx512fintrin.h:6127:9
pub const _mm_cvtt_roundss_u32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttss2usi32`");
// /usr/lib/zig/include/avx512fintrin.h:6138:9
pub const _mm_cvtt_roundss_u64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttss2usi64`");
// /usr/lib/zig/include/avx512fintrin.h:6149:9
pub const _mm512_permute_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpermilpd512`");
// /usr/lib/zig/include/avx512fintrin.h:6162:9
pub const _mm512_mask_permute_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:6165:9
pub const _mm512_maskz_permute_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:6170:9
pub const _mm512_permute_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpermilps512`");
// /usr/lib/zig/include/avx512fintrin.h:6175:9
pub const _mm512_mask_permute_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:6178:9
pub const _mm512_maskz_permute_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:6183:9
pub const _mm512_cvtt_roundpd_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttpd2udq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6297:9
pub const _mm512_mask_cvtt_roundpd_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttpd2udq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6302:9
pub const _mm512_maskz_cvtt_roundpd_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttpd2udq512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6307:9
pub const _mm_roundscale_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalesd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6341:9
pub const _mm_roundscale_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalesd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6348:9
pub const _mm_mask_roundscale_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalesd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6355:9
pub const _mm_mask_roundscale_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalesd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6362:9
pub const _mm_maskz_roundscale_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalesd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6369:9
pub const _mm_maskz_roundscale_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalesd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6376:9
pub const _mm_roundscale_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaless_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6383:9
pub const _mm_roundscale_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaless_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6390:9
pub const _mm_mask_roundscale_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaless_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6397:9
pub const _mm_mask_roundscale_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaless_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6404:9
pub const _mm_maskz_roundscale_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaless_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6411:9
pub const _mm_maskz_roundscale_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaless_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6418:9
pub const _mm512_scalef_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6425:9
pub const _mm512_mask_scalef_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6431:9
pub const _mm512_maskz_scalef_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6437:9
pub const _mm512_scalef_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6475:9
pub const _mm512_mask_scalef_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6481:9
pub const _mm512_maskz_scalef_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6487:9
pub const _mm_scalef_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6525:9
pub const _mm_mask_scalef_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6550:9
pub const _mm_maskz_scalef_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6566:9
pub const _mm_scalef_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6572:9
pub const _mm_mask_scalef_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6597:9
pub const _mm_maskz_scalef_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6613:9
pub const _mm512_shuffle_f32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_shuf_f32x4`");
// /usr/lib/zig/include/avx512fintrin.h:6665:9
pub const _mm512_mask_shuffle_f32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:6669:9
pub const _mm512_maskz_shuffle_f32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:6674:9
pub const _mm512_shuffle_f64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_shuf_f64x2`");
// /usr/lib/zig/include/avx512fintrin.h:6679:9
pub const _mm512_mask_shuffle_f64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:6683:9
pub const _mm512_maskz_shuffle_f64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:6688:9
pub const _mm512_shuffle_i32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_shuf_i32x4`");
// /usr/lib/zig/include/avx512fintrin.h:6693:9
pub const _mm512_mask_shuffle_i32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512fintrin.h:6697:9
pub const _mm512_maskz_shuffle_i32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512fintrin.h:6702:9
pub const _mm512_shuffle_i64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_shuf_i64x2`");
// /usr/lib/zig/include/avx512fintrin.h:6707:9
pub const _mm512_mask_shuffle_i64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512fintrin.h:6711:9
pub const _mm512_maskz_shuffle_i64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512fintrin.h:6716:9
pub const _mm512_shuffle_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_shufpd512`");
// /usr/lib/zig/include/avx512fintrin.h:6721:9
pub const _mm512_mask_shuffle_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:6725:9
pub const _mm512_maskz_shuffle_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:6730:9
pub const _mm512_shuffle_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_shufps512`");
// /usr/lib/zig/include/avx512fintrin.h:6735:9
pub const _mm512_mask_shuffle_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:6739:9
pub const _mm512_maskz_shuffle_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:6744:9
pub const _mm_sqrt_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_sqrtsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6749:9
pub const _mm_mask_sqrt_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_sqrtsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6765:9
pub const _mm_maskz_sqrt_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_sqrtsd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6781:9
pub const _mm_sqrt_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_sqrtss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6787:9
pub const _mm_mask_sqrt_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_sqrtss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6803:9
pub const _mm_maskz_sqrt_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_sqrtss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:6819:9
pub const _mm512_extracti32x4_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti32x4_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7389:9
pub const _mm512_mask_extracti32x4_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti32x4_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7394:9
pub const _mm512_maskz_extracti32x4_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti32x4_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7399:9
pub const _mm512_extracti64x4_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti64x4_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7404:9
pub const _mm512_mask_extracti64x4_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti64x4_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7409:9
pub const _mm512_maskz_extracti64x4_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti64x4_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7414:9
pub const _mm512_insertf64x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_insertf64x4`");
// /usr/lib/zig/include/avx512fintrin.h:7419:9
pub const _mm512_mask_insertf64x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:7423:9
pub const _mm512_maskz_insertf64x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:7428:9
pub const _mm512_inserti64x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_inserti64x4`");
// /usr/lib/zig/include/avx512fintrin.h:7433:9
pub const _mm512_mask_inserti64x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512fintrin.h:7437:9
pub const _mm512_maskz_inserti64x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512fintrin.h:7442:9
pub const _mm512_insertf32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_insertf32x4`");
// /usr/lib/zig/include/avx512fintrin.h:7447:9
pub const _mm512_mask_insertf32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:7451:9
pub const _mm512_maskz_insertf32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512fintrin.h:7456:9
pub const _mm512_inserti32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_inserti32x4`");
// /usr/lib/zig/include/avx512fintrin.h:7461:9
pub const _mm512_mask_inserti32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512fintrin.h:7465:9
pub const _mm512_maskz_inserti32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512fintrin.h:7470:9
pub const _mm512_getmant_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7475:9
pub const _mm512_mask_getmant_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7481:9
pub const _mm512_maskz_getmant_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7487:9
pub const _mm512_getmant_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7493:9
pub const _mm512_mask_getmant_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7500:9
pub const _mm512_maskz_getmant_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantpd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7507:9
pub const _mm512_getmant_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7514:9
pub const _mm512_mask_getmant_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7520:9
pub const _mm512_maskz_getmant_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7526:9
pub const _mm512_getmant_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7532:9
pub const _mm512_mask_getmant_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7539:9
pub const _mm512_maskz_getmant_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7546:9
pub const _mm512_getexp_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexppd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7553:9
pub const _mm512_mask_getexp_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexppd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7558:9
pub const _mm512_maskz_getexp_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexppd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7563:9
pub const _mm512_getexp_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexpps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7595:9
pub const _mm512_mask_getexp_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexpps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7600:9
pub const _mm512_maskz_getexp_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexpps512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7605:9
pub const _mm512_i64gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherdiv16sf`");
// /usr/lib/zig/include/avx512fintrin.h:7637:9
pub const _mm512_mask_i64gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherdiv16sf`");
// /usr/lib/zig/include/avx512fintrin.h:7643:9
pub const _mm512_i64gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherdiv16si`");
// /usr/lib/zig/include/avx512fintrin.h:7649:9
pub const _mm512_mask_i64gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherdiv16si`");
// /usr/lib/zig/include/avx512fintrin.h:7655:9
pub const _mm512_i64gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherdiv8df`");
// /usr/lib/zig/include/avx512fintrin.h:7661:9
pub const _mm512_mask_i64gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherdiv8df`");
// /usr/lib/zig/include/avx512fintrin.h:7667:9
pub const _mm512_i64gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherdiv8di`");
// /usr/lib/zig/include/avx512fintrin.h:7673:9
pub const _mm512_mask_i64gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherdiv8di`");
// /usr/lib/zig/include/avx512fintrin.h:7679:9
pub const _mm512_i32gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gathersiv16sf`");
// /usr/lib/zig/include/avx512fintrin.h:7685:9
pub const _mm512_mask_i32gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gathersiv16sf`");
// /usr/lib/zig/include/avx512fintrin.h:7691:9
pub const _mm512_i32gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gathersiv16si`");
// /usr/lib/zig/include/avx512fintrin.h:7697:9
pub const _mm512_mask_i32gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gathersiv16si`");
// /usr/lib/zig/include/avx512fintrin.h:7703:9
pub const _mm512_i32gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gathersiv8df`");
// /usr/lib/zig/include/avx512fintrin.h:7709:9
pub const _mm512_mask_i32gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gathersiv8df`");
// /usr/lib/zig/include/avx512fintrin.h:7715:9
pub const _mm512_i32gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gathersiv8di`");
// /usr/lib/zig/include/avx512fintrin.h:7721:9
pub const _mm512_mask_i32gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gathersiv8di`");
// /usr/lib/zig/include/avx512fintrin.h:7727:9
pub const _mm512_i64scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv16sf`");
// /usr/lib/zig/include/avx512fintrin.h:7733:9
pub const _mm512_mask_i64scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv16sf`");
// /usr/lib/zig/include/avx512fintrin.h:7738:9
pub const _mm512_i64scatter_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv16si`");
// /usr/lib/zig/include/avx512fintrin.h:7743:9
pub const _mm512_mask_i64scatter_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv16si`");
// /usr/lib/zig/include/avx512fintrin.h:7748:9
pub const _mm512_i64scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv8df`");
// /usr/lib/zig/include/avx512fintrin.h:7753:9
pub const _mm512_mask_i64scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv8df`");
// /usr/lib/zig/include/avx512fintrin.h:7758:9
pub const _mm512_i64scatter_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv8di`");
// /usr/lib/zig/include/avx512fintrin.h:7763:9
pub const _mm512_mask_i64scatter_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv8di`");
// /usr/lib/zig/include/avx512fintrin.h:7768:9
pub const _mm512_i32scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv16sf`");
// /usr/lib/zig/include/avx512fintrin.h:7773:9
pub const _mm512_mask_i32scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv16sf`");
// /usr/lib/zig/include/avx512fintrin.h:7778:9
pub const _mm512_i32scatter_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv16si`");
// /usr/lib/zig/include/avx512fintrin.h:7783:9
pub const _mm512_mask_i32scatter_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv16si`");
// /usr/lib/zig/include/avx512fintrin.h:7788:9
pub const _mm512_i32scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv8df`");
// /usr/lib/zig/include/avx512fintrin.h:7793:9
pub const _mm512_mask_i32scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv8df`");
// /usr/lib/zig/include/avx512fintrin.h:7798:9
pub const _mm512_i32scatter_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv8di`");
// /usr/lib/zig/include/avx512fintrin.h:7803:9
pub const _mm512_mask_i32scatter_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv8di`");
// /usr/lib/zig/include/avx512fintrin.h:7808:9
pub const _mm_fmadd_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddss3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7823:9
pub const _mm_mask_fmadd_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddss3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7829:9
pub const _mm_maskz_fmadd_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddss3_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:7845:9
pub const _mm_mask3_fmadd_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddss3_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:7861:9
pub const _mm_fmsub_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddss3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7877:9
pub const _mm_mask_fmsub_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddss3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7883:9
pub const _mm_maskz_fmsub_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddss3_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:7899:9
pub const _mm_mask3_fmsub_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmsubss3_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:7915:9
pub const _mm_fnmadd_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddss3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7931:9
pub const _mm_mask_fnmadd_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddss3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7937:9
pub const _mm_maskz_fnmadd_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddss3_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:7953:9
pub const _mm_mask3_fnmadd_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddss3_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:7969:9
pub const _mm_fnmsub_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddss3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7985:9
pub const _mm_mask_fnmsub_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddss3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:7991:9
pub const _mm_maskz_fnmsub_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddss3_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:8007:9
pub const _mm_mask3_fnmsub_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmsubss3_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:8023:9
pub const _mm_fmadd_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsd3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8039:9
pub const _mm_mask_fmadd_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsd3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8045:9
pub const _mm_maskz_fmadd_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsd3_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:8061:9
pub const _mm_mask3_fmadd_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsd3_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:8077:9
pub const _mm_fmsub_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsd3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8093:9
pub const _mm_mask_fmsub_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsd3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8099:9
pub const _mm_maskz_fmsub_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsd3_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:8115:9
pub const _mm_mask3_fmsub_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmsubsd3_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:8131:9
pub const _mm_fnmadd_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsd3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8147:9
pub const _mm_mask_fnmadd_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsd3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8153:9
pub const _mm_maskz_fnmadd_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsd3_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:8169:9
pub const _mm_mask3_fnmadd_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsd3_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:8185:9
pub const _mm_fnmsub_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsd3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8201:9
pub const _mm_mask_fnmsub_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsd3_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8207:9
pub const _mm_maskz_fnmsub_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsd3_maskz`");
// /usr/lib/zig/include/avx512fintrin.h:8223:9
pub const _mm_mask3_fnmsub_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmsubsd3_mask3`");
// /usr/lib/zig/include/avx512fintrin.h:8240:9
pub const _mm512_permutex_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_permdf512`");
// /usr/lib/zig/include/avx512fintrin.h:8246:9
pub const _mm512_mask_permutex_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:8249:9
pub const _mm512_maskz_permutex_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512fintrin.h:8254:9
pub const _mm512_permutex_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_permdi512`");
// /usr/lib/zig/include/avx512fintrin.h:8259:9
pub const _mm512_mask_permutex_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512fintrin.h:8262:9
pub const _mm512_maskz_permutex_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512fintrin.h:8267:9
pub const _mm512_permutevar_epi32 = _mm512_permutexvar_epi32;
pub const _mm512_mask_permutevar_epi32 = _mm512_mask_permutexvar_epi32;
pub const _kand_mask16 = _mm512_kand;
pub const _kandn_mask16 = _mm512_kandn;
pub const _knot_mask16 = _mm512_knot;
pub const _kor_mask16 = _mm512_kor;
pub const _kxnor_mask16 = _mm512_kxnor;
pub const _kxor_mask16 = _mm512_kxor;
pub const _kshiftli_mask16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_kshiftlihi`");
// /usr/lib/zig/include/avx512fintrin.h:8439:9
pub const _kshiftri_mask16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_kshiftrihi`");
// /usr/lib/zig/include/avx512fintrin.h:8442:9
pub const _mm_cmp_round_ss_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpss_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8561:9
pub const _mm_mask_cmp_round_ss_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpss_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8566:9
pub const _mm_cmp_ss_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpss_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8571:9
pub const _mm_mask_cmp_ss_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpss_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8577:9
pub const _mm_cmp_round_sd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpsd_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8583:9
pub const _mm_mask_cmp_round_sd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpsd_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8588:9
pub const _mm_cmp_sd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpsd_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8593:9
pub const _mm_mask_cmp_sd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpsd_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8599:9
pub const _mm512_shuffle_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pshufd512`");
// /usr/lib/zig/include/avx512fintrin.h:8783:9
pub const _mm512_mask_shuffle_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512fintrin.h:8786:9
pub const _mm512_maskz_shuffle_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512fintrin.h:8791:9
pub const _mm512_cvt_roundps_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtps2pd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8924:9
pub const _mm512_mask_cvt_roundps_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtps2pd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8929:9
pub const _mm512_maskz_cvt_roundps_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtps2pd512_mask`");
// /usr/lib/zig/include/avx512fintrin.h:8934:9
pub const _mm_cvt_roundsd_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtsd2ss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:9033:9
pub const _mm_mask_cvt_roundsd_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtsd2ss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:9039:9
pub const _mm_maskz_cvt_roundsd_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtsd2ss_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:9045:9
pub const _mm_cvtss_i32 = _mm_cvtss_si32;
pub const _mm_cvtsd_i32 = _mm_cvtsd_si32;
pub const _mm_cvti32_sd = _mm_cvtsi32_sd;
pub const _mm_cvti32_ss = _mm_cvtsi32_ss;
pub const _mm_cvtss_i64 = _mm_cvtss_si64;
pub const _mm_cvtsd_i64 = _mm_cvtsd_si64;
pub const _mm_cvti64_sd = _mm_cvtsi64_sd;
pub const _mm_cvti64_ss = _mm_cvtsi64_ss;
pub const _mm_cvt_roundi64_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtsi2sd64`");
// /usr/lib/zig/include/avx512fintrin.h:9081:9
pub const _mm_cvt_roundsi64_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtsi2sd64`");
// /usr/lib/zig/include/avx512fintrin.h:9085:9
pub const _mm_cvt_roundsi32_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtsi2ss32`");
// /usr/lib/zig/include/avx512fintrin.h:9090:9
pub const _mm_cvt_roundi32_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtsi2ss32`");
// /usr/lib/zig/include/avx512fintrin.h:9093:9
pub const _mm_cvt_roundsi64_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtsi2ss64`");
// /usr/lib/zig/include/avx512fintrin.h:9097:9
pub const _mm_cvt_roundi64_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtsi2ss64`");
// /usr/lib/zig/include/avx512fintrin.h:9101:9
pub const _mm_cvt_roundss_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtss2sd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:9106:9
pub const _mm_mask_cvt_roundss_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtss2sd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:9112:9
pub const _mm_maskz_cvt_roundss_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtss2sd_round_mask`");
// /usr/lib/zig/include/avx512fintrin.h:9118:9
pub const _mm_cvt_roundu64_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtusi2sd64`");
// /usr/lib/zig/include/avx512fintrin.h:9150:9
pub const _mm_cvt_roundu32_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtusi2ss32`");
// /usr/lib/zig/include/avx512fintrin.h:9162:9
pub const _mm_cvt_roundu64_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtusi2ss64`");
// /usr/lib/zig/include/avx512fintrin.h:9174:9
pub inline fn _mm512_setr_epi32(e0: anytype, e1: anytype, e2: anytype, e3: anytype, e4: anytype, e5: anytype, e6: anytype, e7: anytype, e8: anytype, e9: anytype, e10: anytype, e11: anytype, e12: anytype, e13: anytype, e14: anytype, e15: anytype) @TypeOf(_mm512_set_epi32(e15, e14, e13, e12, e11, e10, e9, e8, e7, e6, e5, e4, e3, e2, e1, e0)) {
    _ = &e0;
    _ = &e1;
    _ = &e2;
    _ = &e3;
    _ = &e4;
    _ = &e5;
    _ = &e6;
    _ = &e7;
    _ = &e8;
    _ = &e9;
    _ = &e10;
    _ = &e11;
    _ = &e12;
    _ = &e13;
    _ = &e14;
    _ = &e15;
    return _mm512_set_epi32(e15, e14, e13, e12, e11, e10, e9, e8, e7, e6, e5, e4, e3, e2, e1, e0);
}
pub inline fn _mm512_setr_epi64(e0: anytype, e1: anytype, e2: anytype, e3: anytype, e4: anytype, e5: anytype, e6: anytype, e7: anytype) @TypeOf(_mm512_set_epi64(e7, e6, e5, e4, e3, e2, e1, e0)) {
    _ = &e0;
    _ = &e1;
    _ = &e2;
    _ = &e3;
    _ = &e4;
    _ = &e5;
    _ = &e6;
    _ = &e7;
    return _mm512_set_epi64(e7, e6, e5, e4, e3, e2, e1, e0);
}
pub inline fn _mm512_setr_pd(e0: anytype, e1: anytype, e2: anytype, e3: anytype, e4: anytype, e5: anytype, e6: anytype, e7: anytype) @TypeOf(_mm512_set_pd(e7, e6, e5, e4, e3, e2, e1, e0)) {
    _ = &e0;
    _ = &e1;
    _ = &e2;
    _ = &e3;
    _ = &e4;
    _ = &e5;
    _ = &e6;
    _ = &e7;
    return _mm512_set_pd(e7, e6, e5, e4, e3, e2, e1, e0);
}
pub inline fn _mm512_setr_ps(e0: anytype, e1: anytype, e2: anytype, e3: anytype, e4: anytype, e5: anytype, e6: anytype, e7: anytype, e8: anytype, e9: anytype, e10: anytype, e11: anytype, e12: anytype, e13: anytype, e14: anytype, e15: anytype) @TypeOf(_mm512_set_ps(e15, e14, e13, e12, e11, e10, e9, e8, e7, e6, e5, e4, e3, e2, e1, e0)) {
    _ = &e0;
    _ = &e1;
    _ = &e2;
    _ = &e3;
    _ = &e4;
    _ = &e5;
    _ = &e6;
    _ = &e7;
    _ = &e8;
    _ = &e9;
    _ = &e10;
    _ = &e11;
    _ = &e12;
    _ = &e13;
    _ = &e14;
    _ = &e15;
    return _mm512_set_ps(e15, e14, e13, e12, e11, e10, e9, e8, e7, e6, e5, e4, e3, e2, e1, e0);
}
pub inline fn _mm512_i32logather_pd(vindex: anytype, base_addr: anytype, scale: anytype) @TypeOf(_mm512_i32gather_pd(_mm512_castsi512_si256(vindex), base_addr, scale)) {
    _ = &vindex;
    _ = &base_addr;
    _ = &scale;
    return _mm512_i32gather_pd(_mm512_castsi512_si256(vindex), base_addr, scale);
}
pub inline fn _mm512_mask_i32logather_pd(src: anytype, mask: anytype, vindex: anytype, base_addr: anytype, scale: anytype) @TypeOf(_mm512_mask_i32gather_pd(src, mask, _mm512_castsi512_si256(vindex), base_addr, scale)) {
    _ = &src;
    _ = &mask;
    _ = &vindex;
    _ = &base_addr;
    _ = &scale;
    return _mm512_mask_i32gather_pd(src, mask, _mm512_castsi512_si256(vindex), base_addr, scale);
}
pub inline fn _mm512_i32logather_epi64(vindex: anytype, base_addr: anytype, scale: anytype) @TypeOf(_mm512_i32gather_epi64(_mm512_castsi512_si256(vindex), base_addr, scale)) {
    _ = &vindex;
    _ = &base_addr;
    _ = &scale;
    return _mm512_i32gather_epi64(_mm512_castsi512_si256(vindex), base_addr, scale);
}
pub inline fn _mm512_mask_i32logather_epi64(src: anytype, mask: anytype, vindex: anytype, base_addr: anytype, scale: anytype) @TypeOf(_mm512_mask_i32gather_epi64(src, mask, _mm512_castsi512_si256(vindex), base_addr, scale)) {
    _ = &src;
    _ = &mask;
    _ = &vindex;
    _ = &base_addr;
    _ = &scale;
    return _mm512_mask_i32gather_epi64(src, mask, _mm512_castsi512_si256(vindex), base_addr, scale);
}
pub inline fn _mm512_i32loscatter_pd(base_addr: anytype, vindex: anytype, v1: anytype, scale: anytype) @TypeOf(_mm512_i32scatter_pd(base_addr, _mm512_castsi512_si256(vindex), v1, scale)) {
    _ = &base_addr;
    _ = &vindex;
    _ = &v1;
    _ = &scale;
    return _mm512_i32scatter_pd(base_addr, _mm512_castsi512_si256(vindex), v1, scale);
}
pub inline fn _mm512_mask_i32loscatter_pd(base_addr: anytype, mask: anytype, vindex: anytype, v1: anytype, scale: anytype) @TypeOf(_mm512_mask_i32scatter_pd(base_addr, mask, _mm512_castsi512_si256(vindex), v1, scale)) {
    _ = &base_addr;
    _ = &mask;
    _ = &vindex;
    _ = &v1;
    _ = &scale;
    return _mm512_mask_i32scatter_pd(base_addr, mask, _mm512_castsi512_si256(vindex), v1, scale);
}
pub inline fn _mm512_i32loscatter_epi64(base_addr: anytype, vindex: anytype, v1: anytype, scale: anytype) @TypeOf(_mm512_i32scatter_epi64(base_addr, _mm512_castsi512_si256(vindex), v1, scale)) {
    _ = &base_addr;
    _ = &vindex;
    _ = &v1;
    _ = &scale;
    return _mm512_i32scatter_epi64(base_addr, _mm512_castsi512_si256(vindex), v1, scale);
}
pub inline fn _mm512_mask_i32loscatter_epi64(base_addr: anytype, mask: anytype, vindex: anytype, v1: anytype, scale: anytype) @TypeOf(_mm512_mask_i32scatter_epi64(base_addr, mask, _mm512_castsi512_si256(vindex), v1, scale)) {
    _ = &base_addr;
    _ = &mask;
    _ = &vindex;
    _ = &v1;
    _ = &scale;
    return _mm512_mask_i32scatter_epi64(base_addr, mask, _mm512_castsi512_si256(vindex), v1, scale);
}
pub const __AVX512VLINTRIN_H = "";
pub inline fn _mm_cmpeq_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi32_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi32_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_mask_cmpeq_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_cmpge_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi32_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi32_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_mask_cmpge_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_cmpgt_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi32_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi32_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_mask_cmpgt_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_cmple_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi32_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi32_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_mask_cmple_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_cmplt_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi32_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi32_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_mask_cmplt_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_cmpneq_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi32_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi32_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm_mask_cmpneq_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_cmpeq_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi32_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi32_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_mask_cmpeq_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_cmpge_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi32_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi32_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_mask_cmpge_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_cmpgt_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi32_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi32_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_mask_cmpgt_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_cmple_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi32_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi32_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_mask_cmple_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_cmplt_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi32_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi32_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_mask_cmplt_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_cmpneq_epi32_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi32_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi32_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_mask_cmpneq_epi32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi32_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm_cmpeq_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu32_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu32_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_mask_cmpeq_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_cmpge_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu32_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu32_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_mask_cmpge_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_cmpgt_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu32_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu32_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_mask_cmpgt_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_cmple_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu32_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu32_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_mask_cmple_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_cmplt_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu32_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu32_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_mask_cmplt_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_cmpneq_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu32_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu32_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm_mask_cmpneq_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_cmpeq_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu32_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu32_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_mask_cmpeq_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_cmpge_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu32_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu32_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_mask_cmpge_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_cmpgt_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu32_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu32_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_mask_cmpgt_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_cmple_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu32_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu32_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_mask_cmple_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_cmplt_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu32_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu32_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_mask_cmplt_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_cmpneq_epu32_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu32_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu32_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_mask_cmpneq_epu32_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu32_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm_cmpeq_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi64_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi64_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_mask_cmpeq_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_cmpge_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi64_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi64_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_mask_cmpge_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_cmpgt_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi64_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi64_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_mask_cmpgt_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_cmple_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi64_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi64_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_mask_cmple_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_cmplt_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi64_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi64_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_mask_cmplt_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_cmpneq_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi64_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi64_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm_mask_cmpneq_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_cmpeq_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi64_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi64_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_mask_cmpeq_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_cmpge_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi64_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi64_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_mask_cmpge_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_cmpgt_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi64_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi64_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_mask_cmpgt_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_cmple_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi64_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi64_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_mask_cmple_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_cmplt_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi64_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi64_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_mask_cmplt_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_cmpneq_epi64_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi64_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi64_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_mask_cmpneq_epi64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi64_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm_cmpeq_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu64_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu64_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_mask_cmpeq_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_cmpge_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu64_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu64_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_mask_cmpge_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_cmpgt_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu64_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu64_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_mask_cmpgt_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_cmple_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu64_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu64_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_mask_cmple_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_cmplt_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu64_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu64_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_mask_cmplt_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_cmpneq_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu64_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu64_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm_mask_cmpneq_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_cmpeq_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu64_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu64_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_mask_cmpeq_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_cmpge_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu64_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu64_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_mask_cmpge_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_cmpgt_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu64_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu64_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_mask_cmpgt_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_cmple_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu64_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu64_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_mask_cmple_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_cmplt_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu64_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu64_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_mask_cmplt_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_cmpneq_epu64_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu64_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu64_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_mask_cmpneq_epu64_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu64_mask(k, A, B, _MM_CMPINT_NE);
}
pub const _mm_cmp_epi32_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpd128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:779:9
pub const _mm_mask_cmp_epi32_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpd128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:784:9
pub const _mm_cmp_epu32_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpd128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:789:9
pub const _mm_mask_cmp_epu32_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpd128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:794:9
pub const _mm256_cmp_epi32_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpd256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:799:9
pub const _mm256_mask_cmp_epi32_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpd256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:804:9
pub const _mm256_cmp_epu32_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpd256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:809:9
pub const _mm256_mask_cmp_epu32_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpd256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:814:9
pub const _mm_cmp_epi64_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpq128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:819:9
pub const _mm_mask_cmp_epi64_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpq128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:824:9
pub const _mm_cmp_epu64_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpq128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:829:9
pub const _mm_mask_cmp_epu64_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpq128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:834:9
pub const _mm256_cmp_epi64_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpq256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:839:9
pub const _mm256_mask_cmp_epi64_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpq256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:844:9
pub const _mm256_cmp_epu64_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpq256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:849:9
pub const _mm256_mask_cmp_epu64_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpq256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:854:9
pub const _mm256_cmp_ps_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpps256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:859:9
pub const _mm256_mask_cmp_ps_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpps256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:864:9
pub const _mm256_cmp_pd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmppd256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:869:9
pub const _mm256_mask_cmp_pd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmppd256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:874:9
pub const _mm_cmp_ps_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpps128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:879:9
pub const _mm_mask_cmp_ps_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpps128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:884:9
pub const _mm_cmp_pd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmppd128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:889:9
pub const _mm_mask_cmp_pd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmppd128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:894:9
pub const _mm_roundscale_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalepd_128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:3297:9
pub const _mm_mask_roundscale_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalepd_128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:3304:9
pub const _mm_maskz_roundscale_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalepd_128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:3311:9
pub const _mm256_roundscale_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalepd_256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:3318:9
pub const _mm256_mask_roundscale_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalepd_256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:3325:9
pub const _mm256_maskz_roundscale_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalepd_256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:3332:9
pub const _mm_roundscale_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleps_128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:3338:9
pub const _mm_mask_roundscale_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleps_128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:3344:9
pub const _mm_maskz_roundscale_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleps_128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:3350:9
pub const _mm256_roundscale_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleps_256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:3355:9
pub const _mm256_mask_roundscale_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleps_256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:3360:9
pub const _mm256_maskz_roundscale_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleps_256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:3366:9
pub const _mm_i64scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv2df`");
// /usr/lib/zig/include/avx512vlintrin.h:3478:9
pub const _mm_mask_i64scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv2df`");
// /usr/lib/zig/include/avx512vlintrin.h:3483:9
pub const _mm_i64scatter_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv2di`");
// /usr/lib/zig/include/avx512vlintrin.h:3488:9
pub const _mm_mask_i64scatter_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv2di`");
// /usr/lib/zig/include/avx512vlintrin.h:3493:9
pub const _mm256_i64scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv4df`");
// /usr/lib/zig/include/avx512vlintrin.h:3498:9
pub const _mm256_mask_i64scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv4df`");
// /usr/lib/zig/include/avx512vlintrin.h:3503:9
pub const _mm256_i64scatter_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv4di`");
// /usr/lib/zig/include/avx512vlintrin.h:3508:9
pub const _mm256_mask_i64scatter_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv4di`");
// /usr/lib/zig/include/avx512vlintrin.h:3513:9
pub const _mm_i64scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv4sf`");
// /usr/lib/zig/include/avx512vlintrin.h:3518:9
pub const _mm_mask_i64scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv4sf`");
// /usr/lib/zig/include/avx512vlintrin.h:3523:9
pub const _mm_i64scatter_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv4si`");
// /usr/lib/zig/include/avx512vlintrin.h:3528:9
pub const _mm_mask_i64scatter_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv4si`");
// /usr/lib/zig/include/avx512vlintrin.h:3533:9
pub const _mm256_i64scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv8sf`");
// /usr/lib/zig/include/avx512vlintrin.h:3538:9
pub const _mm256_mask_i64scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv8sf`");
// /usr/lib/zig/include/avx512vlintrin.h:3543:9
pub const _mm256_i64scatter_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv8si`");
// /usr/lib/zig/include/avx512vlintrin.h:3548:9
pub const _mm256_mask_i64scatter_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterdiv8si`");
// /usr/lib/zig/include/avx512vlintrin.h:3553:9
pub const _mm_i32scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv2df`");
// /usr/lib/zig/include/avx512vlintrin.h:3558:9
pub const _mm_mask_i32scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv2df`");
// /usr/lib/zig/include/avx512vlintrin.h:3563:9
pub const _mm_i32scatter_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv2di`");
// /usr/lib/zig/include/avx512vlintrin.h:3568:9
pub const _mm_mask_i32scatter_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv2di`");
// /usr/lib/zig/include/avx512vlintrin.h:3573:9
pub const _mm256_i32scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv4df`");
// /usr/lib/zig/include/avx512vlintrin.h:3578:9
pub const _mm256_mask_i32scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv4df`");
// /usr/lib/zig/include/avx512vlintrin.h:3583:9
pub const _mm256_i32scatter_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv4di`");
// /usr/lib/zig/include/avx512vlintrin.h:3588:9
pub const _mm256_mask_i32scatter_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv4di`");
// /usr/lib/zig/include/avx512vlintrin.h:3593:9
pub const _mm_i32scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv4sf`");
// /usr/lib/zig/include/avx512vlintrin.h:3598:9
pub const _mm_mask_i32scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv4sf`");
// /usr/lib/zig/include/avx512vlintrin.h:3603:9
pub const _mm_i32scatter_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv4si`");
// /usr/lib/zig/include/avx512vlintrin.h:3608:9
pub const _mm_mask_i32scatter_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv4si`");
// /usr/lib/zig/include/avx512vlintrin.h:3613:9
pub const _mm256_i32scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv8sf`");
// /usr/lib/zig/include/avx512vlintrin.h:3618:9
pub const _mm256_mask_i32scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv8sf`");
// /usr/lib/zig/include/avx512vlintrin.h:3623:9
pub const _mm256_i32scatter_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv8si`");
// /usr/lib/zig/include/avx512vlintrin.h:3628:9
pub const _mm256_mask_i32scatter_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scattersiv8si`");
// /usr/lib/zig/include/avx512vlintrin.h:3633:9
pub const _mm_rol_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_prold128`");
// /usr/lib/zig/include/avx512vlintrin.h:4306:9
pub const _mm_mask_rol_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_128`");
// /usr/lib/zig/include/avx512vlintrin.h:4309:9
pub const _mm_maskz_rol_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_128`");
// /usr/lib/zig/include/avx512vlintrin.h:4314:9
pub const _mm256_rol_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_prold256`");
// /usr/lib/zig/include/avx512vlintrin.h:4319:9
pub const _mm256_mask_rol_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:4322:9
pub const _mm256_maskz_rol_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:4327:9
pub const _mm_rol_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_prolq128`");
// /usr/lib/zig/include/avx512vlintrin.h:4332:9
pub const _mm_mask_rol_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_128`");
// /usr/lib/zig/include/avx512vlintrin.h:4335:9
pub const _mm_maskz_rol_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_128`");
// /usr/lib/zig/include/avx512vlintrin.h:4340:9
pub const _mm256_rol_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_prolq256`");
// /usr/lib/zig/include/avx512vlintrin.h:4345:9
pub const _mm256_mask_rol_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vlintrin.h:4348:9
pub const _mm256_maskz_rol_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vlintrin.h:4353:9
pub const _mm_ror_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_prord128`");
// /usr/lib/zig/include/avx512vlintrin.h:4446:9
pub const _mm_mask_ror_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_128`");
// /usr/lib/zig/include/avx512vlintrin.h:4449:9
pub const _mm_maskz_ror_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_128`");
// /usr/lib/zig/include/avx512vlintrin.h:4454:9
pub const _mm256_ror_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_prord256`");
// /usr/lib/zig/include/avx512vlintrin.h:4459:9
pub const _mm256_mask_ror_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:4462:9
pub const _mm256_maskz_ror_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:4467:9
pub const _mm_ror_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_prorq128`");
// /usr/lib/zig/include/avx512vlintrin.h:4472:9
pub const _mm_mask_ror_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_128`");
// /usr/lib/zig/include/avx512vlintrin.h:4475:9
pub const _mm_maskz_ror_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_128`");
// /usr/lib/zig/include/avx512vlintrin.h:4480:9
pub const _mm256_ror_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_prorq256`");
// /usr/lib/zig/include/avx512vlintrin.h:4485:9
pub const _mm256_mask_ror_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vlintrin.h:4488:9
pub const _mm256_maskz_ror_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vlintrin.h:4493:9
pub const _mm_fixupimm_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmpd128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:5364:9
pub const _mm_mask_fixupimm_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmpd128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:5370:9
pub const _mm_maskz_fixupimm_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmpd128_maskz`");
// /usr/lib/zig/include/avx512vlintrin.h:5376:9
pub const _mm256_fixupimm_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmpd256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:5382:9
pub const _mm256_mask_fixupimm_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmpd256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:5388:9
pub const _mm256_maskz_fixupimm_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmpd256_maskz`");
// /usr/lib/zig/include/avx512vlintrin.h:5394:9
pub const _mm_fixupimm_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmps128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:5400:9
pub const _mm_mask_fixupimm_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmps128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:5406:9
pub const _mm_maskz_fixupimm_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmps128_maskz`");
// /usr/lib/zig/include/avx512vlintrin.h:5412:9
pub const _mm256_fixupimm_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmps256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:5418:9
pub const _mm256_mask_fixupimm_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmps256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:5424:9
pub const _mm256_maskz_fixupimm_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fixupimmps256_maskz`");
// /usr/lib/zig/include/avx512vlintrin.h:5430:9
pub const _mm_mask_permute_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_128`");
// /usr/lib/zig/include/avx512vlintrin.h:6041:9
pub const _mm_maskz_permute_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_128`");
// /usr/lib/zig/include/avx512vlintrin.h:6046:9
pub const _mm256_mask_permute_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6051:9
pub const _mm256_maskz_permute_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6056:9
pub const _mm_mask_permute_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_128`");
// /usr/lib/zig/include/avx512vlintrin.h:6061:9
pub const _mm_maskz_permute_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_128`");
// /usr/lib/zig/include/avx512vlintrin.h:6066:9
pub const _mm256_mask_permute_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6071:9
pub const _mm256_maskz_permute_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6076:9
pub const _mm_ternarylogic_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogd128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:6534:9
pub const _mm_mask_ternarylogic_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogd128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:6539:9
pub const _mm_maskz_ternarylogic_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogd128_maskz`");
// /usr/lib/zig/include/avx512vlintrin.h:6544:9
pub const _mm256_ternarylogic_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogd256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:6549:9
pub const _mm256_mask_ternarylogic_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogd256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:6554:9
pub const _mm256_maskz_ternarylogic_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogd256_maskz`");
// /usr/lib/zig/include/avx512vlintrin.h:6559:9
pub const _mm_ternarylogic_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogq128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:6564:9
pub const _mm_mask_ternarylogic_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogq128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:6569:9
pub const _mm_maskz_ternarylogic_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogq128_maskz`");
// /usr/lib/zig/include/avx512vlintrin.h:6574:9
pub const _mm256_ternarylogic_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogq256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:6579:9
pub const _mm256_mask_ternarylogic_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogq256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:6584:9
pub const _mm256_maskz_ternarylogic_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pternlogq256_maskz`");
// /usr/lib/zig/include/avx512vlintrin.h:6589:9
pub const _mm256_shuffle_f32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_shuf_f32x4_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6594:9
pub const _mm256_mask_shuffle_f32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6598:9
pub const _mm256_maskz_shuffle_f32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6603:9
pub const _mm256_shuffle_f64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_shuf_f64x2_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6608:9
pub const _mm256_mask_shuffle_f64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6612:9
pub const _mm256_maskz_shuffle_f64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6617:9
pub const _mm256_shuffle_i32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_shuf_i32x4_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6622:9
pub const _mm256_mask_shuffle_i32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6626:9
pub const _mm256_maskz_shuffle_i32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6631:9
pub const _mm256_shuffle_i64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_shuf_i64x2_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6636:9
pub const _mm256_mask_shuffle_i64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6640:9
pub const _mm256_maskz_shuffle_i64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6646:9
pub const _mm_mask_shuffle_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_128`");
// /usr/lib/zig/include/avx512vlintrin.h:6651:9
pub const _mm_maskz_shuffle_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_128`");
// /usr/lib/zig/include/avx512vlintrin.h:6656:9
pub const _mm256_mask_shuffle_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6661:9
pub const _mm256_maskz_shuffle_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6666:9
pub const _mm_mask_shuffle_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_128`");
// /usr/lib/zig/include/avx512vlintrin.h:6671:9
pub const _mm_maskz_shuffle_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_128`");
// /usr/lib/zig/include/avx512vlintrin.h:6676:9
pub const _mm256_mask_shuffle_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6681:9
pub const _mm256_maskz_shuffle_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_256`");
// /usr/lib/zig/include/avx512vlintrin.h:6686:9
pub const _mm256_extractf32x4_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf32x4_256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7828:9
pub const _mm256_mask_extractf32x4_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf32x4_256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7834:9
pub const _mm256_maskz_extractf32x4_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf32x4_256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7840:9
pub const _mm256_extracti32x4_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti32x4_256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7846:9
pub const _mm256_mask_extracti32x4_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti32x4_256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7852:9
pub const _mm256_maskz_extracti32x4_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti32x4_256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7858:9
pub const _mm256_insertf32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_insertf32x4_256`");
// /usr/lib/zig/include/avx512vlintrin.h:7864:9
pub const _mm256_mask_insertf32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_256`");
// /usr/lib/zig/include/avx512vlintrin.h:7868:9
pub const _mm256_maskz_insertf32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_256`");
// /usr/lib/zig/include/avx512vlintrin.h:7873:9
pub const _mm256_inserti32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_inserti32x4_256`");
// /usr/lib/zig/include/avx512vlintrin.h:7878:9
pub const _mm256_mask_inserti32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:7882:9
pub const _mm256_maskz_inserti32x4 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:7887:9
pub const _mm_getmant_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantpd128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7892:9
pub const _mm_mask_getmant_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantpd128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7898:9
pub const _mm_maskz_getmant_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantpd128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7904:9
pub const _mm256_getmant_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantpd256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7910:9
pub const _mm256_mask_getmant_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantpd256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7916:9
pub const _mm256_maskz_getmant_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantpd256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7922:9
pub const _mm_getmant_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantps128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7928:9
pub const _mm_mask_getmant_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantps128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7934:9
pub const _mm_maskz_getmant_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantps128_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7940:9
pub const _mm256_getmant_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantps256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7946:9
pub const _mm256_mask_getmant_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantps256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7952:9
pub const _mm256_maskz_getmant_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantps256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:7958:9
pub const _mm_mmask_i64gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3div2df`");
// /usr/lib/zig/include/avx512vlintrin.h:7964:9
pub const _mm_mmask_i64gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3div2di`");
// /usr/lib/zig/include/avx512vlintrin.h:7970:9
pub const _mm256_mmask_i64gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3div4df`");
// /usr/lib/zig/include/avx512vlintrin.h:7976:9
pub const _mm256_mmask_i64gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3div4di`");
// /usr/lib/zig/include/avx512vlintrin.h:7982:9
pub const _mm_mmask_i64gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3div4sf`");
// /usr/lib/zig/include/avx512vlintrin.h:7988:9
pub const _mm_mmask_i64gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3div4si`");
// /usr/lib/zig/include/avx512vlintrin.h:7994:9
pub const _mm256_mmask_i64gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3div8sf`");
// /usr/lib/zig/include/avx512vlintrin.h:8000:9
pub const _mm256_mmask_i64gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3div8si`");
// /usr/lib/zig/include/avx512vlintrin.h:8006:9
pub const _mm_mmask_i32gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3siv2df`");
// /usr/lib/zig/include/avx512vlintrin.h:8012:9
pub const _mm_mmask_i32gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3siv2di`");
// /usr/lib/zig/include/avx512vlintrin.h:8018:9
pub const _mm256_mmask_i32gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3siv4df`");
// /usr/lib/zig/include/avx512vlintrin.h:8024:9
pub const _mm256_mmask_i32gather_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3siv4di`");
// /usr/lib/zig/include/avx512vlintrin.h:8030:9
pub const _mm_mmask_i32gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3siv4sf`");
// /usr/lib/zig/include/avx512vlintrin.h:8036:9
pub const _mm_mmask_i32gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3siv4si`");
// /usr/lib/zig/include/avx512vlintrin.h:8042:9
pub const _mm256_mmask_i32gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3siv8sf`");
// /usr/lib/zig/include/avx512vlintrin.h:8048:9
pub const _mm256_mmask_i32gather_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gather3siv8si`");
// /usr/lib/zig/include/avx512vlintrin.h:8054:9
pub const _mm256_permutex_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_permdf256`");
// /usr/lib/zig/include/avx512vlintrin.h:8060:9
pub const _mm256_mask_permutex_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:8063:9
pub const _mm256_maskz_permutex_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:8068:9
pub const _mm256_permutex_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_permdi256`");
// /usr/lib/zig/include/avx512vlintrin.h:8073:9
pub const _mm256_mask_permutex_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vlintrin.h:8076:9
pub const _mm256_maskz_permutex_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vlintrin.h:8081:9
pub inline fn _mm256_permutexvar_ps(A: anytype, B: anytype) @TypeOf(_mm256_permutevar8x32_ps(B, A)) {
    _ = &A;
    _ = &B;
    return _mm256_permutevar8x32_ps(B, A);
}
pub inline fn _mm256_permutexvar_epi32(A: anytype, B: anytype) @TypeOf(_mm256_permutevar8x32_epi32(B, A)) {
    _ = &A;
    _ = &B;
    return _mm256_permutevar8x32_epi32(B, A);
}
pub const _mm_alignr_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_alignd128`");
// /usr/lib/zig/include/avx512vlintrin.h:8169:9
pub const _mm_mask_alignr_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_128`");
// /usr/lib/zig/include/avx512vlintrin.h:8173:9
pub const _mm_maskz_alignr_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_128`");
// /usr/lib/zig/include/avx512vlintrin.h:8178:9
pub const _mm256_alignr_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_alignd256`");
// /usr/lib/zig/include/avx512vlintrin.h:8183:9
pub const _mm256_mask_alignr_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:8187:9
pub const _mm256_maskz_alignr_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:8192:9
pub const _mm_alignr_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_alignq128`");
// /usr/lib/zig/include/avx512vlintrin.h:8197:9
pub const _mm_mask_alignr_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_128`");
// /usr/lib/zig/include/avx512vlintrin.h:8201:9
pub const _mm_maskz_alignr_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_128`");
// /usr/lib/zig/include/avx512vlintrin.h:8206:9
pub const _mm256_alignr_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_alignq256`");
// /usr/lib/zig/include/avx512vlintrin.h:8211:9
pub const _mm256_mask_alignr_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vlintrin.h:8215:9
pub const _mm256_maskz_alignr_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vlintrin.h:8220:9
pub const _mm256_mask_shuffle_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:8289:9
pub const _mm256_maskz_shuffle_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlintrin.h:8294:9
pub const _mm_mask_shuffle_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_128`");
// /usr/lib/zig/include/avx512vlintrin.h:8299:9
pub const _mm_maskz_shuffle_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_128`");
// /usr/lib/zig/include/avx512vlintrin.h:8304:9
pub const _mm_mask_cvt_roundps_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtps2ph_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:8407:9
pub const _mm_maskz_cvt_roundps_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtps2ph_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:8412:9
pub const _mm_mask_cvtps_ph = _mm_mask_cvt_roundps_ph;
pub const _mm_maskz_cvtps_ph = _mm_maskz_cvt_roundps_ph;
pub const _mm256_mask_cvt_roundps_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtps2ph256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:8420:9
pub const _mm256_maskz_cvt_roundps_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtps2ph256_mask`");
// /usr/lib/zig/include/avx512vlintrin.h:8425:9
pub const _mm256_mask_cvtps_ph = _mm256_mask_cvt_roundps_ph;
pub const _mm256_maskz_cvtps_ph = _mm256_maskz_cvt_roundps_ph;
pub const __AVX512BWINTRIN_H = "";
pub const _kshiftli_mask32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_kshiftlisi`");
// /usr/lib/zig/include/avx512bwintrin.h:172:9
pub const _kshiftri_mask32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_kshiftrisi`");
// /usr/lib/zig/include/avx512bwintrin.h:175:9
pub const _kshiftli_mask64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_kshiftlidi`");
// /usr/lib/zig/include/avx512bwintrin.h:178:9
pub const _kshiftri_mask64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_kshiftridi`");
// /usr/lib/zig/include/avx512bwintrin.h:181:9
pub const _mm512_cmp_epi8_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpb512_mask`");
// /usr/lib/zig/include/avx512bwintrin.h:225:9
pub const _mm512_mask_cmp_epi8_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpb512_mask`");
// /usr/lib/zig/include/avx512bwintrin.h:230:9
pub const _mm512_cmp_epu8_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpb512_mask`");
// /usr/lib/zig/include/avx512bwintrin.h:235:9
pub const _mm512_mask_cmp_epu8_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpb512_mask`");
// /usr/lib/zig/include/avx512bwintrin.h:240:9
pub const _mm512_cmp_epi16_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpw512_mask`");
// /usr/lib/zig/include/avx512bwintrin.h:245:9
pub const _mm512_mask_cmp_epi16_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpw512_mask`");
// /usr/lib/zig/include/avx512bwintrin.h:250:9
pub const _mm512_cmp_epu16_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpw512_mask`");
// /usr/lib/zig/include/avx512bwintrin.h:255:9
pub const _mm512_mask_cmp_epu16_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpw512_mask`");
// /usr/lib/zig/include/avx512bwintrin.h:260:9
pub inline fn _mm512_cmpeq_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi8_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi8_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_mask_cmpeq_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_cmpge_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi8_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi8_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_mask_cmpge_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_cmpgt_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi8_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi8_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_mask_cmpgt_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_cmple_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi8_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi8_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_mask_cmple_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_cmplt_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi8_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi8_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_mask_cmplt_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_cmpneq_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi8_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi8_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm512_mask_cmpneq_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm512_cmpeq_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu8_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu8_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_mask_cmpeq_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_cmpge_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu8_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu8_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_mask_cmpge_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_cmpgt_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu8_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu8_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_mask_cmpgt_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_cmple_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu8_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu8_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_mask_cmple_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_cmplt_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu8_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu8_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_mask_cmplt_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_cmpneq_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu8_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu8_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm512_mask_cmpneq_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm512_cmpeq_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi16_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi16_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_mask_cmpeq_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_cmpge_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi16_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi16_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_mask_cmpge_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_cmpgt_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi16_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi16_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_mask_cmpgt_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_cmple_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi16_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi16_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_mask_cmple_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_cmplt_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi16_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi16_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_mask_cmplt_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_cmpneq_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epi16_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epi16_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm512_mask_cmpneq_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm512_cmpeq_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu16_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu16_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_mask_cmpeq_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm512_cmpge_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu16_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu16_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_mask_cmpge_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm512_cmpgt_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu16_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu16_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_mask_cmpgt_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm512_cmple_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu16_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu16_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_mask_cmple_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm512_cmplt_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu16_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu16_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_mask_cmplt_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm512_cmpneq_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm512_cmp_epu16_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm512_cmp_epu16_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm512_mask_cmpneq_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm512_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_NE);
}
pub const _mm512_shufflehi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pshufhw512`");
// /usr/lib/zig/include/avx512bwintrin.h:1421:9
pub const _mm512_mask_shufflehi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_512`");
// /usr/lib/zig/include/avx512bwintrin.h:1424:9
pub const _mm512_maskz_shufflehi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_512`");
// /usr/lib/zig/include/avx512bwintrin.h:1430:9
pub const _mm512_shufflelo_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pshuflw512`");
// /usr/lib/zig/include/avx512bwintrin.h:1436:9
pub const _mm512_mask_shufflelo_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_512`");
// /usr/lib/zig/include/avx512bwintrin.h:1440:9
pub const _mm512_maskz_shufflelo_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_512`");
// /usr/lib/zig/include/avx512bwintrin.h:1447:9
pub const _mm512_bslli_epi128 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pslldqi512_byteshift`");
// /usr/lib/zig/include/avx512bwintrin.h:1520:9
pub const _mm512_bsrli_epi128 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_psrldqi512_byteshift`");
// /usr/lib/zig/include/avx512bwintrin.h:1657:9
pub const _mm512_alignr_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_palignr512`");
// /usr/lib/zig/include/avx512bwintrin.h:1976:9
pub const _mm512_mask_alignr_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectb_512`");
// /usr/lib/zig/include/avx512bwintrin.h:1980:9
pub const _mm512_maskz_alignr_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectb_512`");
// /usr/lib/zig/include/avx512bwintrin.h:1985:9
pub const _mm512_dbsad_epu8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_dbpsadbw512`");
// /usr/lib/zig/include/avx512bwintrin.h:1990:9
pub const _mm512_mask_dbsad_epu8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_512`");
// /usr/lib/zig/include/avx512bwintrin.h:1994:9
pub const _mm512_maskz_dbsad_epu8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_512`");
// /usr/lib/zig/include/avx512bwintrin.h:1999:9
pub const __AVX512BITALGINTRIN_H = "";
pub const __AVX512CDINTRIN_H = "";
pub const __AVX512VPOPCNTDQINTRIN_H = "";
pub const __AVX512VPOPCNTDQVLINTRIN_H = "";
pub const __AVX512VNNIINTRIN_H = "";
pub const __AVX512VLVNNIINTRIN_H = "";
pub const _mm256_dpbusd_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpdpbusd256`");
// /usr/lib/zig/include/avx512vlvnniintrin.h:44:9
pub const _mm256_dpbusds_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpdpbusds256`");
// /usr/lib/zig/include/avx512vlvnniintrin.h:64:9
pub const _mm256_dpwssd_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpdpwssd256`");
// /usr/lib/zig/include/avx512vlvnniintrin.h:82:9
pub const _mm256_dpwssds_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpdpwssds256`");
// /usr/lib/zig/include/avx512vlvnniintrin.h:100:9
pub const _mm_dpbusd_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpdpbusd128`");
// /usr/lib/zig/include/avx512vlvnniintrin.h:120:9
pub const _mm_dpbusds_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpdpbusds128`");
// /usr/lib/zig/include/avx512vlvnniintrin.h:140:9
pub const _mm_dpwssd_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpdpwssd128`");
// /usr/lib/zig/include/avx512vlvnniintrin.h:158:9
pub const _mm_dpwssds_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpdpwssds128`");
// /usr/lib/zig/include/avx512vlvnniintrin.h:176:9
pub const __AVXVNNIINTRIN_H = "";
pub const __AVX512DQINTRIN_H = "";
pub const _kshiftli_mask8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_kshiftliqi`");
// /usr/lib/zig/include/avx512dqintrin.h:125:9
pub const _kshiftri_mask8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_kshiftriqi`");
// /usr/lib/zig/include/avx512dqintrin.h:128:9
pub const _mm512_cvt_roundpd_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtpd2qq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:346:9
pub const _mm512_mask_cvt_roundpd_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtpd2qq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:351:9
pub const _mm512_maskz_cvt_roundpd_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtpd2qq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:356:9
pub const _mm512_cvt_roundpd_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtpd2uqq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:385:9
pub const _mm512_mask_cvt_roundpd_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtpd2uqq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:390:9
pub const _mm512_maskz_cvt_roundpd_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtpd2uqq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:395:9
pub const _mm512_cvt_roundps_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtps2qq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:424:9
pub const _mm512_mask_cvt_roundps_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtps2qq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:429:9
pub const _mm512_maskz_cvt_roundps_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtps2qq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:434:9
pub const _mm512_cvt_roundps_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtps2uqq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:463:9
pub const _mm512_mask_cvt_roundps_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtps2uqq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:468:9
pub const _mm512_maskz_cvt_roundps_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtps2uqq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:473:9
pub const _mm512_cvt_roundepi64_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtqq2pd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:498:9
pub const _mm512_mask_cvt_roundepi64_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtqq2pd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:503:9
pub const _mm512_maskz_cvt_roundepi64_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtqq2pd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:508:9
pub const _mm512_cvt_roundepi64_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtqq2ps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:537:9
pub const _mm512_mask_cvt_roundepi64_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtqq2ps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:542:9
pub const _mm512_maskz_cvt_roundepi64_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtqq2ps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:547:9
pub const _mm512_cvtt_roundpd_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttpd2qq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:577:9
pub const _mm512_mask_cvtt_roundpd_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttpd2qq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:582:9
pub const _mm512_maskz_cvtt_roundpd_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttpd2qq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:587:9
pub const _mm512_cvtt_roundpd_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttpd2uqq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:616:9
pub const _mm512_mask_cvtt_roundpd_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttpd2uqq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:621:9
pub const _mm512_maskz_cvtt_roundpd_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttpd2uqq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:626:9
pub const _mm512_cvtt_roundps_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttps2qq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:655:9
pub const _mm512_mask_cvtt_roundps_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttps2qq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:660:9
pub const _mm512_maskz_cvtt_roundps_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttps2qq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:665:9
pub const _mm512_cvtt_roundps_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttps2uqq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:694:9
pub const _mm512_mask_cvtt_roundps_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttps2uqq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:699:9
pub const _mm512_maskz_cvtt_roundps_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvttps2uqq512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:704:9
pub const _mm512_cvt_roundepu64_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtuqq2pd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:728:9
pub const _mm512_mask_cvt_roundepu64_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtuqq2pd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:733:9
pub const _mm512_maskz_cvt_roundepu64_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtuqq2pd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:739:9
pub const _mm512_cvt_roundepu64_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtuqq2ps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:769:9
pub const _mm512_mask_cvt_roundepu64_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtuqq2ps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:774:9
pub const _mm512_maskz_cvt_roundepu64_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cvtuqq2ps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:779:9
pub const _mm512_range_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangepd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:784:9
pub const _mm512_mask_range_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangepd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:791:9
pub const _mm512_maskz_range_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangepd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:797:9
pub const _mm512_range_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangepd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:804:9
pub const _mm512_mask_range_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangepd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:810:9
pub const _mm512_maskz_range_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangepd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:816:9
pub const _mm512_range_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangeps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:822:9
pub const _mm512_mask_range_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangeps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:829:9
pub const _mm512_maskz_range_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangeps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:835:9
pub const _mm512_range_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangeps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:842:9
pub const _mm512_mask_range_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangeps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:848:9
pub const _mm512_maskz_range_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangeps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:854:9
pub const _mm_range_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangess128_round_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:860:9
pub inline fn _mm_range_ss(A: anytype, B: anytype, C: anytype) @TypeOf(_mm_range_round_ss(A, B, C, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    _ = &B;
    _ = &C;
    return _mm_range_round_ss(A, B, C, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm_mask_range_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangess128_round_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:869:9
pub inline fn _mm_mask_range_ss(W: anytype, U: anytype, A: anytype, B: anytype, C: anytype) @TypeOf(_mm_mask_range_round_ss(W, U, A, B, C, _MM_FROUND_CUR_DIRECTION)) {
    _ = &W;
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &C;
    return _mm_mask_range_round_ss(W, U, A, B, C, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm_maskz_range_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangess128_round_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:878:9
pub inline fn _mm_maskz_range_ss(U: anytype, A: anytype, B: anytype, C: anytype) @TypeOf(_mm_maskz_range_round_ss(U, A, B, C, _MM_FROUND_CUR_DIRECTION)) {
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &C;
    return _mm_maskz_range_round_ss(U, A, B, C, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm_range_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangesd128_round_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:887:9
pub inline fn _mm_range_sd(A: anytype, B: anytype, C: anytype) @TypeOf(_mm_range_round_sd(A, B, C, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    _ = &B;
    _ = &C;
    return _mm_range_round_sd(A, B, C, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm_mask_range_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangesd128_round_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:896:9
pub inline fn _mm_mask_range_sd(W: anytype, U: anytype, A: anytype, B: anytype, C: anytype) @TypeOf(_mm_mask_range_round_sd(W, U, A, B, C, _MM_FROUND_CUR_DIRECTION)) {
    _ = &W;
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &C;
    return _mm_mask_range_round_sd(W, U, A, B, C, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm_maskz_range_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangesd128_round_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:905:9
pub inline fn _mm_maskz_range_sd(U: anytype, A: anytype, B: anytype, C: anytype) @TypeOf(_mm_maskz_range_round_sd(U, A, B, C, _MM_FROUND_CUR_DIRECTION)) {
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &C;
    return _mm_maskz_range_round_sd(U, A, B, C, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm512_reduce_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducepd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:914:9
pub const _mm512_mask_reduce_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducepd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:920:9
pub const _mm512_maskz_reduce_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducepd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:926:9
pub const _mm512_reduce_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:932:9
pub const _mm512_mask_reduce_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:938:9
pub const _mm512_maskz_reduce_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:944:9
pub const _mm512_reduce_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducepd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:950:9
pub const _mm512_mask_reduce_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducepd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:955:9
pub const _mm512_maskz_reduce_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducepd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:960:9
pub const _mm512_reduce_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:965:9
pub const _mm512_mask_reduce_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:970:9
pub const _mm512_maskz_reduce_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:975:9
pub const _mm_reduce_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducess_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:980:9
pub const _mm_mask_reduce_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducess_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:986:9
pub const _mm_maskz_reduce_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducess_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:992:9
pub const _mm_reduce_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducess_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:999:9
pub const _mm_mask_reduce_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducess_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1005:9
pub const _mm_maskz_reduce_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducess_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1011:9
pub const _mm_reduce_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducesd_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1017:9
pub const _mm_mask_reduce_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducesd_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1024:9
pub const _mm_maskz_reduce_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducesd_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1030:9
pub const _mm_reduce_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducesd_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1037:9
pub const _mm_mask_reduce_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducesd_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1043:9
pub const _mm_maskz_reduce_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducesd_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1049:9
pub const _mm512_extractf32x8_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf32x8_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1222:9
pub const _mm512_mask_extractf32x8_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf32x8_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1227:9
pub const _mm512_maskz_extractf32x8_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf32x8_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1232:9
pub const _mm512_extractf64x2_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf64x2_512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1237:9
pub const _mm512_mask_extractf64x2_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf64x2_512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1243:9
pub const _mm512_maskz_extractf64x2_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf64x2_512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1249:9
pub const _mm512_extracti32x8_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti32x8_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1255:9
pub const _mm512_mask_extracti32x8_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti32x8_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1260:9
pub const _mm512_maskz_extracti32x8_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti32x8_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1265:9
pub const _mm512_extracti64x2_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti64x2_512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1270:9
pub const _mm512_mask_extracti64x2_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti64x2_512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1276:9
pub const _mm512_maskz_extracti64x2_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti64x2_512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1282:9
pub const _mm512_insertf32x8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_insertf32x8`");
// /usr/lib/zig/include/avx512dqintrin.h:1288:9
pub const _mm512_mask_insertf32x8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512dqintrin.h:1292:9
pub const _mm512_maskz_insertf32x8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectps_512`");
// /usr/lib/zig/include/avx512dqintrin.h:1297:9
pub const _mm512_insertf64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_insertf64x2_512`");
// /usr/lib/zig/include/avx512dqintrin.h:1302:9
pub const _mm512_mask_insertf64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512dqintrin.h:1306:9
pub const _mm512_maskz_insertf64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_512`");
// /usr/lib/zig/include/avx512dqintrin.h:1311:9
pub const _mm512_inserti32x8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_inserti32x8`");
// /usr/lib/zig/include/avx512dqintrin.h:1316:9
pub const _mm512_mask_inserti32x8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512dqintrin.h:1320:9
pub const _mm512_maskz_inserti32x8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512dqintrin.h:1325:9
pub const _mm512_inserti64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_inserti64x2_512`");
// /usr/lib/zig/include/avx512dqintrin.h:1330:9
pub const _mm512_mask_inserti64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512dqintrin.h:1334:9
pub const _mm512_maskz_inserti64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512dqintrin.h:1339:9
pub const _mm512_mask_fpclass_ps_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclassps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1344:9
pub const _mm512_fpclass_ps_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclassps512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1348:9
pub const _mm512_mask_fpclass_pd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclasspd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1352:9
pub const _mm512_fpclass_pd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclasspd512_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1356:9
pub const _mm_fpclass_sd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclasssd_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1360:9
pub const _mm_mask_fpclass_sd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclasssd_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1364:9
pub const _mm_fpclass_ss_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclassss_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1368:9
pub const _mm_mask_fpclass_ss_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclassss_mask`");
// /usr/lib/zig/include/avx512dqintrin.h:1372:9
pub const __AVX512VLBITALGINTRIN_H = "";
pub const __AVX512VLBWINTRIN_H = "";
pub const _mm_cmp_epi8_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpb128_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:29:9
pub const _mm_mask_cmp_epi8_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpb128_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:34:9
pub const _mm_cmp_epu8_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpb128_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:39:9
pub const _mm_mask_cmp_epu8_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpb128_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:44:9
pub const _mm256_cmp_epi8_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpb256_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:49:9
pub const _mm256_mask_cmp_epi8_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpb256_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:54:9
pub const _mm256_cmp_epu8_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpb256_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:59:9
pub const _mm256_mask_cmp_epu8_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpb256_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:64:9
pub const _mm_cmp_epi16_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpw128_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:69:9
pub const _mm_mask_cmp_epi16_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpw128_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:74:9
pub const _mm_cmp_epu16_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpw128_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:79:9
pub const _mm_mask_cmp_epu16_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpw128_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:84:9
pub const _mm256_cmp_epi16_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpw256_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:89:9
pub const _mm256_mask_cmp_epi16_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpw256_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:94:9
pub const _mm256_cmp_epu16_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpw256_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:99:9
pub const _mm256_mask_cmp_epu16_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_ucmpw256_mask`");
// /usr/lib/zig/include/avx512vlbwintrin.h:104:9
pub inline fn _mm_cmpeq_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi8_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi8_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_mask_cmpeq_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_cmpge_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi8_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi8_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_mask_cmpge_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_cmpgt_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi8_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi8_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_mask_cmpgt_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_cmple_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi8_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi8_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_mask_cmple_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_cmplt_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi8_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi8_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_mask_cmplt_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_cmpneq_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi8_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi8_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm_mask_cmpneq_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_cmpeq_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi8_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi8_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_mask_cmpeq_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_cmpge_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi8_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi8_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_mask_cmpge_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_cmpgt_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi8_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi8_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_mask_cmpgt_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_cmple_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi8_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi8_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_mask_cmple_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_cmplt_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi8_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi8_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_mask_cmplt_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_cmpneq_epi8_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi8_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi8_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_mask_cmpneq_epi8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi8_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm_cmpeq_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu8_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu8_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_mask_cmpeq_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_cmpge_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu8_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu8_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_mask_cmpge_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_cmpgt_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu8_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu8_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_mask_cmpgt_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_cmple_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu8_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu8_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_mask_cmple_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_cmplt_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu8_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu8_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_mask_cmplt_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_cmpneq_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu8_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu8_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm_mask_cmpneq_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_cmpeq_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu8_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu8_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_mask_cmpeq_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_cmpge_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu8_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu8_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_mask_cmpge_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_cmpgt_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu8_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu8_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_mask_cmpgt_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_cmple_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu8_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu8_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_mask_cmple_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_cmplt_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu8_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu8_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_mask_cmplt_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_cmpneq_epu8_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu8_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu8_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_mask_cmpneq_epu8_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu8_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm_cmpeq_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi16_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi16_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_mask_cmpeq_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_cmpge_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi16_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi16_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_mask_cmpge_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_cmpgt_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi16_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi16_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_mask_cmpgt_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_cmple_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi16_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi16_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_mask_cmple_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_cmplt_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi16_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi16_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_mask_cmplt_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_cmpneq_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epi16_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epi16_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm_mask_cmpneq_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_cmpeq_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi16_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi16_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_mask_cmpeq_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_cmpge_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi16_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi16_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_mask_cmpge_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_cmpgt_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi16_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi16_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_mask_cmpgt_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_cmple_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi16_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi16_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_mask_cmple_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_cmplt_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi16_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi16_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_mask_cmplt_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_cmpneq_epi16_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epi16_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epi16_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_mask_cmpneq_epi16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epi16_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm_cmpeq_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu16_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu16_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_mask_cmpeq_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm_cmpge_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu16_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu16_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_mask_cmpge_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm_cmpgt_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu16_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu16_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_mask_cmpgt_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm_cmple_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu16_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu16_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_mask_cmple_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm_cmplt_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu16_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu16_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_mask_cmplt_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm_cmpneq_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm_cmp_epu16_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm_cmp_epu16_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm_mask_cmpneq_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_cmpeq_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu16_mask(A, B, _MM_CMPINT_EQ)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu16_mask(A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_mask_cmpeq_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_EQ)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_EQ);
}
pub inline fn _mm256_cmpge_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu16_mask(A, B, _MM_CMPINT_GE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu16_mask(A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_mask_cmpge_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_GE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_GE);
}
pub inline fn _mm256_cmpgt_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu16_mask(A, B, _MM_CMPINT_GT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu16_mask(A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_mask_cmpgt_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_GT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_GT);
}
pub inline fn _mm256_cmple_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu16_mask(A, B, _MM_CMPINT_LE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu16_mask(A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_mask_cmple_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_LE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_LE);
}
pub inline fn _mm256_cmplt_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu16_mask(A, B, _MM_CMPINT_LT)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu16_mask(A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_mask_cmplt_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_LT)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_LT);
}
pub inline fn _mm256_cmpneq_epu16_mask(A: anytype, B: anytype) @TypeOf(_mm256_cmp_epu16_mask(A, B, _MM_CMPINT_NE)) {
    _ = &A;
    _ = &B;
    return _mm256_cmp_epu16_mask(A, B, _MM_CMPINT_NE);
}
pub inline fn _mm256_mask_cmpneq_epu16_mask(k: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_NE)) {
    _ = &k;
    _ = &A;
    _ = &B;
    return _mm256_mask_cmp_epu16_mask(k, A, B, _MM_CMPINT_NE);
}
pub const _mm_mask_shufflehi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_128`");
// /usr/lib/zig/include/avx512vlbwintrin.h:1829:9
pub const _mm_maskz_shufflehi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_128`");
// /usr/lib/zig/include/avx512vlbwintrin.h:1834:9
pub const _mm256_mask_shufflehi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_256`");
// /usr/lib/zig/include/avx512vlbwintrin.h:1839:9
pub const _mm256_maskz_shufflehi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_256`");
// /usr/lib/zig/include/avx512vlbwintrin.h:1844:9
pub const _mm_mask_shufflelo_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_128`");
// /usr/lib/zig/include/avx512vlbwintrin.h:1849:9
pub const _mm_maskz_shufflelo_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_128`");
// /usr/lib/zig/include/avx512vlbwintrin.h:1854:9
pub const _mm256_mask_shufflelo_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_256`");
// /usr/lib/zig/include/avx512vlbwintrin.h:1859:9
pub const _mm256_maskz_shufflelo_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_256`");
// /usr/lib/zig/include/avx512vlbwintrin.h:1865:9
pub const _mm_mask_alignr_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectb_128`");
// /usr/lib/zig/include/avx512vlbwintrin.h:2764:9
pub const _mm_maskz_alignr_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectb_128`");
// /usr/lib/zig/include/avx512vlbwintrin.h:2769:9
pub const _mm256_mask_alignr_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectb_256`");
// /usr/lib/zig/include/avx512vlbwintrin.h:2774:9
pub const _mm256_maskz_alignr_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectb_256`");
// /usr/lib/zig/include/avx512vlbwintrin.h:2779:9
pub const _mm_dbsad_epu8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_dbpsadbw128`");
// /usr/lib/zig/include/avx512vlbwintrin.h:2784:9
pub const _mm_mask_dbsad_epu8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_128`");
// /usr/lib/zig/include/avx512vlbwintrin.h:2788:9
pub const _mm_maskz_dbsad_epu8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_128`");
// /usr/lib/zig/include/avx512vlbwintrin.h:2793:9
pub const _mm256_dbsad_epu8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_dbpsadbw256`");
// /usr/lib/zig/include/avx512vlbwintrin.h:2798:9
pub const _mm256_mask_dbsad_epu8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_256`");
// /usr/lib/zig/include/avx512vlbwintrin.h:2802:9
pub const _mm256_maskz_dbsad_epu8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_256`");
// /usr/lib/zig/include/avx512vlbwintrin.h:2807:9
pub const __AVX512VLCDINTRIN_H = "";
pub const __AVX512VLDQINTRIN_H = "";
pub const _mm_range_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangepd128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:781:9
pub const _mm_mask_range_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangepd128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:787:9
pub const _mm_maskz_range_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangepd128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:793:9
pub const _mm256_range_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangepd256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:799:9
pub const _mm256_mask_range_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangepd256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:805:9
pub const _mm256_maskz_range_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangepd256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:811:9
pub const _mm_range_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangeps128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:817:9
pub const _mm_mask_range_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangeps128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:823:9
pub const _mm_maskz_range_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangeps128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:828:9
pub const _mm256_range_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangeps256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:834:9
pub const _mm256_mask_range_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangeps256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:840:9
pub const _mm256_maskz_range_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rangeps256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:845:9
pub const _mm_reduce_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducepd128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:851:9
pub const _mm_mask_reduce_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducepd128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:856:9
pub const _mm_maskz_reduce_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducepd128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:861:9
pub const _mm256_reduce_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducepd256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:866:9
pub const _mm256_mask_reduce_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducepd256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:871:9
pub const _mm256_maskz_reduce_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducepd256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:876:9
pub const _mm_reduce_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceps128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:881:9
pub const _mm_mask_reduce_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceps128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:886:9
pub const _mm_maskz_reduce_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceps128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:891:9
pub const _mm256_reduce_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceps256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:896:9
pub const _mm256_mask_reduce_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceps256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:901:9
pub const _mm256_maskz_reduce_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceps256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:906:9
pub const _mm256_extractf64x2_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf64x2_256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:1074:9
pub const _mm256_mask_extractf64x2_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf64x2_256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:1080:9
pub const _mm256_maskz_extractf64x2_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extractf64x2_256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:1086:9
pub const _mm256_extracti64x2_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti64x2_256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:1092:9
pub const _mm256_mask_extracti64x2_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti64x2_256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:1098:9
pub const _mm256_maskz_extracti64x2_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_extracti64x2_256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:1104:9
pub const _mm256_insertf64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_insertf64x2_256`");
// /usr/lib/zig/include/avx512vldqintrin.h:1110:9
pub const _mm256_mask_insertf64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_256`");
// /usr/lib/zig/include/avx512vldqintrin.h:1114:9
pub const _mm256_maskz_insertf64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectpd_256`");
// /usr/lib/zig/include/avx512vldqintrin.h:1119:9
pub const _mm256_inserti64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_inserti64x2_256`");
// /usr/lib/zig/include/avx512vldqintrin.h:1124:9
pub const _mm256_mask_inserti64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vldqintrin.h:1128:9
pub const _mm256_maskz_inserti64x2 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vldqintrin.h:1133:9
pub const _mm_mask_fpclass_pd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclasspd128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:1138:9
pub const _mm_fpclass_pd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclasspd128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:1142:9
pub const _mm256_mask_fpclass_pd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclasspd256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:1146:9
pub const _mm256_fpclass_pd_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclasspd256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:1150:9
pub const _mm_mask_fpclass_ps_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclassps128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:1154:9
pub const _mm_fpclass_ps_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclassps128_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:1158:9
pub const _mm256_mask_fpclass_ps_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclassps256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:1162:9
pub const _mm256_fpclass_ps_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclassps256_mask`");
// /usr/lib/zig/include/avx512vldqintrin.h:1166:9
pub const __AVX512ERINTRIN_H = "";
pub const _mm512_exp2a23_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_exp2pd_mask`");
// /usr/lib/zig/include/avx512erintrin.h:17:9
pub const _mm512_mask_exp2a23_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_exp2pd_mask`");
// /usr/lib/zig/include/avx512erintrin.h:22:9
pub const _mm512_maskz_exp2a23_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_exp2pd_mask`");
// /usr/lib/zig/include/avx512erintrin.h:27:9
pub inline fn _mm512_exp2a23_pd(A: anytype) @TypeOf(_mm512_exp2a23_round_pd(A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    return _mm512_exp2a23_round_pd(A, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_mask_exp2a23_pd(S: anytype, M: anytype, A: anytype) @TypeOf(_mm512_mask_exp2a23_round_pd(S, M, A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &S;
    _ = &M;
    _ = &A;
    return _mm512_mask_exp2a23_round_pd(S, M, A, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_maskz_exp2a23_pd(M: anytype, A: anytype) @TypeOf(_mm512_maskz_exp2a23_round_pd(M, A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &M;
    _ = &A;
    return _mm512_maskz_exp2a23_round_pd(M, A, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm512_exp2a23_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_exp2ps_mask`");
// /usr/lib/zig/include/avx512erintrin.h:41:9
pub const _mm512_mask_exp2a23_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_exp2ps_mask`");
// /usr/lib/zig/include/avx512erintrin.h:46:9
pub const _mm512_maskz_exp2a23_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_exp2ps_mask`");
// /usr/lib/zig/include/avx512erintrin.h:51:9
pub inline fn _mm512_exp2a23_ps(A: anytype) @TypeOf(_mm512_exp2a23_round_ps(A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    return _mm512_exp2a23_round_ps(A, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_mask_exp2a23_ps(S: anytype, M: anytype, A: anytype) @TypeOf(_mm512_mask_exp2a23_round_ps(S, M, A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &S;
    _ = &M;
    _ = &A;
    return _mm512_mask_exp2a23_round_ps(S, M, A, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_maskz_exp2a23_ps(M: anytype, A: anytype) @TypeOf(_mm512_maskz_exp2a23_round_ps(M, A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &M;
    _ = &A;
    return _mm512_maskz_exp2a23_round_ps(M, A, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm512_rsqrt28_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rsqrt28pd_mask`");
// /usr/lib/zig/include/avx512erintrin.h:66:9
pub const _mm512_mask_rsqrt28_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rsqrt28pd_mask`");
// /usr/lib/zig/include/avx512erintrin.h:71:9
pub const _mm512_maskz_rsqrt28_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rsqrt28pd_mask`");
// /usr/lib/zig/include/avx512erintrin.h:76:9
pub inline fn _mm512_rsqrt28_pd(A: anytype) @TypeOf(_mm512_rsqrt28_round_pd(A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    return _mm512_rsqrt28_round_pd(A, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_mask_rsqrt28_pd(S: anytype, M: anytype, A: anytype) @TypeOf(_mm512_mask_rsqrt28_round_pd(S, M, A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &S;
    _ = &M;
    _ = &A;
    return _mm512_mask_rsqrt28_round_pd(S, M, A, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_maskz_rsqrt28_pd(M: anytype, A: anytype) @TypeOf(_mm512_maskz_rsqrt28_round_pd(M, A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &M;
    _ = &A;
    return _mm512_maskz_rsqrt28_round_pd(M, A, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm512_rsqrt28_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rsqrt28ps_mask`");
// /usr/lib/zig/include/avx512erintrin.h:90:9
pub const _mm512_mask_rsqrt28_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rsqrt28ps_mask`");
// /usr/lib/zig/include/avx512erintrin.h:95:9
pub const _mm512_maskz_rsqrt28_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rsqrt28ps_mask`");
// /usr/lib/zig/include/avx512erintrin.h:100:9
pub inline fn _mm512_rsqrt28_ps(A: anytype) @TypeOf(_mm512_rsqrt28_round_ps(A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    return _mm512_rsqrt28_round_ps(A, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_mask_rsqrt28_ps(S: anytype, M: anytype, A: anytype) @TypeOf(_mm512_mask_rsqrt28_round_ps(S, M, A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &S;
    _ = &M;
    _ = &A;
    return _mm512_mask_rsqrt28_round_ps(S, M, A, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_maskz_rsqrt28_ps(M: anytype, A: anytype) @TypeOf(_mm512_maskz_rsqrt28_round_ps(M, A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &M;
    _ = &A;
    return _mm512_maskz_rsqrt28_round_ps(M, A, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm_rsqrt28_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rsqrt28ss_round_mask`");
// /usr/lib/zig/include/avx512erintrin.h:114:9
pub const _mm_mask_rsqrt28_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rsqrt28ss_round_mask`");
// /usr/lib/zig/include/avx512erintrin.h:120:9
pub const _mm_maskz_rsqrt28_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rsqrt28ss_round_mask`");
// /usr/lib/zig/include/avx512erintrin.h:126:9
pub inline fn _mm_rsqrt28_ss(A: anytype, B: anytype) @TypeOf(_mm_rsqrt28_round_ss(A, B, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    _ = &B;
    return _mm_rsqrt28_round_ss(A, B, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm_mask_rsqrt28_ss(S: anytype, M: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_rsqrt28_round_ss(S, M, A, B, _MM_FROUND_CUR_DIRECTION)) {
    _ = &S;
    _ = &M;
    _ = &A;
    _ = &B;
    return _mm_mask_rsqrt28_round_ss(S, M, A, B, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm_maskz_rsqrt28_ss(M: anytype, A: anytype, B: anytype) @TypeOf(_mm_maskz_rsqrt28_round_ss(M, A, B, _MM_FROUND_CUR_DIRECTION)) {
    _ = &M;
    _ = &A;
    _ = &B;
    return _mm_maskz_rsqrt28_round_ss(M, A, B, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm_rsqrt28_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rsqrt28sd_round_mask`");
// /usr/lib/zig/include/avx512erintrin.h:141:9
pub const _mm_mask_rsqrt28_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rsqrt28sd_round_mask`");
// /usr/lib/zig/include/avx512erintrin.h:147:9
pub const _mm_maskz_rsqrt28_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rsqrt28sd_round_mask`");
// /usr/lib/zig/include/avx512erintrin.h:153:9
pub inline fn _mm_rsqrt28_sd(A: anytype, B: anytype) @TypeOf(_mm_rsqrt28_round_sd(A, B, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    _ = &B;
    return _mm_rsqrt28_round_sd(A, B, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm_mask_rsqrt28_sd(S: anytype, M: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_rsqrt28_round_sd(S, M, A, B, _MM_FROUND_CUR_DIRECTION)) {
    _ = &S;
    _ = &M;
    _ = &A;
    _ = &B;
    return _mm_mask_rsqrt28_round_sd(S, M, A, B, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm_maskz_rsqrt28_sd(M: anytype, A: anytype, B: anytype) @TypeOf(_mm_maskz_rsqrt28_round_sd(M, A, B, _MM_FROUND_CUR_DIRECTION)) {
    _ = &M;
    _ = &A;
    _ = &B;
    return _mm_maskz_rsqrt28_round_sd(M, A, B, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm512_rcp28_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rcp28pd_mask`");
// /usr/lib/zig/include/avx512erintrin.h:169:9
pub const _mm512_mask_rcp28_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rcp28pd_mask`");
// /usr/lib/zig/include/avx512erintrin.h:174:9
pub const _mm512_maskz_rcp28_round_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rcp28pd_mask`");
// /usr/lib/zig/include/avx512erintrin.h:179:9
pub inline fn _mm512_rcp28_pd(A: anytype) @TypeOf(_mm512_rcp28_round_pd(A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    return _mm512_rcp28_round_pd(A, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_mask_rcp28_pd(S: anytype, M: anytype, A: anytype) @TypeOf(_mm512_mask_rcp28_round_pd(S, M, A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &S;
    _ = &M;
    _ = &A;
    return _mm512_mask_rcp28_round_pd(S, M, A, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_maskz_rcp28_pd(M: anytype, A: anytype) @TypeOf(_mm512_maskz_rcp28_round_pd(M, A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &M;
    _ = &A;
    return _mm512_maskz_rcp28_round_pd(M, A, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm512_rcp28_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rcp28ps_mask`");
// /usr/lib/zig/include/avx512erintrin.h:193:9
pub const _mm512_mask_rcp28_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rcp28ps_mask`");
// /usr/lib/zig/include/avx512erintrin.h:198:9
pub const _mm512_maskz_rcp28_round_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rcp28ps_mask`");
// /usr/lib/zig/include/avx512erintrin.h:203:9
pub inline fn _mm512_rcp28_ps(A: anytype) @TypeOf(_mm512_rcp28_round_ps(A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    return _mm512_rcp28_round_ps(A, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_mask_rcp28_ps(S: anytype, M: anytype, A: anytype) @TypeOf(_mm512_mask_rcp28_round_ps(S, M, A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &S;
    _ = &M;
    _ = &A;
    return _mm512_mask_rcp28_round_ps(S, M, A, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_maskz_rcp28_ps(M: anytype, A: anytype) @TypeOf(_mm512_maskz_rcp28_round_ps(M, A, _MM_FROUND_CUR_DIRECTION)) {
    _ = &M;
    _ = &A;
    return _mm512_maskz_rcp28_round_ps(M, A, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm_rcp28_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rcp28ss_round_mask`");
// /usr/lib/zig/include/avx512erintrin.h:217:9
pub const _mm_mask_rcp28_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rcp28ss_round_mask`");
// /usr/lib/zig/include/avx512erintrin.h:223:9
pub const _mm_maskz_rcp28_round_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rcp28ss_round_mask`");
// /usr/lib/zig/include/avx512erintrin.h:229:9
pub inline fn _mm_rcp28_ss(A: anytype, B: anytype) @TypeOf(_mm_rcp28_round_ss(A, B, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    _ = &B;
    return _mm_rcp28_round_ss(A, B, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm_mask_rcp28_ss(S: anytype, M: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_rcp28_round_ss(S, M, A, B, _MM_FROUND_CUR_DIRECTION)) {
    _ = &S;
    _ = &M;
    _ = &A;
    _ = &B;
    return _mm_mask_rcp28_round_ss(S, M, A, B, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm_maskz_rcp28_ss(M: anytype, A: anytype, B: anytype) @TypeOf(_mm_maskz_rcp28_round_ss(M, A, B, _MM_FROUND_CUR_DIRECTION)) {
    _ = &M;
    _ = &A;
    _ = &B;
    return _mm_maskz_rcp28_round_ss(M, A, B, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm_rcp28_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rcp28sd_round_mask`");
// /usr/lib/zig/include/avx512erintrin.h:244:9
pub const _mm_mask_rcp28_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rcp28sd_round_mask`");
// /usr/lib/zig/include/avx512erintrin.h:250:9
pub const _mm_maskz_rcp28_round_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rcp28sd_round_mask`");
// /usr/lib/zig/include/avx512erintrin.h:256:9
pub inline fn _mm_rcp28_sd(A: anytype, B: anytype) @TypeOf(_mm_rcp28_round_sd(A, B, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    _ = &B;
    return _mm_rcp28_round_sd(A, B, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm_mask_rcp28_sd(S: anytype, M: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_rcp28_round_sd(S, M, A, B, _MM_FROUND_CUR_DIRECTION)) {
    _ = &S;
    _ = &M;
    _ = &A;
    _ = &B;
    return _mm_mask_rcp28_round_sd(S, M, A, B, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm_maskz_rcp28_sd(M: anytype, A: anytype, B: anytype) @TypeOf(_mm_maskz_rcp28_round_sd(M, A, B, _MM_FROUND_CUR_DIRECTION)) {
    _ = &M;
    _ = &A;
    _ = &B;
    return _mm_maskz_rcp28_round_sd(M, A, B, _MM_FROUND_CUR_DIRECTION);
}
pub const __IFMAINTRIN_H = "";
pub const __IFMAVLINTRIN_H = "";
pub const _mm_madd52hi_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpmadd52huq128`");
// /usr/lib/zig/include/avx512ifmavlintrin.h:27:9
pub const _mm256_madd52hi_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpmadd52huq256`");
// /usr/lib/zig/include/avx512ifmavlintrin.h:31:9
pub const _mm_madd52lo_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpmadd52luq128`");
// /usr/lib/zig/include/avx512ifmavlintrin.h:35:9
pub const _mm256_madd52lo_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpmadd52luq256`");
// /usr/lib/zig/include/avx512ifmavlintrin.h:39:9
pub const __AVXIFMAINTRIN_H = "";
pub const __VBMIINTRIN_H = "";
pub const __VBMIVLINTRIN_H = "";
pub const __AVX512VBMI2INTRIN_H = "";
pub const _mm512_shldi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshldq512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:131:9
pub const _mm512_mask_shldi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:135:9
pub const _mm512_maskz_shldi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:140:9
pub const _mm512_shldi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshldd512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:145:9
pub const _mm512_mask_shldi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:149:9
pub const _mm512_maskz_shldi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:154:9
pub const _mm512_shldi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshldw512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:159:9
pub const _mm512_mask_shldi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:163:9
pub const _mm512_maskz_shldi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:168:9
pub const _mm512_shrdi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshrdq512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:173:9
pub const _mm512_mask_shrdi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:177:9
pub const _mm512_maskz_shrdi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:182:9
pub const _mm512_shrdi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshrdd512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:187:9
pub const _mm512_mask_shrdi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:191:9
pub const _mm512_maskz_shrdi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:196:9
pub const _mm512_shrdi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshrdw512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:201:9
pub const _mm512_mask_shrdi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:205:9
pub const _mm512_maskz_shrdi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_512`");
// /usr/lib/zig/include/avx512vbmi2intrin.h:210:9
pub const __AVX512VLVBMI2INTRIN_H = "";
pub const _mm256_shldi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshldq256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:247:9
pub const _mm256_mask_shldi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:251:9
pub const _mm256_maskz_shldi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:256:9
pub const _mm_shldi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshldq128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:261:9
pub const _mm_mask_shldi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:265:9
pub const _mm_maskz_shldi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:270:9
pub const _mm256_shldi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshldd256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:275:9
pub const _mm256_mask_shldi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:279:9
pub const _mm256_maskz_shldi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:284:9
pub const _mm_shldi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshldd128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:289:9
pub const _mm_mask_shldi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:293:9
pub const _mm_maskz_shldi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:298:9
pub const _mm256_shldi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshldw256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:303:9
pub const _mm256_mask_shldi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:307:9
pub const _mm256_maskz_shldi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:312:9
pub const _mm_shldi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshldw128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:317:9
pub const _mm_mask_shldi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:321:9
pub const _mm_maskz_shldi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:326:9
pub const _mm256_shrdi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshrdq256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:331:9
pub const _mm256_mask_shrdi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:335:9
pub const _mm256_maskz_shrdi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:340:9
pub const _mm_shrdi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshrdq128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:345:9
pub const _mm_mask_shrdi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:349:9
pub const _mm_maskz_shrdi_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectq_128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:354:9
pub const _mm256_shrdi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshrdd256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:359:9
pub const _mm256_mask_shrdi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:363:9
pub const _mm256_maskz_shrdi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:368:9
pub const _mm_shrdi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshrdd128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:373:9
pub const _mm_mask_shrdi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:377:9
pub const _mm_maskz_shrdi_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectd_128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:382:9
pub const _mm256_shrdi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshrdw256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:387:9
pub const _mm256_mask_shrdi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:391:9
pub const _mm256_maskz_shrdi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_256`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:396:9
pub const _mm_shrdi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vpshrdw128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:401:9
pub const _mm_mask_shrdi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:405:9
pub const _mm_maskz_shrdi_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectw_128`");
// /usr/lib/zig/include/avx512vlvbmi2intrin.h:410:9
pub const __AVX512PFINTRIN_H = "";
pub const _mm512_mask_prefetch_i32gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherpfdpd`");
// /usr/lib/zig/include/avx512pfintrin.h:17:9
pub const _mm512_prefetch_i32gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherpfdpd`");
// /usr/lib/zig/include/avx512pfintrin.h:22:9
pub const _mm512_mask_prefetch_i32gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherpfdps`");
// /usr/lib/zig/include/avx512pfintrin.h:27:9
pub const _mm512_prefetch_i32gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherpfdps`");
// /usr/lib/zig/include/avx512pfintrin.h:32:9
pub const _mm512_mask_prefetch_i64gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherpfqpd`");
// /usr/lib/zig/include/avx512pfintrin.h:37:9
pub const _mm512_prefetch_i64gather_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherpfqpd`");
// /usr/lib/zig/include/avx512pfintrin.h:42:9
pub const _mm512_mask_prefetch_i64gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherpfqps`");
// /usr/lib/zig/include/avx512pfintrin.h:47:9
pub const _mm512_prefetch_i64gather_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_gatherpfqps`");
// /usr/lib/zig/include/avx512pfintrin.h:51:9
pub const _mm512_prefetch_i32scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterpfdpd`");
// /usr/lib/zig/include/avx512pfintrin.h:55:9
pub const _mm512_mask_prefetch_i32scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterpfdpd`");
// /usr/lib/zig/include/avx512pfintrin.h:60:9
pub const _mm512_prefetch_i32scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterpfdps`");
// /usr/lib/zig/include/avx512pfintrin.h:65:9
pub const _mm512_mask_prefetch_i32scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterpfdps`");
// /usr/lib/zig/include/avx512pfintrin.h:69:9
pub const _mm512_prefetch_i64scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterpfqpd`");
// /usr/lib/zig/include/avx512pfintrin.h:74:9
pub const _mm512_mask_prefetch_i64scatter_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterpfqpd`");
// /usr/lib/zig/include/avx512pfintrin.h:79:9
pub const _mm512_prefetch_i64scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterpfqps`");
// /usr/lib/zig/include/avx512pfintrin.h:84:9
pub const _mm512_mask_prefetch_i64scatter_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scatterpfqps`");
// /usr/lib/zig/include/avx512pfintrin.h:88:9
pub const __AVX512FP16INTRIN_H = "";
pub inline fn _mm512_setr_ph(h1: anytype, h2: anytype, h3: anytype, h4: anytype, h5: anytype, h6: anytype, h7: anytype, h8: anytype, h9: anytype, h10: anytype, h11: anytype, h12: anytype, h13: anytype, h14: anytype, h15: anytype, h16: anytype, h17: anytype, h18: anytype, h19: anytype, h20: anytype, h21: anytype, h22: anytype, h23: anytype, h24: anytype, h25: anytype, h26: anytype, h27: anytype, h28: anytype, h29: anytype, h30: anytype, h31: anytype, h32: anytype) @TypeOf(_mm512_set_ph(h32, h31, h30, h29, h28, h27, h26, h25, h24, h23, h22, h21, h20, h19, h18, h17, h16, h15, h14, h13, h12, h11, h10, h9, h8, h7, h6, h5, h4, h3, h2, h1)) {
    _ = &h1;
    _ = &h2;
    _ = &h3;
    _ = &h4;
    _ = &h5;
    _ = &h6;
    _ = &h7;
    _ = &h8;
    _ = &h9;
    _ = &h10;
    _ = &h11;
    _ = &h12;
    _ = &h13;
    _ = &h14;
    _ = &h15;
    _ = &h16;
    _ = &h17;
    _ = &h18;
    _ = &h19;
    _ = &h20;
    _ = &h21;
    _ = &h22;
    _ = &h23;
    _ = &h24;
    _ = &h25;
    _ = &h26;
    _ = &h27;
    _ = &h28;
    _ = &h29;
    _ = &h30;
    _ = &h31;
    _ = &h32;
    return _mm512_set_ph(h32, h31, h30, h29, h28, h27, h26, h25, h24, h23, h22, h21, h20, h19, h18, h17, h16, h15, h14, h13, h12, h11, h10, h9, h8, h7, h6, h5, h4, h3, h2, h1);
}
pub const _mm_comi_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcomish`");
// /usr/lib/zig/include/avx512fp16intrin.h:279:9
pub inline fn _mm_comi_sh(A: anytype, B: anytype, pred: anytype) @TypeOf(_mm_comi_round_sh(A, B, pred, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    _ = &B;
    _ = &pred;
    return _mm_comi_round_sh(A, B, pred, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm512_add_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_addph512`");
// /usr/lib/zig/include/avx512fp16intrin.h:375:9
pub const _mm512_mask_add_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectph_512`");
// /usr/lib/zig/include/avx512fp16intrin.h:379:9
pub const _mm512_maskz_add_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectph_512`");
// /usr/lib/zig/include/avx512fp16intrin.h:384:9
pub const _mm512_sub_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_subph512`");
// /usr/lib/zig/include/avx512fp16intrin.h:407:9
pub const _mm512_mask_sub_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectph_512`");
// /usr/lib/zig/include/avx512fp16intrin.h:411:9
pub const _mm512_maskz_sub_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectph_512`");
// /usr/lib/zig/include/avx512fp16intrin.h:416:9
pub const _mm512_mul_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_mulph512`");
// /usr/lib/zig/include/avx512fp16intrin.h:439:9
pub const _mm512_mask_mul_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectph_512`");
// /usr/lib/zig/include/avx512fp16intrin.h:443:9
pub const _mm512_maskz_mul_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectph_512`");
// /usr/lib/zig/include/avx512fp16intrin.h:448:9
pub const _mm512_div_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_divph512`");
// /usr/lib/zig/include/avx512fp16intrin.h:471:9
pub const _mm512_mask_div_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectph_512`");
// /usr/lib/zig/include/avx512fp16intrin.h:475:9
pub const _mm512_maskz_div_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectph_512`");
// /usr/lib/zig/include/avx512fp16intrin.h:480:9
pub const _mm512_min_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_minph512`");
// /usr/lib/zig/include/avx512fp16intrin.h:504:9
pub const _mm512_mask_min_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectph_512`");
// /usr/lib/zig/include/avx512fp16intrin.h:508:9
pub const _mm512_maskz_min_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectph_512`");
// /usr/lib/zig/include/avx512fp16intrin.h:513:9
pub const _mm512_max_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_maxph512`");
// /usr/lib/zig/include/avx512fp16intrin.h:537:9
pub const _mm512_mask_max_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectph_512`");
// /usr/lib/zig/include/avx512fp16intrin.h:541:9
pub const _mm512_maskz_max_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectph_512`");
// /usr/lib/zig/include/avx512fp16intrin.h:546:9
pub const _mm_add_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_addsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:593:9
pub const _mm_mask_add_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_addsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:598:9
pub const _mm_maskz_add_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_addsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:603:9
pub const _mm_sub_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_subsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:629:9
pub const _mm_mask_sub_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_subsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:634:9
pub const _mm_maskz_sub_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_subsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:639:9
pub const _mm_mul_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_mulsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:665:9
pub const _mm_mask_mul_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_mulsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:670:9
pub const _mm_maskz_mul_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_mulsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:675:9
pub const _mm_div_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_divsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:701:9
pub const _mm_mask_div_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_divsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:706:9
pub const _mm_maskz_div_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_divsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:711:9
pub const _mm_min_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_minsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:740:9
pub const _mm_mask_min_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_minsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:745:9
pub const _mm_maskz_min_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_minsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:750:9
pub const _mm_max_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_maxsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:779:9
pub const _mm_mask_max_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_maxsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:784:9
pub const _mm_maskz_max_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_maxsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:789:9
pub const _mm512_cmp_round_ph_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:794:9
pub const _mm512_mask_cmp_round_ph_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:799:9
pub inline fn _mm512_cmp_ph_mask(A: anytype, B: anytype, P: anytype) @TypeOf(_mm512_cmp_round_ph_mask(A, B, P, _MM_FROUND_CUR_DIRECTION)) {
    _ = &A;
    _ = &B;
    _ = &P;
    return _mm512_cmp_round_ph_mask(A, B, P, _MM_FROUND_CUR_DIRECTION);
}
pub inline fn _mm512_mask_cmp_ph_mask(U: anytype, A: anytype, B: anytype, P: anytype) @TypeOf(_mm512_mask_cmp_round_ph_mask(U, A, B, P, _MM_FROUND_CUR_DIRECTION)) {
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &P;
    return _mm512_mask_cmp_round_ph_mask(U, A, B, P, _MM_FROUND_CUR_DIRECTION);
}
pub const _mm_cmp_round_sh_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpsh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:810:9
pub const _mm_mask_cmp_round_sh_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpsh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:815:9
pub const _mm_cmp_sh_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpsh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:820:9
pub const _mm_mask_cmp_sh_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpsh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:825:9
pub const _mm512_getmant_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1008:9
pub const _mm512_mask_getmant_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1014:9
pub const _mm512_maskz_getmant_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1019:9
pub const _mm512_getmant_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1024:9
pub const _mm512_mask_getmant_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1029:9
pub const _mm512_maskz_getmant_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1034:9
pub const _mm512_getexp_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexpph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1058:9
pub const _mm512_mask_getexp_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexpph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1063:9
pub const _mm512_maskz_getexp_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexpph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1067:9
pub const _mm512_scalef_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1093:9
pub const _mm512_mask_scalef_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1098:9
pub const _mm512_maskz_scalef_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1103:9
pub const _mm512_roundscale_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleph_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1108:9
pub const _mm512_mask_roundscale_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleph_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1113:9
pub const _mm512_maskz_roundscale_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleph_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1118:9
pub const _mm512_mask_roundscale_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleph_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1123:9
pub const _mm512_maskz_roundscale_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleph_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1128:9
pub const _mm512_roundscale_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleph_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1133:9
pub const _mm512_reduce_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1138:9
pub const _mm512_mask_reduce_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1143:9
pub const _mm512_maskz_reduce_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1148:9
pub const _mm512_mask_reduce_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1153:9
pub const _mm512_maskz_reduce_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1158:9
pub const _mm512_reduce_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1163:9
pub const _mm_getmant_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1209:9
pub const _mm_getmant_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1214:9
pub const _mm_mask_getmant_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1219:9
pub const _mm_mask_getmant_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1224:9
pub const _mm_maskz_getmant_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1229:9
pub const _mm_maskz_getmant_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1234:9
pub const _mm_getexp_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexpsh128_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1239:9
pub const _mm_mask_getexp_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexpsh128_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1258:9
pub const _mm_maskz_getexp_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getexpsh128_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1270:9
pub const _mm_scalef_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1275:9
pub const _mm_mask_scalef_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1294:9
pub const _mm_maskz_scalef_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_scalefsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1306:9
pub const _mm_roundscale_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalesh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1311:9
pub const _mm_roundscale_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalesh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1316:9
pub const _mm_mask_roundscale_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalesh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1321:9
pub const _mm_mask_roundscale_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalesh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1326:9
pub const _mm_maskz_roundscale_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalesh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1331:9
pub const _mm_maskz_roundscale_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscalesh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1336:9
pub const _mm_reduce_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducesh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1341:9
pub const _mm_mask_reduce_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducesh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1346:9
pub const _mm_maskz_reduce_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducesh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1351:9
pub const _mm_reduce_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducesh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1356:9
pub const _mm_mask_reduce_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducesh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1361:9
pub const _mm_maskz_reduce_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reducesh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1366:9
pub const _mm512_sqrt_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_sqrtph512`");
// /usr/lib/zig/include/avx512fp16intrin.h:1371:9
pub const _mm512_mask_sqrt_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectph_512`");
// /usr/lib/zig/include/avx512fp16intrin.h:1374:9
pub const _mm512_maskz_sqrt_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectph_512`");
// /usr/lib/zig/include/avx512fp16intrin.h:1379:9
pub const _mm_sqrt_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_sqrtsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1405:9
pub const _mm_mask_sqrt_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_sqrtsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1410:9
pub const _mm_maskz_sqrt_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_sqrtsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1415:9
pub const _mm512_mask_fpclass_ph_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclassph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1444:9
pub const _mm512_fpclass_ph_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclassph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1448:9
pub const _mm_fpclass_sh_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclasssh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1452:9
pub const _mm_mask_fpclass_sh_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclasssh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1456:9
pub const _mm512_cvt_roundpd_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtpd2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1460:9
pub const _mm512_mask_cvt_roundpd_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtpd2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1464:9
pub const _mm512_maskz_cvt_roundpd_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtpd2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1468:9
pub const _mm512_cvt_roundph_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2pd512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1491:9
pub const _mm512_mask_cvt_roundph_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2pd512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1495:9
pub const _mm512_maskz_cvt_roundph_pd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2pd512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1499:9
pub const _mm_cvt_roundsh_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsh2ss_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1522:9
pub const _mm_mask_cvt_roundsh_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsh2ss_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1527:9
pub const _mm_maskz_cvt_roundsh_ss = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsh2ss_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1531:9
pub const _mm_cvt_roundss_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtss2sh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1560:9
pub const _mm_mask_cvt_roundss_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtss2sh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1565:9
pub const _mm_maskz_cvt_roundss_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtss2sh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1569:9
pub const _mm_cvt_roundsd_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsd2sh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1598:9
pub const _mm_mask_cvt_roundsd_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsd2sh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1603:9
pub const _mm_maskz_cvt_roundsd_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsd2sh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1607:9
pub const _mm_cvt_roundsh_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsh2sd_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1635:9
pub const _mm_mask_cvt_roundsh_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsh2sd_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1640:9
pub const _mm_maskz_cvt_roundsh_sd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsh2sd_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1644:9
pub const _mm512_cvt_roundph_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2w512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1672:9
pub const _mm512_mask_cvt_roundph_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2w512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1677:9
pub const _mm512_maskz_cvt_roundph_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2w512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1681:9
pub const _mm512_cvtt_roundph_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2w512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1706:9
pub const _mm512_mask_cvtt_roundph_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2w512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1711:9
pub const _mm512_maskz_cvtt_roundph_epi16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2w512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1715:9
pub const _mm512_cvt_roundepi16_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtw2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1740:9
pub const _mm512_mask_cvt_roundepi16_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtw2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1745:9
pub const _mm512_maskz_cvt_roundepi16_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtw2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1749:9
pub const _mm512_cvt_roundph_epu16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2uw512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1773:9
pub const _mm512_mask_cvt_roundph_epu16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2uw512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1778:9
pub const _mm512_maskz_cvt_roundph_epu16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2uw512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1782:9
pub const _mm512_cvtt_roundph_epu16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2uw512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1807:9
pub const _mm512_mask_cvtt_roundph_epu16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2uw512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1812:9
pub const _mm512_maskz_cvtt_roundph_epu16 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2uw512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1816:9
pub const _mm512_cvt_roundepu16_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtuw2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1841:9
pub const _mm512_mask_cvt_roundepu16_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtuw2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1846:9
pub const _mm512_maskz_cvt_roundepu16_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtuw2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1850:9
pub const _mm512_cvt_roundph_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2dq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1874:9
pub const _mm512_mask_cvt_roundph_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2dq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1879:9
pub const _mm512_maskz_cvt_roundph_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2dq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1883:9
pub const _mm512_cvt_roundph_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2udq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1908:9
pub const _mm512_mask_cvt_roundph_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2udq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1913:9
pub const _mm512_maskz_cvt_roundph_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2udq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1917:9
pub const _mm512_cvt_roundepi32_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtdq2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1942:9
pub const _mm512_mask_cvt_roundepi32_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtdq2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1947:9
pub const _mm512_maskz_cvt_roundepi32_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtdq2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1951:9
pub const _mm512_cvt_roundepu32_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtudq2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1975:9
pub const _mm512_mask_cvt_roundepu32_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtudq2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1980:9
pub const _mm512_maskz_cvt_roundepu32_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtudq2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:1984:9
pub const _mm512_cvtt_roundph_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2dq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2008:9
pub const _mm512_mask_cvtt_roundph_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2dq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2013:9
pub const _mm512_maskz_cvtt_roundph_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2dq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2017:9
pub const _mm512_cvtt_roundph_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2udq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2042:9
pub const _mm512_mask_cvtt_roundph_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2udq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2047:9
pub const _mm512_maskz_cvtt_roundph_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2udq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2051:9
pub const _mm512_cvt_roundepi64_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtqq2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2076:9
pub const _mm512_mask_cvt_roundepi64_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtqq2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2080:9
pub const _mm512_maskz_cvt_roundepi64_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtqq2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2084:9
pub const _mm512_cvt_roundph_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2qq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2108:9
pub const _mm512_mask_cvt_roundph_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2qq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2113:9
pub const _mm512_maskz_cvt_roundph_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2qq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2117:9
pub const _mm512_cvt_roundepu64_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtuqq2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2141:9
pub const _mm512_mask_cvt_roundepu64_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtuqq2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2145:9
pub const _mm512_maskz_cvt_roundepu64_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtuqq2ph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2149:9
pub const _mm512_cvt_roundph_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2uqq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2173:9
pub const _mm512_mask_cvt_roundph_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2uqq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2178:9
pub const _mm512_maskz_cvt_roundph_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2uqq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2182:9
pub const _mm512_cvtt_roundph_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2qq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2206:9
pub const _mm512_mask_cvtt_roundph_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2qq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2211:9
pub const _mm512_maskz_cvtt_roundph_epi64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2qq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2215:9
pub const _mm512_cvtt_roundph_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2uqq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2239:9
pub const _mm512_mask_cvtt_roundph_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2uqq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2244:9
pub const _mm512_maskz_cvtt_roundph_epu64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttph2uqq512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2248:9
pub const _mm_cvt_roundsh_i32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsh2si32`");
// /usr/lib/zig/include/avx512fp16intrin.h:2272:9
pub const _mm_cvt_roundsh_u32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsh2usi32`");
// /usr/lib/zig/include/avx512fp16intrin.h:2279:9
pub const _mm_cvt_roundsh_i64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsh2si64`");
// /usr/lib/zig/include/avx512fp16intrin.h:2289:9
pub const _mm_cvt_roundsh_u64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsh2usi64`");
// /usr/lib/zig/include/avx512fp16intrin.h:2297:9
pub const _mm_cvt_roundu32_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtusi2sh`");
// /usr/lib/zig/include/avx512fp16intrin.h:2307:9
pub const _mm_cvt_roundu64_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtusi642sh`");
// /usr/lib/zig/include/avx512fp16intrin.h:2317:9
pub const _mm_cvt_roundi32_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsi2sh`");
// /usr/lib/zig/include/avx512fp16intrin.h:2328:9
pub const _mm_cvt_roundi64_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtsi642sh`");
// /usr/lib/zig/include/avx512fp16intrin.h:2338:9
pub const _mm_cvtt_roundsh_i32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttsh2si32`");
// /usr/lib/zig/include/avx512fp16intrin.h:2348:9
pub const _mm_cvtt_roundsh_i64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttsh2si64`");
// /usr/lib/zig/include/avx512fp16intrin.h:2357:9
pub const _mm_cvtt_roundsh_u32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttsh2usi32`");
// /usr/lib/zig/include/avx512fp16intrin.h:2366:9
pub const _mm_cvtt_roundsh_u64 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvttsh2usi64`");
// /usr/lib/zig/include/avx512fp16intrin.h:2376:9
pub const _mm512_cvtx_roundph_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2psx512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2386:9
pub const _mm512_mask_cvtx_roundph_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2psx512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2391:9
pub const _mm512_maskz_cvtx_roundph_ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtph2psx512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2395:9
pub const _mm512_cvtx_roundps_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtps2phx512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2418:9
pub const _mm512_mask_cvtx_roundps_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtps2phx512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2423:9
pub const _mm512_maskz_cvtx_roundps_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtps2phx512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2427:9
pub const _mm512_fmadd_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2450:9
pub const _mm512_mask_fmadd_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2455:9
pub const _mm512_mask3_fmadd_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddph512_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:2460:9
pub const _mm512_maskz_fmadd_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddph512_maskz`");
// /usr/lib/zig/include/avx512fp16intrin.h:2465:9
pub const _mm512_fmsub_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2470:9
pub const _mm512_mask_fmsub_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2475:9
pub const _mm512_maskz_fmsub_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddph512_maskz`");
// /usr/lib/zig/include/avx512fp16intrin.h:2480:9
pub const _mm512_fnmadd_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2485:9
pub const _mm512_mask3_fnmadd_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddph512_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:2490:9
pub const _mm512_maskz_fnmadd_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddph512_maskz`");
// /usr/lib/zig/include/avx512fp16intrin.h:2495:9
pub const _mm512_fnmsub_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2500:9
pub const _mm512_maskz_fnmsub_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddph512_maskz`");
// /usr/lib/zig/include/avx512fp16intrin.h:2505:9
pub const _mm512_fmaddsub_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2598:9
pub const _mm512_mask_fmaddsub_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2603:9
pub const _mm512_mask3_fmaddsub_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubph512_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:2608:9
pub const _mm512_maskz_fmaddsub_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubph512_maskz`");
// /usr/lib/zig/include/avx512fp16intrin.h:2613:9
pub const _mm512_fmsubadd_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2618:9
pub const _mm512_mask_fmsubadd_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2623:9
pub const _mm512_maskz_fmsubadd_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsubph512_maskz`");
// /usr/lib/zig/include/avx512fp16intrin.h:2628:9
pub const _mm512_mask3_fmsub_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmsubph512_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:2682:9
pub const _mm512_mask3_fmsubadd_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmsubaddph512_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:2694:9
pub const _mm512_mask_fnmadd_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2706:9
pub const _mm512_mask_fnmsub_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2718:9
pub const _mm512_mask3_fnmsub_round_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmsubph512_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:2723:9
pub const _mm_fmadd_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsh3_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2757:9
pub const _mm_mask_fmadd_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsh3_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2762:9
pub const _mm_maskz_fmadd_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsh3_maskz`");
// /usr/lib/zig/include/avx512fp16intrin.h:2774:9
pub const _mm_mask3_fmadd_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsh3_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:2786:9
pub const _mm_fmsub_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsh3_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2808:9
pub const _mm_mask_fmsub_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsh3_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2813:9
pub const _mm_maskz_fmsub_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsh3_maskz`");
// /usr/lib/zig/include/avx512fp16intrin.h:2825:9
pub const _mm_mask3_fmsub_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmsubsh3_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:2837:9
pub const _mm_fnmadd_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsh3_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2855:9
pub const _mm_mask_fnmadd_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsh3_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2860:9
pub const _mm_maskz_fnmadd_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsh3_maskz`");
// /usr/lib/zig/include/avx512fp16intrin.h:2872:9
pub const _mm_mask3_fnmadd_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsh3_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:2884:9
pub const _mm_fnmsub_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsh3_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2902:9
pub const _mm_mask_fnmsub_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsh3_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2907:9
pub const _mm_maskz_fnmsub_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddsh3_maskz`");
// /usr/lib/zig/include/avx512fp16intrin.h:2919:9
pub const _mm_mask3_fnmsub_round_sh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmsubsh3_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:2931:9
pub const _mm_fcmadd_round_sch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfcmaddcsh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2963:9
pub const _mm_mask_fcmadd_round_sch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfcmaddcsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:2968:9
pub const _mm_maskz_fcmadd_round_sch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfcmaddcsh_maskz`");
// /usr/lib/zig/include/avx512fp16intrin.h:2973:9
pub const _mm_mask3_fcmadd_round_sch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfcmaddcsh_round_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:2978:9
pub const _mm_fmadd_round_sch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddcsh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3010:9
pub const _mm_mask_fmadd_round_sch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddcsh_round_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3015:9
pub const _mm_maskz_fmadd_round_sch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddcsh_maskz`");
// /usr/lib/zig/include/avx512fp16intrin.h:3020:9
pub const _mm_mask3_fmadd_round_sch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddcsh_round_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:3025:9
pub const _mm_fcmul_round_sch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfcmulcsh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3051:9
pub const _mm_mask_fcmul_round_sch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfcmulcsh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3056:9
pub const _mm_maskz_fcmul_round_sch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfcmulcsh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3061:9
pub const _mm_fmul_round_sch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmulcsh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3089:9
pub const _mm_mask_fmul_round_sch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmulcsh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3094:9
pub const _mm_maskz_fmul_round_sch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmulcsh_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3099:9
pub const _mm512_fcmul_round_pch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfcmulcph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3125:9
pub const _mm512_mask_fcmul_round_pch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfcmulcph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3130:9
pub const _mm512_maskz_fcmul_round_pch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfcmulcph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3135:9
pub const _mm512_fmul_round_pch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmulcph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3161:9
pub const _mm512_mask_fmul_round_pch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmulcph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3166:9
pub const _mm512_maskz_fmul_round_pch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmulcph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3171:9
pub const _mm512_fcmadd_round_pch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfcmaddcph512_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:3205:9
pub const _mm512_mask_fcmadd_round_pch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfcmaddcph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3210:9
pub const _mm512_mask3_fcmadd_round_pch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfcmaddcph512_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:3215:9
pub const _mm512_maskz_fcmadd_round_pch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfcmaddcph512_maskz`");
// /usr/lib/zig/include/avx512fp16intrin.h:3220:9
pub const _mm512_fmadd_round_pch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddcph512_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:3254:9
pub const _mm512_mask_fmadd_round_pch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddcph512_mask`");
// /usr/lib/zig/include/avx512fp16intrin.h:3259:9
pub const _mm512_mask3_fmadd_round_pch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddcph512_mask3`");
// /usr/lib/zig/include/avx512fp16intrin.h:3264:9
pub const _mm512_maskz_fmadd_round_pch = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vfmaddcph512_maskz`");
// /usr/lib/zig/include/avx512fp16intrin.h:3269:9
pub inline fn _mm512_mul_pch(A: anytype, B: anytype) @TypeOf(_mm512_fmul_pch(A, B)) {
    _ = &A;
    _ = &B;
    return _mm512_fmul_pch(A, B);
}
pub inline fn _mm512_mask_mul_pch(W: anytype, U: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_fmul_pch(W, U, A, B)) {
    _ = &W;
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm512_mask_fmul_pch(W, U, A, B);
}
pub inline fn _mm512_maskz_mul_pch(U: anytype, A: anytype, B: anytype) @TypeOf(_mm512_maskz_fmul_pch(U, A, B)) {
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm512_maskz_fmul_pch(U, A, B);
}
pub inline fn _mm512_mul_round_pch(A: anytype, B: anytype, R: anytype) @TypeOf(_mm512_fmul_round_pch(A, B, R)) {
    _ = &A;
    _ = &B;
    _ = &R;
    return _mm512_fmul_round_pch(A, B, R);
}
pub inline fn _mm512_mask_mul_round_pch(W: anytype, U: anytype, A: anytype, B: anytype, R: anytype) @TypeOf(_mm512_mask_fmul_round_pch(W, U, A, B, R)) {
    _ = &W;
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &R;
    return _mm512_mask_fmul_round_pch(W, U, A, B, R);
}
pub inline fn _mm512_maskz_mul_round_pch(U: anytype, A: anytype, B: anytype, R: anytype) @TypeOf(_mm512_maskz_fmul_round_pch(U, A, B, R)) {
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &R;
    return _mm512_maskz_fmul_round_pch(U, A, B, R);
}
pub inline fn _mm512_cmul_pch(A: anytype, B: anytype) @TypeOf(_mm512_fcmul_pch(A, B)) {
    _ = &A;
    _ = &B;
    return _mm512_fcmul_pch(A, B);
}
pub inline fn _mm512_mask_cmul_pch(W: anytype, U: anytype, A: anytype, B: anytype) @TypeOf(_mm512_mask_fcmul_pch(W, U, A, B)) {
    _ = &W;
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm512_mask_fcmul_pch(W, U, A, B);
}
pub inline fn _mm512_maskz_cmul_pch(U: anytype, A: anytype, B: anytype) @TypeOf(_mm512_maskz_fcmul_pch(U, A, B)) {
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm512_maskz_fcmul_pch(U, A, B);
}
pub inline fn _mm512_cmul_round_pch(A: anytype, B: anytype, R: anytype) @TypeOf(_mm512_fcmul_round_pch(A, B, R)) {
    _ = &A;
    _ = &B;
    _ = &R;
    return _mm512_fcmul_round_pch(A, B, R);
}
pub inline fn _mm512_mask_cmul_round_pch(W: anytype, U: anytype, A: anytype, B: anytype, R: anytype) @TypeOf(_mm512_mask_fcmul_round_pch(W, U, A, B, R)) {
    _ = &W;
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &R;
    return _mm512_mask_fcmul_round_pch(W, U, A, B, R);
}
pub inline fn _mm512_maskz_cmul_round_pch(U: anytype, A: anytype, B: anytype, R: anytype) @TypeOf(_mm512_maskz_fcmul_round_pch(U, A, B, R)) {
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &R;
    return _mm512_maskz_fcmul_round_pch(U, A, B, R);
}
pub inline fn _mm_mul_sch(A: anytype, B: anytype) @TypeOf(_mm_fmul_sch(A, B)) {
    _ = &A;
    _ = &B;
    return _mm_fmul_sch(A, B);
}
pub inline fn _mm_mask_mul_sch(W: anytype, U: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_fmul_sch(W, U, A, B)) {
    _ = &W;
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm_mask_fmul_sch(W, U, A, B);
}
pub inline fn _mm_maskz_mul_sch(U: anytype, A: anytype, B: anytype) @TypeOf(_mm_maskz_fmul_sch(U, A, B)) {
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm_maskz_fmul_sch(U, A, B);
}
pub inline fn _mm_mul_round_sch(A: anytype, B: anytype, R: anytype) @TypeOf(_mm_fmul_round_sch(A, B, R)) {
    _ = &A;
    _ = &B;
    _ = &R;
    return _mm_fmul_round_sch(A, B, R);
}
pub inline fn _mm_mask_mul_round_sch(W: anytype, U: anytype, A: anytype, B: anytype, R: anytype) @TypeOf(_mm_mask_fmul_round_sch(W, U, A, B, R)) {
    _ = &W;
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &R;
    return _mm_mask_fmul_round_sch(W, U, A, B, R);
}
pub inline fn _mm_maskz_mul_round_sch(U: anytype, A: anytype, B: anytype, R: anytype) @TypeOf(_mm_maskz_fmul_round_sch(U, A, B, R)) {
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &R;
    return _mm_maskz_fmul_round_sch(U, A, B, R);
}
pub inline fn _mm_cmul_sch(A: anytype, B: anytype) @TypeOf(_mm_fcmul_sch(A, B)) {
    _ = &A;
    _ = &B;
    return _mm_fcmul_sch(A, B);
}
pub inline fn _mm_mask_cmul_sch(W: anytype, U: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_fcmul_sch(W, U, A, B)) {
    _ = &W;
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm_mask_fcmul_sch(W, U, A, B);
}
pub inline fn _mm_maskz_cmul_sch(U: anytype, A: anytype, B: anytype) @TypeOf(_mm_maskz_fcmul_sch(U, A, B)) {
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm_maskz_fcmul_sch(U, A, B);
}
pub inline fn _mm_cmul_round_sch(A: anytype, B: anytype, R: anytype) @TypeOf(_mm_fcmul_round_sch(A, B, R)) {
    _ = &A;
    _ = &B;
    _ = &R;
    return _mm_fcmul_round_sch(A, B, R);
}
pub inline fn _mm_mask_cmul_round_sch(W: anytype, U: anytype, A: anytype, B: anytype, R: anytype) @TypeOf(_mm_mask_fcmul_round_sch(W, U, A, B, R)) {
    _ = &W;
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &R;
    return _mm_mask_fcmul_round_sch(W, U, A, B, R);
}
pub inline fn _mm_maskz_cmul_round_sch(U: anytype, A: anytype, B: anytype, R: anytype) @TypeOf(_mm_maskz_fcmul_round_sch(U, A, B, R)) {
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &R;
    return _mm_maskz_fcmul_round_sch(U, A, B, R);
}
pub const __AVX512VLFP16INTRIN_H = "";
pub inline fn _mm_setr_ph(h1: anytype, h2: anytype, h3: anytype, h4: anytype, h5: anytype, h6: anytype, h7: anytype, h8: anytype) @TypeOf(_mm_set_ph(h8, h7, h6, h5, h4, h3, h2, h1)) {
    _ = &h1;
    _ = &h2;
    _ = &h3;
    _ = &h4;
    _ = &h5;
    _ = &h6;
    _ = &h7;
    _ = &h8;
    return _mm_set_ph(h8, h7, h6, h5, h4, h3, h2, h1);
}
pub inline fn _mm256_setr_ph(h1: anytype, h2: anytype, h3: anytype, h4: anytype, h5: anytype, h6: anytype, h7: anytype, h8: anytype, h9: anytype, h10: anytype, h11: anytype, h12: anytype, h13: anytype, h14: anytype, h15: anytype, h16: anytype) @TypeOf(_mm256_set_ph(h16, h15, h14, h13, h12, h11, h10, h9, h8, h7, h6, h5, h4, h3, h2, h1)) {
    _ = &h1;
    _ = &h2;
    _ = &h3;
    _ = &h4;
    _ = &h5;
    _ = &h6;
    _ = &h7;
    _ = &h8;
    _ = &h9;
    _ = &h10;
    _ = &h11;
    _ = &h12;
    _ = &h13;
    _ = &h14;
    _ = &h15;
    _ = &h16;
    return _mm256_set_ph(h16, h15, h14, h13, h12, h11, h10, h9, h8, h7, h6, h5, h4, h3, h2, h1);
}
pub const _mm256_cmp_ph_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpph256_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:359:9
pub const _mm256_mask_cmp_ph_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpph256_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:363:9
pub const _mm_cmp_ph_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpph128_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:367:9
pub const _mm_mask_cmp_ph_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_cmpph128_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:371:9
pub const _mm_getmant_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantph128_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:479:9
pub const _mm_mask_getmant_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantph128_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:484:9
pub const _mm_maskz_getmant_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantph128_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:489:9
pub const _mm256_getmant_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantph256_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:494:9
pub const _mm256_mask_getmant_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantph256_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:499:9
pub const _mm256_maskz_getmant_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_getmantph256_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:504:9
pub const _mm_roundscale_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleph_128_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:545:9
pub const _mm_mask_roundscale_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleph_128_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:550:9
pub const _mm_maskz_roundscale_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleph_128_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:554:9
pub const _mm256_roundscale_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleph_256_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:559:9
pub const _mm256_mask_roundscale_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleph_256_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:564:9
pub const _mm256_maskz_roundscale_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_rndscaleph_256_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:569:9
pub const _mm_reduce_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceph128_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:574:9
pub const _mm_mask_reduce_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceph128_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:579:9
pub const _mm_maskz_reduce_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceph128_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:583:9
pub const _mm256_reduce_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceph256_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:588:9
pub const _mm256_mask_reduce_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceph256_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:593:9
pub const _mm256_maskz_reduce_ph = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_reduceph256_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:598:9
pub const _mm_mask_fpclass_ph_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclassph128_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:637:9
pub const _mm_fpclass_ph_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclassph128_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:641:9
pub const _mm256_mask_fpclass_ph_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclassph256_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:645:9
pub const _mm256_fpclass_ph_mask = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_fpclassph256_mask`");
// /usr/lib/zig/include/avx512vlfp16intrin.h:649:9
pub inline fn _mm_mul_pch(A: anytype, B: anytype) @TypeOf(_mm_fmul_pch(A, B)) {
    _ = &A;
    _ = &B;
    return _mm_fmul_pch(A, B);
}
pub inline fn _mm_mask_mul_pch(W: anytype, U: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_fmul_pch(W, U, A, B)) {
    _ = &W;
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm_mask_fmul_pch(W, U, A, B);
}
pub inline fn _mm_maskz_mul_pch(U: anytype, A: anytype, B: anytype) @TypeOf(_mm_maskz_fmul_pch(U, A, B)) {
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm_maskz_fmul_pch(U, A, B);
}
pub inline fn _mm256_mul_pch(A: anytype, B: anytype) @TypeOf(_mm256_fmul_pch(A, B)) {
    _ = &A;
    _ = &B;
    return _mm256_fmul_pch(A, B);
}
pub inline fn _mm256_mask_mul_pch(W: anytype, U: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_fmul_pch(W, U, A, B)) {
    _ = &W;
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm256_mask_fmul_pch(W, U, A, B);
}
pub inline fn _mm256_maskz_mul_pch(U: anytype, A: anytype, B: anytype) @TypeOf(_mm256_maskz_fmul_pch(U, A, B)) {
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm256_maskz_fmul_pch(U, A, B);
}
pub inline fn _mm_cmul_pch(A: anytype, B: anytype) @TypeOf(_mm_fcmul_pch(A, B)) {
    _ = &A;
    _ = &B;
    return _mm_fcmul_pch(A, B);
}
pub inline fn _mm_mask_cmul_pch(W: anytype, U: anytype, A: anytype, B: anytype) @TypeOf(_mm_mask_fcmul_pch(W, U, A, B)) {
    _ = &W;
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm_mask_fcmul_pch(W, U, A, B);
}
pub inline fn _mm_maskz_cmul_pch(U: anytype, A: anytype, B: anytype) @TypeOf(_mm_maskz_fcmul_pch(U, A, B)) {
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm_maskz_fcmul_pch(U, A, B);
}
pub inline fn _mm256_cmul_pch(A: anytype, B: anytype) @TypeOf(_mm256_fcmul_pch(A, B)) {
    _ = &A;
    _ = &B;
    return _mm256_fcmul_pch(A, B);
}
pub inline fn _mm256_mask_cmul_pch(W: anytype, U: anytype, A: anytype, B: anytype) @TypeOf(_mm256_mask_fcmul_pch(W, U, A, B)) {
    _ = &W;
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm256_mask_fcmul_pch(W, U, A, B);
}
pub inline fn _mm256_maskz_cmul_pch(U: anytype, A: anytype, B: anytype) @TypeOf(_mm256_maskz_fcmul_pch(U, A, B)) {
    _ = &U;
    _ = &A;
    _ = &B;
    return _mm256_maskz_fcmul_pch(U, A, B);
}
pub const __AVX512BF16INTRIN_H = "";
pub const __AVX512VLBF16INTRIN_H = "";
pub const _mm_cvtneps_pbh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtneps2bf16128`");
// /usr/lib/zig/include/avx512vlbf16intrin.h:165:9
pub const _mm256_cvtneps_pbh = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vcvtneps2bf16256`");
// /usr/lib/zig/include/avx512vlbf16intrin.h:219:9
pub const __PKUINTRIN_H = "";
pub const __VPCLMULQDQINTRIN_H = "";
pub const _mm256_clmulepi64_epi128 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pclmulqdq256`");
// /usr/lib/zig/include/vpclmulqdqintrin.h:17:9
pub const _mm512_clmulepi64_epi128 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_pclmulqdq512`");
// /usr/lib/zig/include/vpclmulqdqintrin.h:23:9
pub const __VAESINTRIN_H = "";
pub const __DEFAULT_FN_ATTRS_F = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/vaesintrin.h:21:9
pub const __GFNIINTRIN_H = "";
pub const __DEFAULT_FN_ATTRS_Y = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/gfniintrin.h:23:9
pub const __DEFAULT_FN_ATTRS_Z = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/gfniintrin.h:29:9
pub const __DEFAULT_FN_ATTRS_Z_MASK = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/gfniintrin.h:34:9
pub const __DEFAULT_FN_ATTRS_VL128 = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/gfniintrin.h:40:9
pub const __DEFAULT_FN_ATTRS_VL256 = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/gfniintrin.h:44:9
pub const _mm_gf2p8affineinv_epi64_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vgf2p8affineinvqb_v16qi`");
// /usr/lib/zig/include/gfniintrin.h:49:9
pub const _mm_gf2p8affine_epi64_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vgf2p8affineqb_v16qi`");
// /usr/lib/zig/include/gfniintrin.h:54:9
pub const _mm256_gf2p8affineinv_epi64_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vgf2p8affineinvqb_v32qi`");
// /usr/lib/zig/include/gfniintrin.h:67:9
pub const _mm256_gf2p8affine_epi64_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vgf2p8affineqb_v32qi`");
// /usr/lib/zig/include/gfniintrin.h:72:9
pub const _mm512_gf2p8affineinv_epi64_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vgf2p8affineinvqb_v64qi`");
// /usr/lib/zig/include/gfniintrin.h:86:9
pub const _mm512_mask_gf2p8affineinv_epi64_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectb_512`");
// /usr/lib/zig/include/gfniintrin.h:91:9
pub inline fn _mm512_maskz_gf2p8affineinv_epi64_epi8(U: anytype, A: anytype, B: anytype, I: anytype) @TypeOf(_mm512_mask_gf2p8affineinv_epi64_epi8(@import("std").zig.c_translation.cast(__m512i, _mm512_setzero_si512()), U, A, B, I)) {
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &I;
    return _mm512_mask_gf2p8affineinv_epi64_epi8(@import("std").zig.c_translation.cast(__m512i, _mm512_setzero_si512()), U, A, B, I);
}
pub const _mm512_gf2p8affine_epi64_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vgf2p8affineqb_v64qi`");
// /usr/lib/zig/include/gfniintrin.h:100:9
pub const _mm512_mask_gf2p8affine_epi64_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectb_512`");
// /usr/lib/zig/include/gfniintrin.h:105:9
pub inline fn _mm512_maskz_gf2p8affine_epi64_epi8(U: anytype, A: anytype, B: anytype, I: anytype) @TypeOf(_mm512_mask_gf2p8affine_epi64_epi8(@import("std").zig.c_translation.cast(__m512i, _mm512_setzero_si512()), U, A, B, I)) {
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &I;
    return _mm512_mask_gf2p8affine_epi64_epi8(@import("std").zig.c_translation.cast(__m512i, _mm512_setzero_si512()), U, A, B, I);
}
pub const _mm_mask_gf2p8affineinv_epi64_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectb_128`");
// /usr/lib/zig/include/gfniintrin.h:138:9
pub inline fn _mm_maskz_gf2p8affineinv_epi64_epi8(U: anytype, A: anytype, B: anytype, I: anytype) @TypeOf(_mm_mask_gf2p8affineinv_epi64_epi8(@import("std").zig.c_translation.cast(__m128i, _mm_setzero_si128()), U, A, B, I)) {
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &I;
    return _mm_mask_gf2p8affineinv_epi64_epi8(@import("std").zig.c_translation.cast(__m128i, _mm_setzero_si128()), U, A, B, I);
}
pub const _mm256_mask_gf2p8affineinv_epi64_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectb_256`");
// /usr/lib/zig/include/gfniintrin.h:147:9
pub inline fn _mm256_maskz_gf2p8affineinv_epi64_epi8(U: anytype, A: anytype, B: anytype, I: anytype) @TypeOf(_mm256_mask_gf2p8affineinv_epi64_epi8(@import("std").zig.c_translation.cast(__m256i, _mm256_setzero_si256()), U, A, B, I)) {
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &I;
    return _mm256_mask_gf2p8affineinv_epi64_epi8(@import("std").zig.c_translation.cast(__m256i, _mm256_setzero_si256()), U, A, B, I);
}
pub const _mm_mask_gf2p8affine_epi64_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectb_128`");
// /usr/lib/zig/include/gfniintrin.h:156:9
pub inline fn _mm_maskz_gf2p8affine_epi64_epi8(U: anytype, A: anytype, B: anytype, I: anytype) @TypeOf(_mm_mask_gf2p8affine_epi64_epi8(@import("std").zig.c_translation.cast(__m128i, _mm_setzero_si128()), U, A, B, I)) {
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &I;
    return _mm_mask_gf2p8affine_epi64_epi8(@import("std").zig.c_translation.cast(__m128i, _mm_setzero_si128()), U, A, B, I);
}
pub const _mm256_mask_gf2p8affine_epi64_epi8 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_selectb_256`");
// /usr/lib/zig/include/gfniintrin.h:164:9
pub inline fn _mm256_maskz_gf2p8affine_epi64_epi8(U: anytype, A: anytype, B: anytype, I: anytype) @TypeOf(_mm256_mask_gf2p8affine_epi64_epi8(@import("std").zig.c_translation.cast(__m256i, _mm256_setzero_si256()), U, A, B, I)) {
    _ = &U;
    _ = &A;
    _ = &B;
    _ = &I;
    return _mm256_mask_gf2p8affine_epi64_epi8(@import("std").zig.c_translation.cast(__m256i, _mm256_setzero_si256()), U, A, B, I);
}
pub const __AVXVNNIINT8INTRIN_H = "";
pub const __AVXNECONVERTINTRIN_H = "";
pub const __SHA512INTRIN_H = "";
pub const __SM3INTRIN_H = "";
pub const _mm_sm3rnds2_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vsm3rnds2`");
// /usr/lib/zig/include/sm3intrin.h:233:9
pub const __SM4INTRIN_H = "";
pub const _mm_sm4key4_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vsm4key4128`");
// /usr/lib/zig/include/sm4intrin.h:76:9
pub const _mm256_sm4key4_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vsm4key4256`");
// /usr/lib/zig/include/sm4intrin.h:138:9
pub const _mm_sm4rnds4_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vsm4rnds4128`");
// /usr/lib/zig/include/sm4intrin.h:202:9
pub const _mm256_sm4rnds4_epi32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_vsm4rnds4256`");
// /usr/lib/zig/include/sm4intrin.h:266:9
pub const __AVXVNNIINT16INTRIN_H = "";
pub const __RTMINTRIN_H = "";
pub const _XBEGIN_STARTED = ~@as(c_uint, 0);
pub const _XABORT_EXPLICIT = @as(c_int, 1) << @as(c_int, 0);
pub const _XABORT_RETRY = @as(c_int, 1) << @as(c_int, 1);
pub const _XABORT_CONFLICT = @as(c_int, 1) << @as(c_int, 2);
pub const _XABORT_CAPACITY = @as(c_int, 1) << @as(c_int, 3);
pub const _XABORT_DEBUG = @as(c_int, 1) << @as(c_int, 4);
pub const _XABORT_NESTED = @as(c_int, 1) << @as(c_int, 5);
pub inline fn _XABORT_CODE(x: anytype) @TypeOf((x >> @as(c_int, 24)) & @as(c_int, 0xFF)) {
    _ = &x;
    return (x >> @as(c_int, 24)) & @as(c_int, 0xFF);
}
pub const _xabort = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_xabort`");
// /usr/lib/zig/include/rtmintrin.h:41:9
pub const __XTESTINTRIN_H = "";
pub const __SHAINTRIN_H = "";
pub const _mm_sha1rnds4_epu32 = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_sha1rnds4`");
// /usr/lib/zig/include/shaintrin.h:50:9
pub const __FXSRINTRIN_H = "";
pub const __XSAVEINTRIN_H = "";
pub const _xgetbv = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_xgetbv`");
// /usr/lib/zig/include/xsaveintrin.h:35:9
pub const _xsetbv = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_xsetbv`");
// /usr/lib/zig/include/xsaveintrin.h:36:9
pub const __XSAVEOPTINTRIN_H = "";
pub const __XSAVECINTRIN_H = "";
pub const __XSAVESINTRIN_H = "";
pub const __CETINTRIN_H = "";
pub const __ADCINTRIN_H = "";
pub const __INLINE = @compileError("unable to translate C expr: unexpected token 'static'");
// /usr/lib/zig/include/adcintrin.h:24:9
pub const __ADXINTRIN_H = "";
pub const __RDSEEDINTRIN_H = "";
pub const __WBNOINVDINTRIN_H = "";
pub const __CLDEMOTEINTRIN_H = "";
pub inline fn _mm_cldemote(p: anytype) @TypeOf(_cldemote(p)) {
    _ = &p;
    return _cldemote(p);
}
pub const __WAITPKGINTRIN_H = "";
pub const _MOVDIRINTRIN_H = "";
pub const __PCONFIGINTRIN_H = "";
pub const __PCONFIG_KEY_PROGRAM = @as(c_int, 0x00000001);
pub const __SGXINTRIN_H = "";
pub const __PTWRITEINTRIN_H = "";
pub const __INVPCIDINTRIN_H = "";
pub const __AMX_FP16INTRIN_H = "";
pub const _tile_dpfp16ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_tdpfp16ps`");
// /usr/lib/zig/include/amxfp16intrin.h:54:9
pub const _KEYLOCKERINTRIN_H = "";
pub const __AMXINTRIN_H = "";
pub const __DEFAULT_FN_ATTRS_TILE = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/amxintrin.h:19:9
pub const __DEFAULT_FN_ATTRS_INT8 = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/amxintrin.h:21:9
pub const __DEFAULT_FN_ATTRS_BF16 = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/amxintrin.h:23:9
pub const __DEFAULT_FN_ATTRS_FP16 = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/amxintrin.h:25:9
pub const _tile_loadd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_tileloadd64`");
// /usr/lib/zig/include/amxintrin.h:86:9
pub const _tile_stream_loadd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_tileloaddt164`");
// /usr/lib/zig/include/amxintrin.h:106:9
pub const _tile_stored = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_tilestored64`");
// /usr/lib/zig/include/amxintrin.h:124:9
pub const _tile_zero = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_tilezero`");
// /usr/lib/zig/include/amxintrin.h:135:9
pub const _tile_dpbssd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_tdpbssd`");
// /usr/lib/zig/include/amxintrin.h:153:9
pub const _tile_dpbsud = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_tdpbsud`");
// /usr/lib/zig/include/amxintrin.h:172:9
pub const _tile_dpbusd = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_tdpbusd`");
// /usr/lib/zig/include/amxintrin.h:191:9
pub const _tile_dpbuud = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_tdpbuud`");
// /usr/lib/zig/include/amxintrin.h:210:9
pub const _tile_dpbf16ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_tdpbf16ps`");
// /usr/lib/zig/include/amxintrin.h:228:9
pub const __AMX_COMPLEXINTRIN_H = "";
pub const __DEFAULT_FN_ATTRS_COMPLEX = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/amxcomplexintrin.h:18:9
pub const _tile_cmmimfp16ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_tcmmimfp16ps`");
// /usr/lib/zig/include/amxcomplexintrin.h:63:9
pub const _tile_cmmrlfp16ps = @compileError("unable to translate macro: undefined identifier `__builtin_ia32_tcmmrlfp16ps`");
// /usr/lib/zig/include/amxcomplexintrin.h:108:9
pub const _AVX512VP2INTERSECT_H = "";
pub const _AVX512VLVP2INTERSECT_H = "";
pub const __ENQCMDINTRIN_H = "";
pub const _DEFAULT_FN_ATTRS = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/lib/zig/include/enqcmdintrin.h:18:9
pub const __SERIALIZEINTRIN_H = "";
pub const __TSXLDTRKINTRIN_H = "";
pub const SDL_CACHELINE_SIZE = @as(c_int, 128);
pub const SDL_events_h_ = "";
pub const SDL_video_h_ = "";
pub const SDL_pixels_h_ = "";
pub const SDL_ALPHA_OPAQUE = @as(c_int, 255);
pub const SDL_ALPHA_TRANSPARENT = @as(c_int, 0);
pub inline fn SDL_DEFINE_PIXELFOURCC(A: anytype, B: anytype, C: anytype, D: anytype) @TypeOf(SDL_FOURCC(A, B, C, D)) {
    _ = &A;
    _ = &B;
    _ = &C;
    _ = &D;
    return SDL_FOURCC(A, B, C, D);
}
pub inline fn SDL_DEFINE_PIXELFORMAT(@"type": anytype, order: anytype, layout: anytype, bits: anytype, bytes: anytype) @TypeOf((((((@as(c_int, 1) << @as(c_int, 28)) | (@"type" << @as(c_int, 24))) | (order << @as(c_int, 20))) | (layout << @as(c_int, 16))) | (bits << @as(c_int, 8))) | (bytes << @as(c_int, 0))) {
    _ = &@"type";
    _ = &order;
    _ = &layout;
    _ = &bits;
    _ = &bytes;
    return (((((@as(c_int, 1) << @as(c_int, 28)) | (@"type" << @as(c_int, 24))) | (order << @as(c_int, 20))) | (layout << @as(c_int, 16))) | (bits << @as(c_int, 8))) | (bytes << @as(c_int, 0));
}
pub inline fn SDL_PIXELFLAG(X: anytype) @TypeOf((X >> @as(c_int, 28)) & @as(c_int, 0x0F)) {
    _ = &X;
    return (X >> @as(c_int, 28)) & @as(c_int, 0x0F);
}
pub inline fn SDL_PIXELTYPE(X: anytype) @TypeOf((X >> @as(c_int, 24)) & @as(c_int, 0x0F)) {
    _ = &X;
    return (X >> @as(c_int, 24)) & @as(c_int, 0x0F);
}
pub inline fn SDL_PIXELORDER(X: anytype) @TypeOf((X >> @as(c_int, 20)) & @as(c_int, 0x0F)) {
    _ = &X;
    return (X >> @as(c_int, 20)) & @as(c_int, 0x0F);
}
pub inline fn SDL_PIXELLAYOUT(X: anytype) @TypeOf((X >> @as(c_int, 16)) & @as(c_int, 0x0F)) {
    _ = &X;
    return (X >> @as(c_int, 16)) & @as(c_int, 0x0F);
}
pub inline fn SDL_BITSPERPIXEL(X: anytype) @TypeOf((X >> @as(c_int, 8)) & @as(c_int, 0xFF)) {
    _ = &X;
    return (X >> @as(c_int, 8)) & @as(c_int, 0xFF);
}
pub inline fn SDL_BYTESPERPIXEL(X: anytype) @TypeOf(if (SDL_ISPIXELFORMAT_FOURCC(X)) if (((X == SDL_PIXELFORMAT_YUY2) or (X == SDL_PIXELFORMAT_UYVY)) or (X == SDL_PIXELFORMAT_YVYU)) @as(c_int, 2) else @as(c_int, 1) else (X >> @as(c_int, 0)) & @as(c_int, 0xFF)) {
    _ = &X;
    return if (SDL_ISPIXELFORMAT_FOURCC(X)) if (((X == SDL_PIXELFORMAT_YUY2) or (X == SDL_PIXELFORMAT_UYVY)) or (X == SDL_PIXELFORMAT_YVYU)) @as(c_int, 2) else @as(c_int, 1) else (X >> @as(c_int, 0)) & @as(c_int, 0xFF);
}
pub inline fn SDL_ISPIXELFORMAT_INDEXED(format: anytype) @TypeOf(!(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and ((((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX1) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX2)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX4)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX8))) {
    _ = &format;
    return !(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and ((((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX1) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX2)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX4)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX8));
}
pub inline fn SDL_ISPIXELFORMAT_PACKED(format: anytype) @TypeOf(!(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and (((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED8) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED16)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED32))) {
    _ = &format;
    return !(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and (((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED8) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED16)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED32));
}
pub inline fn SDL_ISPIXELFORMAT_ARRAY(format: anytype) @TypeOf(!(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and (((((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU8) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU16)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU32)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF16)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF32))) {
    _ = &format;
    return !(SDL_ISPIXELFORMAT_FOURCC(format) != 0) and (((((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU8) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU16)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU32)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF16)) or (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF32));
}
pub inline fn SDL_ISPIXELFORMAT_ALPHA(format: anytype) @TypeOf(((SDL_ISPIXELFORMAT_PACKED(format) != 0) and ((((SDL_PIXELORDER(format) == SDL_PACKEDORDER_ARGB) or (SDL_PIXELORDER(format) == SDL_PACKEDORDER_RGBA)) or (SDL_PIXELORDER(format) == SDL_PACKEDORDER_ABGR)) or (SDL_PIXELORDER(format) == SDL_PACKEDORDER_BGRA))) or ((SDL_ISPIXELFORMAT_ARRAY(format) != 0) and ((((SDL_PIXELORDER(format) == SDL_ARRAYORDER_ARGB) or (SDL_PIXELORDER(format) == SDL_ARRAYORDER_RGBA)) or (SDL_PIXELORDER(format) == SDL_ARRAYORDER_ABGR)) or (SDL_PIXELORDER(format) == SDL_ARRAYORDER_BGRA)))) {
    _ = &format;
    return ((SDL_ISPIXELFORMAT_PACKED(format) != 0) and ((((SDL_PIXELORDER(format) == SDL_PACKEDORDER_ARGB) or (SDL_PIXELORDER(format) == SDL_PACKEDORDER_RGBA)) or (SDL_PIXELORDER(format) == SDL_PACKEDORDER_ABGR)) or (SDL_PIXELORDER(format) == SDL_PACKEDORDER_BGRA))) or ((SDL_ISPIXELFORMAT_ARRAY(format) != 0) and ((((SDL_PIXELORDER(format) == SDL_ARRAYORDER_ARGB) or (SDL_PIXELORDER(format) == SDL_ARRAYORDER_RGBA)) or (SDL_PIXELORDER(format) == SDL_ARRAYORDER_ABGR)) or (SDL_PIXELORDER(format) == SDL_ARRAYORDER_BGRA)));
}
pub inline fn SDL_ISPIXELFORMAT_FOURCC(format: anytype) @TypeOf((format != 0) and (SDL_PIXELFLAG(format) != @as(c_int, 1))) {
    _ = &format;
    return (format != 0) and (SDL_PIXELFLAG(format) != @as(c_int, 1));
}
pub const SDL_Colour = SDL_Color;
pub const SDL_rect_h_ = "";
pub const SDL_surface_h_ = "";
pub const SDL_blendmode_h_ = "";
pub const SDL_SWSURFACE = @as(c_int, 0);
pub const SDL_PREALLOC = @as(c_int, 0x00000001);
pub const SDL_RLEACCEL = @as(c_int, 0x00000002);
pub const SDL_DONTFREE = @as(c_int, 0x00000004);
pub const SDL_SIMD_ALIGNED = @as(c_int, 0x00000008);
pub inline fn SDL_MUSTLOCK(S: anytype) @TypeOf((S.*.flags & SDL_RLEACCEL) != @as(c_int, 0)) {
    _ = &S;
    return (S.*.flags & SDL_RLEACCEL) != @as(c_int, 0);
}
pub inline fn SDL_LoadBMP(file: anytype) @TypeOf(SDL_LoadBMP_RW(SDL_RWFromFile(file, "rb"), @as(c_int, 1))) {
    _ = &file;
    return SDL_LoadBMP_RW(SDL_RWFromFile(file, "rb"), @as(c_int, 1));
}
pub inline fn SDL_SaveBMP(surface: anytype, file: anytype) @TypeOf(SDL_SaveBMP_RW(surface, SDL_RWFromFile(file, "wb"), @as(c_int, 1))) {
    _ = &surface;
    _ = &file;
    return SDL_SaveBMP_RW(surface, SDL_RWFromFile(file, "wb"), @as(c_int, 1));
}
pub const SDL_BlitSurface = SDL_UpperBlit;
pub const SDL_BlitScaled = SDL_UpperBlitScaled;
pub const SDL_WINDOWPOS_UNDEFINED_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1FFF0000, .hex);
pub inline fn SDL_WINDOWPOS_UNDEFINED_DISPLAY(X: anytype) @TypeOf(SDL_WINDOWPOS_UNDEFINED_MASK | X) {
    _ = &X;
    return SDL_WINDOWPOS_UNDEFINED_MASK | X;
}
pub const SDL_WINDOWPOS_UNDEFINED = SDL_WINDOWPOS_UNDEFINED_DISPLAY(@as(c_int, 0));
pub inline fn SDL_WINDOWPOS_ISUNDEFINED(X: anytype) @TypeOf((X & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF0000, .hex)) == SDL_WINDOWPOS_UNDEFINED_MASK) {
    _ = &X;
    return (X & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF0000, .hex)) == SDL_WINDOWPOS_UNDEFINED_MASK;
}
pub const SDL_WINDOWPOS_CENTERED_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x2FFF0000, .hex);
pub inline fn SDL_WINDOWPOS_CENTERED_DISPLAY(X: anytype) @TypeOf(SDL_WINDOWPOS_CENTERED_MASK | X) {
    _ = &X;
    return SDL_WINDOWPOS_CENTERED_MASK | X;
}
pub const SDL_WINDOWPOS_CENTERED = SDL_WINDOWPOS_CENTERED_DISPLAY(@as(c_int, 0));
pub inline fn SDL_WINDOWPOS_ISCENTERED(X: anytype) @TypeOf((X & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF0000, .hex)) == SDL_WINDOWPOS_CENTERED_MASK) {
    _ = &X;
    return (X & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF0000, .hex)) == SDL_WINDOWPOS_CENTERED_MASK;
}
pub const SDL_keyboard_h_ = "";
pub const SDL_keycode_h_ = "";
pub const SDL_scancode_h_ = "";
pub const SDLK_SCANCODE_MASK = @as(c_int, 1) << @as(c_int, 30);
pub inline fn SDL_SCANCODE_TO_KEYCODE(X: anytype) @TypeOf(X | SDLK_SCANCODE_MASK) {
    _ = &X;
    return X | SDLK_SCANCODE_MASK;
}
pub const SDL_mouse_h_ = "";
pub inline fn SDL_BUTTON(X: anytype) @TypeOf(@as(c_int, 1) << (X - @as(c_int, 1))) {
    _ = &X;
    return @as(c_int, 1) << (X - @as(c_int, 1));
}
pub const SDL_BUTTON_LEFT = @as(c_int, 1);
pub const SDL_BUTTON_MIDDLE = @as(c_int, 2);
pub const SDL_BUTTON_RIGHT = @as(c_int, 3);
pub const SDL_BUTTON_X1 = @as(c_int, 4);
pub const SDL_BUTTON_X2 = @as(c_int, 5);
pub const SDL_BUTTON_LMASK = SDL_BUTTON(SDL_BUTTON_LEFT);
pub const SDL_BUTTON_MMASK = SDL_BUTTON(SDL_BUTTON_MIDDLE);
pub const SDL_BUTTON_RMASK = SDL_BUTTON(SDL_BUTTON_RIGHT);
pub const SDL_BUTTON_X1MASK = SDL_BUTTON(SDL_BUTTON_X1);
pub const SDL_BUTTON_X2MASK = SDL_BUTTON(SDL_BUTTON_X2);
pub const SDL_joystick_h_ = "";
pub const SDL_guid_h_ = "";
pub const SDL_IPHONE_MAX_GFORCE = @as(f64, 5.0);
pub const SDL_VIRTUAL_JOYSTICK_DESC_VERSION = @as(c_int, 1);
pub const SDL_JOYSTICK_AXIS_MAX = @as(c_int, 32767);
pub const SDL_JOYSTICK_AXIS_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const SDL_HAT_CENTERED = @as(c_int, 0x00);
pub const SDL_HAT_UP = @as(c_int, 0x01);
pub const SDL_HAT_RIGHT = @as(c_int, 0x02);
pub const SDL_HAT_DOWN = @as(c_int, 0x04);
pub const SDL_HAT_LEFT = @as(c_int, 0x08);
pub const SDL_HAT_RIGHTUP = SDL_HAT_RIGHT | SDL_HAT_UP;
pub const SDL_HAT_RIGHTDOWN = SDL_HAT_RIGHT | SDL_HAT_DOWN;
pub const SDL_HAT_LEFTUP = SDL_HAT_LEFT | SDL_HAT_UP;
pub const SDL_HAT_LEFTDOWN = SDL_HAT_LEFT | SDL_HAT_DOWN;
pub const SDL_gamecontroller_h_ = "";
pub const SDL_sensor_h_ = "";
pub const SDL_STANDARD_GRAVITY = @as(f32, 9.80665);
pub inline fn SDL_GameControllerAddMappingsFromFile(file: anytype) @TypeOf(SDL_GameControllerAddMappingsFromRW(SDL_RWFromFile(file, "rb"), @as(c_int, 1))) {
    _ = &file;
    return SDL_GameControllerAddMappingsFromRW(SDL_RWFromFile(file, "rb"), @as(c_int, 1));
}
pub const SDL_quit_h_ = "";
pub inline fn SDL_QuitRequested() @TypeOf(SDL_PeepEvents(NULL, @as(c_int, 0), SDL_PEEKEVENT, SDL_QUIT, SDL_QUIT) > @as(c_int, 0)) {
    return blk_1: {
        _ = SDL_PumpEvents();
        break :blk_1 SDL_PeepEvents(NULL, @as(c_int, 0), SDL_PEEKEVENT, SDL_QUIT, SDL_QUIT) > @as(c_int, 0);
    };
}
pub const SDL_gesture_h_ = "";
pub const SDL_touch_h_ = "";
pub const SDL_TOUCH_MOUSEID = @import("std").zig.c_translation.cast(Uint32, -@as(c_int, 1));
pub const SDL_MOUSE_TOUCHID = @import("std").zig.c_translation.cast(Sint64, -@as(c_int, 1));
pub const SDL_RELEASED = @as(c_int, 0);
pub const SDL_PRESSED = @as(c_int, 1);
pub const SDL_TEXTEDITINGEVENT_TEXT_SIZE = @as(c_int, 32);
pub const SDL_TEXTINPUTEVENT_TEXT_SIZE = @as(c_int, 32);
pub const SDL_QUERY = -@as(c_int, 1);
pub const SDL_IGNORE = @as(c_int, 0);
pub const SDL_DISABLE = @as(c_int, 0);
pub const SDL_ENABLE = @as(c_int, 1);
pub inline fn SDL_GetEventState(@"type": anytype) @TypeOf(SDL_EventState(@"type", SDL_QUERY)) {
    _ = &@"type";
    return SDL_EventState(@"type", SDL_QUERY);
}
pub const SDL_filesystem_h_ = "";
pub const SDL_haptic_h_ = "";
pub const SDL_HAPTIC_CONSTANT = @as(c_uint, 1) << @as(c_int, 0);
pub const SDL_HAPTIC_SINE = @as(c_uint, 1) << @as(c_int, 1);
pub const SDL_HAPTIC_LEFTRIGHT = @as(c_uint, 1) << @as(c_int, 2);
pub const SDL_HAPTIC_TRIANGLE = @as(c_uint, 1) << @as(c_int, 3);
pub const SDL_HAPTIC_SAWTOOTHUP = @as(c_uint, 1) << @as(c_int, 4);
pub const SDL_HAPTIC_SAWTOOTHDOWN = @as(c_uint, 1) << @as(c_int, 5);
pub const SDL_HAPTIC_RAMP = @as(c_uint, 1) << @as(c_int, 6);
pub const SDL_HAPTIC_SPRING = @as(c_uint, 1) << @as(c_int, 7);
pub const SDL_HAPTIC_DAMPER = @as(c_uint, 1) << @as(c_int, 8);
pub const SDL_HAPTIC_INERTIA = @as(c_uint, 1) << @as(c_int, 9);
pub const SDL_HAPTIC_FRICTION = @as(c_uint, 1) << @as(c_int, 10);
pub const SDL_HAPTIC_CUSTOM = @as(c_uint, 1) << @as(c_int, 11);
pub const SDL_HAPTIC_GAIN = @as(c_uint, 1) << @as(c_int, 12);
pub const SDL_HAPTIC_AUTOCENTER = @as(c_uint, 1) << @as(c_int, 13);
pub const SDL_HAPTIC_STATUS = @as(c_uint, 1) << @as(c_int, 14);
pub const SDL_HAPTIC_PAUSE = @as(c_uint, 1) << @as(c_int, 15);
pub const SDL_HAPTIC_POLAR = @as(c_int, 0);
pub const SDL_HAPTIC_CARTESIAN = @as(c_int, 1);
pub const SDL_HAPTIC_SPHERICAL = @as(c_int, 2);
pub const SDL_HAPTIC_STEERING_AXIS = @as(c_int, 3);
pub const SDL_HAPTIC_INFINITY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const SDL_hidapi_h_ = "";
pub const SDL_hints_h_ = "";
pub const SDL_HINT_ACCELEROMETER_AS_JOYSTICK = "SDL_ACCELEROMETER_AS_JOYSTICK";
pub const SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED = "SDL_ALLOW_ALT_TAB_WHILE_GRABBED";
pub const SDL_HINT_ALLOW_TOPMOST = "SDL_ALLOW_TOPMOST";
pub const SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION = "SDL_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION";
pub const SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION = "SDL_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION";
pub const SDL_HINT_ANDROID_BLOCK_ON_PAUSE = "SDL_ANDROID_BLOCK_ON_PAUSE";
pub const SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO = "SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO";
pub const SDL_HINT_ANDROID_TRAP_BACK_BUTTON = "SDL_ANDROID_TRAP_BACK_BUTTON";
pub const SDL_HINT_APP_NAME = "SDL_APP_NAME";
pub const SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS = "SDL_APPLE_TV_CONTROLLER_UI_EVENTS";
pub const SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION = "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION";
pub const SDL_HINT_AUDIO_CATEGORY = "SDL_AUDIO_CATEGORY";
pub const SDL_HINT_AUDIO_DEVICE_APP_NAME = "SDL_AUDIO_DEVICE_APP_NAME";
pub const SDL_HINT_AUDIO_DEVICE_STREAM_NAME = "SDL_AUDIO_DEVICE_STREAM_NAME";
pub const SDL_HINT_AUDIO_DEVICE_STREAM_ROLE = "SDL_AUDIO_DEVICE_STREAM_ROLE";
pub const SDL_HINT_AUDIO_RESAMPLING_MODE = "SDL_AUDIO_RESAMPLING_MODE";
pub const SDL_HINT_AUTO_UPDATE_JOYSTICKS = "SDL_AUTO_UPDATE_JOYSTICKS";
pub const SDL_HINT_AUTO_UPDATE_SENSORS = "SDL_AUTO_UPDATE_SENSORS";
pub const SDL_HINT_BMP_SAVE_LEGACY_FORMAT = "SDL_BMP_SAVE_LEGACY_FORMAT";
pub const SDL_HINT_DISPLAY_USABLE_BOUNDS = "SDL_DISPLAY_USABLE_BOUNDS";
pub const SDL_HINT_EMSCRIPTEN_ASYNCIFY = "SDL_EMSCRIPTEN_ASYNCIFY";
pub const SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT = "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT";
pub const SDL_HINT_ENABLE_SCREEN_KEYBOARD = "SDL_ENABLE_SCREEN_KEYBOARD";
pub const SDL_HINT_ENABLE_STEAM_CONTROLLERS = "SDL_ENABLE_STEAM_CONTROLLERS";
pub const SDL_HINT_EVENT_LOGGING = "SDL_EVENT_LOGGING";
pub const SDL_HINT_FORCE_RAISEWINDOW = "SDL_HINT_FORCE_RAISEWINDOW";
pub const SDL_HINT_FRAMEBUFFER_ACCELERATION = "SDL_FRAMEBUFFER_ACCELERATION";
pub const SDL_HINT_GAMECONTROLLERCONFIG = "SDL_GAMECONTROLLERCONFIG";
pub const SDL_HINT_GAMECONTROLLERCONFIG_FILE = "SDL_GAMECONTROLLERCONFIG_FILE";
pub const SDL_HINT_GAMECONTROLLERTYPE = "SDL_GAMECONTROLLERTYPE";
pub const SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES = "SDL_GAMECONTROLLER_IGNORE_DEVICES";
pub const SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT = "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT";
pub const SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS = "SDL_GAMECONTROLLER_USE_BUTTON_LABELS";
pub const SDL_HINT_GRAB_KEYBOARD = "SDL_GRAB_KEYBOARD";
pub const SDL_HINT_HIDAPI_IGNORE_DEVICES = "SDL_HIDAPI_IGNORE_DEVICES";
pub const SDL_HINT_IDLE_TIMER_DISABLED = "SDL_IOS_IDLE_TIMER_DISABLED";
pub const SDL_HINT_IME_INTERNAL_EDITING = "SDL_IME_INTERNAL_EDITING";
pub const SDL_HINT_IME_SHOW_UI = "SDL_IME_SHOW_UI";
pub const SDL_HINT_IME_SUPPORT_EXTENDED_TEXT = "SDL_IME_SUPPORT_EXTENDED_TEXT";
pub const SDL_HINT_IOS_HIDE_HOME_INDICATOR = "SDL_IOS_HIDE_HOME_INDICATOR";
pub const SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS";
pub const SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES = "SDL_JOYSTICK_ARCADESTICK_DEVICES";
pub const SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED = "SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED";
pub const SDL_HINT_JOYSTICK_BLACKLIST_DEVICES = "SDL_JOYSTICK_BLACKLIST_DEVICES";
pub const SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED = "SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED";
pub const SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES = "SDL_JOYSTICK_FLIGHTSTICK_DEVICES";
pub const SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED = "SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED";
pub const SDL_HINT_JOYSTICK_GAMECUBE_DEVICES = "SDL_JOYSTICK_GAMECUBE_DEVICES";
pub const SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED = "SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED";
pub const SDL_HINT_JOYSTICK_HIDAPI = "SDL_JOYSTICK_HIDAPI";
pub const SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE = "SDL_JOYSTICK_HIDAPI_GAMECUBE";
pub const SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE = "SDL_JOYSTICK_GAMECUBE_RUMBLE_BRAKE";
pub const SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS = "SDL_JOYSTICK_HIDAPI_JOY_CONS";
pub const SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS = "SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS";
pub const SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS = "SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS";
pub const SDL_HINT_JOYSTICK_HIDAPI_LUNA = "SDL_JOYSTICK_HIDAPI_LUNA";
pub const SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC = "SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC";
pub const SDL_HINT_JOYSTICK_HIDAPI_SHIELD = "SDL_JOYSTICK_HIDAPI_SHIELD";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS3 = "SDL_JOYSTICK_HIDAPI_PS3";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS4 = "SDL_JOYSTICK_HIDAPI_PS4";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE = "SDL_JOYSTICK_HIDAPI_PS4_RUMBLE";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS5 = "SDL_JOYSTICK_HIDAPI_PS5";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE = "SDL_JOYSTICK_HIDAPI_PS5_RUMBLE";
pub const SDL_HINT_JOYSTICK_HIDAPI_STADIA = "SDL_JOYSTICK_HIDAPI_STADIA";
pub const SDL_HINT_JOYSTICK_HIDAPI_STEAM = "SDL_JOYSTICK_HIDAPI_STEAM";
pub const SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK = "SDL_JOYSTICK_HIDAPI_STEAMDECK";
pub const SDL_HINT_JOYSTICK_HIDAPI_SWITCH = "SDL_JOYSTICK_HIDAPI_SWITCH";
pub const SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED = "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED";
pub const SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED = "SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED";
pub const SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED";
pub const SDL_HINT_JOYSTICK_HIDAPI_WII = "SDL_JOYSTICK_HIDAPI_WII";
pub const SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX = "SDL_JOYSTICK_HIDAPI_XBOX";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 = "SDL_JOYSTICK_HIDAPI_XBOX_360";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS = "SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE = "SDL_JOYSTICK_HIDAPI_XBOX_ONE";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED = "SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED";
pub const SDL_HINT_JOYSTICK_IOKIT = "SDL_JOYSTICK_IOKIT";
pub const SDL_HINT_JOYSTICK_MFI = "SDL_JOYSTICK_MFI";
pub const SDL_HINT_JOYSTICK_RAWINPUT = "SDL_JOYSTICK_RAWINPUT";
pub const SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT = "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT";
pub const SDL_HINT_JOYSTICK_ROG_CHAKRAM = "SDL_JOYSTICK_ROG_CHAKRAM";
pub const SDL_HINT_JOYSTICK_THREAD = "SDL_JOYSTICK_THREAD";
pub const SDL_HINT_JOYSTICK_THROTTLE_DEVICES = "SDL_JOYSTICK_THROTTLE_DEVICES";
pub const SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED = "SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED";
pub const SDL_HINT_JOYSTICK_WGI = "SDL_JOYSTICK_WGI";
pub const SDL_HINT_JOYSTICK_WHEEL_DEVICES = "SDL_JOYSTICK_WHEEL_DEVICES";
pub const SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED = "SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED";
pub const SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES = "SDL_JOYSTICK_ZERO_CENTERED_DEVICES";
pub const SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER = "SDL_KMSDRM_REQUIRE_DRM_MASTER";
pub const SDL_HINT_JOYSTICK_DEVICE = "SDL_JOYSTICK_DEVICE";
pub const SDL_HINT_LINUX_DIGITAL_HATS = "SDL_LINUX_DIGITAL_HATS";
pub const SDL_HINT_LINUX_HAT_DEADZONES = "SDL_LINUX_HAT_DEADZONES";
pub const SDL_HINT_LINUX_JOYSTICK_CLASSIC = "SDL_LINUX_JOYSTICK_CLASSIC";
pub const SDL_HINT_LINUX_JOYSTICK_DEADZONES = "SDL_LINUX_JOYSTICK_DEADZONES";
pub const SDL_HINT_LOGGING = "SDL_LOGGING";
pub const SDL_HINT_MAC_BACKGROUND_APP = "SDL_MAC_BACKGROUND_APP";
pub const SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK = "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK";
pub const SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH = "SDL_MAC_OPENGL_ASYNC_DISPATCH";
pub const SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS = "SDL_MOUSE_DOUBLE_CLICK_RADIUS";
pub const SDL_HINT_MOUSE_DOUBLE_CLICK_TIME = "SDL_MOUSE_DOUBLE_CLICK_TIME";
pub const SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH = "SDL_MOUSE_FOCUS_CLICKTHROUGH";
pub const SDL_HINT_MOUSE_NORMAL_SPEED_SCALE = "SDL_MOUSE_NORMAL_SPEED_SCALE";
pub const SDL_HINT_MOUSE_RELATIVE_MODE_CENTER = "SDL_MOUSE_RELATIVE_MODE_CENTER";
pub const SDL_HINT_MOUSE_RELATIVE_MODE_WARP = "SDL_MOUSE_RELATIVE_MODE_WARP";
pub const SDL_HINT_MOUSE_RELATIVE_SCALING = "SDL_MOUSE_RELATIVE_SCALING";
pub const SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE = "SDL_MOUSE_RELATIVE_SPEED_SCALE";
pub const SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE = "SDL_MOUSE_RELATIVE_SYSTEM_SCALE";
pub const SDL_HINT_MOUSE_RELATIVE_WARP_MOTION = "SDL_MOUSE_RELATIVE_WARP_MOTION";
pub const SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE = "SDL_MOUSE_RELATIVE_CURSOR_VISIBLE";
pub const SDL_HINT_MOUSE_TOUCH_EVENTS = "SDL_MOUSE_TOUCH_EVENTS";
pub const SDL_HINT_MOUSE_AUTO_CAPTURE = "SDL_MOUSE_AUTO_CAPTURE";
pub const SDL_HINT_NO_SIGNAL_HANDLERS = "SDL_NO_SIGNAL_HANDLERS";
pub const SDL_HINT_OPENGL_ES_DRIVER = "SDL_OPENGL_ES_DRIVER";
pub const SDL_HINT_ORIENTATIONS = "SDL_IOS_ORIENTATIONS";
pub const SDL_HINT_POLL_SENTINEL = "SDL_POLL_SENTINEL";
pub const SDL_HINT_PREFERRED_LOCALES = "SDL_PREFERRED_LOCALES";
pub const SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION = "SDL_QTWAYLAND_CONTENT_ORIENTATION";
pub const SDL_HINT_QTWAYLAND_WINDOW_FLAGS = "SDL_QTWAYLAND_WINDOW_FLAGS";
pub const SDL_HINT_RENDER_BATCHING = "SDL_RENDER_BATCHING";
pub const SDL_HINT_RENDER_LINE_METHOD = "SDL_RENDER_LINE_METHOD";
pub const SDL_HINT_RENDER_DIRECT3D11_DEBUG = "SDL_RENDER_DIRECT3D11_DEBUG";
pub const SDL_HINT_RENDER_DIRECT3D_THREADSAFE = "SDL_RENDER_DIRECT3D_THREADSAFE";
pub const SDL_HINT_RENDER_DRIVER = "SDL_RENDER_DRIVER";
pub const SDL_HINT_RENDER_LOGICAL_SIZE_MODE = "SDL_RENDER_LOGICAL_SIZE_MODE";
pub const SDL_HINT_RENDER_OPENGL_SHADERS = "SDL_RENDER_OPENGL_SHADERS";
pub const SDL_HINT_RENDER_SCALE_QUALITY = "SDL_RENDER_SCALE_QUALITY";
pub const SDL_HINT_RENDER_VSYNC = "SDL_RENDER_VSYNC";
pub const SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE = "SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE";
pub const SDL_HINT_ROG_GAMEPAD_MICE = "SDL_ROG_GAMEPAD_MICE";
pub const SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED = "SDL_ROG_GAMEPAD_MICE_EXCLUDED";
pub const SDL_HINT_PS2_DYNAMIC_VSYNC = "SDL_PS2_DYNAMIC_VSYNC";
pub const SDL_HINT_RETURN_KEY_HIDES_IME = "SDL_RETURN_KEY_HIDES_IME";
pub const SDL_HINT_RPI_VIDEO_LAYER = "SDL_RPI_VIDEO_LAYER";
pub const SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME = "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME";
pub const SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL = "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL";
pub const SDL_HINT_THREAD_PRIORITY_POLICY = "SDL_THREAD_PRIORITY_POLICY";
pub const SDL_HINT_THREAD_STACK_SIZE = "SDL_THREAD_STACK_SIZE";
pub const SDL_HINT_TIMER_RESOLUTION = "SDL_TIMER_RESOLUTION";
pub const SDL_HINT_TOUCH_MOUSE_EVENTS = "SDL_TOUCH_MOUSE_EVENTS";
pub const SDL_HINT_VITA_TOUCH_MOUSE_DEVICE = "SDL_HINT_VITA_TOUCH_MOUSE_DEVICE";
pub const SDL_HINT_TV_REMOTE_AS_JOYSTICK = "SDL_TV_REMOTE_AS_JOYSTICK";
pub const SDL_HINT_VIDEO_ALLOW_SCREENSAVER = "SDL_VIDEO_ALLOW_SCREENSAVER";
pub const SDL_HINT_VIDEO_DOUBLE_BUFFER = "SDL_VIDEO_DOUBLE_BUFFER";
pub const SDL_HINT_VIDEO_EGL_ALLOW_TRANSPARENCY = "SDL_VIDEO_EGL_ALLOW_TRANSPARENCY";
pub const SDL_HINT_VIDEO_EXTERNAL_CONTEXT = "SDL_VIDEO_EXTERNAL_CONTEXT";
pub const SDL_HINT_VIDEO_HIGHDPI_DISABLED = "SDL_VIDEO_HIGHDPI_DISABLED";
pub const SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES = "SDL_VIDEO_MAC_FULLSCREEN_SPACES";
pub const SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS";
pub const SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR = "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR";
pub const SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR = "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR";
pub const SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION = "SDL_VIDEO_WAYLAND_MODE_EMULATION";
pub const SDL_HINT_VIDEO_WAYLAND_EMULATE_MOUSE_WARP = "SDL_VIDEO_WAYLAND_EMULATE_MOUSE_WARP";
pub const SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT = "SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT";
pub const SDL_HINT_VIDEO_FOREIGN_WINDOW_OPENGL = "SDL_VIDEO_FOREIGN_WINDOW_OPENGL";
pub const SDL_HINT_VIDEO_FOREIGN_WINDOW_VULKAN = "SDL_VIDEO_FOREIGN_WINDOW_VULKAN";
pub const SDL_HINT_VIDEO_WIN_D3DCOMPILER = "SDL_VIDEO_WIN_D3DCOMPILER";
pub const SDL_HINT_VIDEO_X11_FORCE_EGL = "SDL_VIDEO_X11_FORCE_EGL";
pub const SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR = "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR";
pub const SDL_HINT_VIDEO_X11_NET_WM_PING = "SDL_VIDEO_X11_NET_WM_PING";
pub const SDL_HINT_VIDEO_X11_WINDOW_VISUALID = "SDL_VIDEO_X11_WINDOW_VISUALID";
pub const SDL_HINT_VIDEO_X11_XINERAMA = "SDL_VIDEO_X11_XINERAMA";
pub const SDL_HINT_VIDEO_X11_XRANDR = "SDL_VIDEO_X11_XRANDR";
pub const SDL_HINT_VIDEO_X11_XVIDMODE = "SDL_VIDEO_X11_XVIDMODE";
pub const SDL_HINT_WAVE_FACT_CHUNK = "SDL_WAVE_FACT_CHUNK";
pub const SDL_HINT_WAVE_RIFF_CHUNK_SIZE = "SDL_WAVE_RIFF_CHUNK_SIZE";
pub const SDL_HINT_WAVE_TRUNCATION = "SDL_WAVE_TRUNCATION";
pub const SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING = "SDL_WINDOWS_DISABLE_THREAD_NAMING";
pub const SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS = "SDL_WINDOWS_ENABLE_MENU_MNEMONICS";
pub const SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP = "SDL_WINDOWS_ENABLE_MESSAGELOOP";
pub const SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS = "SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS";
pub const SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL = "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL";
pub const SDL_HINT_WINDOWS_INTRESOURCE_ICON = "SDL_WINDOWS_INTRESOURCE_ICON";
pub const SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL = "SDL_WINDOWS_INTRESOURCE_ICON_SMALL";
pub const SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 = "SDL_WINDOWS_NO_CLOSE_ON_ALT_F4";
pub const SDL_HINT_WINDOWS_USE_D3D9EX = "SDL_WINDOWS_USE_D3D9EX";
pub const SDL_HINT_WINDOWS_DPI_AWARENESS = "SDL_WINDOWS_DPI_AWARENESS";
pub const SDL_HINT_WINDOWS_DPI_SCALING = "SDL_WINDOWS_DPI_SCALING";
pub const SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN = "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN";
pub const SDL_HINT_WINDOW_NO_ACTIVATION_WHEN_SHOWN = "SDL_WINDOW_NO_ACTIVATION_WHEN_SHOWN";
pub const SDL_HINT_WINRT_HANDLE_BACK_BUTTON = "SDL_WINRT_HANDLE_BACK_BUTTON";
pub const SDL_HINT_WINRT_PRIVACY_POLICY_LABEL = "SDL_WINRT_PRIVACY_POLICY_LABEL";
pub const SDL_HINT_WINRT_PRIVACY_POLICY_URL = "SDL_WINRT_PRIVACY_POLICY_URL";
pub const SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT = "SDL_X11_FORCE_OVERRIDE_REDIRECT";
pub const SDL_HINT_XINPUT_ENABLED = "SDL_XINPUT_ENABLED";
pub const SDL_HINT_DIRECTINPUT_ENABLED = "SDL_DIRECTINPUT_ENABLED";
pub const SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING = "SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING";
pub const SDL_HINT_AUDIO_INCLUDE_MONITORS = "SDL_AUDIO_INCLUDE_MONITORS";
pub const SDL_HINT_X11_WINDOW_TYPE = "SDL_X11_WINDOW_TYPE";
pub const SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE = "SDL_QUIT_ON_LAST_WINDOW_CLOSE";
pub const SDL_HINT_VIDEODRIVER = "SDL_VIDEODRIVER";
pub const SDL_HINT_AUDIODRIVER = "SDL_AUDIODRIVER";
pub const SDL_HINT_KMSDRM_DEVICE_INDEX = "SDL_KMSDRM_DEVICE_INDEX";
pub const SDL_HINT_TRACKPAD_IS_TOUCH_ONLY = "SDL_TRACKPAD_IS_TOUCH_ONLY";
pub const SDL_HINT_SHUTDOWN_DBUS_ON_QUIT = "SDL_SHUTDOWN_DBUS_ON_QUIT";
pub const SDL_loadso_h_ = "";
pub const SDL_log_h_ = "";
pub const SDL_MAX_LOG_MESSAGE = @as(c_int, 4096);
pub const SDL_messagebox_h_ = "";
pub const SDL_metal_h_ = "";
pub const SDL_power_h_ = "";
pub const SDL_render_h_ = "";
pub const SDL_shape_h_ = "";
pub const SDL_NONSHAPEABLE_WINDOW = -@as(c_int, 1);
pub const SDL_INVALID_SHAPE_ARGUMENT = -@as(c_int, 2);
pub const SDL_WINDOW_LACKS_SHAPE = -@as(c_int, 3);
pub inline fn SDL_SHAPEMODEALPHA(mode: anytype) @TypeOf(((mode == ShapeModeDefault) or (mode == ShapeModeBinarizeAlpha)) or (mode == ShapeModeReverseBinarizeAlpha)) {
    _ = &mode;
    return ((mode == ShapeModeDefault) or (mode == ShapeModeBinarizeAlpha)) or (mode == ShapeModeReverseBinarizeAlpha);
}
pub const SDL_system_h_ = "";
pub const SDL_timer_h_ = "";
pub inline fn SDL_TICKS_PASSED(A: anytype, B: anytype) @TypeOf(@import("std").zig.c_translation.cast(Sint32, B - A) <= @as(c_int, 0)) {
    _ = &A;
    _ = &B;
    return @import("std").zig.c_translation.cast(Sint32, B - A) <= @as(c_int, 0);
}
pub const SDL_version_h_ = "";
pub const SDL_MAJOR_VERSION = @as(c_int, 2);
pub const SDL_MINOR_VERSION = @as(c_int, 30);
pub const SDL_PATCHLEVEL = @as(c_int, 11);
pub const SDL_VERSION = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/include/SDL2/SDL_version.h:79:9
pub inline fn SDL_VERSIONNUM(X: anytype, Y: anytype, Z: anytype) @TypeOf(((X * @as(c_int, 1000)) + (Y * @as(c_int, 100))) + Z) {
    _ = &X;
    _ = &Y;
    _ = &Z;
    return ((X * @as(c_int, 1000)) + (Y * @as(c_int, 100))) + Z;
}
pub const SDL_COMPILEDVERSION = SDL_VERSIONNUM(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_PATCHLEVEL);
pub inline fn SDL_VERSION_ATLEAST(X: anytype, Y: anytype, Z: anytype) @TypeOf(((SDL_MAJOR_VERSION >= X) and ((SDL_MAJOR_VERSION > X) or (SDL_MINOR_VERSION >= Y))) and (((SDL_MAJOR_VERSION > X) or (SDL_MINOR_VERSION > Y)) or (SDL_PATCHLEVEL >= Z))) {
    _ = &X;
    _ = &Y;
    _ = &Z;
    return ((SDL_MAJOR_VERSION >= X) and ((SDL_MAJOR_VERSION > X) or (SDL_MINOR_VERSION >= Y))) and (((SDL_MAJOR_VERSION > X) or (SDL_MINOR_VERSION > Y)) or (SDL_PATCHLEVEL >= Z));
}
pub const _SDL_locale_h = "";
pub const SDL_misc_h_ = "";
pub const SDL_INIT_TIMER = @as(c_uint, 0x00000001);
pub const SDL_INIT_AUDIO = @as(c_uint, 0x00000010);
pub const SDL_INIT_VIDEO = @as(c_uint, 0x00000020);
pub const SDL_INIT_JOYSTICK = @as(c_uint, 0x00000200);
pub const SDL_INIT_HAPTIC = @as(c_uint, 0x00001000);
pub const SDL_INIT_GAMECONTROLLER = @as(c_uint, 0x00002000);
pub const SDL_INIT_EVENTS = @as(c_uint, 0x00004000);
pub const SDL_INIT_SENSOR = @as(c_uint, 0x00008000);
pub const SDL_INIT_NOPARACHUTE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const SDL_INIT_EVERYTHING = ((((((SDL_INIT_TIMER | SDL_INIT_AUDIO) | SDL_INIT_VIDEO) | SDL_INIT_EVENTS) | SDL_INIT_JOYSTICK) | SDL_INIT_HAPTIC) | SDL_INIT_GAMECONTROLLER) | SDL_INIT_SENSOR;
pub const SDL_vulkan_h_ = "";
pub const NO_SDL_VULKAN_TYPEDEFS = "";
pub const VkBuffer_T = struct_VkBuffer_T;
pub const VkImage_T = struct_VkImage_T;
pub const VkInstance_T = struct_VkInstance_T;
pub const VkPhysicalDevice_T = struct_VkPhysicalDevice_T;
pub const VkDevice_T = struct_VkDevice_T;
pub const VkQueue_T = struct_VkQueue_T;
pub const VkSemaphore_T = struct_VkSemaphore_T;
pub const VkCommandBuffer_T = struct_VkCommandBuffer_T;
pub const VkFence_T = struct_VkFence_T;
pub const VkDeviceMemory_T = struct_VkDeviceMemory_T;
pub const VkEvent_T = struct_VkEvent_T;
pub const VkQueryPool_T = struct_VkQueryPool_T;
pub const VkBufferView_T = struct_VkBufferView_T;
pub const VkImageView_T = struct_VkImageView_T;
pub const VkShaderModule_T = struct_VkShaderModule_T;
pub const VkPipelineCache_T = struct_VkPipelineCache_T;
pub const VkPipelineLayout_T = struct_VkPipelineLayout_T;
pub const VkPipeline_T = struct_VkPipeline_T;
pub const VkRenderPass_T = struct_VkRenderPass_T;
pub const VkDescriptorSetLayout_T = struct_VkDescriptorSetLayout_T;
pub const VkSampler_T = struct_VkSampler_T;
pub const VkDescriptorSet_T = struct_VkDescriptorSet_T;
pub const VkDescriptorPool_T = struct_VkDescriptorPool_T;
pub const VkFramebuffer_T = struct_VkFramebuffer_T;
pub const VkCommandPool_T = struct_VkCommandPool_T;
pub const VkSamplerYcbcrConversion_T = struct_VkSamplerYcbcrConversion_T;
pub const VkDescriptorUpdateTemplate_T = struct_VkDescriptorUpdateTemplate_T;
pub const VkPrivateDataSlot_T = struct_VkPrivateDataSlot_T;
pub const VkSurfaceKHR_T = struct_VkSurfaceKHR_T;
pub const VkSwapchainKHR_T = struct_VkSwapchainKHR_T;
pub const VkDisplayKHR_T = struct_VkDisplayKHR_T;
pub const VkDisplayModeKHR_T = struct_VkDisplayModeKHR_T;
pub const VkVideoSessionKHR_T = struct_VkVideoSessionKHR_T;
pub const VkVideoSessionParametersKHR_T = struct_VkVideoSessionParametersKHR_T;
pub const VkDeferredOperationKHR_T = struct_VkDeferredOperationKHR_T;
pub const VkPipelineBinaryKHR_T = struct_VkPipelineBinaryKHR_T;
pub const VkDebugReportCallbackEXT_T = struct_VkDebugReportCallbackEXT_T;
pub const VkCuModuleNVX_T = struct_VkCuModuleNVX_T;
pub const VkCuFunctionNVX_T = struct_VkCuFunctionNVX_T;
pub const VkDebugUtilsMessengerEXT_T = struct_VkDebugUtilsMessengerEXT_T;
pub const VkValidationCacheEXT_T = struct_VkValidationCacheEXT_T;
pub const VkAccelerationStructureNV_T = struct_VkAccelerationStructureNV_T;
pub const VkPerformanceConfigurationINTEL_T = struct_VkPerformanceConfigurationINTEL_T;
pub const VkIndirectCommandsLayoutNV_T = struct_VkIndirectCommandsLayoutNV_T;
pub const VkCudaModuleNV_T = struct_VkCudaModuleNV_T;
pub const VkCudaFunctionNV_T = struct_VkCudaFunctionNV_T;
pub const VkAccelerationStructureKHR_T = struct_VkAccelerationStructureKHR_T;
pub const VkMicromapEXT_T = struct_VkMicromapEXT_T;
pub const VkOpticalFlowSessionNV_T = struct_VkOpticalFlowSessionNV_T;
pub const VkShaderEXT_T = struct_VkShaderEXT_T;
pub const VkIndirectExecutionSetEXT_T = struct_VkIndirectExecutionSetEXT_T;
pub const VkIndirectCommandsLayoutEXT_T = struct_VkIndirectCommandsLayoutEXT_T;
pub const timeval = struct_timeval;
pub const timespec = struct_timespec;
pub const __pthread_internal_list = struct___pthread_internal_list;
pub const __pthread_internal_slist = struct___pthread_internal_slist;
pub const __pthread_mutex_s = struct___pthread_mutex_s;
pub const __pthread_rwlock_arch_t = struct___pthread_rwlock_arch_t;
pub const __pthread_cond_s = struct___pthread_cond_s;
pub const _G_fpos_t = struct__G_fpos_t;
pub const _G_fpos64_t = struct__G_fpos64_t;
pub const _IO_marker = struct__IO_marker;
pub const _IO_codecvt = struct__IO_codecvt;
pub const _IO_wide_data = struct__IO_wide_data;
pub const _IO_FILE = struct__IO_FILE;
pub const _IO_cookie_io_functions_t = struct__IO_cookie_io_functions_t;
pub const random_data = struct_random_data;
pub const drand48_data = struct_drand48_data;
pub const __locale_struct = struct___locale_struct;
pub const tm = struct_tm;
pub const _SDL_iconv_t = struct__SDL_iconv_t;
pub const SDL_semaphore = struct_SDL_semaphore;
pub const _SDL_AudioStream = struct__SDL_AudioStream;
pub const __uintr_frame = struct___uintr_frame;
pub const __tile1024i_str = struct___tile1024i_str;
pub const _SDL_Joystick = struct__SDL_Joystick;
pub const _SDL_Sensor = struct__SDL_Sensor;
pub const _SDL_GameController = struct__SDL_GameController;
pub const _SDL_Haptic = struct__SDL_Haptic;
pub const SDL_hid_device_ = struct_SDL_hid_device_;
